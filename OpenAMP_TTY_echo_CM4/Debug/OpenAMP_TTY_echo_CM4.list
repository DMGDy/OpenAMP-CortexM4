
OpenAMP_TTY_echo_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007020  10000000  10000000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  10007020  10007020  00027020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000634  10007070  10007070  00027070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  100076a4  100076a4  000301bc  2**0
                  CONTENTS
  5 .ARM          00000000  100076a4  100076a4  000301bc  2**0
                  CONTENTS
  6 .preinit_array 00000000  100076a4  100076a4  000301bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  100076a4  100076a4  000276a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  100076a8  100076a8  000276a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000130  10020000  100076ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 0000008c  10020130  100077dc  00030130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .bss          00000cd8  100201bc  100201bc  000301bc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  10020e94  10020e94  000301bc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301bc  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 15 .debug_line   0001a0a9  00000000  00000000  0003022f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 00000109  00000000  00000000  0004a2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_info   0001a762  00000000  00000000  0004a3e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 000044de  00000000  00000000  00064b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00001040  00000000  00000000  00069028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001c81c5  00000000  00000000  0006a068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 00000be0  00000000  00000000  0023222d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0004ae14  00000000  00000000  00232e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  000047ac  00000000  00000000  0027dc24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	; (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	; (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	; (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	100201bc 	.word	0x100201bc
1000001c:	00000000 	.word	0x00000000
10000020:	10007008 	.word	0x10007008

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	; (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	; (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	; (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	100201c0 	.word	0x100201c0
1000003c:	10007008 	.word	0x10007008

10000040 <strcmp>:
10000040:	f810 2b01 	ldrb.w	r2, [r0], #1
10000044:	f811 3b01 	ldrb.w	r3, [r1], #1
10000048:	2a01      	cmp	r2, #1
1000004a:	bf28      	it	cs
1000004c:	429a      	cmpcs	r2, r3
1000004e:	d0f7      	beq.n	10000040 <strcmp>
10000050:	1ad0      	subs	r0, r2, r3
10000052:	4770      	bx	lr

10000054 <strlen>:
10000054:	4603      	mov	r3, r0
10000056:	f813 2b01 	ldrb.w	r2, [r3], #1
1000005a:	2a00      	cmp	r2, #0
1000005c:	d1fb      	bne.n	10000056 <strlen+0x2>
1000005e:	1a18      	subs	r0, r3, r0
10000060:	3801      	subs	r0, #1
10000062:	4770      	bx	lr
	...

10000070 <memchr>:
10000070:	f001 01ff 	and.w	r1, r1, #255	; 0xff
10000074:	2a10      	cmp	r2, #16
10000076:	db2b      	blt.n	100000d0 <memchr+0x60>
10000078:	f010 0f07 	tst.w	r0, #7
1000007c:	d008      	beq.n	10000090 <memchr+0x20>
1000007e:	f810 3b01 	ldrb.w	r3, [r0], #1
10000082:	3a01      	subs	r2, #1
10000084:	428b      	cmp	r3, r1
10000086:	d02d      	beq.n	100000e4 <memchr+0x74>
10000088:	f010 0f07 	tst.w	r0, #7
1000008c:	b342      	cbz	r2, 100000e0 <memchr+0x70>
1000008e:	d1f6      	bne.n	1000007e <memchr+0xe>
10000090:	b4f0      	push	{r4, r5, r6, r7}
10000092:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
10000096:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1000009a:	f022 0407 	bic.w	r4, r2, #7
1000009e:	f07f 0700 	mvns.w	r7, #0
100000a2:	2300      	movs	r3, #0
100000a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
100000a8:	3c08      	subs	r4, #8
100000aa:	ea85 0501 	eor.w	r5, r5, r1
100000ae:	ea86 0601 	eor.w	r6, r6, r1
100000b2:	fa85 f547 	uadd8	r5, r5, r7
100000b6:	faa3 f587 	sel	r5, r3, r7
100000ba:	fa86 f647 	uadd8	r6, r6, r7
100000be:	faa5 f687 	sel	r6, r5, r7
100000c2:	b98e      	cbnz	r6, 100000e8 <memchr+0x78>
100000c4:	d1ee      	bne.n	100000a4 <memchr+0x34>
100000c6:	bcf0      	pop	{r4, r5, r6, r7}
100000c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
100000cc:	f002 0207 	and.w	r2, r2, #7
100000d0:	b132      	cbz	r2, 100000e0 <memchr+0x70>
100000d2:	f810 3b01 	ldrb.w	r3, [r0], #1
100000d6:	3a01      	subs	r2, #1
100000d8:	ea83 0301 	eor.w	r3, r3, r1
100000dc:	b113      	cbz	r3, 100000e4 <memchr+0x74>
100000de:	d1f8      	bne.n	100000d2 <memchr+0x62>
100000e0:	2000      	movs	r0, #0
100000e2:	4770      	bx	lr
100000e4:	3801      	subs	r0, #1
100000e6:	4770      	bx	lr
100000e8:	2d00      	cmp	r5, #0
100000ea:	bf06      	itte	eq
100000ec:	4635      	moveq	r5, r6
100000ee:	3803      	subeq	r0, #3
100000f0:	3807      	subne	r0, #7
100000f2:	f015 0f01 	tst.w	r5, #1
100000f6:	d107      	bne.n	10000108 <memchr+0x98>
100000f8:	3001      	adds	r0, #1
100000fa:	f415 7f80 	tst.w	r5, #256	; 0x100
100000fe:	bf02      	ittt	eq
10000100:	3001      	addeq	r0, #1
10000102:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
10000106:	3001      	addeq	r0, #1
10000108:	bcf0      	pop	{r4, r5, r6, r7}
1000010a:	3801      	subs	r0, #1
1000010c:	4770      	bx	lr
1000010e:	bf00      	nop

10000110 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
10000110:	e7fe      	b.n	10000110 <ADC1_IRQHandler>
	...

10000114 <Periph_Lock>:
  *                     Semaphore id deduced from this peripheral.
  *         Timeout: timeout value in msecs
  * @retval Return Status
  */
LockResource_Status_t Periph_Lock(void* Peripheral, uint32_t Timeout)
{
10000114:	b580      	push	{r7, lr}
10000116:	b084      	sub	sp, #16
10000118:	af00      	add	r7, sp, #0
1000011a:	6078      	str	r0, [r7, #4]
1000011c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
1000011e:	2300      	movs	r3, #0
10000120:	60bb      	str	r3, [r7, #8]
  LockResource_Status_t ret = LOCK_RESOURCE_STATUS_OK;
10000122:	2300      	movs	r3, #0
10000124:	73fb      	strb	r3, [r7, #15]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
10000126:	f001 f9a3 	bl	10001470 <HAL_GetTick>
1000012a:	60b8      	str	r0, [r7, #8]

  /* Try to Take HSEM  assigned to the Peripheral */
  while (HAL_HSEM_FastTake(GET_HSEM_SEM_INDEX(Peripheral)) != HAL_OK)
1000012c:	e00e      	b.n	1000014c <Periph_Lock+0x38>
  {

    if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
1000012e:	683b      	ldr	r3, [r7, #0]
10000130:	2b00      	cmp	r3, #0
10000132:	d007      	beq.n	10000144 <Periph_Lock+0x30>
10000134:	f001 f99c 	bl	10001470 <HAL_GetTick>
10000138:	4602      	mov	r2, r0
1000013a:	68bb      	ldr	r3, [r7, #8]
1000013c:	1ad3      	subs	r3, r2, r3
1000013e:	683a      	ldr	r2, [r7, #0]
10000140:	429a      	cmp	r2, r3
10000142:	d203      	bcs.n	1000014c <Periph_Lock+0x38>
    {
       ret = LOCK_RESOURCE_STATUS_TIMEOUT;
10000144:	2302      	movs	r3, #2
10000146:	73fb      	strb	r3, [r7, #15]
       Error_Handler();
10000148:	f000 fc4e 	bl	100009e8 <Error_Handler>
  while (HAL_HSEM_FastTake(GET_HSEM_SEM_INDEX(Peripheral)) != HAL_OK)
1000014c:	687b      	ldr	r3, [r7, #4]
1000014e:	4a2c      	ldr	r2, [pc, #176]	; (10000200 <Periph_Lock+0xec>)
10000150:	4293      	cmp	r3, r2
10000152:	d049      	beq.n	100001e8 <Periph_Lock+0xd4>
10000154:	687b      	ldr	r3, [r7, #4]
10000156:	4a2b      	ldr	r2, [pc, #172]	; (10000204 <Periph_Lock+0xf0>)
10000158:	4293      	cmp	r3, r2
1000015a:	d043      	beq.n	100001e4 <Periph_Lock+0xd0>
1000015c:	687b      	ldr	r3, [r7, #4]
1000015e:	4a2a      	ldr	r2, [pc, #168]	; (10000208 <Periph_Lock+0xf4>)
10000160:	4293      	cmp	r3, r2
10000162:	d03d      	beq.n	100001e0 <Periph_Lock+0xcc>
10000164:	687b      	ldr	r3, [r7, #4]
10000166:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
1000016a:	d037      	beq.n	100001dc <Periph_Lock+0xc8>
1000016c:	687b      	ldr	r3, [r7, #4]
1000016e:	4a27      	ldr	r2, [pc, #156]	; (1000020c <Periph_Lock+0xf8>)
10000170:	4293      	cmp	r3, r2
10000172:	d031      	beq.n	100001d8 <Periph_Lock+0xc4>
10000174:	687b      	ldr	r3, [r7, #4]
10000176:	4a26      	ldr	r2, [pc, #152]	; (10000210 <Periph_Lock+0xfc>)
10000178:	4293      	cmp	r3, r2
1000017a:	d02b      	beq.n	100001d4 <Periph_Lock+0xc0>
1000017c:	687b      	ldr	r3, [r7, #4]
1000017e:	4a25      	ldr	r2, [pc, #148]	; (10000214 <Periph_Lock+0x100>)
10000180:	4293      	cmp	r3, r2
10000182:	d025      	beq.n	100001d0 <Periph_Lock+0xbc>
10000184:	687b      	ldr	r3, [r7, #4]
10000186:	4a24      	ldr	r2, [pc, #144]	; (10000218 <Periph_Lock+0x104>)
10000188:	4293      	cmp	r3, r2
1000018a:	d01f      	beq.n	100001cc <Periph_Lock+0xb8>
1000018c:	687b      	ldr	r3, [r7, #4]
1000018e:	4a23      	ldr	r2, [pc, #140]	; (1000021c <Periph_Lock+0x108>)
10000190:	4293      	cmp	r3, r2
10000192:	d019      	beq.n	100001c8 <Periph_Lock+0xb4>
10000194:	687b      	ldr	r3, [r7, #4]
10000196:	4a22      	ldr	r2, [pc, #136]	; (10000220 <Periph_Lock+0x10c>)
10000198:	4293      	cmp	r3, r2
1000019a:	d013      	beq.n	100001c4 <Periph_Lock+0xb0>
1000019c:	687b      	ldr	r3, [r7, #4]
1000019e:	4a21      	ldr	r2, [pc, #132]	; (10000224 <Periph_Lock+0x110>)
100001a0:	4293      	cmp	r3, r2
100001a2:	d00d      	beq.n	100001c0 <Periph_Lock+0xac>
100001a4:	687b      	ldr	r3, [r7, #4]
100001a6:	4a20      	ldr	r2, [pc, #128]	; (10000228 <Periph_Lock+0x114>)
100001a8:	4293      	cmp	r3, r2
100001aa:	d007      	beq.n	100001bc <Periph_Lock+0xa8>
100001ac:	687b      	ldr	r3, [r7, #4]
100001ae:	4a1f      	ldr	r2, [pc, #124]	; (1000022c <Periph_Lock+0x118>)
100001b0:	4293      	cmp	r3, r2
100001b2:	d101      	bne.n	100001b8 <Periph_Lock+0xa4>
100001b4:	2301      	movs	r3, #1
100001b6:	e018      	b.n	100001ea <Periph_Lock+0xd6>
100001b8:	2320      	movs	r3, #32
100001ba:	e016      	b.n	100001ea <Periph_Lock+0xd6>
100001bc:	2300      	movs	r3, #0
100001be:	e014      	b.n	100001ea <Periph_Lock+0xd6>
100001c0:	2300      	movs	r3, #0
100001c2:	e012      	b.n	100001ea <Periph_Lock+0xd6>
100001c4:	2300      	movs	r3, #0
100001c6:	e010      	b.n	100001ea <Periph_Lock+0xd6>
100001c8:	2300      	movs	r3, #0
100001ca:	e00e      	b.n	100001ea <Periph_Lock+0xd6>
100001cc:	2300      	movs	r3, #0
100001ce:	e00c      	b.n	100001ea <Periph_Lock+0xd6>
100001d0:	2300      	movs	r3, #0
100001d2:	e00a      	b.n	100001ea <Periph_Lock+0xd6>
100001d4:	2300      	movs	r3, #0
100001d6:	e008      	b.n	100001ea <Periph_Lock+0xd6>
100001d8:	2300      	movs	r3, #0
100001da:	e006      	b.n	100001ea <Periph_Lock+0xd6>
100001dc:	2300      	movs	r3, #0
100001de:	e004      	b.n	100001ea <Periph_Lock+0xd6>
100001e0:	2300      	movs	r3, #0
100001e2:	e002      	b.n	100001ea <Periph_Lock+0xd6>
100001e4:	2300      	movs	r3, #0
100001e6:	e000      	b.n	100001ea <Periph_Lock+0xd6>
100001e8:	2300      	movs	r3, #0
100001ea:	4618      	mov	r0, r3
100001ec:	f001 fc44 	bl	10001a78 <HAL_HSEM_FastTake>
100001f0:	4603      	mov	r3, r0
100001f2:	2b00      	cmp	r3, #0
100001f4:	d19b      	bne.n	1000012e <Periph_Lock+0x1a>
    }
  }

  return ret;
100001f6:	7bfb      	ldrb	r3, [r7, #15]
}
100001f8:	4618      	mov	r0, r3
100001fa:	3710      	adds	r7, #16
100001fc:	46bd      	mov	sp, r7
100001fe:	bd80      	pop	{r7, pc}
10000200:	50002000 	.word	0x50002000
10000204:	50003000 	.word	0x50003000
10000208:	50004000 	.word	0x50004000
1000020c:	50006000 	.word	0x50006000
10000210:	50007000 	.word	0x50007000
10000214:	50008000 	.word	0x50008000
10000218:	50009000 	.word	0x50009000
1000021c:	5000a000 	.word	0x5000a000
10000220:	5000b000 	.word	0x5000b000
10000224:	5000c000 	.word	0x5000c000
10000228:	54004000 	.word	0x54004000
1000022c:	5000d000 	.word	0x5000d000

10000230 <Periph_Unlock>:
  * @brief  The Periph_Unlock released a previously-acquired semaphore which we want to unlock
  * @param  Peripheral: used to identify which peripheral and the related semaphore
  * @retval None
  */
void Periph_Unlock(void* Peripheral)
{
10000230:	b580      	push	{r7, lr}
10000232:	b082      	sub	sp, #8
10000234:	af00      	add	r7, sp, #0
10000236:	6078      	str	r0, [r7, #4]
  /* Release HSEM  */
  HAL_HSEM_Release(GET_HSEM_SEM_INDEX(Peripheral), 0);
10000238:	687b      	ldr	r3, [r7, #4]
1000023a:	4a2b      	ldr	r2, [pc, #172]	; (100002e8 <Periph_Unlock+0xb8>)
1000023c:	4293      	cmp	r3, r2
1000023e:	d049      	beq.n	100002d4 <Periph_Unlock+0xa4>
10000240:	687b      	ldr	r3, [r7, #4]
10000242:	4a2a      	ldr	r2, [pc, #168]	; (100002ec <Periph_Unlock+0xbc>)
10000244:	4293      	cmp	r3, r2
10000246:	d043      	beq.n	100002d0 <Periph_Unlock+0xa0>
10000248:	687b      	ldr	r3, [r7, #4]
1000024a:	4a29      	ldr	r2, [pc, #164]	; (100002f0 <Periph_Unlock+0xc0>)
1000024c:	4293      	cmp	r3, r2
1000024e:	d03d      	beq.n	100002cc <Periph_Unlock+0x9c>
10000250:	687b      	ldr	r3, [r7, #4]
10000252:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
10000256:	d037      	beq.n	100002c8 <Periph_Unlock+0x98>
10000258:	687b      	ldr	r3, [r7, #4]
1000025a:	4a26      	ldr	r2, [pc, #152]	; (100002f4 <Periph_Unlock+0xc4>)
1000025c:	4293      	cmp	r3, r2
1000025e:	d031      	beq.n	100002c4 <Periph_Unlock+0x94>
10000260:	687b      	ldr	r3, [r7, #4]
10000262:	4a25      	ldr	r2, [pc, #148]	; (100002f8 <Periph_Unlock+0xc8>)
10000264:	4293      	cmp	r3, r2
10000266:	d02b      	beq.n	100002c0 <Periph_Unlock+0x90>
10000268:	687b      	ldr	r3, [r7, #4]
1000026a:	4a24      	ldr	r2, [pc, #144]	; (100002fc <Periph_Unlock+0xcc>)
1000026c:	4293      	cmp	r3, r2
1000026e:	d025      	beq.n	100002bc <Periph_Unlock+0x8c>
10000270:	687b      	ldr	r3, [r7, #4]
10000272:	4a23      	ldr	r2, [pc, #140]	; (10000300 <Periph_Unlock+0xd0>)
10000274:	4293      	cmp	r3, r2
10000276:	d01f      	beq.n	100002b8 <Periph_Unlock+0x88>
10000278:	687b      	ldr	r3, [r7, #4]
1000027a:	4a22      	ldr	r2, [pc, #136]	; (10000304 <Periph_Unlock+0xd4>)
1000027c:	4293      	cmp	r3, r2
1000027e:	d019      	beq.n	100002b4 <Periph_Unlock+0x84>
10000280:	687b      	ldr	r3, [r7, #4]
10000282:	4a21      	ldr	r2, [pc, #132]	; (10000308 <Periph_Unlock+0xd8>)
10000284:	4293      	cmp	r3, r2
10000286:	d013      	beq.n	100002b0 <Periph_Unlock+0x80>
10000288:	687b      	ldr	r3, [r7, #4]
1000028a:	4a20      	ldr	r2, [pc, #128]	; (1000030c <Periph_Unlock+0xdc>)
1000028c:	4293      	cmp	r3, r2
1000028e:	d00d      	beq.n	100002ac <Periph_Unlock+0x7c>
10000290:	687b      	ldr	r3, [r7, #4]
10000292:	4a1f      	ldr	r2, [pc, #124]	; (10000310 <Periph_Unlock+0xe0>)
10000294:	4293      	cmp	r3, r2
10000296:	d007      	beq.n	100002a8 <Periph_Unlock+0x78>
10000298:	687b      	ldr	r3, [r7, #4]
1000029a:	4a1e      	ldr	r2, [pc, #120]	; (10000314 <Periph_Unlock+0xe4>)
1000029c:	4293      	cmp	r3, r2
1000029e:	d101      	bne.n	100002a4 <Periph_Unlock+0x74>
100002a0:	2301      	movs	r3, #1
100002a2:	e018      	b.n	100002d6 <Periph_Unlock+0xa6>
100002a4:	2320      	movs	r3, #32
100002a6:	e016      	b.n	100002d6 <Periph_Unlock+0xa6>
100002a8:	2300      	movs	r3, #0
100002aa:	e014      	b.n	100002d6 <Periph_Unlock+0xa6>
100002ac:	2300      	movs	r3, #0
100002ae:	e012      	b.n	100002d6 <Periph_Unlock+0xa6>
100002b0:	2300      	movs	r3, #0
100002b2:	e010      	b.n	100002d6 <Periph_Unlock+0xa6>
100002b4:	2300      	movs	r3, #0
100002b6:	e00e      	b.n	100002d6 <Periph_Unlock+0xa6>
100002b8:	2300      	movs	r3, #0
100002ba:	e00c      	b.n	100002d6 <Periph_Unlock+0xa6>
100002bc:	2300      	movs	r3, #0
100002be:	e00a      	b.n	100002d6 <Periph_Unlock+0xa6>
100002c0:	2300      	movs	r3, #0
100002c2:	e008      	b.n	100002d6 <Periph_Unlock+0xa6>
100002c4:	2300      	movs	r3, #0
100002c6:	e006      	b.n	100002d6 <Periph_Unlock+0xa6>
100002c8:	2300      	movs	r3, #0
100002ca:	e004      	b.n	100002d6 <Periph_Unlock+0xa6>
100002cc:	2300      	movs	r3, #0
100002ce:	e002      	b.n	100002d6 <Periph_Unlock+0xa6>
100002d0:	2300      	movs	r3, #0
100002d2:	e000      	b.n	100002d6 <Periph_Unlock+0xa6>
100002d4:	2300      	movs	r3, #0
100002d6:	2100      	movs	r1, #0
100002d8:	4618      	mov	r0, r3
100002da:	f001 fbe5 	bl	10001aa8 <HAL_HSEM_Release>

}
100002de:	bf00      	nop
100002e0:	3708      	adds	r7, #8
100002e2:	46bd      	mov	sp, r7
100002e4:	bd80      	pop	{r7, pc}
100002e6:	bf00      	nop
100002e8:	50002000 	.word	0x50002000
100002ec:	50003000 	.word	0x50003000
100002f0:	50004000 	.word	0x50004000
100002f4:	50006000 	.word	0x50006000
100002f8:	50007000 	.word	0x50007000
100002fc:	50008000 	.word	0x50008000
10000300:	50009000 	.word	0x50009000
10000304:	5000a000 	.word	0x5000a000
10000308:	5000b000 	.word	0x5000b000
1000030c:	5000c000 	.word	0x5000c000
10000310:	54004000 	.word	0x54004000
10000314:	5000d000 	.word	0x5000d000

10000318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
10000318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000031c:	b084      	sub	sp, #16
1000031e:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  unsigned int counter = 0;
10000320:	2300      	movs	r3, #0
10000322:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initialize the Systick. */
  HAL_Init();
10000324:	f001 f840 	bl	100013a8 <HAL_Init>

  /* USER CODE BEGIN Init */
    if(IS_ENGINEERING_BOOT_MODE())
10000328:	4b51      	ldr	r3, [pc, #324]	; (10000470 <main+0x158>)
1000032a:	681b      	ldr	r3, [r3, #0]
1000032c:	f003 0307 	and.w	r3, r3, #7
10000330:	2b04      	cmp	r3, #4
10000332:	d101      	bne.n	10000338 <main+0x20>
  {
    /* Configure the system clock */
    SystemClock_Config();
10000334:	f000 f8b2 	bl	1000049c <SystemClock_Config>
  }

  log_info("Cortex-M4 boot successful with STM32Cube FW version: v%ld.%ld.%ld \r\n",
10000338:	f001 f89a 	bl	10001470 <HAL_GetTick>
1000033c:	4603      	mov	r3, r0
1000033e:	4a4d      	ldr	r2, [pc, #308]	; (10000474 <main+0x15c>)
10000340:	fba2 2303 	umull	r2, r3, r2, r3
10000344:	099e      	lsrs	r6, r3, #6
10000346:	f001 f893 	bl	10001470 <HAL_GetTick>
1000034a:	4603      	mov	r3, r0
1000034c:	4a49      	ldr	r2, [pc, #292]	; (10000474 <main+0x15c>)
1000034e:	fba2 1203 	umull	r1, r2, r2, r3
10000352:	0994      	lsrs	r4, r2, #6
10000354:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
10000358:	fb04 f202 	mul.w	r2, r4, r2
1000035c:	1a9c      	subs	r4, r3, r2
1000035e:	f001 f893 	bl	10001488 <HAL_GetHalVersion>
10000362:	4603      	mov	r3, r0
10000364:	0e1b      	lsrs	r3, r3, #24
10000366:	fa5f f883 	uxtb.w	r8, r3
1000036a:	f001 f88d 	bl	10001488 <HAL_GetHalVersion>
1000036e:	4603      	mov	r3, r0
10000370:	0c1b      	lsrs	r3, r3, #16
10000372:	b2dd      	uxtb	r5, r3
10000374:	f001 f888 	bl	10001488 <HAL_GetHalVersion>
10000378:	4603      	mov	r3, r0
1000037a:	0a1b      	lsrs	r3, r3, #8
1000037c:	b2db      	uxtb	r3, r3
1000037e:	9301      	str	r3, [sp, #4]
10000380:	9500      	str	r5, [sp, #0]
10000382:	4643      	mov	r3, r8
10000384:	4622      	mov	r2, r4
10000386:	4631      	mov	r1, r6
10000388:	483b      	ldr	r0, [pc, #236]	; (10000478 <main+0x160>)
1000038a:	f005 ffe9 	bl	10006360 <iprintf>
                                            ((HAL_GetHalVersion() >> 24) & 0x000000FF),
                                            ((HAL_GetHalVersion() >> 16) & 0x000000FF),
                                            ((HAL_GetHalVersion() >> 8) & 0x000000FF));
  BSP_LED_Init(LED7);
1000038e:	2002      	movs	r0, #2
10000390:	f000 fefa 	bl	10001188 <BSP_LED_Init>
  BSP_LED_On(LED7);
10000394:	2002      	movs	r0, #2
10000396:	f000 ff53 	bl	10001240 <BSP_LED_On>
  /* USER CODE END Init */

  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
1000039a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000039e:	f44f 6200 	mov.w	r2, #2048	; 0x800
100003a2:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
  /* IPCC initialisation */
   MX_IPCC_Init();
100003a6:	f000 fa6b 	bl	10000880 <MX_IPCC_Init>
  /* OpenAmp initialisation ---------------------------------*/
  MX_OPENAMP_Init(RPMSG_REMOTE, NULL);
100003aa:	2100      	movs	r1, #0
100003ac:	2001      	movs	r0, #1
100003ae:	f000 fcf9 	bl	10000da4 <MX_OPENAMP_Init>
  /* USER CODE BEGIN 2 */
  /*
   * Create Virtual UART device
   * defined by a rpmsg channel attached to the remote device
   */
  log_info("Virtual UART0 OpenAMP-rpmsg channel creation\r\n");
100003b2:	f001 f85d 	bl	10001470 <HAL_GetTick>
100003b6:	4603      	mov	r3, r0
100003b8:	4a2e      	ldr	r2, [pc, #184]	; (10000474 <main+0x15c>)
100003ba:	fba2 2303 	umull	r2, r3, r2, r3
100003be:	099c      	lsrs	r4, r3, #6
100003c0:	f001 f856 	bl	10001470 <HAL_GetTick>
100003c4:	4602      	mov	r2, r0
100003c6:	4b2b      	ldr	r3, [pc, #172]	; (10000474 <main+0x15c>)
100003c8:	fba3 1302 	umull	r1, r3, r3, r2
100003cc:	099b      	lsrs	r3, r3, #6
100003ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
100003d2:	fb01 f303 	mul.w	r3, r1, r3
100003d6:	1ad3      	subs	r3, r2, r3
100003d8:	461a      	mov	r2, r3
100003da:	4621      	mov	r1, r4
100003dc:	4827      	ldr	r0, [pc, #156]	; (1000047c <main+0x164>)
100003de:	f005 ffbf 	bl	10006360 <iprintf>
  if (VIRT_UART_Init(&huart0) != VIRT_UART_OK) {
100003e2:	4827      	ldr	r0, [pc, #156]	; (10000480 <main+0x168>)
100003e4:	f005 fdcc 	bl	10005f80 <VIRT_UART_Init>
100003e8:	4603      	mov	r3, r0
100003ea:	2b00      	cmp	r3, #0
100003ec:	d019      	beq.n	10000422 <main+0x10a>
    log_err("VIRT_UART_Init UART0 failed.\r\n");
100003ee:	f001 f83f 	bl	10001470 <HAL_GetTick>
100003f2:	4603      	mov	r3, r0
100003f4:	4a1f      	ldr	r2, [pc, #124]	; (10000474 <main+0x15c>)
100003f6:	fba2 2303 	umull	r2, r3, r2, r3
100003fa:	099c      	lsrs	r4, r3, #6
100003fc:	f001 f838 	bl	10001470 <HAL_GetTick>
10000400:	4602      	mov	r2, r0
10000402:	4b1c      	ldr	r3, [pc, #112]	; (10000474 <main+0x15c>)
10000404:	fba3 1302 	umull	r1, r3, r3, r2
10000408:	099b      	lsrs	r3, r3, #6
1000040a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1000040e:	fb01 f303 	mul.w	r3, r1, r3
10000412:	1ad3      	subs	r3, r2, r3
10000414:	461a      	mov	r2, r3
10000416:	4621      	mov	r1, r4
10000418:	481a      	ldr	r0, [pc, #104]	; (10000484 <main+0x16c>)
1000041a:	f005 ffa1 	bl	10006360 <iprintf>
    Error_Handler();
1000041e:	f000 fae3 	bl	100009e8 <Error_Handler>
  }

  /*Need to register callback for message reception by channels*/
  if(VIRT_UART_RegisterCallback(&huart0, VIRT_UART_RXCPLT_CB_ID, VIRT_UART0_RxCpltCallback) != VIRT_UART_OK)
10000422:	4a19      	ldr	r2, [pc, #100]	; (10000488 <main+0x170>)
10000424:	2100      	movs	r1, #0
10000426:	4816      	ldr	r0, [pc, #88]	; (10000480 <main+0x168>)
10000428:	f005 fdc6 	bl	10005fb8 <VIRT_UART_RegisterCallback>
1000042c:	4603      	mov	r3, r0
1000042e:	2b00      	cmp	r3, #0
10000430:	d001      	beq.n	10000436 <main+0x11e>
  {
   Error_Handler();
10000432:	f000 fad9 	bl	100009e8 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    OPENAMP_check_for_message();
10000436:	f000 fd67 	bl	10000f08 <OPENAMP_check_for_message>

    /* USER CODE END WHILE */
    if (VirtUart0RxMsg) {
1000043a:	4b14      	ldr	r3, [pc, #80]	; (1000048c <main+0x174>)
1000043c:	781b      	ldrb	r3, [r3, #0]
1000043e:	b2db      	uxtb	r3, r3
10000440:	2b00      	cmp	r3, #0
10000442:	d009      	beq.n	10000458 <main+0x140>
      VirtUart0RxMsg = RESET;
10000444:	4b11      	ldr	r3, [pc, #68]	; (1000048c <main+0x174>)
10000446:	2200      	movs	r2, #0
10000448:	701a      	strb	r2, [r3, #0]
      VIRT_UART_Transmit(&huart0, VirtUart0ChannelBuffRx, VirtUart0ChannelRxSize);
1000044a:	4b11      	ldr	r3, [pc, #68]	; (10000490 <main+0x178>)
1000044c:	881b      	ldrh	r3, [r3, #0]
1000044e:	461a      	mov	r2, r3
10000450:	4910      	ldr	r1, [pc, #64]	; (10000494 <main+0x17c>)
10000452:	480b      	ldr	r0, [pc, #44]	; (10000480 <main+0x168>)
10000454:	f005 fdca 	bl	10005fec <VIRT_UART_Transmit>
    }

    if(counter++ == 500000) {
10000458:	687b      	ldr	r3, [r7, #4]
1000045a:	1c5a      	adds	r2, r3, #1
1000045c:	607a      	str	r2, [r7, #4]
1000045e:	4a0e      	ldr	r2, [pc, #56]	; (10000498 <main+0x180>)
10000460:	4293      	cmp	r3, r2
10000462:	d1e8      	bne.n	10000436 <main+0x11e>
        BSP_LED_Toggle(LED7);
10000464:	2002      	movs	r0, #2
10000466:	f000 ff5b 	bl	10001320 <BSP_LED_Toggle>
        counter = 0;
1000046a:	2300      	movs	r3, #0
1000046c:	607b      	str	r3, [r7, #4]
    OPENAMP_check_for_message();
1000046e:	e7e2      	b.n	10000436 <main+0x11e>
10000470:	50020000 	.word	0x50020000
10000474:	10624dd3 	.word	0x10624dd3
10000478:	10007070 	.word	0x10007070
1000047c:	100070cc 	.word	0x100070cc
10000480:	10020214 	.word	0x10020214
10000484:	10007110 	.word	0x10007110
10000488:	100008a9 	.word	0x100008a9
1000048c:	10020264 	.word	0x10020264
10000490:	10020468 	.word	0x10020468
10000494:	10020268 	.word	0x10020268
10000498:	0007a120 	.word	0x0007a120

1000049c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
1000049c:	b580      	push	{r7, lr}
1000049e:	b0d2      	sub	sp, #328	; 0x148
100004a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
100004a2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100004a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100004aa:	4618      	mov	r0, r3
100004ac:	f44f 738a 	mov.w	r3, #276	; 0x114
100004b0:	461a      	mov	r2, r3
100004b2:	2100      	movs	r1, #0
100004b4:	f005 ffa9 	bl	1000640a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
100004b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100004bc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100004c0:	4618      	mov	r0, r3
100004c2:	2330      	movs	r3, #48	; 0x30
100004c4:	461a      	mov	r2, r3
100004c6:	2100      	movs	r1, #0
100004c8:	f005 ff9f 	bl	1000640a <memset>

  /**Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
100004cc:	f001 fcc8 	bl	10001e60 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
100004d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100004d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100004d8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
100004dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100004e0:	f043 0320 	orr.w	r3, r3, #32
100004e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
100004e8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100004ec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100004f0:	2207      	movs	r2, #7
100004f2:	601a      	str	r2, [r3, #0]
                |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIG;
100004f4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100004f8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100004fc:	f44f 62b0 	mov.w	r2, #1408	; 0x580
10000500:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
10000502:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000506:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000050a:	2201      	movs	r2, #1
1000050c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
1000050e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000512:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000516:	2201      	movs	r2, #1
10000518:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
1000051a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000051e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000522:	2210      	movs	r2, #16
10000524:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
10000526:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000052a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000052e:	2200      	movs	r2, #0
10000530:	615a      	str	r2, [r3, #20]

  /**PLL1 Config
  */
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
10000532:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000536:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000053a:	2202      	movs	r2, #2
1000053c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL12SOURCE_HSE;
1000053e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000542:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000546:	2201      	movs	r2, #1
10000548:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 3;
1000054a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000054e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000552:	2203      	movs	r2, #3
10000554:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 81;
10000556:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000055a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000055e:	2251      	movs	r2, #81	; 0x51
10000560:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = 1;
10000562:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000566:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000056a:	2201      	movs	r2, #1
1000056c:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 1;
1000056e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000572:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000576:	2201      	movs	r2, #1
10000578:	639a      	str	r2, [r3, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLR = 1;
1000057a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000057e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000582:	2201      	movs	r2, #1
10000584:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLFRACV = 0x800;
10000586:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000058a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000058e:	f44f 6200 	mov.w	r2, #2048	; 0x800
10000592:	645a      	str	r2, [r3, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMODE = RCC_PLL_FRACTIONAL;
10000594:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000598:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000059c:	2201      	movs	r2, #1
1000059e:	649a      	str	r2, [r3, #72]	; 0x48
  RCC_OscInitStruct.PLL.RPDFN_DIS = RCC_RPDFN_DIS_DISABLED;
100005a0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100005a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100005a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
100005ac:	651a      	str	r2, [r3, #80]	; 0x50
  RCC_OscInitStruct.PLL.TPDFN_DIS = RCC_TPDFN_DIS_DISABLED;
100005ae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100005b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100005b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
100005ba:	655a      	str	r2, [r3, #84]	; 0x54

    /**PLL2 Config
    */
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
100005bc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100005c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100005c4:	2202      	movs	r2, #2
100005c6:	661a      	str	r2, [r3, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLL12SOURCE_HSE;
100005c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100005cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100005d0:	2201      	movs	r2, #1
100005d2:	665a      	str	r2, [r3, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLLM = 3;
100005d4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100005d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100005dc:	2203      	movs	r2, #3
100005de:	669a      	str	r2, [r3, #104]	; 0x68
  RCC_OscInitStruct.PLL2.PLLN = 66;
100005e0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100005e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100005e8:	2242      	movs	r2, #66	; 0x42
100005ea:	66da      	str	r2, [r3, #108]	; 0x6c
  RCC_OscInitStruct.PLL2.PLLP = 2;
100005ec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100005f0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100005f4:	2202      	movs	r2, #2
100005f6:	671a      	str	r2, [r3, #112]	; 0x70
  RCC_OscInitStruct.PLL2.PLLQ = 1;
100005f8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100005fc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000600:	2201      	movs	r2, #1
10000602:	675a      	str	r2, [r3, #116]	; 0x74
  RCC_OscInitStruct.PLL2.PLLR = 1;
10000604:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000608:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000060c:	2201      	movs	r2, #1
1000060e:	679a      	str	r2, [r3, #120]	; 0x78
  RCC_OscInitStruct.PLL2.PLLFRACV = 0x1400;
10000610:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000614:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000618:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
1000061c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  RCC_OscInitStruct.PLL2.PLLMODE = RCC_PLL_FRACTIONAL;
10000620:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000624:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000628:	2201      	movs	r2, #1
1000062a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC_OscInitStruct.PLL2.RPDFN_DIS = RCC_RPDFN_DIS_DISABLED;
1000062e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000632:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000636:	f44f 4280 	mov.w	r2, #16384	; 0x4000
1000063a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  RCC_OscInitStruct.PLL2.TPDFN_DIS = RCC_TPDFN_DIS_DISABLED;
1000063e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000642:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000646:	f44f 5200 	mov.w	r2, #8192	; 0x2000
1000064a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /**PLL3 Config
    */
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
1000064e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000652:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000656:	2202      	movs	r2, #2
10000658:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLL3SOURCE_HSE;
1000065c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000660:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000664:	2201      	movs	r2, #1
10000666:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  RCC_OscInitStruct.PLL3.PLLM = 2;
1000066a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000066e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000672:	2202      	movs	r2, #2
10000674:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  RCC_OscInitStruct.PLL3.PLLN = 34;
10000678:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000067c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000680:	2222      	movs	r2, #34	; 0x22
10000682:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  RCC_OscInitStruct.PLL3.PLLP = 2;
10000686:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000068a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000068e:	2202      	movs	r2, #2
10000690:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  RCC_OscInitStruct.PLL3.PLLQ = 17;
10000694:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000698:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000069c:	2211      	movs	r2, #17
1000069e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  RCC_OscInitStruct.PLL3.PLLR = 37;
100006a2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100006a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100006aa:	2225      	movs	r2, #37	; 0x25
100006ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  RCC_OscInitStruct.PLL3.PLLRGE = RCC_PLL3IFRANGE_1;
100006b0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100006b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100006b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
100006bc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  RCC_OscInitStruct.PLL3.PLLFRACV = 0x1A04;
100006c0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100006c4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100006c8:	f641 2204 	movw	r2, #6660	; 0x1a04
100006cc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  RCC_OscInitStruct.PLL3.PLLMODE = RCC_PLL_FRACTIONAL;
100006d0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100006d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100006d8:	2201      	movs	r2, #1
100006da:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  RCC_OscInitStruct.PLL3.RPDFN_DIS = RCC_RPDFN_DIS_DISABLED;
100006de:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100006e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100006e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
100006ea:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  RCC_OscInitStruct.PLL3.TPDFN_DIS = RCC_TPDFN_DIS_DISABLED;
100006ee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100006f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100006f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
100006fa:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /**PLL4 Config
    */
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
100006fe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000702:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000706:	2202      	movs	r2, #2
10000708:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLL4SOURCE_HSE;
1000070c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000710:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000714:	2201      	movs	r2, #1
10000716:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  RCC_OscInitStruct.PLL4.PLLM = 4;
1000071a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000071e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000722:	2204      	movs	r2, #4
10000724:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  RCC_OscInitStruct.PLL4.PLLN = 99;
10000728:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000072c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000730:	2263      	movs	r2, #99	; 0x63
10000732:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  RCC_OscInitStruct.PLL4.PLLP = 6;
10000736:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000073a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000073e:	2206      	movs	r2, #6
10000740:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  RCC_OscInitStruct.PLL4.PLLQ = 8;
10000744:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000748:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000074c:	2208      	movs	r2, #8
1000074e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  RCC_OscInitStruct.PLL4.PLLR = 8;
10000752:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000756:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000075a:	2208      	movs	r2, #8
1000075c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  RCC_OscInitStruct.PLL4.PLLRGE = RCC_PLL4IFRANGE_0;
10000760:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000764:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000768:	2200      	movs	r2, #0
1000076a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  RCC_OscInitStruct.PLL4.PLLFRACV = 0;
1000076e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000772:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000776:	2200      	movs	r2, #0
10000778:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  RCC_OscInitStruct.PLL4.PLLMODE = RCC_PLL_INTEGER;
1000077c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000780:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000784:	2200      	movs	r2, #0
10000786:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  RCC_OscInitStruct.PLL4.RPDFN_DIS = RCC_RPDFN_DIS_DISABLED;
1000078a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000078e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000792:	f44f 4280 	mov.w	r2, #16384	; 0x4000
10000796:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  RCC_OscInitStruct.PLL4.TPDFN_DIS = RCC_TPDFN_DIS_DISABLED;
1000079a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000079e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100007a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
100007a6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
100007aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
100007ae:	4618      	mov	r0, r3
100007b0:	f001 fb66 	bl	10001e80 <HAL_RCC_OscConfig>
100007b4:	4603      	mov	r3, r0
100007b6:	2b00      	cmp	r3, #0
100007b8:	d001      	beq.n	100007be <SystemClock_Config+0x322>
  {
  Error_Handler();
100007ba:	f000 f915 	bl	100009e8 <Error_Handler>
  }
  /**RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
100007be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100007c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100007c6:	22ff      	movs	r2, #255	; 0xff
100007c8:	601a      	str	r2, [r3, #0]
                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                |RCC_CLOCKTYPE_PCLK5|RCC_CLOCKTYPE_MPU;
  RCC_ClkInitStruct.MPUInit.MPU_Clock = RCC_MPUSOURCE_PLL1;
100007ca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100007ce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100007d2:	2202      	movs	r2, #2
100007d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.MPUInit.MPU_Div = RCC_MPU_DIV2;
100007d6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100007da:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100007de:	2201      	movs	r2, #1
100007e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_PLL2;
100007e2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100007e6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100007ea:	2202      	movs	r2, #2
100007ec:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
100007ee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100007f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100007f6:	2200      	movs	r2, #0
100007f8:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_PLL3;
100007fa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100007fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000802:	2203      	movs	r2, #3
10000804:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
10000806:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000080a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000080e:	2200      	movs	r2, #0
10000810:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV2;
10000812:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000816:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000081a:	2201      	movs	r2, #1
1000081c:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV4;
1000081e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000822:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000826:	2202      	movs	r2, #2
10000828:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV2;
1000082a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000082e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000832:	2201      	movs	r2, #1
10000834:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV2;
10000836:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000083a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000083e:	2201      	movs	r2, #1
10000840:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV2;
10000842:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000846:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000084a:	2201      	movs	r2, #1
1000084c:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
1000084e:	1d3b      	adds	r3, r7, #4
10000850:	4618      	mov	r0, r3
10000852:	f002 f8b3 	bl	100029bc <HAL_RCC_ClockConfig>
10000856:	4603      	mov	r3, r0
10000858:	2b00      	cmp	r3, #0
1000085a:	d001      	beq.n	10000860 <SystemClock_Config+0x3c4>
  {
  Error_Handler();
1000085c:	f000 f8c4 	bl	100009e8 <Error_Handler>
  }

  /**Set the HSE division factor for RTC clock
  */
  __HAL_RCC_RTC_HSEDIV(24);
10000860:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10000866:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
1000086a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000086e:	f043 0317 	orr.w	r3, r3, #23
10000872:	6453      	str	r3, [r2, #68]	; 0x44
}
10000874:	bf00      	nop
10000876:	f507 77a4 	add.w	r7, r7, #328	; 0x148
1000087a:	46bd      	mov	sp, r7
1000087c:	bd80      	pop	{r7, pc}
	...

10000880 <MX_IPCC_Init>:
  * @brief IPPC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
10000880:	b580      	push	{r7, lr}
10000882:	af00      	add	r7, sp, #0

  hipcc.Instance = IPCC;
10000884:	4b06      	ldr	r3, [pc, #24]	; (100008a0 <MX_IPCC_Init+0x20>)
10000886:	4a07      	ldr	r2, [pc, #28]	; (100008a4 <MX_IPCC_Init+0x24>)
10000888:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
1000088a:	4805      	ldr	r0, [pc, #20]	; (100008a0 <MX_IPCC_Init+0x20>)
1000088c:	f001 f920 	bl	10001ad0 <HAL_IPCC_Init>
10000890:	4603      	mov	r3, r0
10000892:	2b00      	cmp	r3, #0
10000894:	d001      	beq.n	1000089a <MX_IPCC_Init+0x1a>
  {
     Error_Handler();
10000896:	f000 f8a7 	bl	100009e8 <Error_Handler>
  }
}
1000089a:	bf00      	nop
1000089c:	bd80      	pop	{r7, pc}
1000089e:	bf00      	nop
100008a0:	100201d8 	.word	0x100201d8
100008a4:	4c001000 	.word	0x4c001000

100008a8 <VIRT_UART0_RxCpltCallback>:
    memcpy(VirtUart1ChannelBuffRx, huart->pRxBuffPtr, VirtUart1ChannelRxSize);
    VirtUart1RxMsg = SET;
}

void VIRT_UART0_RxCpltCallback(VIRT_UART_HandleTypeDef *huart)
{
100008a8:	b590      	push	{r4, r7, lr}
100008aa:	b085      	sub	sp, #20
100008ac:	af00      	add	r7, sp, #0
100008ae:	6078      	str	r0, [r7, #4]
	char* strmsg = (char*)huart->pRxBuffPtr;
100008b0:	687b      	ldr	r3, [r7, #4]
100008b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
100008b4:	60bb      	str	r3, [r7, #8]
	char* msg = 0;
100008b6:	2300      	movs	r3, #0
100008b8:	60fb      	str	r3, [r7, #12]
	if(strncmp(strmsg,"hello",5) == 0)
100008ba:	2205      	movs	r2, #5
100008bc:	493e      	ldr	r1, [pc, #248]	; (100009b8 <VIRT_UART0_RxCpltCallback+0x110>)
100008be:	68b8      	ldr	r0, [r7, #8]
100008c0:	f005 fdab 	bl	1000641a <strncmp>
100008c4:	4603      	mov	r3, r0
100008c6:	2b00      	cmp	r3, #0
100008c8:	d11a      	bne.n	10000900 <VIRT_UART0_RxCpltCallback+0x58>
	{
		msg  = "Greetings from Cortex-M4 Microcontroller!\n";
100008ca:	4b3c      	ldr	r3, [pc, #240]	; (100009bc <VIRT_UART0_RxCpltCallback+0x114>)
100008cc:	60fb      	str	r3, [r7, #12]
		log_info("MC IPC wakup\n");
100008ce:	f000 fdcf 	bl	10001470 <HAL_GetTick>
100008d2:	4603      	mov	r3, r0
100008d4:	4a3a      	ldr	r2, [pc, #232]	; (100009c0 <VIRT_UART0_RxCpltCallback+0x118>)
100008d6:	fba2 2303 	umull	r2, r3, r2, r3
100008da:	099c      	lsrs	r4, r3, #6
100008dc:	f000 fdc8 	bl	10001470 <HAL_GetTick>
100008e0:	4602      	mov	r2, r0
100008e2:	4b37      	ldr	r3, [pc, #220]	; (100009c0 <VIRT_UART0_RxCpltCallback+0x118>)
100008e4:	fba3 1302 	umull	r1, r3, r3, r2
100008e8:	099b      	lsrs	r3, r3, #6
100008ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
100008ee:	fb01 f303 	mul.w	r3, r1, r3
100008f2:	1ad3      	subs	r3, r2, r3
100008f4:	461a      	mov	r2, r3
100008f6:	4621      	mov	r1, r4
100008f8:	4832      	ldr	r0, [pc, #200]	; (100009c4 <VIRT_UART0_RxCpltCallback+0x11c>)
100008fa:	f005 fd31 	bl	10006360 <iprintf>
100008fe:	e03c      	b.n	1000097a <VIRT_UART0_RxCpltCallback+0xd2>
	}
	else if(strncmp(strmsg,"no",2) == 0)
10000900:	2202      	movs	r2, #2
10000902:	4931      	ldr	r1, [pc, #196]	; (100009c8 <VIRT_UART0_RxCpltCallback+0x120>)
10000904:	68b8      	ldr	r0, [r7, #8]
10000906:	f005 fd88 	bl	1000641a <strncmp>
1000090a:	4603      	mov	r3, r0
1000090c:	2b00      	cmp	r3, #0
1000090e:	d11a      	bne.n	10000946 <VIRT_UART0_RxCpltCallback+0x9e>
	{
		msg = "Testing with no string potentiometer\n";
10000910:	4b2e      	ldr	r3, [pc, #184]	; (100009cc <VIRT_UART0_RxCpltCallback+0x124>)
10000912:	60fb      	str	r3, [r7, #12]
		log_info("None");
10000914:	f000 fdac 	bl	10001470 <HAL_GetTick>
10000918:	4603      	mov	r3, r0
1000091a:	4a29      	ldr	r2, [pc, #164]	; (100009c0 <VIRT_UART0_RxCpltCallback+0x118>)
1000091c:	fba2 2303 	umull	r2, r3, r2, r3
10000920:	099c      	lsrs	r4, r3, #6
10000922:	f000 fda5 	bl	10001470 <HAL_GetTick>
10000926:	4602      	mov	r2, r0
10000928:	4b25      	ldr	r3, [pc, #148]	; (100009c0 <VIRT_UART0_RxCpltCallback+0x118>)
1000092a:	fba3 1302 	umull	r1, r3, r3, r2
1000092e:	099b      	lsrs	r3, r3, #6
10000930:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
10000934:	fb01 f303 	mul.w	r3, r1, r3
10000938:	1ad3      	subs	r3, r2, r3
1000093a:	461a      	mov	r2, r3
1000093c:	4621      	mov	r1, r4
1000093e:	4824      	ldr	r0, [pc, #144]	; (100009d0 <VIRT_UART0_RxCpltCallback+0x128>)
10000940:	f005 fd0e 	bl	10006360 <iprintf>
10000944:	e019      	b.n	1000097a <VIRT_UART0_RxCpltCallback+0xd2>
	}
	else
	{
		msg = "Error\n";
10000946:	4b23      	ldr	r3, [pc, #140]	; (100009d4 <VIRT_UART0_RxCpltCallback+0x12c>)
10000948:	60fb      	str	r3, [r7, #12]
		log_info("%s: not expected\n",strmsg);
1000094a:	f000 fd91 	bl	10001470 <HAL_GetTick>
1000094e:	4603      	mov	r3, r0
10000950:	4a1b      	ldr	r2, [pc, #108]	; (100009c0 <VIRT_UART0_RxCpltCallback+0x118>)
10000952:	fba2 2303 	umull	r2, r3, r2, r3
10000956:	099c      	lsrs	r4, r3, #6
10000958:	f000 fd8a 	bl	10001470 <HAL_GetTick>
1000095c:	4603      	mov	r3, r0
1000095e:	4a18      	ldr	r2, [pc, #96]	; (100009c0 <VIRT_UART0_RxCpltCallback+0x118>)
10000960:	fba2 1203 	umull	r1, r2, r2, r3
10000964:	0992      	lsrs	r2, r2, #6
10000966:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1000096a:	fb01 f202 	mul.w	r2, r1, r2
1000096e:	1a9a      	subs	r2, r3, r2
10000970:	68bb      	ldr	r3, [r7, #8]
10000972:	4621      	mov	r1, r4
10000974:	4818      	ldr	r0, [pc, #96]	; (100009d8 <VIRT_UART0_RxCpltCallback+0x130>)
10000976:	f005 fcf3 	bl	10006360 <iprintf>
	}



    VirtUart0ChannelRxSize = strlen(msg) < MAX_BUFFER_SIZE? strlen(msg) : MAX_BUFFER_SIZE-1;
1000097a:	68f8      	ldr	r0, [r7, #12]
1000097c:	f7ff fb6a 	bl	10000054 <strlen>
10000980:	4603      	mov	r3, r0
10000982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
10000986:	d205      	bcs.n	10000994 <VIRT_UART0_RxCpltCallback+0xec>
10000988:	68f8      	ldr	r0, [r7, #12]
1000098a:	f7ff fb63 	bl	10000054 <strlen>
1000098e:	4603      	mov	r3, r0
10000990:	b29b      	uxth	r3, r3
10000992:	e001      	b.n	10000998 <VIRT_UART0_RxCpltCallback+0xf0>
10000994:	f240 13ff 	movw	r3, #511	; 0x1ff
10000998:	4a10      	ldr	r2, [pc, #64]	; (100009dc <VIRT_UART0_RxCpltCallback+0x134>)
1000099a:	8013      	strh	r3, [r2, #0]
    memcpy(VirtUart0ChannelBuffRx,msg, VirtUart0ChannelRxSize);
1000099c:	4b0f      	ldr	r3, [pc, #60]	; (100009dc <VIRT_UART0_RxCpltCallback+0x134>)
1000099e:	881b      	ldrh	r3, [r3, #0]
100009a0:	461a      	mov	r2, r3
100009a2:	68f9      	ldr	r1, [r7, #12]
100009a4:	480e      	ldr	r0, [pc, #56]	; (100009e0 <VIRT_UART0_RxCpltCallback+0x138>)
100009a6:	f005 fddf 	bl	10006568 <memcpy>
    VirtUart0RxMsg = SET;
100009aa:	4b0e      	ldr	r3, [pc, #56]	; (100009e4 <VIRT_UART0_RxCpltCallback+0x13c>)
100009ac:	2201      	movs	r2, #1
100009ae:	701a      	strb	r2, [r3, #0]
}
100009b0:	bf00      	nop
100009b2:	3714      	adds	r7, #20
100009b4:	46bd      	mov	sp, r7
100009b6:	bd90      	pop	{r4, r7, pc}
100009b8:	10007188 	.word	0x10007188
100009bc:	10007190 	.word	0x10007190
100009c0:	10624dd3 	.word	0x10624dd3
100009c4:	100071bc 	.word	0x100071bc
100009c8:	100071e0 	.word	0x100071e0
100009cc:	100071e4 	.word	0x100071e4
100009d0:	1000720c 	.word	0x1000720c
100009d4:	10007228 	.word	0x10007228
100009d8:	10007230 	.word	0x10007230
100009dc:	10020468 	.word	0x10020468
100009e0:	10020268 	.word	0x10020268
100009e4:	10020264 	.word	0x10020264

100009e8 <Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void Error_Handler(void)
{
100009e8:	b598      	push	{r3, r4, r7, lr}
100009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  log_err("Error_Handler");
100009ec:	f000 fd40 	bl	10001470 <HAL_GetTick>
100009f0:	4603      	mov	r3, r0
100009f2:	4a0c      	ldr	r2, [pc, #48]	; (10000a24 <Error_Handler+0x3c>)
100009f4:	fba2 2303 	umull	r2, r3, r2, r3
100009f8:	099c      	lsrs	r4, r3, #6
100009fa:	f000 fd39 	bl	10001470 <HAL_GetTick>
100009fe:	4602      	mov	r2, r0
10000a00:	4b08      	ldr	r3, [pc, #32]	; (10000a24 <Error_Handler+0x3c>)
10000a02:	fba3 1302 	umull	r1, r3, r3, r2
10000a06:	099b      	lsrs	r3, r3, #6
10000a08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
10000a0c:	fb01 f303 	mul.w	r3, r1, r3
10000a10:	1ad3      	subs	r3, r2, r3
10000a12:	461a      	mov	r2, r3
10000a14:	4621      	mov	r1, r4
10000a16:	4804      	ldr	r0, [pc, #16]	; (10000a28 <Error_Handler+0x40>)
10000a18:	f005 fca2 	bl	10006360 <iprintf>
  BSP_LED_Off(LED7);
10000a1c:	2002      	movs	r0, #2
10000a1e:	f000 fc47 	bl	100012b0 <BSP_LED_Off>
  while(1)
10000a22:	e7fe      	b.n	10000a22 <Error_Handler+0x3a>
10000a24:	10624dd3 	.word	0x10624dd3
10000a28:	10007258 	.word	0x10007258

10000a2c <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
10000a2c:	b598      	push	{r3, r4, r7, lr}
10000a2e:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN PRE_MAILBOX_INIT */

   /* USER CODE END  PRE_MAILBOX_INIT */

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_1, IPCC_CHANNEL_DIR_RX,
10000a30:	4b25      	ldr	r3, [pc, #148]	; (10000ac8 <MAILBOX_Init+0x9c>)
10000a32:	2201      	movs	r2, #1
10000a34:	2100      	movs	r1, #0
10000a36:	4825      	ldr	r0, [pc, #148]	; (10000acc <MAILBOX_Init+0xa0>)
10000a38:	f001 f87c 	bl	10001b34 <HAL_IPCC_ActivateNotification>
10000a3c:	4603      	mov	r3, r0
10000a3e:	2b00      	cmp	r3, #0
10000a40:	d01a      	beq.n	10000a78 <MAILBOX_Init+0x4c>
          IPCC_channel1_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_1 RX fail\n", __func__);
10000a42:	f000 fd15 	bl	10001470 <HAL_GetTick>
10000a46:	4603      	mov	r3, r0
10000a48:	4a21      	ldr	r2, [pc, #132]	; (10000ad0 <MAILBOX_Init+0xa4>)
10000a4a:	fba2 2303 	umull	r2, r3, r2, r3
10000a4e:	099c      	lsrs	r4, r3, #6
10000a50:	f000 fd0e 	bl	10001470 <HAL_GetTick>
10000a54:	4603      	mov	r3, r0
10000a56:	4a1e      	ldr	r2, [pc, #120]	; (10000ad0 <MAILBOX_Init+0xa4>)
10000a58:	fba2 1203 	umull	r1, r2, r2, r3
10000a5c:	0992      	lsrs	r2, r2, #6
10000a5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
10000a62:	fb01 f202 	mul.w	r2, r1, r2
10000a66:	1a9a      	subs	r2, r3, r2
10000a68:	4b1a      	ldr	r3, [pc, #104]	; (10000ad4 <MAILBOX_Init+0xa8>)
10000a6a:	4621      	mov	r1, r4
10000a6c:	481a      	ldr	r0, [pc, #104]	; (10000ad8 <MAILBOX_Init+0xac>)
10000a6e:	f005 fc77 	bl	10006360 <iprintf>
    return -1;
10000a72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10000a76:	e024      	b.n	10000ac2 <MAILBOX_Init+0x96>
  }

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_2, IPCC_CHANNEL_DIR_RX,
10000a78:	4b18      	ldr	r3, [pc, #96]	; (10000adc <MAILBOX_Init+0xb0>)
10000a7a:	2201      	movs	r2, #1
10000a7c:	2101      	movs	r1, #1
10000a7e:	4813      	ldr	r0, [pc, #76]	; (10000acc <MAILBOX_Init+0xa0>)
10000a80:	f001 f858 	bl	10001b34 <HAL_IPCC_ActivateNotification>
10000a84:	4603      	mov	r3, r0
10000a86:	2b00      	cmp	r3, #0
10000a88:	d01a      	beq.n	10000ac0 <MAILBOX_Init+0x94>
          IPCC_channel2_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_2 RX fail\n", __func__);
10000a8a:	f000 fcf1 	bl	10001470 <HAL_GetTick>
10000a8e:	4603      	mov	r3, r0
10000a90:	4a0f      	ldr	r2, [pc, #60]	; (10000ad0 <MAILBOX_Init+0xa4>)
10000a92:	fba2 2303 	umull	r2, r3, r2, r3
10000a96:	099c      	lsrs	r4, r3, #6
10000a98:	f000 fcea 	bl	10001470 <HAL_GetTick>
10000a9c:	4603      	mov	r3, r0
10000a9e:	4a0c      	ldr	r2, [pc, #48]	; (10000ad0 <MAILBOX_Init+0xa4>)
10000aa0:	fba2 1203 	umull	r1, r2, r2, r3
10000aa4:	0992      	lsrs	r2, r2, #6
10000aa6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
10000aaa:	fb01 f202 	mul.w	r2, r1, r2
10000aae:	1a9a      	subs	r2, r3, r2
10000ab0:	4b08      	ldr	r3, [pc, #32]	; (10000ad4 <MAILBOX_Init+0xa8>)
10000ab2:	4621      	mov	r1, r4
10000ab4:	480a      	ldr	r0, [pc, #40]	; (10000ae0 <MAILBOX_Init+0xb4>)
10000ab6:	f005 fc53 	bl	10006360 <iprintf>
    return -1;
10000aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10000abe:	e000      	b.n	10000ac2 <MAILBOX_Init+0x96>


  /* USER CODE BEGIN POST_MAILBOX_INIT */

  /* USER CODE END  POST_MAILBOX_INIT */
  return 0;
10000ac0:	2300      	movs	r3, #0
}
10000ac2:	4618      	mov	r0, r3
10000ac4:	bd98      	pop	{r3, r4, r7, pc}
10000ac6:	bf00      	nop
10000ac8:	10000bd5 	.word	0x10000bd5
10000acc:	100201d8 	.word	0x100201d8
10000ad0:	10624dd3 	.word	0x10624dd3
10000ad4:	10007560 	.word	0x10007560
10000ad8:	1000727c 	.word	0x1000727c
10000adc:	10000c01 	.word	0x10000c01
10000ae0:	100072a4 	.word	0x100072a4

10000ae4 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
10000ae4:	b580      	push	{r7, lr}
10000ae6:	b084      	sub	sp, #16
10000ae8:	af00      	add	r7, sp, #0
10000aea:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */
  int ret = -1;
10000aec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10000af0:	60fb      	str	r3, [r7, #12]

   /* USER CODE BEGIN PRE_MAILBOX_POLL */

   /* USER CODE END  PRE_MAILBOX_POLL */

   if (msg_received_ch1 == MBOX_BUF_FREE) {
10000af2:	4b0f      	ldr	r3, [pc, #60]	; (10000b30 <MAILBOX_Poll+0x4c>)
10000af4:	681b      	ldr	r3, [r3, #0]
10000af6:	2b02      	cmp	r3, #2
10000af8:	d108      	bne.n	10000b0c <MAILBOX_Poll+0x28>
   /* USER CODE BEGIN MSG_CHANNEL1 */

   /* USER CODE END  MSG_CHANNEL1 */

    OPENAMP_log_dbg("Running virt0 (ch_1 buf free)\r\n");
    rproc_virtio_notified(vdev, VRING0_ID);
10000afa:	2100      	movs	r1, #0
10000afc:	6878      	ldr	r0, [r7, #4]
10000afe:	f003 fe80 	bl	10004802 <rproc_virtio_notified>
    ret = 0;
10000b02:	2300      	movs	r3, #0
10000b04:	60fb      	str	r3, [r7, #12]
    msg_received_ch1 = MBOX_NO_MSG;
10000b06:	4b0a      	ldr	r3, [pc, #40]	; (10000b30 <MAILBOX_Poll+0x4c>)
10000b08:	2200      	movs	r2, #0
10000b0a:	601a      	str	r2, [r3, #0]
  }

  if (msg_received_ch2 == MBOX_NEW_MSG) {
10000b0c:	4b09      	ldr	r3, [pc, #36]	; (10000b34 <MAILBOX_Poll+0x50>)
10000b0e:	681b      	ldr	r3, [r3, #0]
10000b10:	2b01      	cmp	r3, #1
10000b12:	d108      	bne.n	10000b26 <MAILBOX_Poll+0x42>
   /* USER CODE BEGIN MSG_CHANNEL2 */

   /* USER CODE END  MSG_CHANNEL2 */

    OPENAMP_log_dbg("Running virt1 (ch_2 new msg)\r\n");
    rproc_virtio_notified(vdev, VRING1_ID);
10000b14:	2101      	movs	r1, #1
10000b16:	6878      	ldr	r0, [r7, #4]
10000b18:	f003 fe73 	bl	10004802 <rproc_virtio_notified>
    msg_received_ch2 = MBOX_NO_MSG;
10000b1c:	4b05      	ldr	r3, [pc, #20]	; (10000b34 <MAILBOX_Poll+0x50>)
10000b1e:	2200      	movs	r2, #0
10000b20:	601a      	str	r2, [r3, #0]

    ret = 0;
10000b22:	2300      	movs	r3, #0
10000b24:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN POST_MAILBOX_POLL */

  /* USER CODE END  POST_MAILBOX_POLL */

  return ret;
10000b26:	68fb      	ldr	r3, [r7, #12]
}
10000b28:	4618      	mov	r0, r3
10000b2a:	3710      	adds	r7, #16
10000b2c:	46bd      	mov	sp, r7
10000b2e:	bd80      	pop	{r7, pc}
10000b30:	1002046c 	.word	0x1002046c
10000b34:	10020470 	.word	0x10020470

10000b38 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
10000b38:	b590      	push	{r4, r7, lr}
10000b3a:	b085      	sub	sp, #20
10000b3c:	af00      	add	r7, sp, #0
10000b3e:	6078      	str	r0, [r7, #4]
10000b40:	6039      	str	r1, [r7, #0]
   /* USER CODE BEGIN PRE_MAILBOX_NOTIFY */

   /* USER CODE END  PRE_MAILBOX_NOTIFY */

  /* Called after virtqueue processing: time to inform the remote */
  if (id == VRING0_ID) {
10000b42:	683b      	ldr	r3, [r7, #0]
10000b44:	2b00      	cmp	r3, #0
10000b46:	d102      	bne.n	10000b4e <MAILBOX_Notify+0x16>
    channel = IPCC_CHANNEL_1;
10000b48:	2300      	movs	r3, #0
10000b4a:	60fb      	str	r3, [r7, #12]
10000b4c:	e020      	b.n	10000b90 <MAILBOX_Notify+0x58>
    OPENAMP_log_dbg("Send msg on ch_1\r\n");
  }
  else if (id == VRING1_ID) {
10000b4e:	683b      	ldr	r3, [r7, #0]
10000b50:	2b01      	cmp	r3, #1
10000b52:	d102      	bne.n	10000b5a <MAILBOX_Notify+0x22>
    /* Note: the OpenAMP framework never notifies this */
    channel = IPCC_CHANNEL_2;
10000b54:	2301      	movs	r3, #1
10000b56:	60fb      	str	r3, [r7, #12]
10000b58:	e01a      	b.n	10000b90 <MAILBOX_Notify+0x58>
    OPENAMP_log_dbg("Send 'buff free' on ch_2\r\n");
  }
  else {
    OPENAMP_log_err("invalid vring (%d)\r\n", (int)id);
10000b5a:	f000 fc89 	bl	10001470 <HAL_GetTick>
10000b5e:	4603      	mov	r3, r0
10000b60:	4a19      	ldr	r2, [pc, #100]	; (10000bc8 <MAILBOX_Notify+0x90>)
10000b62:	fba2 2303 	umull	r2, r3, r2, r3
10000b66:	099c      	lsrs	r4, r3, #6
10000b68:	f000 fc82 	bl	10001470 <HAL_GetTick>
10000b6c:	4603      	mov	r3, r0
10000b6e:	4a16      	ldr	r2, [pc, #88]	; (10000bc8 <MAILBOX_Notify+0x90>)
10000b70:	fba2 1203 	umull	r1, r2, r2, r3
10000b74:	0992      	lsrs	r2, r2, #6
10000b76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
10000b7a:	fb01 f202 	mul.w	r2, r1, r2
10000b7e:	1a9a      	subs	r2, r3, r2
10000b80:	683b      	ldr	r3, [r7, #0]
10000b82:	4621      	mov	r1, r4
10000b84:	4811      	ldr	r0, [pc, #68]	; (10000bcc <MAILBOX_Notify+0x94>)
10000b86:	f005 fbeb 	bl	10006360 <iprintf>
    return -1;
10000b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10000b8e:	e016      	b.n	10000bbe <MAILBOX_Notify+0x86>
  }

  /* Check that the channel is free (otherwise wait until it is) */
  if (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED) {
10000b90:	2200      	movs	r2, #0
10000b92:	68f9      	ldr	r1, [r7, #12]
10000b94:	480e      	ldr	r0, [pc, #56]	; (10000bd0 <MAILBOX_Notify+0x98>)
10000b96:	f001 f81b 	bl	10001bd0 <HAL_IPCC_GetChannelStatus>
10000b9a:	4603      	mov	r3, r0
10000b9c:	2b01      	cmp	r3, #1
10000b9e:	d108      	bne.n	10000bb2 <MAILBOX_Notify+0x7a>
    OPENAMP_log_dbg("Waiting for channel to be freed\r\n");
    while (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED)
10000ba0:	bf00      	nop
10000ba2:	2200      	movs	r2, #0
10000ba4:	68f9      	ldr	r1, [r7, #12]
10000ba6:	480a      	ldr	r0, [pc, #40]	; (10000bd0 <MAILBOX_Notify+0x98>)
10000ba8:	f001 f812 	bl	10001bd0 <HAL_IPCC_GetChannelStatus>
10000bac:	4603      	mov	r3, r0
10000bae:	2b01      	cmp	r3, #1
10000bb0:	d0f7      	beq.n	10000ba2 <MAILBOX_Notify+0x6a>
      ;
  }

  /* Inform A7 (either new message, or buf free) */
  HAL_IPCC_NotifyCPU(&hipcc, channel, IPCC_CHANNEL_DIR_TX);
10000bb2:	2200      	movs	r2, #0
10000bb4:	68f9      	ldr	r1, [r7, #12]
10000bb6:	4806      	ldr	r0, [pc, #24]	; (10000bd0 <MAILBOX_Notify+0x98>)
10000bb8:	f001 f83e 	bl	10001c38 <HAL_IPCC_NotifyCPU>

 /* USER CODE BEGIN POST_MAILBOX_NOTIFY */

 /* USER CODE END  POST_MAILBOX_NOTIFY */

  return 0;
10000bbc:	2300      	movs	r3, #0
}
10000bbe:	4618      	mov	r0, r3
10000bc0:	3714      	adds	r7, #20
10000bc2:	46bd      	mov	sp, r7
10000bc4:	bd90      	pop	{r4, r7, pc}
10000bc6:	bf00      	nop
10000bc8:	10624dd3 	.word	0x10624dd3
10000bcc:	100072cc 	.word	0x100072cc
10000bd0:	100201d8 	.word	0x100201d8

10000bd4 <IPCC_channel1_callback>:

/* USER CODE END 0 */
/* Callback from IPCC Interrupt Handler: Master Processor informs that there are some free buffers */
void IPCC_channel1_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10000bd4:	b580      	push	{r7, lr}
10000bd6:	b084      	sub	sp, #16
10000bd8:	af00      	add	r7, sp, #0
10000bda:	60f8      	str	r0, [r7, #12]
10000bdc:	60b9      	str	r1, [r7, #8]
10000bde:	4613      	mov	r3, r2
10000be0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL1_CALLBACK */

  if (msg_received_ch1 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel1_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch1);

  msg_received_ch1 = MBOX_BUF_FREE;
10000be2:	4b06      	ldr	r3, [pc, #24]	; (10000bfc <IPCC_channel1_callback+0x28>)
10000be4:	2202      	movs	r2, #2
10000be6:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the 'buff free' msg */
  OPENAMP_log_dbg("Ack 'buff free' message on ch1\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
10000be8:	2201      	movs	r2, #1
10000bea:	68b9      	ldr	r1, [r7, #8]
10000bec:	68f8      	ldr	r0, [r7, #12]
10000bee:	f001 f823 	bl	10001c38 <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL1_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL1_CALLBACK */
}
10000bf2:	bf00      	nop
10000bf4:	3710      	adds	r7, #16
10000bf6:	46bd      	mov	sp, r7
10000bf8:	bd80      	pop	{r7, pc}
10000bfa:	bf00      	nop
10000bfc:	1002046c 	.word	0x1002046c

10000c00 <IPCC_channel2_callback>:

/* Callback from IPCC Interrupt Handler: new message received from Master Processor */
void IPCC_channel2_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10000c00:	b580      	push	{r7, lr}
10000c02:	b084      	sub	sp, #16
10000c04:	af00      	add	r7, sp, #0
10000c06:	60f8      	str	r0, [r7, #12]
10000c08:	60b9      	str	r1, [r7, #8]
10000c0a:	4613      	mov	r3, r2
10000c0c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL2_CALLBACK */

  if (msg_received_ch2 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel2_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch2);

  msg_received_ch2 = MBOX_NEW_MSG;
10000c0e:	4b06      	ldr	r3, [pc, #24]	; (10000c28 <IPCC_channel2_callback+0x28>)
10000c10:	2201      	movs	r2, #1
10000c12:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the new msg */
  OPENAMP_log_dbg("Ack new message on ch2\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
10000c14:	2201      	movs	r2, #1
10000c16:	68b9      	ldr	r1, [r7, #8]
10000c18:	68f8      	ldr	r0, [r7, #12]
10000c1a:	f001 f80d 	bl	10001c38 <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL2_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL2_CALLBACK */
}
10000c1e:	bf00      	nop
10000c20:	3710      	adds	r7, #16
10000c22:	46bd      	mov	sp, r7
10000c24:	bd80      	pop	{r7, pc}
10000c26:	bf00      	nop
10000c28:	10020470 	.word	0x10020470

10000c2c <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
10000c2c:	b480      	push	{r7}
10000c2e:	b083      	sub	sp, #12
10000c30:	af00      	add	r7, sp, #0
10000c32:	6078      	str	r0, [r7, #4]
10000c34:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
10000c36:	687b      	ldr	r3, [r7, #4]
10000c38:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
10000c3a:	683a      	ldr	r2, [r7, #0]
10000c3c:	429a      	cmp	r2, r3
10000c3e:	d209      	bcs.n	10000c54 <metal_device_io_region+0x28>
10000c40:	683a      	ldr	r2, [r7, #0]
10000c42:	4613      	mov	r3, r2
10000c44:	00db      	lsls	r3, r3, #3
10000c46:	1a9b      	subs	r3, r3, r2
10000c48:	00db      	lsls	r3, r3, #3
10000c4a:	3308      	adds	r3, #8
10000c4c:	687a      	ldr	r2, [r7, #4]
10000c4e:	4413      	add	r3, r2
10000c50:	3304      	adds	r3, #4
10000c52:	e000      	b.n	10000c56 <metal_device_io_region+0x2a>
10000c54:	2300      	movs	r3, #0
}
10000c56:	4618      	mov	r0, r3
10000c58:	370c      	adds	r7, #12
10000c5a:	46bd      	mov	sp, r7
10000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000c60:	4770      	bx	lr
	...

10000c64 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
10000c64:	b590      	push	{r4, r7, lr}
10000c66:	b08d      	sub	sp, #52	; 0x34
10000c68:	af04      	add	r7, sp, #16
10000c6a:	6078      	str	r0, [r7, #4]
  int status = 0;
10000c6c:	2300      	movs	r3, #0
10000c6e:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
10000c70:	2300      	movs	r3, #0
10000c72:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
10000c74:	4a41      	ldr	r2, [pc, #260]	; (10000d7c <OPENAMP_shmem_init+0x118>)
10000c76:	f107 0310 	add.w	r3, r7, #16
10000c7a:	e892 0003 	ldmia.w	r2, {r0, r1}
10000c7e:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
10000c82:	2300      	movs	r3, #0
10000c84:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
10000c86:	2300      	movs	r3, #0
10000c88:	60bb      	str	r3, [r7, #8]


  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
10000c8a:	f107 0310 	add.w	r3, r7, #16
10000c8e:	4618      	mov	r0, r3
10000c90:	f003 f8f4 	bl	10003e7c <metal_init>

  status = metal_register_generic_device(&shm_device);
10000c94:	483a      	ldr	r0, [pc, #232]	; (10000d80 <OPENAMP_shmem_init+0x11c>)
10000c96:	f003 f80f 	bl	10003cb8 <metal_register_generic_device>
10000c9a:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
10000c9c:	69fb      	ldr	r3, [r7, #28]
10000c9e:	2b00      	cmp	r3, #0
10000ca0:	d001      	beq.n	10000ca6 <OPENAMP_shmem_init+0x42>
    return status;
10000ca2:	69fb      	ldr	r3, [r7, #28]
10000ca4:	e066      	b.n	10000d74 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
10000ca6:	f107 0318 	add.w	r3, r7, #24
10000caa:	461a      	mov	r2, r3
10000cac:	4935      	ldr	r1, [pc, #212]	; (10000d84 <OPENAMP_shmem_init+0x120>)
10000cae:	4836      	ldr	r0, [pc, #216]	; (10000d88 <OPENAMP_shmem_init+0x124>)
10000cb0:	f002 ffc4 	bl	10003c3c <metal_device_open>
10000cb4:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
10000cb6:	69fb      	ldr	r3, [r7, #28]
10000cb8:	2b00      	cmp	r3, #0
10000cba:	d001      	beq.n	10000cc0 <OPENAMP_shmem_init+0x5c>
    return status;
10000cbc:	69fb      	ldr	r3, [r7, #28]
10000cbe:	e059      	b.n	10000d74 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
10000cc0:	4a32      	ldr	r2, [pc, #200]	; (10000d8c <OPENAMP_shmem_init+0x128>)
10000cc2:	4b33      	ldr	r3, [pc, #204]	; (10000d90 <OPENAMP_shmem_init+0x12c>)
10000cc4:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
10000cc6:	69bb      	ldr	r3, [r7, #24]
10000cc8:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, (unsigned int)-1, 0, NULL);
10000ccc:	4a31      	ldr	r2, [pc, #196]	; (10000d94 <OPENAMP_shmem_init+0x130>)
10000cce:	4b2f      	ldr	r3, [pc, #188]	; (10000d8c <OPENAMP_shmem_init+0x128>)
10000cd0:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
10000cd2:	461a      	mov	r2, r3
10000cd4:	2300      	movs	r3, #0
10000cd6:	9302      	str	r3, [sp, #8]
10000cd8:	2300      	movs	r3, #0
10000cda:	9301      	str	r3, [sp, #4]
10000cdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10000ce0:	9300      	str	r3, [sp, #0]
10000ce2:	4613      	mov	r3, r2
10000ce4:	4a2a      	ldr	r2, [pc, #168]	; (10000d90 <OPENAMP_shmem_init+0x12c>)
10000ce6:	4929      	ldr	r1, [pc, #164]	; (10000d8c <OPENAMP_shmem_init+0x128>)
10000ce8:	f003 f916 	bl	10003f18 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
10000cec:	69bb      	ldr	r3, [r7, #24]
10000cee:	2100      	movs	r1, #0
10000cf0:	4618      	mov	r0, r3
10000cf2:	f7ff ff9b 	bl	10000c2c <metal_device_io_region>
10000cf6:	4603      	mov	r3, r0
10000cf8:	4a27      	ldr	r2, [pc, #156]	; (10000d98 <OPENAMP_shmem_init+0x134>)
10000cfa:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
10000cfc:	4b26      	ldr	r3, [pc, #152]	; (10000d98 <OPENAMP_shmem_init+0x134>)
10000cfe:	681b      	ldr	r3, [r3, #0]
10000d00:	2b00      	cmp	r3, #0
10000d02:	d102      	bne.n	10000d0a <OPENAMP_shmem_init+0xa6>
    return -1;
10000d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10000d08:	e034      	b.n	10000d74 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
10000d0a:	f107 0208 	add.w	r2, r7, #8
10000d0e:	f107 030c 	add.w	r3, r7, #12
10000d12:	4619      	mov	r1, r3
10000d14:	6878      	ldr	r0, [r7, #4]
10000d16:	f000 f935 	bl	10000f84 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
10000d1a:	68fb      	ldr	r3, [r7, #12]
10000d1c:	4a1f      	ldr	r2, [pc, #124]	; (10000d9c <OPENAMP_shmem_init+0x138>)
10000d1e:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
10000d20:	4b1e      	ldr	r3, [pc, #120]	; (10000d9c <OPENAMP_shmem_init+0x138>)
10000d22:	681b      	ldr	r3, [r3, #0]
10000d24:	2b00      	cmp	r3, #0
10000d26:	d102      	bne.n	10000d2e <OPENAMP_shmem_init+0xca>
  {
    return -1;
10000d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10000d2c:	e022      	b.n	10000d74 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
10000d2e:	69bb      	ldr	r3, [r7, #24]
10000d30:	f103 0044 	add.w	r0, r3, #68	; 0x44
10000d34:	4b19      	ldr	r3, [pc, #100]	; (10000d9c <OPENAMP_shmem_init+0x138>)
10000d36:	6819      	ldr	r1, [r3, #0]
10000d38:	4b18      	ldr	r3, [pc, #96]	; (10000d9c <OPENAMP_shmem_init+0x138>)
10000d3a:	681a      	ldr	r2, [r3, #0]
10000d3c:	68bb      	ldr	r3, [r7, #8]
10000d3e:	461c      	mov	r4, r3
10000d40:	2300      	movs	r3, #0
10000d42:	9302      	str	r3, [sp, #8]
10000d44:	2300      	movs	r3, #0
10000d46:	9301      	str	r3, [sp, #4]
10000d48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10000d4c:	9300      	str	r3, [sp, #0]
10000d4e:	4623      	mov	r3, r4
10000d50:	f003 f8e2 	bl	10003f18 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
10000d54:	69bb      	ldr	r3, [r7, #24]
10000d56:	2101      	movs	r1, #1
10000d58:	4618      	mov	r0, r3
10000d5a:	f7ff ff67 	bl	10000c2c <metal_device_io_region>
10000d5e:	4603      	mov	r3, r0
10000d60:	4a0f      	ldr	r2, [pc, #60]	; (10000da0 <OPENAMP_shmem_init+0x13c>)
10000d62:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
10000d64:	4b0e      	ldr	r3, [pc, #56]	; (10000da0 <OPENAMP_shmem_init+0x13c>)
10000d66:	681b      	ldr	r3, [r3, #0]
10000d68:	2b00      	cmp	r3, #0
10000d6a:	d102      	bne.n	10000d72 <OPENAMP_shmem_init+0x10e>
    return -1;
10000d6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10000d70:	e000      	b.n	10000d74 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
10000d72:	2300      	movs	r3, #0
}
10000d74:	4618      	mov	r0, r3
10000d76:	3724      	adds	r7, #36	; 0x24
10000d78:	46bd      	mov	sp, r7
10000d7a:	bd90      	pop	{r4, r7, pc}
10000d7c:	1000730c 	.word	0x1000730c
10000d80:	10020000 	.word	0x10020000
10000d84:	100072f8 	.word	0x100072f8
10000d88:	10007304 	.word	0x10007304
10000d8c:	10040000 	.word	0x10040000
10000d90:	10020518 	.word	0x10020518
10000d94:	10048000 	.word	0x10048000
10000d98:	10020474 	.word	0x10020474
10000d9c:	1002047c 	.word	0x1002047c
10000da0:	10020478 	.word	0x10020478

10000da4 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
10000da4:	b590      	push	{r4, r7, lr}
10000da6:	b08b      	sub	sp, #44	; 0x2c
10000da8:	af04      	add	r7, sp, #16
10000daa:	6078      	str	r0, [r7, #4]
10000dac:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
10000dae:	2300      	movs	r3, #0
10000db0:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
10000db2:	2300      	movs	r3, #0
10000db4:	613b      	str	r3, [r7, #16]
  int status = 0;
10000db6:	2300      	movs	r3, #0
10000db8:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
10000dba:	f7ff fe37 	bl	10000a2c <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
10000dbe:	6878      	ldr	r0, [r7, #4]
10000dc0:	f7ff ff50 	bl	10000c64 <OPENAMP_shmem_init>
10000dc4:	60f8      	str	r0, [r7, #12]
  if(status)
10000dc6:	68fb      	ldr	r3, [r7, #12]
10000dc8:	2b00      	cmp	r3, #0
10000dca:	d001      	beq.n	10000dd0 <MX_OPENAMP_Init+0x2c>
  {
    return status;
10000dcc:	68fb      	ldr	r3, [r7, #12]
10000dce:	e068      	b.n	10000ea2 <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
10000dd0:	6878      	ldr	r0, [r7, #4]
10000dd2:	4b36      	ldr	r3, [pc, #216]	; (10000eac <MX_OPENAMP_Init+0x108>)
10000dd4:	681b      	ldr	r3, [r3, #0]
10000dd6:	f103 0218 	add.w	r2, r3, #24
10000dda:	4b35      	ldr	r3, [pc, #212]	; (10000eb0 <MX_OPENAMP_Init+0x10c>)
10000ddc:	681b      	ldr	r3, [r3, #0]
10000dde:	2100      	movs	r1, #0
10000de0:	9102      	str	r1, [sp, #8]
10000de2:	4934      	ldr	r1, [pc, #208]	; (10000eb4 <MX_OPENAMP_Init+0x110>)
10000de4:	9101      	str	r1, [sp, #4]
10000de6:	2100      	movs	r1, #0
10000de8:	9100      	str	r1, [sp, #0]
10000dea:	21ff      	movs	r1, #255	; 0xff
10000dec:	f003 fc2a 	bl	10004644 <rproc_virtio_create_vdev>
10000df0:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
10000df2:	693b      	ldr	r3, [r7, #16]
10000df4:	2b00      	cmp	r3, #0
10000df6:	d102      	bne.n	10000dfe <MX_OPENAMP_Init+0x5a>
  {
    return -1;
10000df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10000dfc:	e051      	b.n	10000ea2 <MX_OPENAMP_Init+0xfe>
  }


  rproc_virtio_wait_remote_ready(vdev);
10000dfe:	6938      	ldr	r0, [r7, #16]
10000e00:	f003 fd3b 	bl	1000487a <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
10000e04:	4b29      	ldr	r3, [pc, #164]	; (10000eac <MX_OPENAMP_Init+0x108>)
10000e06:	681b      	ldr	r3, [r3, #0]
10000e08:	3334      	adds	r3, #52	; 0x34
10000e0a:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
10000e0c:	697b      	ldr	r3, [r7, #20]
10000e0e:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
10000e10:	697b      	ldr	r3, [r7, #20]
10000e12:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
10000e14:	461c      	mov	r4, r3
10000e16:	4b28      	ldr	r3, [pc, #160]	; (10000eb8 <MX_OPENAMP_Init+0x114>)
10000e18:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
10000e1a:	697a      	ldr	r2, [r7, #20]
10000e1c:	6892      	ldr	r2, [r2, #8]
10000e1e:	6979      	ldr	r1, [r7, #20]
10000e20:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
10000e22:	9102      	str	r1, [sp, #8]
10000e24:	9201      	str	r2, [sp, #4]
10000e26:	9300      	str	r3, [sp, #0]
10000e28:	4623      	mov	r3, r4
10000e2a:	4602      	mov	r2, r0
10000e2c:	2100      	movs	r1, #0
10000e2e:	6938      	ldr	r0, [r7, #16]
10000e30:	f003 fcb6 	bl	100047a0 <rproc_virtio_init_vring>
10000e34:	60f8      	str	r0, [r7, #12]
  if (status != 0)
10000e36:	68fb      	ldr	r3, [r7, #12]
10000e38:	2b00      	cmp	r3, #0
10000e3a:	d001      	beq.n	10000e40 <MX_OPENAMP_Init+0x9c>
  {
    return status;
10000e3c:	68fb      	ldr	r3, [r7, #12]
10000e3e:	e030      	b.n	10000ea2 <MX_OPENAMP_Init+0xfe>


  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
10000e40:	4b1a      	ldr	r3, [pc, #104]	; (10000eac <MX_OPENAMP_Init+0x108>)
10000e42:	681b      	ldr	r3, [r3, #0]
10000e44:	3348      	adds	r3, #72	; 0x48
10000e46:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10000e48:	697b      	ldr	r3, [r7, #20]
10000e4a:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
10000e4c:	697b      	ldr	r3, [r7, #20]
10000e4e:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10000e50:	461c      	mov	r4, r3
10000e52:	4b19      	ldr	r3, [pc, #100]	; (10000eb8 <MX_OPENAMP_Init+0x114>)
10000e54:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
10000e56:	697a      	ldr	r2, [r7, #20]
10000e58:	6892      	ldr	r2, [r2, #8]
10000e5a:	6979      	ldr	r1, [r7, #20]
10000e5c:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10000e5e:	9102      	str	r1, [sp, #8]
10000e60:	9201      	str	r2, [sp, #4]
10000e62:	9300      	str	r3, [sp, #0]
10000e64:	4623      	mov	r3, r4
10000e66:	4602      	mov	r2, r0
10000e68:	2101      	movs	r1, #1
10000e6a:	6938      	ldr	r0, [r7, #16]
10000e6c:	f003 fc98 	bl	100047a0 <rproc_virtio_init_vring>
10000e70:	60f8      	str	r0, [r7, #12]
  if (status != 0)
10000e72:	68fb      	ldr	r3, [r7, #12]
10000e74:	2b00      	cmp	r3, #0
10000e76:	d001      	beq.n	10000e7c <MX_OPENAMP_Init+0xd8>
  {
    return status;
10000e78:	68fb      	ldr	r3, [r7, #12]
10000e7a:	e012      	b.n	10000ea2 <MX_OPENAMP_Init+0xfe>
  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
                             (size_t)SHM_SIZE);
10000e7c:	4a0f      	ldr	r2, [pc, #60]	; (10000ebc <MX_OPENAMP_Init+0x118>)
10000e7e:	4b10      	ldr	r3, [pc, #64]	; (10000ec0 <MX_OPENAMP_Init+0x11c>)
10000e80:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
10000e82:	461a      	mov	r2, r3
10000e84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
10000e88:	480e      	ldr	r0, [pc, #56]	; (10000ec4 <MX_OPENAMP_Init+0x120>)
10000e8a:	f004 f98e 	bl	100051aa <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
10000e8e:	4b0a      	ldr	r3, [pc, #40]	; (10000eb8 <MX_OPENAMP_Init+0x114>)
10000e90:	681b      	ldr	r3, [r3, #0]
10000e92:	4a0c      	ldr	r2, [pc, #48]	; (10000ec4 <MX_OPENAMP_Init+0x120>)
10000e94:	9200      	str	r2, [sp, #0]
10000e96:	683a      	ldr	r2, [r7, #0]
10000e98:	6939      	ldr	r1, [r7, #16]
10000e9a:	480b      	ldr	r0, [pc, #44]	; (10000ec8 <MX_OPENAMP_Init+0x124>)
10000e9c:	f004 fc82 	bl	100057a4 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
10000ea0:	2300      	movs	r3, #0
}
10000ea2:	4618      	mov	r0, r3
10000ea4:	371c      	adds	r7, #28
10000ea6:	46bd      	mov	sp, r7
10000ea8:	bd90      	pop	{r4, r7, pc}
10000eaa:	bf00      	nop
10000eac:	1002047c 	.word	0x1002047c
10000eb0:	10020478 	.word	0x10020478
10000eb4:	10000b39 	.word	0x10000b39
10000eb8:	10020474 	.word	0x10020474
10000ebc:	10048000 	.word	0x10048000
10000ec0:	10040000 	.word	0x10040000
10000ec4:	10020480 	.word	0x10020480
10000ec8:	1002048c 	.word	0x1002048c

10000ecc <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
10000ecc:	b580      	push	{r7, lr}
10000ece:	b08a      	sub	sp, #40	; 0x28
10000ed0:	af04      	add	r7, sp, #16
10000ed2:	60f8      	str	r0, [r7, #12]
10000ed4:	60b9      	str	r1, [r7, #8]
10000ed6:	607a      	str	r2, [r7, #4]
10000ed8:	603b      	str	r3, [r7, #0]
  int ret = 0;
10000eda:	2300      	movs	r3, #0
10000edc:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
10000ede:	6a3b      	ldr	r3, [r7, #32]
10000ee0:	9302      	str	r3, [sp, #8]
10000ee2:	683b      	ldr	r3, [r7, #0]
10000ee4:	9301      	str	r3, [sp, #4]
10000ee6:	687b      	ldr	r3, [r7, #4]
10000ee8:	9300      	str	r3, [sp, #0]
10000eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10000eee:	68ba      	ldr	r2, [r7, #8]
10000ef0:	4904      	ldr	r1, [pc, #16]	; (10000f04 <OPENAMP_create_endpoint+0x38>)
10000ef2:	68f8      	ldr	r0, [r7, #12]
10000ef4:	f003 ff8e 	bl	10004e14 <rpmsg_create_ept>
10000ef8:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
10000efa:	697b      	ldr	r3, [r7, #20]
}
10000efc:	4618      	mov	r0, r3
10000efe:	3718      	adds	r7, #24
10000f00:	46bd      	mov	sp, r7
10000f02:	bd80      	pop	{r7, pc}
10000f04:	1002048c 	.word	0x1002048c

10000f08 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
10000f08:	b580      	push	{r7, lr}
10000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
10000f0c:	4b03      	ldr	r3, [pc, #12]	; (10000f1c <OPENAMP_check_for_message+0x14>)
10000f0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
10000f10:	4618      	mov	r0, r3
10000f12:	f7ff fde7 	bl	10000ae4 <MAILBOX_Poll>
}
10000f16:	bf00      	nop
10000f18:	bd80      	pop	{r7, pc}
10000f1a:	bf00      	nop
10000f1c:	1002048c 	.word	0x1002048c

10000f20 <log_buff>:

#if defined (__LOG_TRACE_IO_)
char system_log_buf[SYSTEM_TRACE_BUF_SZ];

__weak void log_buff(int ch)
{
10000f20:	b480      	push	{r7}
10000f22:	b083      	sub	sp, #12
10000f24:	af00      	add	r7, sp, #0
10000f26:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
 static int offset = 0;

	if (offset + 1 >= SYSTEM_TRACE_BUF_SZ)
10000f28:	4b0e      	ldr	r3, [pc, #56]	; (10000f64 <log_buff+0x44>)
10000f2a:	681b      	ldr	r3, [r3, #0]
10000f2c:	f240 72fe 	movw	r2, #2046	; 0x7fe
10000f30:	4293      	cmp	r3, r2
10000f32:	dd02      	ble.n	10000f3a <log_buff+0x1a>
		offset = 0;
10000f34:	4b0b      	ldr	r3, [pc, #44]	; (10000f64 <log_buff+0x44>)
10000f36:	2200      	movs	r2, #0
10000f38:	601a      	str	r2, [r3, #0]

	system_log_buf[offset] = ch;
10000f3a:	4b0a      	ldr	r3, [pc, #40]	; (10000f64 <log_buff+0x44>)
10000f3c:	681b      	ldr	r3, [r3, #0]
10000f3e:	687a      	ldr	r2, [r7, #4]
10000f40:	b2d1      	uxtb	r1, r2
10000f42:	4a09      	ldr	r2, [pc, #36]	; (10000f68 <log_buff+0x48>)
10000f44:	54d1      	strb	r1, [r2, r3]
	system_log_buf[offset++ + 1] = '\0';
10000f46:	4b07      	ldr	r3, [pc, #28]	; (10000f64 <log_buff+0x44>)
10000f48:	681b      	ldr	r3, [r3, #0]
10000f4a:	1c5a      	adds	r2, r3, #1
10000f4c:	4905      	ldr	r1, [pc, #20]	; (10000f64 <log_buff+0x44>)
10000f4e:	600a      	str	r2, [r1, #0]
10000f50:	3301      	adds	r3, #1
10000f52:	4a05      	ldr	r2, [pc, #20]	; (10000f68 <log_buff+0x48>)
10000f54:	2100      	movs	r1, #0
10000f56:	54d1      	strb	r1, [r2, r3]
}
10000f58:	bf00      	nop
10000f5a:	370c      	adds	r7, #12
10000f5c:	46bd      	mov	sp, r7
10000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
10000f62:	4770      	bx	lr
10000f64:	10020d1c 	.word	0x10020d1c
10000f68:	1002051c 	.word	0x1002051c

10000f6c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __attribute__(( weak )) fputc(int ch, FILE *f)
#endif /* __GNUC__ */

#if defined (__LOG_UART_IO_) || defined (__LOG_TRACE_IO_)
PUTCHAR_PROTOTYPE
{
10000f6c:	b580      	push	{r7, lr}
10000f6e:	b082      	sub	sp, #8
10000f70:	af00      	add	r7, sp, #0
10000f72:	6078      	str	r0, [r7, #4]
#if defined (__LOG_UART_IO_)
extern UART_HandleTypeDef huart;
  HAL_UART_Transmit(&huart, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
#endif
#if defined (__LOG_TRACE_IO_)
	log_buff(ch);
10000f74:	6878      	ldr	r0, [r7, #4]
10000f76:	f7ff ffd3 	bl	10000f20 <log_buff>
#endif
	return ch;
10000f7a:	687b      	ldr	r3, [r7, #4]
}
10000f7c:	4618      	mov	r0, r3
10000f7e:	3708      	adds	r7, #8
10000f80:	46bd      	mov	sp, r7
10000f82:	bd80      	pop	{r7, pc}

10000f84 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
10000f84:	b480      	push	{r7}
10000f86:	b085      	sub	sp, #20
10000f88:	af00      	add	r7, sp, #0
10000f8a:	60f8      	str	r0, [r7, #12]
10000f8c:	60b9      	str	r1, [r7, #8]
10000f8e:	607a      	str	r2, [r7, #4]
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
10000f90:	687b      	ldr	r3, [r7, #4]
10000f92:	228c      	movs	r2, #140	; 0x8c
10000f94:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
10000f96:	68bb      	ldr	r3, [r7, #8]
10000f98:	4a03      	ldr	r2, [pc, #12]	; (10000fa8 <resource_table_init+0x24>)
10000f9a:	601a      	str	r2, [r3, #0]
}
10000f9c:	bf00      	nop
10000f9e:	3714      	adds	r7, #20
10000fa0:	46bd      	mov	sp, r7
10000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
10000fa6:	4770      	bx	lr
10000fa8:	10020130 	.word	0x10020130

10000fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10000fac:	b480      	push	{r7}
10000fae:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
10000fb0:	bf00      	nop
10000fb2:	46bd      	mov	sp, r7
10000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
10000fb8:	4770      	bx	lr
	...

10000fbc <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
10000fbc:	b580      	push	{r7, lr}
10000fbe:	b082      	sub	sp, #8
10000fc0:	af00      	add	r7, sp, #0
10000fc2:	6078      	str	r0, [r7, #4]

  if(hipcc->Instance==IPCC)
10000fc4:	687b      	ldr	r3, [r7, #4]
10000fc6:	681b      	ldr	r3, [r3, #0]
10000fc8:	4a0a      	ldr	r2, [pc, #40]	; (10000ff4 <HAL_IPCC_MspInit+0x38>)
10000fca:	4293      	cmp	r3, r2
10000fcc:	d10d      	bne.n	10000fea <HAL_IPCC_MspInit+0x2e>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
10000fce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
10000fd6:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
  /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_RX1_IRQn, DEFAULT_IRQ_PRIO, 0);
10000fda:	2200      	movs	r2, #0
10000fdc:	2101      	movs	r1, #1
10000fde:	2067      	movs	r0, #103	; 0x67
10000fe0:	f000 fb37 	bl	10001652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_RX1_IRQn);
10000fe4:	2067      	movs	r0, #103	; 0x67
10000fe6:	f000 fb50 	bl	1000168a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
}

}
10000fea:	bf00      	nop
10000fec:	3708      	adds	r7, #8
10000fee:	46bd      	mov	sp, r7
10000ff0:	bd80      	pop	{r7, pc}
10000ff2:	bf00      	nop
10000ff4:	4c001000 	.word	0x4c001000

10000ff8 <NMI_Handler>:
/******************************************************************************/
/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
10000ff8:	b480      	push	{r7}
10000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
10000ffc:	bf00      	nop
10000ffe:	46bd      	mov	sp, r7
10001000:	f85d 7b04 	ldr.w	r7, [sp], #4
10001004:	4770      	bx	lr

10001006 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
10001006:	b480      	push	{r7}
10001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
1000100a:	e7fe      	b.n	1000100a <HardFault_Handler+0x4>

1000100c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
1000100c:	b480      	push	{r7}
1000100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
10001010:	e7fe      	b.n	10001010 <MemManage_Handler+0x4>

10001012 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
10001012:	b480      	push	{r7}
10001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
10001016:	e7fe      	b.n	10001016 <BusFault_Handler+0x4>

10001018 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
10001018:	b480      	push	{r7}
1000101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
1000101c:	e7fe      	b.n	1000101c <UsageFault_Handler+0x4>

1000101e <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
1000101e:	b480      	push	{r7}
10001020:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10001022:	bf00      	nop
10001024:	46bd      	mov	sp, r7
10001026:	f85d 7b04 	ldr.w	r7, [sp], #4
1000102a:	4770      	bx	lr

1000102c <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
1000102c:	b480      	push	{r7}
1000102e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
10001030:	bf00      	nop
10001032:	46bd      	mov	sp, r7
10001034:	f85d 7b04 	ldr.w	r7, [sp], #4
10001038:	4770      	bx	lr

1000103a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
1000103a:	b480      	push	{r7}
1000103c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
1000103e:	bf00      	nop
10001040:	46bd      	mov	sp, r7
10001042:	f85d 7b04 	ldr.w	r7, [sp], #4
10001046:	4770      	bx	lr

10001048 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
10001048:	b580      	push	{r7, lr}
1000104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
1000104c:	f000 f9fc 	bl	10001448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10001050:	bf00      	nop
10001052:	bd80      	pop	{r7, pc}

10001054 <IPCC_RX1_IRQHandler>:

/**
  * @brief This function handles IPCC RX1 occupied interrupt.
  */
void IPCC_RX1_IRQHandler(void)
{
10001054:	b580      	push	{r7, lr}
10001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_RX1_IRQn 0 */
  log_dbg("%s: IT RX1\r\n", __func__);
  /* USER CODE END IPCC_RX1_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
10001058:	4802      	ldr	r0, [pc, #8]	; (10001064 <IPCC_RX1_IRQHandler+0x10>)
1000105a:	f000 fe33 	bl	10001cc4 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_RX1_IRQn 1 */

  /* USER CODE END IPCC_RX1_IRQn 1 */
}
1000105e:	bf00      	nop
10001060:	bd80      	pop	{r7, pc}
10001062:	bf00      	nop
10001064:	100201d8 	.word	0x100201d8

10001068 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
10001068:	b480      	push	{r7}
1000106a:	af00      	add	r7, sp, #0
	return 1;
1000106c:	2301      	movs	r3, #1
}
1000106e:	4618      	mov	r0, r3
10001070:	46bd      	mov	sp, r7
10001072:	f85d 7b04 	ldr.w	r7, [sp], #4
10001076:	4770      	bx	lr

10001078 <_kill>:

int _kill(int pid, int sig)
{
10001078:	b580      	push	{r7, lr}
1000107a:	b082      	sub	sp, #8
1000107c:	af00      	add	r7, sp, #0
1000107e:	6078      	str	r0, [r7, #4]
10001080:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
10001082:	f005 fa45 	bl	10006510 <__errno>
10001086:	4603      	mov	r3, r0
10001088:	2216      	movs	r2, #22
1000108a:	601a      	str	r2, [r3, #0]
	return -1;
1000108c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
10001090:	4618      	mov	r0, r3
10001092:	3708      	adds	r7, #8
10001094:	46bd      	mov	sp, r7
10001096:	bd80      	pop	{r7, pc}

10001098 <_exit>:

void _exit (int status)
{
10001098:	b580      	push	{r7, lr}
1000109a:	b082      	sub	sp, #8
1000109c:	af00      	add	r7, sp, #0
1000109e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
100010a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
100010a4:	6878      	ldr	r0, [r7, #4]
100010a6:	f7ff ffe7 	bl	10001078 <_kill>
	while (1) {}		/* Make sure we hang here */
100010aa:	e7fe      	b.n	100010aa <_exit+0x12>

100010ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
100010ac:	b580      	push	{r7, lr}
100010ae:	b086      	sub	sp, #24
100010b0:	af00      	add	r7, sp, #0
100010b2:	60f8      	str	r0, [r7, #12]
100010b4:	60b9      	str	r1, [r7, #8]
100010b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
100010b8:	2300      	movs	r3, #0
100010ba:	617b      	str	r3, [r7, #20]
100010bc:	e00a      	b.n	100010d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
100010be:	f3af 8000 	nop.w
100010c2:	4601      	mov	r1, r0
100010c4:	68bb      	ldr	r3, [r7, #8]
100010c6:	1c5a      	adds	r2, r3, #1
100010c8:	60ba      	str	r2, [r7, #8]
100010ca:	b2ca      	uxtb	r2, r1
100010cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
100010ce:	697b      	ldr	r3, [r7, #20]
100010d0:	3301      	adds	r3, #1
100010d2:	617b      	str	r3, [r7, #20]
100010d4:	697a      	ldr	r2, [r7, #20]
100010d6:	687b      	ldr	r3, [r7, #4]
100010d8:	429a      	cmp	r2, r3
100010da:	dbf0      	blt.n	100010be <_read+0x12>
	}

return len;
100010dc:	687b      	ldr	r3, [r7, #4]
}
100010de:	4618      	mov	r0, r3
100010e0:	3718      	adds	r7, #24
100010e2:	46bd      	mov	sp, r7
100010e4:	bd80      	pop	{r7, pc}

100010e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
100010e6:	b580      	push	{r7, lr}
100010e8:	b086      	sub	sp, #24
100010ea:	af00      	add	r7, sp, #0
100010ec:	60f8      	str	r0, [r7, #12]
100010ee:	60b9      	str	r1, [r7, #8]
100010f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
100010f2:	2300      	movs	r3, #0
100010f4:	617b      	str	r3, [r7, #20]
100010f6:	e009      	b.n	1000110c <_write+0x26>
	{
		__io_putchar(*ptr++);
100010f8:	68bb      	ldr	r3, [r7, #8]
100010fa:	1c5a      	adds	r2, r3, #1
100010fc:	60ba      	str	r2, [r7, #8]
100010fe:	781b      	ldrb	r3, [r3, #0]
10001100:	4618      	mov	r0, r3
10001102:	f7ff ff33 	bl	10000f6c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
10001106:	697b      	ldr	r3, [r7, #20]
10001108:	3301      	adds	r3, #1
1000110a:	617b      	str	r3, [r7, #20]
1000110c:	697a      	ldr	r2, [r7, #20]
1000110e:	687b      	ldr	r3, [r7, #4]
10001110:	429a      	cmp	r2, r3
10001112:	dbf1      	blt.n	100010f8 <_write+0x12>
	}
	return len;
10001114:	687b      	ldr	r3, [r7, #4]
}
10001116:	4618      	mov	r0, r3
10001118:	3718      	adds	r7, #24
1000111a:	46bd      	mov	sp, r7
1000111c:	bd80      	pop	{r7, pc}

1000111e <_close>:

int _close(int file)
{
1000111e:	b480      	push	{r7}
10001120:	b083      	sub	sp, #12
10001122:	af00      	add	r7, sp, #0
10001124:	6078      	str	r0, [r7, #4]
	return -1;
10001126:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
1000112a:	4618      	mov	r0, r3
1000112c:	370c      	adds	r7, #12
1000112e:	46bd      	mov	sp, r7
10001130:	f85d 7b04 	ldr.w	r7, [sp], #4
10001134:	4770      	bx	lr

10001136 <_fstat>:


int _fstat(int file, struct stat *st)
{
10001136:	b480      	push	{r7}
10001138:	b083      	sub	sp, #12
1000113a:	af00      	add	r7, sp, #0
1000113c:	6078      	str	r0, [r7, #4]
1000113e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
10001140:	683b      	ldr	r3, [r7, #0]
10001142:	f44f 5200 	mov.w	r2, #8192	; 0x2000
10001146:	605a      	str	r2, [r3, #4]
	return 0;
10001148:	2300      	movs	r3, #0
}
1000114a:	4618      	mov	r0, r3
1000114c:	370c      	adds	r7, #12
1000114e:	46bd      	mov	sp, r7
10001150:	f85d 7b04 	ldr.w	r7, [sp], #4
10001154:	4770      	bx	lr

10001156 <_isatty>:

int _isatty(int file)
{
10001156:	b480      	push	{r7}
10001158:	b083      	sub	sp, #12
1000115a:	af00      	add	r7, sp, #0
1000115c:	6078      	str	r0, [r7, #4]
	return 1;
1000115e:	2301      	movs	r3, #1
}
10001160:	4618      	mov	r0, r3
10001162:	370c      	adds	r7, #12
10001164:	46bd      	mov	sp, r7
10001166:	f85d 7b04 	ldr.w	r7, [sp], #4
1000116a:	4770      	bx	lr

1000116c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
1000116c:	b480      	push	{r7}
1000116e:	b085      	sub	sp, #20
10001170:	af00      	add	r7, sp, #0
10001172:	60f8      	str	r0, [r7, #12]
10001174:	60b9      	str	r1, [r7, #8]
10001176:	607a      	str	r2, [r7, #4]
	return 0;
10001178:	2300      	movs	r3, #0
}
1000117a:	4618      	mov	r0, r3
1000117c:	3714      	adds	r7, #20
1000117e:	46bd      	mov	sp, r7
10001180:	f85d 7b04 	ldr.w	r7, [sp], #4
10001184:	4770      	bx	lr
	...

10001188 <BSP_LED_Init>:
  *            @arg  LED6
  *            @arg  LED7
  *            @arg  LED8
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
10001188:	b580      	push	{r7, lr}
1000118a:	b088      	sub	sp, #32
1000118c:	af00      	add	r7, sp, #0
1000118e:	4603      	mov	r3, r0
10001190:	71fb      	strb	r3, [r7, #7]
int32_t  status = BSP_ERROR_NONE;
10001192:	2300      	movs	r3, #0
10001194:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if(Led == LED6)
10001196:	79fb      	ldrb	r3, [r7, #7]
10001198:	2b00      	cmp	r3, #0
1000119a:	d105      	bne.n	100011a8 <BSP_LED_Init+0x20>
  {
    LED6_GPIO_CLK_ENABLE();
1000119c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011a0:	2201      	movs	r2, #1
100011a2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
100011a6:	e019      	b.n	100011dc <BSP_LED_Init+0x54>
  }
  else if (Led == LED5)
100011a8:	79fb      	ldrb	r3, [r7, #7]
100011aa:	2b01      	cmp	r3, #1
100011ac:	d105      	bne.n	100011ba <BSP_LED_Init+0x32>
  {
    LED5_GPIO_CLK_ENABLE();
100011ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011b2:	2201      	movs	r2, #1
100011b4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
100011b8:	e010      	b.n	100011dc <BSP_LED_Init+0x54>
  }
  else if (Led == LED7)
100011ba:	79fb      	ldrb	r3, [r7, #7]
100011bc:	2b02      	cmp	r3, #2
100011be:	d105      	bne.n	100011cc <BSP_LED_Init+0x44>
  {
    LED7_GPIO_CLK_ENABLE();
100011c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011c4:	2280      	movs	r2, #128	; 0x80
100011c6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
100011ca:	e007      	b.n	100011dc <BSP_LED_Init+0x54>
  }
  else if (Led == LED8)
100011cc:	79fb      	ldrb	r3, [r7, #7]
100011ce:	2b03      	cmp	r3, #3
100011d0:	d104      	bne.n	100011dc <BSP_LED_Init+0x54>
  {
    LED8_GPIO_CLK_ENABLE();
100011d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011d6:	2208      	movs	r2, #8
100011d8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  }

    /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
100011dc:	79fb      	ldrb	r3, [r7, #7]
100011de:	4a16      	ldr	r2, [pc, #88]	; (10001238 <BSP_LED_Init+0xb0>)
100011e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
100011e4:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
100011e6:	2301      	movs	r3, #1
100011e8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
100011ea:	2301      	movs	r3, #1
100011ec:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
100011ee:	2303      	movs	r3, #3
100011f0:	617b      	str	r3, [r7, #20]
  BSP_ENTER_CRITICAL_SECTION(LED_PORT[Led]);
100011f2:	79fb      	ldrb	r3, [r7, #7]
100011f4:	4a11      	ldr	r2, [pc, #68]	; (1000123c <BSP_LED_Init+0xb4>)
100011f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
100011fa:	2164      	movs	r1, #100	; 0x64
100011fc:	4618      	mov	r0, r3
100011fe:	f7fe ff89 	bl	10000114 <Periph_Lock>
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
10001202:	79fb      	ldrb	r3, [r7, #7]
10001204:	4a0d      	ldr	r2, [pc, #52]	; (1000123c <BSP_LED_Init+0xb4>)
10001206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1000120a:	f107 0208 	add.w	r2, r7, #8
1000120e:	4611      	mov	r1, r2
10001210:	4618      	mov	r0, r3
10001212:	f000 fa55 	bl	100016c0 <HAL_GPIO_Init>
  BSP_EXIT_CRITICAL_SECTION(LED_PORT[Led]);
10001216:	79fb      	ldrb	r3, [r7, #7]
10001218:	4a08      	ldr	r2, [pc, #32]	; (1000123c <BSP_LED_Init+0xb4>)
1000121a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1000121e:	4618      	mov	r0, r3
10001220:	f7ff f806 	bl	10000230 <Periph_Unlock>
  
  /* By default, turn off LED */
  BSP_LED_Off(Led);
10001224:	79fb      	ldrb	r3, [r7, #7]
10001226:	4618      	mov	r0, r3
10001228:	f000 f842 	bl	100012b0 <BSP_LED_Off>

return status;
1000122c:	69fb      	ldr	r3, [r7, #28]
}
1000122e:	4618      	mov	r0, r3
10001230:	3720      	adds	r7, #32
10001232:	46bd      	mov	sp, r7
10001234:	bd80      	pop	{r7, pc}
10001236:	bf00      	nop
10001238:	10007570 	.word	0x10007570
1000123c:	1002008c 	.word	0x1002008c

10001240 <BSP_LED_On>:
  *            @arg  LED6
  *            @arg  LED7
  *            @arg  LED8
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
10001240:	b580      	push	{r7, lr}
10001242:	b084      	sub	sp, #16
10001244:	af00      	add	r7, sp, #0
10001246:	4603      	mov	r3, r0
10001248:	71fb      	strb	r3, [r7, #7]
  int32_t  status = BSP_ERROR_NONE;
1000124a:	2300      	movs	r3, #0
1000124c:	60fb      	str	r3, [r7, #12]
  if((Led == LED5) || (Led == LED6))
1000124e:	79fb      	ldrb	r3, [r7, #7]
10001250:	2b01      	cmp	r3, #1
10001252:	d002      	beq.n	1000125a <BSP_LED_On+0x1a>
10001254:	79fb      	ldrb	r3, [r7, #7]
10001256:	2b00      	cmp	r3, #0
10001258:	d10d      	bne.n	10001276 <BSP_LED_On+0x36>
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
1000125a:	79fb      	ldrb	r3, [r7, #7]
1000125c:	4a12      	ldr	r2, [pc, #72]	; (100012a8 <BSP_LED_On+0x68>)
1000125e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
10001262:	79fb      	ldrb	r3, [r7, #7]
10001264:	4a11      	ldr	r2, [pc, #68]	; (100012ac <BSP_LED_On+0x6c>)
10001266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1000126a:	b29b      	uxth	r3, r3
1000126c:	2200      	movs	r2, #0
1000126e:	4619      	mov	r1, r3
10001270:	f000 fbd0 	bl	10001a14 <HAL_GPIO_WritePin>
10001274:	e012      	b.n	1000129c <BSP_LED_On+0x5c>
  }
  else if ((Led == LED7) || (Led == LED8))
10001276:	79fb      	ldrb	r3, [r7, #7]
10001278:	2b02      	cmp	r3, #2
1000127a:	d002      	beq.n	10001282 <BSP_LED_On+0x42>
1000127c:	79fb      	ldrb	r3, [r7, #7]
1000127e:	2b03      	cmp	r3, #3
10001280:	d10c      	bne.n	1000129c <BSP_LED_On+0x5c>
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
10001282:	79fb      	ldrb	r3, [r7, #7]
10001284:	4a08      	ldr	r2, [pc, #32]	; (100012a8 <BSP_LED_On+0x68>)
10001286:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
1000128a:	79fb      	ldrb	r3, [r7, #7]
1000128c:	4a07      	ldr	r2, [pc, #28]	; (100012ac <BSP_LED_On+0x6c>)
1000128e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10001292:	b29b      	uxth	r3, r3
10001294:	2201      	movs	r2, #1
10001296:	4619      	mov	r1, r3
10001298:	f000 fbbc 	bl	10001a14 <HAL_GPIO_WritePin>
  }
  return status;
1000129c:	68fb      	ldr	r3, [r7, #12]
}
1000129e:	4618      	mov	r0, r3
100012a0:	3710      	adds	r7, #16
100012a2:	46bd      	mov	sp, r7
100012a4:	bd80      	pop	{r7, pc}
100012a6:	bf00      	nop
100012a8:	1002008c 	.word	0x1002008c
100012ac:	10007570 	.word	0x10007570

100012b0 <BSP_LED_Off>:
  *            @arg  LED6
  *            @arg  LED7
  *            @arg  LED8
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
100012b0:	b580      	push	{r7, lr}
100012b2:	b084      	sub	sp, #16
100012b4:	af00      	add	r7, sp, #0
100012b6:	4603      	mov	r3, r0
100012b8:	71fb      	strb	r3, [r7, #7]
  int32_t  status = BSP_ERROR_NONE;
100012ba:	2300      	movs	r3, #0
100012bc:	60fb      	str	r3, [r7, #12]
  if((Led == LED5) || (Led == LED6))
100012be:	79fb      	ldrb	r3, [r7, #7]
100012c0:	2b01      	cmp	r3, #1
100012c2:	d002      	beq.n	100012ca <BSP_LED_Off+0x1a>
100012c4:	79fb      	ldrb	r3, [r7, #7]
100012c6:	2b00      	cmp	r3, #0
100012c8:	d10d      	bne.n	100012e6 <BSP_LED_Off+0x36>
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
100012ca:	79fb      	ldrb	r3, [r7, #7]
100012cc:	4a12      	ldr	r2, [pc, #72]	; (10001318 <BSP_LED_Off+0x68>)
100012ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
100012d2:	79fb      	ldrb	r3, [r7, #7]
100012d4:	4a11      	ldr	r2, [pc, #68]	; (1000131c <BSP_LED_Off+0x6c>)
100012d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
100012da:	b29b      	uxth	r3, r3
100012dc:	2201      	movs	r2, #1
100012de:	4619      	mov	r1, r3
100012e0:	f000 fb98 	bl	10001a14 <HAL_GPIO_WritePin>
100012e4:	e012      	b.n	1000130c <BSP_LED_Off+0x5c>
  }
  else if ((Led == LED7) || (Led == LED8))
100012e6:	79fb      	ldrb	r3, [r7, #7]
100012e8:	2b02      	cmp	r3, #2
100012ea:	d002      	beq.n	100012f2 <BSP_LED_Off+0x42>
100012ec:	79fb      	ldrb	r3, [r7, #7]
100012ee:	2b03      	cmp	r3, #3
100012f0:	d10c      	bne.n	1000130c <BSP_LED_Off+0x5c>
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
100012f2:	79fb      	ldrb	r3, [r7, #7]
100012f4:	4a08      	ldr	r2, [pc, #32]	; (10001318 <BSP_LED_Off+0x68>)
100012f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
100012fa:	79fb      	ldrb	r3, [r7, #7]
100012fc:	4a07      	ldr	r2, [pc, #28]	; (1000131c <BSP_LED_Off+0x6c>)
100012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10001302:	b29b      	uxth	r3, r3
10001304:	2200      	movs	r2, #0
10001306:	4619      	mov	r1, r3
10001308:	f000 fb84 	bl	10001a14 <HAL_GPIO_WritePin>
  }

  return status;
1000130c:	68fb      	ldr	r3, [r7, #12]
}
1000130e:	4618      	mov	r0, r3
10001310:	3710      	adds	r7, #16
10001312:	46bd      	mov	sp, r7
10001314:	bd80      	pop	{r7, pc}
10001316:	bf00      	nop
10001318:	1002008c 	.word	0x1002008c
1000131c:	10007570 	.word	0x10007570

10001320 <BSP_LED_Toggle>:
  *            @arg  LED6
  *            @arg  LED7
  *            @arg  LED8
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
10001320:	b580      	push	{r7, lr}
10001322:	b084      	sub	sp, #16
10001324:	af00      	add	r7, sp, #0
10001326:	4603      	mov	r3, r0
10001328:	71fb      	strb	r3, [r7, #7]
  int32_t  status = BSP_ERROR_NONE;
1000132a:	2300      	movs	r3, #0
1000132c:	60fb      	str	r3, [r7, #12]
  /* Toggle GPIO Led Pin */
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
1000132e:	79fb      	ldrb	r3, [r7, #7]
10001330:	4a08      	ldr	r2, [pc, #32]	; (10001354 <BSP_LED_Toggle+0x34>)
10001332:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
10001336:	79fb      	ldrb	r3, [r7, #7]
10001338:	4907      	ldr	r1, [pc, #28]	; (10001358 <BSP_LED_Toggle+0x38>)
1000133a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
1000133e:	b29b      	uxth	r3, r3
10001340:	4619      	mov	r1, r3
10001342:	4610      	mov	r0, r2
10001344:	f000 fb7f 	bl	10001a46 <HAL_GPIO_TogglePin>
  return status;
10001348:	68fb      	ldr	r3, [r7, #12]
}
1000134a:	4618      	mov	r0, r3
1000134c:	3710      	adds	r7, #16
1000134e:	46bd      	mov	sp, r7
10001350:	bd80      	pop	{r7, pc}
10001352:	bf00      	nop
10001354:	1002008c 	.word	0x1002008c
10001358:	10007570 	.word	0x10007570

1000135c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
1000135c:	b480      	push	{r7}
1000135e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10001360:	4b0f      	ldr	r3, [pc, #60]	; (100013a0 <SystemInit+0x44>)
10001362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10001366:	4a0e      	ldr	r2, [pc, #56]	; (100013a0 <SystemInit+0x44>)
10001368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1000136c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10001370:	4b0c      	ldr	r3, [pc, #48]	; (100013a4 <SystemInit+0x48>)
10001372:	2200      	movs	r2, #0
10001374:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
10001376:	4b0b      	ldr	r3, [pc, #44]	; (100013a4 <SystemInit+0x48>)
10001378:	2200      	movs	r2, #0
1000137a:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
1000137c:	4b09      	ldr	r3, [pc, #36]	; (100013a4 <SystemInit+0x48>)
1000137e:	2200      	movs	r2, #0
10001380:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10001382:	4b08      	ldr	r3, [pc, #32]	; (100013a4 <SystemInit+0x48>)
10001384:	2200      	movs	r2, #0
10001386:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
10001388:	4b06      	ldr	r3, [pc, #24]	; (100013a4 <SystemInit+0x48>)
1000138a:	2200      	movs	r2, #0
1000138c:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
1000138e:	4b05      	ldr	r3, [pc, #20]	; (100013a4 <SystemInit+0x48>)
10001390:	2200      	movs	r2, #0
10001392:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10001394:	bf00      	nop
10001396:	46bd      	mov	sp, r7
10001398:	f85d 7b04 	ldr.w	r7, [sp], #4
1000139c:	4770      	bx	lr
1000139e:	bf00      	nop
100013a0:	e000ed00 	.word	0xe000ed00
100013a4:	5000d0c0 	.word	0x5000d0c0

100013a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
100013a8:	b580      	push	{r7, lr}
100013aa:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
100013ac:	2003      	movs	r0, #3
100013ae:	f000 f945 	bl	1000163c <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
100013b2:	f001 fee0 	bl	10003176 <HAL_RCC_GetSystemCoreClockFreq>
100013b6:	4603      	mov	r3, r0
100013b8:	4a07      	ldr	r2, [pc, #28]	; (100013d8 <HAL_Init+0x30>)
100013ba:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
100013bc:	200f      	movs	r0, #15
100013be:	f000 f80d 	bl	100013dc <HAL_InitTick>
100013c2:	4603      	mov	r3, r0
100013c4:	2b00      	cmp	r3, #0
100013c6:	d001      	beq.n	100013cc <HAL_Init+0x24>
  {
    return HAL_ERROR;
100013c8:	2301      	movs	r3, #1
100013ca:	e002      	b.n	100013d2 <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
100013cc:	f7ff fdee 	bl	10000fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
100013d0:	2300      	movs	r3, #0
}
100013d2:	4618      	mov	r0, r3
100013d4:	bd80      	pop	{r7, pc}
100013d6:	bf00      	nop
100013d8:	1002009c 	.word	0x1002009c

100013dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
100013dc:	b580      	push	{r7, lr}
100013de:	b082      	sub	sp, #8
100013e0:	af00      	add	r7, sp, #0
100013e2:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
100013e4:	4b15      	ldr	r3, [pc, #84]	; (1000143c <HAL_InitTick+0x60>)
100013e6:	781b      	ldrb	r3, [r3, #0]
100013e8:	2b00      	cmp	r3, #0
100013ea:	d101      	bne.n	100013f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
100013ec:	2301      	movs	r3, #1
100013ee:	e021      	b.n	10001434 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
100013f0:	4b13      	ldr	r3, [pc, #76]	; (10001440 <HAL_InitTick+0x64>)
100013f2:	681a      	ldr	r2, [r3, #0]
100013f4:	4b11      	ldr	r3, [pc, #68]	; (1000143c <HAL_InitTick+0x60>)
100013f6:	781b      	ldrb	r3, [r3, #0]
100013f8:	4619      	mov	r1, r3
100013fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
100013fe:	fbb3 f3f1 	udiv	r3, r3, r1
10001402:	fbb2 f3f3 	udiv	r3, r2, r3
10001406:	4618      	mov	r0, r3
10001408:	f000 f94d 	bl	100016a6 <HAL_SYSTICK_Config>
1000140c:	4603      	mov	r3, r0
1000140e:	2b00      	cmp	r3, #0
10001410:	d001      	beq.n	10001416 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
10001412:	2301      	movs	r3, #1
10001414:	e00e      	b.n	10001434 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10001416:	687b      	ldr	r3, [r7, #4]
10001418:	2b0f      	cmp	r3, #15
1000141a:	d80a      	bhi.n	10001432 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
1000141c:	2200      	movs	r2, #0
1000141e:	6879      	ldr	r1, [r7, #4]
10001420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
10001424:	f000 f915 	bl	10001652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
10001428:	4a06      	ldr	r2, [pc, #24]	; (10001444 <HAL_InitTick+0x68>)
1000142a:	687b      	ldr	r3, [r7, #4]
1000142c:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
1000142e:	2300      	movs	r3, #0
10001430:	e000      	b.n	10001434 <HAL_InitTick+0x58>
    return HAL_ERROR;
10001432:	2301      	movs	r3, #1
}
10001434:	4618      	mov	r0, r3
10001436:	3708      	adds	r7, #8
10001438:	46bd      	mov	sp, r7
1000143a:	bd80      	pop	{r7, pc}
1000143c:	100200a4 	.word	0x100200a4
10001440:	1002009c 	.word	0x1002009c
10001444:	100200a0 	.word	0x100200a0

10001448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10001448:	b480      	push	{r7}
1000144a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
1000144c:	4b06      	ldr	r3, [pc, #24]	; (10001468 <HAL_IncTick+0x20>)
1000144e:	781b      	ldrb	r3, [r3, #0]
10001450:	461a      	mov	r2, r3
10001452:	4b06      	ldr	r3, [pc, #24]	; (1000146c <HAL_IncTick+0x24>)
10001454:	681b      	ldr	r3, [r3, #0]
10001456:	4413      	add	r3, r2
10001458:	4a04      	ldr	r2, [pc, #16]	; (1000146c <HAL_IncTick+0x24>)
1000145a:	6013      	str	r3, [r2, #0]
}
1000145c:	bf00      	nop
1000145e:	46bd      	mov	sp, r7
10001460:	f85d 7b04 	ldr.w	r7, [sp], #4
10001464:	4770      	bx	lr
10001466:	bf00      	nop
10001468:	100200a4 	.word	0x100200a4
1000146c:	10020d20 	.word	0x10020d20

10001470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10001470:	b480      	push	{r7}
10001472:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
10001474:	4b03      	ldr	r3, [pc, #12]	; (10001484 <HAL_GetTick+0x14>)
10001476:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
10001478:	4618      	mov	r0, r3
1000147a:	46bd      	mov	sp, r7
1000147c:	f85d 7b04 	ldr.w	r7, [sp], #4
10001480:	4770      	bx	lr
10001482:	bf00      	nop
10001484:	10020d20 	.word	0x10020d20

10001488 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
10001488:	b480      	push	{r7}
1000148a:	af00      	add	r7, sp, #0
 return __STM32MP1xx_HAL_VERSION;
1000148c:	f04f 7383 	mov.w	r3, #17170432	; 0x1060000
}
10001490:	4618      	mov	r0, r3
10001492:	46bd      	mov	sp, r7
10001494:	f85d 7b04 	ldr.w	r7, [sp], #4
10001498:	4770      	bx	lr
	...

1000149c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
1000149c:	b480      	push	{r7}
1000149e:	b085      	sub	sp, #20
100014a0:	af00      	add	r7, sp, #0
100014a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
100014a4:	687b      	ldr	r3, [r7, #4]
100014a6:	f003 0307 	and.w	r3, r3, #7
100014aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
100014ac:	4b0c      	ldr	r3, [pc, #48]	; (100014e0 <__NVIC_SetPriorityGrouping+0x44>)
100014ae:	68db      	ldr	r3, [r3, #12]
100014b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
100014b2:	68ba      	ldr	r2, [r7, #8]
100014b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
100014b8:	4013      	ands	r3, r2
100014ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
100014bc:	68fb      	ldr	r3, [r7, #12]
100014be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
100014c0:	68bb      	ldr	r3, [r7, #8]
100014c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
100014c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
100014c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
100014cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
100014ce:	4a04      	ldr	r2, [pc, #16]	; (100014e0 <__NVIC_SetPriorityGrouping+0x44>)
100014d0:	68bb      	ldr	r3, [r7, #8]
100014d2:	60d3      	str	r3, [r2, #12]
}
100014d4:	bf00      	nop
100014d6:	3714      	adds	r7, #20
100014d8:	46bd      	mov	sp, r7
100014da:	f85d 7b04 	ldr.w	r7, [sp], #4
100014de:	4770      	bx	lr
100014e0:	e000ed00 	.word	0xe000ed00

100014e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
100014e4:	b480      	push	{r7}
100014e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
100014e8:	4b04      	ldr	r3, [pc, #16]	; (100014fc <__NVIC_GetPriorityGrouping+0x18>)
100014ea:	68db      	ldr	r3, [r3, #12]
100014ec:	0a1b      	lsrs	r3, r3, #8
100014ee:	f003 0307 	and.w	r3, r3, #7
}
100014f2:	4618      	mov	r0, r3
100014f4:	46bd      	mov	sp, r7
100014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
100014fa:	4770      	bx	lr
100014fc:	e000ed00 	.word	0xe000ed00

10001500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10001500:	b480      	push	{r7}
10001502:	b083      	sub	sp, #12
10001504:	af00      	add	r7, sp, #0
10001506:	4603      	mov	r3, r0
10001508:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
1000150a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000150e:	2b00      	cmp	r3, #0
10001510:	db0b      	blt.n	1000152a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10001512:	88fb      	ldrh	r3, [r7, #6]
10001514:	f003 021f 	and.w	r2, r3, #31
10001518:	4907      	ldr	r1, [pc, #28]	; (10001538 <__NVIC_EnableIRQ+0x38>)
1000151a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000151e:	095b      	lsrs	r3, r3, #5
10001520:	2001      	movs	r0, #1
10001522:	fa00 f202 	lsl.w	r2, r0, r2
10001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
1000152a:	bf00      	nop
1000152c:	370c      	adds	r7, #12
1000152e:	46bd      	mov	sp, r7
10001530:	f85d 7b04 	ldr.w	r7, [sp], #4
10001534:	4770      	bx	lr
10001536:	bf00      	nop
10001538:	e000e100 	.word	0xe000e100

1000153c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
1000153c:	b480      	push	{r7}
1000153e:	b083      	sub	sp, #12
10001540:	af00      	add	r7, sp, #0
10001542:	4603      	mov	r3, r0
10001544:	6039      	str	r1, [r7, #0]
10001546:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10001548:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000154c:	2b00      	cmp	r3, #0
1000154e:	db0a      	blt.n	10001566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10001550:	683b      	ldr	r3, [r7, #0]
10001552:	b2da      	uxtb	r2, r3
10001554:	490c      	ldr	r1, [pc, #48]	; (10001588 <__NVIC_SetPriority+0x4c>)
10001556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000155a:	0112      	lsls	r2, r2, #4
1000155c:	b2d2      	uxtb	r2, r2
1000155e:	440b      	add	r3, r1
10001560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
10001564:	e00a      	b.n	1000157c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10001566:	683b      	ldr	r3, [r7, #0]
10001568:	b2da      	uxtb	r2, r3
1000156a:	4908      	ldr	r1, [pc, #32]	; (1000158c <__NVIC_SetPriority+0x50>)
1000156c:	88fb      	ldrh	r3, [r7, #6]
1000156e:	f003 030f 	and.w	r3, r3, #15
10001572:	3b04      	subs	r3, #4
10001574:	0112      	lsls	r2, r2, #4
10001576:	b2d2      	uxtb	r2, r2
10001578:	440b      	add	r3, r1
1000157a:	761a      	strb	r2, [r3, #24]
}
1000157c:	bf00      	nop
1000157e:	370c      	adds	r7, #12
10001580:	46bd      	mov	sp, r7
10001582:	f85d 7b04 	ldr.w	r7, [sp], #4
10001586:	4770      	bx	lr
10001588:	e000e100 	.word	0xe000e100
1000158c:	e000ed00 	.word	0xe000ed00

10001590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10001590:	b480      	push	{r7}
10001592:	b089      	sub	sp, #36	; 0x24
10001594:	af00      	add	r7, sp, #0
10001596:	60f8      	str	r0, [r7, #12]
10001598:	60b9      	str	r1, [r7, #8]
1000159a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
1000159c:	68fb      	ldr	r3, [r7, #12]
1000159e:	f003 0307 	and.w	r3, r3, #7
100015a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
100015a4:	69fb      	ldr	r3, [r7, #28]
100015a6:	f1c3 0307 	rsb	r3, r3, #7
100015aa:	2b04      	cmp	r3, #4
100015ac:	bf28      	it	cs
100015ae:	2304      	movcs	r3, #4
100015b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
100015b2:	69fb      	ldr	r3, [r7, #28]
100015b4:	3304      	adds	r3, #4
100015b6:	2b06      	cmp	r3, #6
100015b8:	d902      	bls.n	100015c0 <NVIC_EncodePriority+0x30>
100015ba:	69fb      	ldr	r3, [r7, #28]
100015bc:	3b03      	subs	r3, #3
100015be:	e000      	b.n	100015c2 <NVIC_EncodePriority+0x32>
100015c0:	2300      	movs	r3, #0
100015c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
100015c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
100015c8:	69bb      	ldr	r3, [r7, #24]
100015ca:	fa02 f303 	lsl.w	r3, r2, r3
100015ce:	43da      	mvns	r2, r3
100015d0:	68bb      	ldr	r3, [r7, #8]
100015d2:	401a      	ands	r2, r3
100015d4:	697b      	ldr	r3, [r7, #20]
100015d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
100015d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
100015dc:	697b      	ldr	r3, [r7, #20]
100015de:	fa01 f303 	lsl.w	r3, r1, r3
100015e2:	43d9      	mvns	r1, r3
100015e4:	687b      	ldr	r3, [r7, #4]
100015e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
100015e8:	4313      	orrs	r3, r2
         );
}
100015ea:	4618      	mov	r0, r3
100015ec:	3724      	adds	r7, #36	; 0x24
100015ee:	46bd      	mov	sp, r7
100015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
100015f4:	4770      	bx	lr
	...

100015f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
100015f8:	b580      	push	{r7, lr}
100015fa:	b082      	sub	sp, #8
100015fc:	af00      	add	r7, sp, #0
100015fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10001600:	687b      	ldr	r3, [r7, #4]
10001602:	3b01      	subs	r3, #1
10001604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
10001608:	d301      	bcc.n	1000160e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
1000160a:	2301      	movs	r3, #1
1000160c:	e00f      	b.n	1000162e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1000160e:	4a0a      	ldr	r2, [pc, #40]	; (10001638 <SysTick_Config+0x40>)
10001610:	687b      	ldr	r3, [r7, #4]
10001612:	3b01      	subs	r3, #1
10001614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10001616:	210f      	movs	r1, #15
10001618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1000161c:	f7ff ff8e 	bl	1000153c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10001620:	4b05      	ldr	r3, [pc, #20]	; (10001638 <SysTick_Config+0x40>)
10001622:	2200      	movs	r2, #0
10001624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10001626:	4b04      	ldr	r3, [pc, #16]	; (10001638 <SysTick_Config+0x40>)
10001628:	2207      	movs	r2, #7
1000162a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
1000162c:	2300      	movs	r3, #0
}
1000162e:	4618      	mov	r0, r3
10001630:	3708      	adds	r7, #8
10001632:	46bd      	mov	sp, r7
10001634:	bd80      	pop	{r7, pc}
10001636:	bf00      	nop
10001638:	e000e010 	.word	0xe000e010

1000163c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
1000163c:	b580      	push	{r7, lr}
1000163e:	b082      	sub	sp, #8
10001640:	af00      	add	r7, sp, #0
10001642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
10001644:	6878      	ldr	r0, [r7, #4]
10001646:	f7ff ff29 	bl	1000149c <__NVIC_SetPriorityGrouping>
}
1000164a:	bf00      	nop
1000164c:	3708      	adds	r7, #8
1000164e:	46bd      	mov	sp, r7
10001650:	bd80      	pop	{r7, pc}

10001652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10001652:	b580      	push	{r7, lr}
10001654:	b086      	sub	sp, #24
10001656:	af00      	add	r7, sp, #0
10001658:	4603      	mov	r3, r0
1000165a:	60b9      	str	r1, [r7, #8]
1000165c:	607a      	str	r2, [r7, #4]
1000165e:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
10001660:	2300      	movs	r3, #0
10001662:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
10001664:	f7ff ff3e 	bl	100014e4 <__NVIC_GetPriorityGrouping>
10001668:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
1000166a:	687a      	ldr	r2, [r7, #4]
1000166c:	68b9      	ldr	r1, [r7, #8]
1000166e:	6978      	ldr	r0, [r7, #20]
10001670:	f7ff ff8e 	bl	10001590 <NVIC_EncodePriority>
10001674:	4602      	mov	r2, r0
10001676:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
1000167a:	4611      	mov	r1, r2
1000167c:	4618      	mov	r0, r3
1000167e:	f7ff ff5d 	bl	1000153c <__NVIC_SetPriority>
}
10001682:	bf00      	nop
10001684:	3718      	adds	r7, #24
10001686:	46bd      	mov	sp, r7
10001688:	bd80      	pop	{r7, pc}

1000168a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
1000168a:	b580      	push	{r7, lr}
1000168c:	b082      	sub	sp, #8
1000168e:	af00      	add	r7, sp, #0
10001690:	4603      	mov	r3, r0
10001692:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10001694:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10001698:	4618      	mov	r0, r3
1000169a:	f7ff ff31 	bl	10001500 <__NVIC_EnableIRQ>
}
1000169e:	bf00      	nop
100016a0:	3708      	adds	r7, #8
100016a2:	46bd      	mov	sp, r7
100016a4:	bd80      	pop	{r7, pc}

100016a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
100016a6:	b580      	push	{r7, lr}
100016a8:	b082      	sub	sp, #8
100016aa:	af00      	add	r7, sp, #0
100016ac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
100016ae:	6878      	ldr	r0, [r7, #4]
100016b0:	f7ff ffa2 	bl	100015f8 <SysTick_Config>
100016b4:	4603      	mov	r3, r0
}
100016b6:	4618      	mov	r0, r3
100016b8:	3708      	adds	r7, #8
100016ba:	46bd      	mov	sp, r7
100016bc:	bd80      	pop	{r7, pc}
	...

100016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
100016c0:	b480      	push	{r7}
100016c2:	b089      	sub	sp, #36	; 0x24
100016c4:	af00      	add	r7, sp, #0
100016c6:	6078      	str	r0, [r7, #4]
100016c8:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
100016ca:	4b8a      	ldr	r3, [pc, #552]	; (100018f4 <HAL_GPIO_Init+0x234>)
100016cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
100016ce:	2300      	movs	r3, #0
100016d0:	61fb      	str	r3, [r7, #28]
100016d2:	e191      	b.n	100019f8 <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
100016d4:	2201      	movs	r2, #1
100016d6:	69fb      	ldr	r3, [r7, #28]
100016d8:	fa02 f303 	lsl.w	r3, r2, r3
100016dc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
100016de:	683b      	ldr	r3, [r7, #0]
100016e0:	681b      	ldr	r3, [r3, #0]
100016e2:	693a      	ldr	r2, [r7, #16]
100016e4:	4013      	ands	r3, r2
100016e6:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
100016e8:	68fa      	ldr	r2, [r7, #12]
100016ea:	693b      	ldr	r3, [r7, #16]
100016ec:	429a      	cmp	r2, r3
100016ee:	f040 8180 	bne.w	100019f2 <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
100016f2:	683b      	ldr	r3, [r7, #0]
100016f4:	685b      	ldr	r3, [r3, #4]
100016f6:	2b02      	cmp	r3, #2
100016f8:	d003      	beq.n	10001702 <HAL_GPIO_Init+0x42>
100016fa:	683b      	ldr	r3, [r7, #0]
100016fc:	685b      	ldr	r3, [r3, #4]
100016fe:	2b12      	cmp	r3, #18
10001700:	d123      	bne.n	1000174a <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
10001702:	69fb      	ldr	r3, [r7, #28]
10001704:	08da      	lsrs	r2, r3, #3
10001706:	687b      	ldr	r3, [r7, #4]
10001708:	3208      	adds	r2, #8
1000170a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1000170e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
10001710:	69fb      	ldr	r3, [r7, #28]
10001712:	f003 0307 	and.w	r3, r3, #7
10001716:	009b      	lsls	r3, r3, #2
10001718:	220f      	movs	r2, #15
1000171a:	fa02 f303 	lsl.w	r3, r2, r3
1000171e:	43db      	mvns	r3, r3
10001720:	69ba      	ldr	r2, [r7, #24]
10001722:	4013      	ands	r3, r2
10001724:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
10001726:	683b      	ldr	r3, [r7, #0]
10001728:	691a      	ldr	r2, [r3, #16]
1000172a:	69fb      	ldr	r3, [r7, #28]
1000172c:	f003 0307 	and.w	r3, r3, #7
10001730:	009b      	lsls	r3, r3, #2
10001732:	fa02 f303 	lsl.w	r3, r2, r3
10001736:	69ba      	ldr	r2, [r7, #24]
10001738:	4313      	orrs	r3, r2
1000173a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
1000173c:	69fb      	ldr	r3, [r7, #28]
1000173e:	08da      	lsrs	r2, r3, #3
10001740:	687b      	ldr	r3, [r7, #4]
10001742:	3208      	adds	r2, #8
10001744:	69b9      	ldr	r1, [r7, #24]
10001746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
1000174a:	687b      	ldr	r3, [r7, #4]
1000174c:	681b      	ldr	r3, [r3, #0]
1000174e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
10001750:	69fb      	ldr	r3, [r7, #28]
10001752:	005b      	lsls	r3, r3, #1
10001754:	2203      	movs	r2, #3
10001756:	fa02 f303 	lsl.w	r3, r2, r3
1000175a:	43db      	mvns	r3, r3
1000175c:	69ba      	ldr	r2, [r7, #24]
1000175e:	4013      	ands	r3, r2
10001760:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
10001762:	683b      	ldr	r3, [r7, #0]
10001764:	685b      	ldr	r3, [r3, #4]
10001766:	f003 0203 	and.w	r2, r3, #3
1000176a:	69fb      	ldr	r3, [r7, #28]
1000176c:	005b      	lsls	r3, r3, #1
1000176e:	fa02 f303 	lsl.w	r3, r2, r3
10001772:	69ba      	ldr	r2, [r7, #24]
10001774:	4313      	orrs	r3, r2
10001776:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
10001778:	687b      	ldr	r3, [r7, #4]
1000177a:	69ba      	ldr	r2, [r7, #24]
1000177c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
1000177e:	683b      	ldr	r3, [r7, #0]
10001780:	685b      	ldr	r3, [r3, #4]
10001782:	2b01      	cmp	r3, #1
10001784:	d00b      	beq.n	1000179e <HAL_GPIO_Init+0xde>
10001786:	683b      	ldr	r3, [r7, #0]
10001788:	685b      	ldr	r3, [r3, #4]
1000178a:	2b02      	cmp	r3, #2
1000178c:	d007      	beq.n	1000179e <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
1000178e:	683b      	ldr	r3, [r7, #0]
10001790:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10001792:	2b11      	cmp	r3, #17
10001794:	d003      	beq.n	1000179e <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10001796:	683b      	ldr	r3, [r7, #0]
10001798:	685b      	ldr	r3, [r3, #4]
1000179a:	2b12      	cmp	r3, #18
1000179c:	d130      	bne.n	10001800 <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
1000179e:	687b      	ldr	r3, [r7, #4]
100017a0:	689b      	ldr	r3, [r3, #8]
100017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
100017a4:	69fb      	ldr	r3, [r7, #28]
100017a6:	005b      	lsls	r3, r3, #1
100017a8:	2203      	movs	r2, #3
100017aa:	fa02 f303 	lsl.w	r3, r2, r3
100017ae:	43db      	mvns	r3, r3
100017b0:	69ba      	ldr	r2, [r7, #24]
100017b2:	4013      	ands	r3, r2
100017b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
100017b6:	683b      	ldr	r3, [r7, #0]
100017b8:	68da      	ldr	r2, [r3, #12]
100017ba:	69fb      	ldr	r3, [r7, #28]
100017bc:	005b      	lsls	r3, r3, #1
100017be:	fa02 f303 	lsl.w	r3, r2, r3
100017c2:	69ba      	ldr	r2, [r7, #24]
100017c4:	4313      	orrs	r3, r2
100017c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
100017c8:	687b      	ldr	r3, [r7, #4]
100017ca:	69ba      	ldr	r2, [r7, #24]
100017cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
100017ce:	687b      	ldr	r3, [r7, #4]
100017d0:	685b      	ldr	r3, [r3, #4]
100017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
100017d4:	2201      	movs	r2, #1
100017d6:	69fb      	ldr	r3, [r7, #28]
100017d8:	fa02 f303 	lsl.w	r3, r2, r3
100017dc:	43db      	mvns	r3, r3
100017de:	69ba      	ldr	r2, [r7, #24]
100017e0:	4013      	ands	r3, r2
100017e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
100017e4:	683b      	ldr	r3, [r7, #0]
100017e6:	685b      	ldr	r3, [r3, #4]
100017e8:	091b      	lsrs	r3, r3, #4
100017ea:	f003 0201 	and.w	r2, r3, #1
100017ee:	69fb      	ldr	r3, [r7, #28]
100017f0:	fa02 f303 	lsl.w	r3, r2, r3
100017f4:	69ba      	ldr	r2, [r7, #24]
100017f6:	4313      	orrs	r3, r2
100017f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
100017fa:	687b      	ldr	r3, [r7, #4]
100017fc:	69ba      	ldr	r2, [r7, #24]
100017fe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
10001800:	687b      	ldr	r3, [r7, #4]
10001802:	68db      	ldr	r3, [r3, #12]
10001804:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
10001806:	69fb      	ldr	r3, [r7, #28]
10001808:	005b      	lsls	r3, r3, #1
1000180a:	2203      	movs	r2, #3
1000180c:	fa02 f303 	lsl.w	r3, r2, r3
10001810:	43db      	mvns	r3, r3
10001812:	69ba      	ldr	r2, [r7, #24]
10001814:	4013      	ands	r3, r2
10001816:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
10001818:	683b      	ldr	r3, [r7, #0]
1000181a:	689a      	ldr	r2, [r3, #8]
1000181c:	69fb      	ldr	r3, [r7, #28]
1000181e:	005b      	lsls	r3, r3, #1
10001820:	fa02 f303 	lsl.w	r3, r2, r3
10001824:	69ba      	ldr	r2, [r7, #24]
10001826:	4313      	orrs	r3, r2
10001828:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
1000182a:	687b      	ldr	r3, [r7, #4]
1000182c:	69ba      	ldr	r2, [r7, #24]
1000182e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
10001830:	683b      	ldr	r3, [r7, #0]
10001832:	685b      	ldr	r3, [r3, #4]
10001834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
10001838:	2b00      	cmp	r3, #0
1000183a:	f000 80da 	beq.w	100019f2 <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
1000183e:	4a2e      	ldr	r2, [pc, #184]	; (100018f8 <HAL_GPIO_Init+0x238>)
10001840:	69fb      	ldr	r3, [r7, #28]
10001842:	089b      	lsrs	r3, r3, #2
10001844:	3318      	adds	r3, #24
10001846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1000184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
1000184c:	69fb      	ldr	r3, [r7, #28]
1000184e:	f003 0303 	and.w	r3, r3, #3
10001852:	00db      	lsls	r3, r3, #3
10001854:	22ff      	movs	r2, #255	; 0xff
10001856:	fa02 f303 	lsl.w	r3, r2, r3
1000185a:	43db      	mvns	r3, r3
1000185c:	69ba      	ldr	r2, [r7, #24]
1000185e:	4013      	ands	r3, r2
10001860:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
10001862:	687b      	ldr	r3, [r7, #4]
10001864:	4a25      	ldr	r2, [pc, #148]	; (100018fc <HAL_GPIO_Init+0x23c>)
10001866:	4293      	cmp	r3, r2
10001868:	d05e      	beq.n	10001928 <HAL_GPIO_Init+0x268>
1000186a:	687b      	ldr	r3, [r7, #4]
1000186c:	4a24      	ldr	r2, [pc, #144]	; (10001900 <HAL_GPIO_Init+0x240>)
1000186e:	4293      	cmp	r3, r2
10001870:	d03d      	beq.n	100018ee <HAL_GPIO_Init+0x22e>
10001872:	687b      	ldr	r3, [r7, #4]
10001874:	4a23      	ldr	r2, [pc, #140]	; (10001904 <HAL_GPIO_Init+0x244>)
10001876:	4293      	cmp	r3, r2
10001878:	d037      	beq.n	100018ea <HAL_GPIO_Init+0x22a>
1000187a:	687b      	ldr	r3, [r7, #4]
1000187c:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
10001880:	d031      	beq.n	100018e6 <HAL_GPIO_Init+0x226>
10001882:	687b      	ldr	r3, [r7, #4]
10001884:	4a20      	ldr	r2, [pc, #128]	; (10001908 <HAL_GPIO_Init+0x248>)
10001886:	4293      	cmp	r3, r2
10001888:	d02b      	beq.n	100018e2 <HAL_GPIO_Init+0x222>
1000188a:	687b      	ldr	r3, [r7, #4]
1000188c:	4a1f      	ldr	r2, [pc, #124]	; (1000190c <HAL_GPIO_Init+0x24c>)
1000188e:	4293      	cmp	r3, r2
10001890:	d025      	beq.n	100018de <HAL_GPIO_Init+0x21e>
10001892:	687b      	ldr	r3, [r7, #4]
10001894:	4a1e      	ldr	r2, [pc, #120]	; (10001910 <HAL_GPIO_Init+0x250>)
10001896:	4293      	cmp	r3, r2
10001898:	d01f      	beq.n	100018da <HAL_GPIO_Init+0x21a>
1000189a:	687b      	ldr	r3, [r7, #4]
1000189c:	4a1d      	ldr	r2, [pc, #116]	; (10001914 <HAL_GPIO_Init+0x254>)
1000189e:	4293      	cmp	r3, r2
100018a0:	d019      	beq.n	100018d6 <HAL_GPIO_Init+0x216>
100018a2:	687b      	ldr	r3, [r7, #4]
100018a4:	4a1c      	ldr	r2, [pc, #112]	; (10001918 <HAL_GPIO_Init+0x258>)
100018a6:	4293      	cmp	r3, r2
100018a8:	d013      	beq.n	100018d2 <HAL_GPIO_Init+0x212>
100018aa:	687b      	ldr	r3, [r7, #4]
100018ac:	4a1b      	ldr	r2, [pc, #108]	; (1000191c <HAL_GPIO_Init+0x25c>)
100018ae:	4293      	cmp	r3, r2
100018b0:	d00d      	beq.n	100018ce <HAL_GPIO_Init+0x20e>
100018b2:	687b      	ldr	r3, [r7, #4]
100018b4:	4a1a      	ldr	r2, [pc, #104]	; (10001920 <HAL_GPIO_Init+0x260>)
100018b6:	4293      	cmp	r3, r2
100018b8:	d007      	beq.n	100018ca <HAL_GPIO_Init+0x20a>
100018ba:	687b      	ldr	r3, [r7, #4]
100018bc:	4a19      	ldr	r2, [pc, #100]	; (10001924 <HAL_GPIO_Init+0x264>)
100018be:	4293      	cmp	r3, r2
100018c0:	d101      	bne.n	100018c6 <HAL_GPIO_Init+0x206>
100018c2:	230b      	movs	r3, #11
100018c4:	e031      	b.n	1000192a <HAL_GPIO_Init+0x26a>
100018c6:	2319      	movs	r3, #25
100018c8:	e02f      	b.n	1000192a <HAL_GPIO_Init+0x26a>
100018ca:	230a      	movs	r3, #10
100018cc:	e02d      	b.n	1000192a <HAL_GPIO_Init+0x26a>
100018ce:	2309      	movs	r3, #9
100018d0:	e02b      	b.n	1000192a <HAL_GPIO_Init+0x26a>
100018d2:	2308      	movs	r3, #8
100018d4:	e029      	b.n	1000192a <HAL_GPIO_Init+0x26a>
100018d6:	2307      	movs	r3, #7
100018d8:	e027      	b.n	1000192a <HAL_GPIO_Init+0x26a>
100018da:	2306      	movs	r3, #6
100018dc:	e025      	b.n	1000192a <HAL_GPIO_Init+0x26a>
100018de:	2305      	movs	r3, #5
100018e0:	e023      	b.n	1000192a <HAL_GPIO_Init+0x26a>
100018e2:	2304      	movs	r3, #4
100018e4:	e021      	b.n	1000192a <HAL_GPIO_Init+0x26a>
100018e6:	2303      	movs	r3, #3
100018e8:	e01f      	b.n	1000192a <HAL_GPIO_Init+0x26a>
100018ea:	2302      	movs	r3, #2
100018ec:	e01d      	b.n	1000192a <HAL_GPIO_Init+0x26a>
100018ee:	2301      	movs	r3, #1
100018f0:	e01b      	b.n	1000192a <HAL_GPIO_Init+0x26a>
100018f2:	bf00      	nop
100018f4:	5000d0c0 	.word	0x5000d0c0
100018f8:	5000d000 	.word	0x5000d000
100018fc:	50002000 	.word	0x50002000
10001900:	50003000 	.word	0x50003000
10001904:	50004000 	.word	0x50004000
10001908:	50006000 	.word	0x50006000
1000190c:	50007000 	.word	0x50007000
10001910:	50008000 	.word	0x50008000
10001914:	50009000 	.word	0x50009000
10001918:	5000a000 	.word	0x5000a000
1000191c:	5000b000 	.word	0x5000b000
10001920:	5000c000 	.word	0x5000c000
10001924:	54004000 	.word	0x54004000
10001928:	2300      	movs	r3, #0
1000192a:	69fa      	ldr	r2, [r7, #28]
1000192c:	f002 0203 	and.w	r2, r2, #3
10001930:	00d2      	lsls	r2, r2, #3
10001932:	4093      	lsls	r3, r2
10001934:	461a      	mov	r2, r3
10001936:	69bb      	ldr	r3, [r7, #24]
10001938:	4313      	orrs	r3, r2
1000193a:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
1000193c:	4934      	ldr	r1, [pc, #208]	; (10001a10 <HAL_GPIO_Init+0x350>)
1000193e:	69fb      	ldr	r3, [r7, #28]
10001940:	089b      	lsrs	r3, r3, #2
10001942:	3318      	adds	r3, #24
10001944:	69ba      	ldr	r2, [r7, #24]
10001946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
1000194a:	697b      	ldr	r3, [r7, #20]
1000194c:	681b      	ldr	r3, [r3, #0]
1000194e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10001950:	68fb      	ldr	r3, [r7, #12]
10001952:	43db      	mvns	r3, r3
10001954:	69ba      	ldr	r2, [r7, #24]
10001956:	4013      	ands	r3, r2
10001958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
1000195a:	683b      	ldr	r3, [r7, #0]
1000195c:	685b      	ldr	r3, [r3, #4]
1000195e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
10001962:	2b00      	cmp	r3, #0
10001964:	d003      	beq.n	1000196e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
10001966:	69ba      	ldr	r2, [r7, #24]
10001968:	68fb      	ldr	r3, [r7, #12]
1000196a:	4313      	orrs	r3, r2
1000196c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
1000196e:	697b      	ldr	r3, [r7, #20]
10001970:	69ba      	ldr	r2, [r7, #24]
10001972:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
10001974:	697b      	ldr	r3, [r7, #20]
10001976:	685b      	ldr	r3, [r3, #4]
10001978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
1000197a:	68fb      	ldr	r3, [r7, #12]
1000197c:	43db      	mvns	r3, r3
1000197e:	69ba      	ldr	r2, [r7, #24]
10001980:	4013      	ands	r3, r2
10001982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
10001984:	683b      	ldr	r3, [r7, #0]
10001986:	685b      	ldr	r3, [r3, #4]
10001988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
1000198c:	2b00      	cmp	r3, #0
1000198e:	d003      	beq.n	10001998 <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
10001990:	69ba      	ldr	r2, [r7, #24]
10001992:	68fb      	ldr	r3, [r7, #12]
10001994:	4313      	orrs	r3, r2
10001996:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
10001998:	697b      	ldr	r3, [r7, #20]
1000199a:	69ba      	ldr	r2, [r7, #24]
1000199c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
1000199e:	4b1c      	ldr	r3, [pc, #112]	; (10001a10 <HAL_GPIO_Init+0x350>)
100019a0:	681b      	ldr	r3, [r3, #0]
100019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
100019a4:	68fb      	ldr	r3, [r7, #12]
100019a6:	43db      	mvns	r3, r3
100019a8:	69ba      	ldr	r2, [r7, #24]
100019aa:	4013      	ands	r3, r2
100019ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
100019ae:	683b      	ldr	r3, [r7, #0]
100019b0:	685b      	ldr	r3, [r3, #4]
100019b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
100019b6:	2b00      	cmp	r3, #0
100019b8:	d003      	beq.n	100019c2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
100019ba:	69ba      	ldr	r2, [r7, #24]
100019bc:	68fb      	ldr	r3, [r7, #12]
100019be:	4313      	orrs	r3, r2
100019c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
100019c2:	4a13      	ldr	r2, [pc, #76]	; (10001a10 <HAL_GPIO_Init+0x350>)
100019c4:	69bb      	ldr	r3, [r7, #24]
100019c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
100019c8:	4b11      	ldr	r3, [pc, #68]	; (10001a10 <HAL_GPIO_Init+0x350>)
100019ca:	685b      	ldr	r3, [r3, #4]
100019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
100019ce:	68fb      	ldr	r3, [r7, #12]
100019d0:	43db      	mvns	r3, r3
100019d2:	69ba      	ldr	r2, [r7, #24]
100019d4:	4013      	ands	r3, r2
100019d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
100019d8:	683b      	ldr	r3, [r7, #0]
100019da:	685b      	ldr	r3, [r3, #4]
100019dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
100019e0:	2b00      	cmp	r3, #0
100019e2:	d003      	beq.n	100019ec <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
100019e4:	69ba      	ldr	r2, [r7, #24]
100019e6:	68fb      	ldr	r3, [r7, #12]
100019e8:	4313      	orrs	r3, r2
100019ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
100019ec:	4a08      	ldr	r2, [pc, #32]	; (10001a10 <HAL_GPIO_Init+0x350>)
100019ee:	69bb      	ldr	r3, [r7, #24]
100019f0:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
100019f2:	69fb      	ldr	r3, [r7, #28]
100019f4:	3301      	adds	r3, #1
100019f6:	61fb      	str	r3, [r7, #28]
100019f8:	69fb      	ldr	r3, [r7, #28]
100019fa:	2b0f      	cmp	r3, #15
100019fc:	f67f ae6a 	bls.w	100016d4 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
10001a00:	bf00      	nop
10001a02:	bf00      	nop
10001a04:	3724      	adds	r7, #36	; 0x24
10001a06:	46bd      	mov	sp, r7
10001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a0c:	4770      	bx	lr
10001a0e:	bf00      	nop
10001a10:	5000d000 	.word	0x5000d000

10001a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
10001a14:	b480      	push	{r7}
10001a16:	b083      	sub	sp, #12
10001a18:	af00      	add	r7, sp, #0
10001a1a:	6078      	str	r0, [r7, #4]
10001a1c:	460b      	mov	r3, r1
10001a1e:	807b      	strh	r3, [r7, #2]
10001a20:	4613      	mov	r3, r2
10001a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10001a24:	787b      	ldrb	r3, [r7, #1]
10001a26:	2b00      	cmp	r3, #0
10001a28:	d003      	beq.n	10001a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
10001a2a:	887a      	ldrh	r2, [r7, #2]
10001a2c:	687b      	ldr	r3, [r7, #4]
10001a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
10001a30:	e003      	b.n	10001a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
10001a32:	887b      	ldrh	r3, [r7, #2]
10001a34:	041a      	lsls	r2, r3, #16
10001a36:	687b      	ldr	r3, [r7, #4]
10001a38:	619a      	str	r2, [r3, #24]
}
10001a3a:	bf00      	nop
10001a3c:	370c      	adds	r7, #12
10001a3e:	46bd      	mov	sp, r7
10001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a44:	4770      	bx	lr

10001a46 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
10001a46:	b480      	push	{r7}
10001a48:	b083      	sub	sp, #12
10001a4a:	af00      	add	r7, sp, #0
10001a4c:	6078      	str	r0, [r7, #4]
10001a4e:	460b      	mov	r3, r1
10001a50:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
10001a52:	687b      	ldr	r3, [r7, #4]
10001a54:	695a      	ldr	r2, [r3, #20]
10001a56:	887b      	ldrh	r3, [r7, #2]
10001a58:	4013      	ands	r3, r2
10001a5a:	2b00      	cmp	r3, #0
10001a5c:	d003      	beq.n	10001a66 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
10001a5e:	887a      	ldrh	r2, [r7, #2]
10001a60:	687b      	ldr	r3, [r7, #4]
10001a62:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
10001a64:	e002      	b.n	10001a6c <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
10001a66:	887a      	ldrh	r2, [r7, #2]
10001a68:	687b      	ldr	r3, [r7, #4]
10001a6a:	619a      	str	r2, [r3, #24]
}
10001a6c:	bf00      	nop
10001a6e:	370c      	adds	r7, #12
10001a70:	46bd      	mov	sp, r7
10001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a76:	4770      	bx	lr

10001a78 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
10001a78:	b480      	push	{r7}
10001a7a:	b083      	sub	sp, #12
10001a7c:	af00      	add	r7, sp, #0
10001a7e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
10001a80:	f04f 4298 	mov.w	r2, #1275068416	; 0x4c000000
10001a84:	687b      	ldr	r3, [r7, #4]
10001a86:	3320      	adds	r3, #32
10001a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10001a8c:	4a05      	ldr	r2, [pc, #20]	; (10001aa4 <HAL_HSEM_FastTake+0x2c>)
10001a8e:	4293      	cmp	r3, r2
10001a90:	d101      	bne.n	10001a96 <HAL_HSEM_FastTake+0x1e>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
10001a92:	2300      	movs	r3, #0
10001a94:	e000      	b.n	10001a98 <HAL_HSEM_FastTake+0x20>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
10001a96:	2301      	movs	r3, #1
}
10001a98:	4618      	mov	r0, r3
10001a9a:	370c      	adds	r7, #12
10001a9c:	46bd      	mov	sp, r7
10001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001aa2:	4770      	bx	lr
10001aa4:	80000200 	.word	0x80000200

10001aa8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
10001aa8:	b480      	push	{r7}
10001aaa:	b083      	sub	sp, #12
10001aac:	af00      	add	r7, sp, #0
10001aae:	6078      	str	r0, [r7, #4]
10001ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HSEM_SEMID(SemID));
  assert_param(IS_HSEM_PROCESSID(ProcessID));

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
10001ab2:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
10001ab6:	683b      	ldr	r3, [r7, #0]
10001ab8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
10001abc:	687b      	ldr	r3, [r7, #4]
10001abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

}
10001ac2:	bf00      	nop
10001ac4:	370c      	adds	r7, #12
10001ac6:	46bd      	mov	sp, r7
10001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
10001acc:	4770      	bx	lr
	...

10001ad0 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
10001ad0:	b580      	push	{r7, lr}
10001ad2:	b084      	sub	sp, #16
10001ad4:	af00      	add	r7, sp, #0
10001ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
10001ad8:	2300      	movs	r3, #0
10001ada:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
10001adc:	687b      	ldr	r3, [r7, #4]
10001ade:	2b00      	cmp	r3, #0
10001ae0:	d01e      	beq.n	10001b20 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

#if defined(CORE_CM4)
    IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10001ae2:	4b13      	ldr	r3, [pc, #76]	; (10001b30 <HAL_IPCC_Init+0x60>)
10001ae4:	60bb      	str	r3, [r7, #8]
#else
    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

    if (hipcc->State == HAL_IPCC_STATE_RESET)
10001ae6:	687b      	ldr	r3, [r7, #4]
10001ae8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
10001aec:	b2db      	uxtb	r3, r3
10001aee:	2b00      	cmp	r3, #0
10001af0:	d102      	bne.n	10001af8 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
10001af2:	6878      	ldr	r0, [r7, #4]
10001af4:	f7ff fa62 	bl	10000fbc <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
10001af8:	68b8      	ldr	r0, [r7, #8]
10001afa:	f000 f99d 	bl	10001e38 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
10001afe:	68bb      	ldr	r3, [r7, #8]
10001b00:	681b      	ldr	r3, [r3, #0]
10001b02:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
10001b06:	68bb      	ldr	r3, [r7, #8]
10001b08:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
10001b0a:	6878      	ldr	r0, [r7, #4]
10001b0c:	f000 f96e 	bl	10001dec <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
10001b10:	687b      	ldr	r3, [r7, #4]
10001b12:	2200      	movs	r2, #0
10001b14:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
10001b16:	687b      	ldr	r3, [r7, #4]
10001b18:	2201      	movs	r2, #1
10001b1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
10001b1e:	e001      	b.n	10001b24 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
10001b20:	2301      	movs	r3, #1
10001b22:	73fb      	strb	r3, [r7, #15]
  }

  return err;
10001b24:	7bfb      	ldrb	r3, [r7, #15]
}
10001b26:	4618      	mov	r0, r3
10001b28:	3710      	adds	r7, #16
10001b2a:	46bd      	mov	sp, r7
10001b2c:	bd80      	pop	{r7, pc}
10001b2e:	bf00      	nop
10001b30:	4c001010 	.word	0x4c001010

10001b34 <HAL_IPCC_ActivateNotification>:
  * @param  ChannelDir Channel direction
  * @param  cb Interrupt callback
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_ActivateNotification(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir, ChannelCb cb)
{
10001b34:	b580      	push	{r7, lr}
10001b36:	b086      	sub	sp, #24
10001b38:	af00      	add	r7, sp, #0
10001b3a:	60f8      	str	r0, [r7, #12]
10001b3c:	60b9      	str	r1, [r7, #8]
10001b3e:	603b      	str	r3, [r7, #0]
10001b40:	4613      	mov	r3, r2
10001b42:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
10001b44:	2300      	movs	r3, #0
10001b46:	75fb      	strb	r3, [r7, #23]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
10001b48:	68fb      	ldr	r3, [r7, #12]
10001b4a:	2b00      	cmp	r3, #0
10001b4c:	d039      	beq.n	10001bc2 <HAL_IPCC_ActivateNotification+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    /* Check IPCC state */
    if (hipcc->State == HAL_IPCC_STATE_READY)
10001b4e:	68fb      	ldr	r3, [r7, #12]
10001b50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
10001b54:	b2db      	uxtb	r3, r3
10001b56:	2b01      	cmp	r3, #1
10001b58:	d130      	bne.n	10001bbc <HAL_IPCC_ActivateNotification+0x88>
    {
      /* Set callback and register masking information */
      if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10001b5a:	79fb      	ldrb	r3, [r7, #7]
10001b5c:	2b00      	cmp	r3, #0
10001b5e:	d113      	bne.n	10001b88 <HAL_IPCC_ActivateNotification+0x54>
      {
        hipcc->ChannelCallbackTx[ChannelIndex] = cb;
10001b60:	68fa      	ldr	r2, [r7, #12]
10001b62:	68bb      	ldr	r3, [r7, #8]
10001b64:	3306      	adds	r3, #6
10001b66:	009b      	lsls	r3, r3, #2
10001b68:	4413      	add	r3, r2
10001b6a:	683a      	ldr	r2, [r7, #0]
10001b6c:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10001b6e:	68fb      	ldr	r3, [r7, #12]
10001b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10001b72:	68bb      	ldr	r3, [r7, #8]
10001b74:	f003 030f 	and.w	r3, r3, #15
10001b78:	f44f 3180 	mov.w	r1, #65536	; 0x10000
10001b7c:	fa01 f303 	lsl.w	r3, r1, r3
10001b80:	431a      	orrs	r2, r3
10001b82:	68fb      	ldr	r3, [r7, #12]
10001b84:	635a      	str	r2, [r3, #52]	; 0x34
10001b86:	e010      	b.n	10001baa <HAL_IPCC_ActivateNotification+0x76>
      }
      else
      {
        hipcc->ChannelCallbackRx[ChannelIndex] = cb;
10001b88:	68fa      	ldr	r2, [r7, #12]
10001b8a:	68bb      	ldr	r3, [r7, #8]
10001b8c:	009b      	lsls	r3, r3, #2
10001b8e:	4413      	add	r3, r2
10001b90:	683a      	ldr	r2, [r7, #0]
10001b92:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10001b94:	68fb      	ldr	r3, [r7, #12]
10001b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10001b98:	68bb      	ldr	r3, [r7, #8]
10001b9a:	f003 030f 	and.w	r3, r3, #15
10001b9e:	2101      	movs	r1, #1
10001ba0:	fa01 f303 	lsl.w	r3, r1, r3
10001ba4:	431a      	orrs	r2, r3
10001ba6:	68fb      	ldr	r3, [r7, #12]
10001ba8:	635a      	str	r2, [r3, #52]	; 0x34
      }

      /* Unmask only the channels in reception (Transmission channel mask/unmask is done in HAL_IPCC_NotifyCPU) */
      if (ChannelDir == IPCC_CHANNEL_DIR_RX)
10001baa:	79fb      	ldrb	r3, [r7, #7]
10001bac:	2b01      	cmp	r3, #1
10001bae:	d10a      	bne.n	10001bc6 <HAL_IPCC_ActivateNotification+0x92>
      {
        IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
10001bb0:	79fb      	ldrb	r3, [r7, #7]
10001bb2:	4619      	mov	r1, r3
10001bb4:	68b8      	ldr	r0, [r7, #8]
10001bb6:	f000 f8eb 	bl	10001d90 <IPCC_UnmaskInterrupt>
10001bba:	e004      	b.n	10001bc6 <HAL_IPCC_ActivateNotification+0x92>
      }
    }
    else
    {
      err = HAL_ERROR;
10001bbc:	2301      	movs	r3, #1
10001bbe:	75fb      	strb	r3, [r7, #23]
10001bc0:	e001      	b.n	10001bc6 <HAL_IPCC_ActivateNotification+0x92>
    }
  }
  else
  {
    err = HAL_ERROR;
10001bc2:	2301      	movs	r3, #1
10001bc4:	75fb      	strb	r3, [r7, #23]
  }
  return err;
10001bc6:	7dfb      	ldrb	r3, [r7, #23]
}
10001bc8:	4618      	mov	r0, r3
10001bca:	3718      	adds	r7, #24
10001bcc:	46bd      	mov	sp, r7
10001bce:	bd80      	pop	{r7, pc}

10001bd0 <HAL_IPCC_GetChannelStatus>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval Channel status
  */
IPCC_CHANNELStatusTypeDef HAL_IPCC_GetChannelStatus(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10001bd0:	b480      	push	{r7}
10001bd2:	b089      	sub	sp, #36	; 0x24
10001bd4:	af00      	add	r7, sp, #0
10001bd6:	60f8      	str	r0, [r7, #12]
10001bd8:	60b9      	str	r1, [r7, #8]
10001bda:	4613      	mov	r3, r2
10001bdc:	71fb      	strb	r3, [r7, #7]
  uint32_t channel_state;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10001bde:	4b14      	ldr	r3, [pc, #80]	; (10001c30 <HAL_IPCC_GetChannelStatus+0x60>)
10001be0:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
10001be2:	4b14      	ldr	r3, [pc, #80]	; (10001c34 <HAL_IPCC_GetChannelStatus+0x64>)
10001be4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Read corresponding channel depending of the MCU and the direction */
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10001be6:	79fb      	ldrb	r3, [r7, #7]
10001be8:	2b00      	cmp	r3, #0
10001bea:	d10a      	bne.n	10001c02 <HAL_IPCC_GetChannelStatus+0x32>
  {
    channel_state = (currentInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10001bec:	69bb      	ldr	r3, [r7, #24]
10001bee:	68da      	ldr	r2, [r3, #12]
10001bf0:	68bb      	ldr	r3, [r7, #8]
10001bf2:	f003 030f 	and.w	r3, r3, #15
10001bf6:	2101      	movs	r1, #1
10001bf8:	fa01 f303 	lsl.w	r3, r1, r3
10001bfc:	4013      	ands	r3, r2
10001bfe:	61fb      	str	r3, [r7, #28]
10001c00:	e009      	b.n	10001c16 <HAL_IPCC_GetChannelStatus+0x46>
  }
  else
  {
    channel_state = (otherInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10001c02:	697b      	ldr	r3, [r7, #20]
10001c04:	68da      	ldr	r2, [r3, #12]
10001c06:	68bb      	ldr	r3, [r7, #8]
10001c08:	f003 030f 	and.w	r3, r3, #15
10001c0c:	2101      	movs	r1, #1
10001c0e:	fa01 f303 	lsl.w	r3, r1, r3
10001c12:	4013      	ands	r3, r2
10001c14:	61fb      	str	r3, [r7, #28]
  }

  return (channel_state == 0UL) ? IPCC_CHANNEL_STATUS_FREE : IPCC_CHANNEL_STATUS_OCCUPIED ;
10001c16:	69fb      	ldr	r3, [r7, #28]
10001c18:	2b00      	cmp	r3, #0
10001c1a:	bf14      	ite	ne
10001c1c:	2301      	movne	r3, #1
10001c1e:	2300      	moveq	r3, #0
10001c20:	b2db      	uxtb	r3, r3
}
10001c22:	4618      	mov	r0, r3
10001c24:	3724      	adds	r7, #36	; 0x24
10001c26:	46bd      	mov	sp, r7
10001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c2c:	4770      	bx	lr
10001c2e:	bf00      	nop
10001c30:	4c001010 	.word	0x4c001010
10001c34:	4c001000 	.word	0x4c001000

10001c38 <HAL_IPCC_NotifyCPU>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_NotifyCPU(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10001c38:	b580      	push	{r7, lr}
10001c3a:	b088      	sub	sp, #32
10001c3c:	af00      	add	r7, sp, #0
10001c3e:	60f8      	str	r0, [r7, #12]
10001c40:	60b9      	str	r1, [r7, #8]
10001c42:	4613      	mov	r3, r2
10001c44:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
10001c46:	2300      	movs	r3, #0
10001c48:	77fb      	strb	r3, [r7, #31]
  uint32_t mask;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10001c4a:	4b1d      	ldr	r3, [pc, #116]	; (10001cc0 <HAL_IPCC_NotifyCPU+0x88>)
10001c4c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Check if IPCC is initiliased */
  if (hipcc->State == HAL_IPCC_STATE_READY)
10001c4e:	68fb      	ldr	r3, [r7, #12]
10001c50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
10001c54:	b2db      	uxtb	r3, r3
10001c56:	2b01      	cmp	r3, #1
10001c58:	d12a      	bne.n	10001cb0 <HAL_IPCC_NotifyCPU+0x78>
  {
    /* For IPCC_CHANNEL_DIR_TX, set the status. For IPCC_CHANNEL_DIR_RX, clear the status */
    currentInstance->SCR |= ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_SCR_CH1S : IPCC_SCR_CH1C) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
10001c5a:	69bb      	ldr	r3, [r7, #24]
10001c5c:	689a      	ldr	r2, [r3, #8]
10001c5e:	79fb      	ldrb	r3, [r7, #7]
10001c60:	2b00      	cmp	r3, #0
10001c62:	d102      	bne.n	10001c6a <HAL_IPCC_NotifyCPU+0x32>
10001c64:	f44f 3180 	mov.w	r1, #65536	; 0x10000
10001c68:	e000      	b.n	10001c6c <HAL_IPCC_NotifyCPU+0x34>
10001c6a:	2101      	movs	r1, #1
10001c6c:	68bb      	ldr	r3, [r7, #8]
10001c6e:	f003 030f 	and.w	r3, r3, #15
10001c72:	fa01 f303 	lsl.w	r3, r1, r3
10001c76:	431a      	orrs	r2, r3
10001c78:	69bb      	ldr	r3, [r7, #24]
10001c7a:	609a      	str	r2, [r3, #8]

    /* Unmask interrupt if the callback is requested */
    mask = ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_MR_CH1FM_Msk : IPCC_MR_CH1OM_Msk) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
10001c7c:	79fb      	ldrb	r3, [r7, #7]
10001c7e:	2b00      	cmp	r3, #0
10001c80:	d102      	bne.n	10001c88 <HAL_IPCC_NotifyCPU+0x50>
10001c82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
10001c86:	e000      	b.n	10001c8a <HAL_IPCC_NotifyCPU+0x52>
10001c88:	2201      	movs	r2, #1
10001c8a:	68bb      	ldr	r3, [r7, #8]
10001c8c:	f003 030f 	and.w	r3, r3, #15
10001c90:	fa02 f303 	lsl.w	r3, r2, r3
10001c94:	617b      	str	r3, [r7, #20]
    if ((hipcc->callbackRequest & mask) == mask)
10001c96:	68fb      	ldr	r3, [r7, #12]
10001c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10001c9a:	697b      	ldr	r3, [r7, #20]
10001c9c:	4013      	ands	r3, r2
10001c9e:	697a      	ldr	r2, [r7, #20]
10001ca0:	429a      	cmp	r2, r3
10001ca2:	d107      	bne.n	10001cb4 <HAL_IPCC_NotifyCPU+0x7c>
    {
      IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
10001ca4:	79fb      	ldrb	r3, [r7, #7]
10001ca6:	4619      	mov	r1, r3
10001ca8:	68b8      	ldr	r0, [r7, #8]
10001caa:	f000 f871 	bl	10001d90 <IPCC_UnmaskInterrupt>
10001cae:	e001      	b.n	10001cb4 <HAL_IPCC_NotifyCPU+0x7c>
    }
  }
  else
  {
    err = HAL_ERROR;
10001cb0:	2301      	movs	r3, #1
10001cb2:	77fb      	strb	r3, [r7, #31]
  }

  return err;
10001cb4:	7ffb      	ldrb	r3, [r7, #31]
}
10001cb6:	4618      	mov	r0, r3
10001cb8:	3720      	adds	r7, #32
10001cba:	46bd      	mov	sp, r7
10001cbc:	bd80      	pop	{r7, pc}
10001cbe:	bf00      	nop
10001cc0:	4c001010 	.word	0x4c001010

10001cc4 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
10001cc4:	b580      	push	{r7, lr}
10001cc6:	b088      	sub	sp, #32
10001cc8:	af00      	add	r7, sp, #0
10001cca:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
10001ccc:	2300      	movs	r3, #0
10001cce:	61bb      	str	r3, [r7, #24]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10001cd0:	4b20      	ldr	r3, [pc, #128]	; (10001d54 <HAL_IPCC_RX_IRQHandler+0x90>)
10001cd2:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
10001cd4:	4b20      	ldr	r3, [pc, #128]	; (10001d58 <HAL_IPCC_RX_IRQHandler+0x94>)
10001cd6:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
#endif

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
10001cd8:	697b      	ldr	r3, [r7, #20]
10001cda:	685b      	ldr	r3, [r3, #4]
10001cdc:	43db      	mvns	r3, r3
10001cde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10001ce2:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
10001ce4:	693b      	ldr	r3, [r7, #16]
10001ce6:	68db      	ldr	r3, [r3, #12]
10001ce8:	69fa      	ldr	r2, [r7, #28]
10001cea:	4013      	ands	r3, r2
10001cec:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10001cee:	e029      	b.n	10001d44 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
10001cf0:	69bb      	ldr	r3, [r7, #24]
10001cf2:	f003 030f 	and.w	r3, r3, #15
10001cf6:	2201      	movs	r2, #1
10001cf8:	fa02 f303 	lsl.w	r3, r2, r3
10001cfc:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
10001cfe:	69fa      	ldr	r2, [r7, #28]
10001d00:	68fb      	ldr	r3, [r7, #12]
10001d02:	4013      	ands	r3, r2
10001d04:	2b00      	cmp	r3, #0
10001d06:	d01a      	beq.n	10001d3e <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
10001d08:	697b      	ldr	r3, [r7, #20]
10001d0a:	685a      	ldr	r2, [r3, #4]
10001d0c:	68fb      	ldr	r3, [r7, #12]
10001d0e:	431a      	orrs	r2, r3
10001d10:	697b      	ldr	r3, [r7, #20]
10001d12:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
10001d14:	687a      	ldr	r2, [r7, #4]
10001d16:	69bb      	ldr	r3, [r7, #24]
10001d18:	009b      	lsls	r3, r3, #2
10001d1a:	4413      	add	r3, r2
10001d1c:	685b      	ldr	r3, [r3, #4]
10001d1e:	2b00      	cmp	r3, #0
10001d20:	d008      	beq.n	10001d34 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
10001d22:	687a      	ldr	r2, [r7, #4]
10001d24:	69bb      	ldr	r3, [r7, #24]
10001d26:	009b      	lsls	r3, r3, #2
10001d28:	4413      	add	r3, r2
10001d2a:	685b      	ldr	r3, [r3, #4]
10001d2c:	2201      	movs	r2, #1
10001d2e:	69b9      	ldr	r1, [r7, #24]
10001d30:	6878      	ldr	r0, [r7, #4]
10001d32:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
10001d34:	68fb      	ldr	r3, [r7, #12]
10001d36:	43db      	mvns	r3, r3
10001d38:	69fa      	ldr	r2, [r7, #28]
10001d3a:	4013      	ands	r3, r2
10001d3c:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
10001d3e:	69bb      	ldr	r3, [r7, #24]
10001d40:	3301      	adds	r3, #1
10001d42:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10001d44:	69fb      	ldr	r3, [r7, #28]
10001d46:	2b00      	cmp	r3, #0
10001d48:	d1d2      	bne.n	10001cf0 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
10001d4a:	bf00      	nop
10001d4c:	bf00      	nop
10001d4e:	3720      	adds	r7, #32
10001d50:	46bd      	mov	sp, r7
10001d52:	bd80      	pop	{r7, pc}
10001d54:	4c001010 	.word	0x4c001010
10001d58:	4c001000 	.word	0x4c001000

10001d5c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10001d5c:	b480      	push	{r7}
10001d5e:	b085      	sub	sp, #20
10001d60:	af00      	add	r7, sp, #0
10001d62:	60f8      	str	r0, [r7, #12]
10001d64:	60b9      	str	r1, [r7, #8]
10001d66:	4613      	mov	r3, r2
10001d68:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
10001d6a:	bf00      	nop
10001d6c:	3714      	adds	r7, #20
10001d6e:	46bd      	mov	sp, r7
10001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d74:	4770      	bx	lr

10001d76 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10001d76:	b480      	push	{r7}
10001d78:	b085      	sub	sp, #20
10001d7a:	af00      	add	r7, sp, #0
10001d7c:	60f8      	str	r0, [r7, #12]
10001d7e:	60b9      	str	r1, [r7, #8]
10001d80:	4613      	mov	r3, r2
10001d82:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
10001d84:	bf00      	nop
10001d86:	3714      	adds	r7, #20
10001d88:	46bd      	mov	sp, r7
10001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d8e:	4770      	bx	lr

10001d90 <IPCC_UnmaskInterrupt>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  */
void IPCC_UnmaskInterrupt(uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10001d90:	b480      	push	{r7}
10001d92:	b085      	sub	sp, #20
10001d94:	af00      	add	r7, sp, #0
10001d96:	6078      	str	r0, [r7, #4]
10001d98:	460b      	mov	r3, r1
10001d9a:	70fb      	strb	r3, [r7, #3]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10001d9c:	4b12      	ldr	r3, [pc, #72]	; (10001de8 <IPCC_UnmaskInterrupt+0x58>)
10001d9e:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10001da0:	78fb      	ldrb	r3, [r7, #3]
10001da2:	2b00      	cmp	r3, #0
10001da4:	d10d      	bne.n	10001dc2 <IPCC_UnmaskInterrupt+0x32>
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10001da6:	68fb      	ldr	r3, [r7, #12]
10001da8:	685a      	ldr	r2, [r3, #4]
10001daa:	687b      	ldr	r3, [r7, #4]
10001dac:	f003 030f 	and.w	r3, r3, #15
10001db0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
10001db4:	fa01 f303 	lsl.w	r3, r1, r3
10001db8:	43db      	mvns	r3, r3
10001dba:	401a      	ands	r2, r3
10001dbc:	68fb      	ldr	r3, [r7, #12]
10001dbe:	605a      	str	r2, [r3, #4]
  else
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
  }
}
10001dc0:	e00b      	b.n	10001dda <IPCC_UnmaskInterrupt+0x4a>
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10001dc2:	68fb      	ldr	r3, [r7, #12]
10001dc4:	685a      	ldr	r2, [r3, #4]
10001dc6:	687b      	ldr	r3, [r7, #4]
10001dc8:	f003 030f 	and.w	r3, r3, #15
10001dcc:	2101      	movs	r1, #1
10001dce:	fa01 f303 	lsl.w	r3, r1, r3
10001dd2:	43db      	mvns	r3, r3
10001dd4:	401a      	ands	r2, r3
10001dd6:	68fb      	ldr	r3, [r7, #12]
10001dd8:	605a      	str	r2, [r3, #4]
}
10001dda:	bf00      	nop
10001ddc:	3714      	adds	r7, #20
10001dde:	46bd      	mov	sp, r7
10001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
10001de4:	4770      	bx	lr
10001de6:	bf00      	nop
10001de8:	4c001010 	.word	0x4c001010

10001dec <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
10001dec:	b480      	push	{r7}
10001dee:	b085      	sub	sp, #20
10001df0:	af00      	add	r7, sp, #0
10001df2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10001df4:	2300      	movs	r3, #0
10001df6:	60fb      	str	r3, [r7, #12]
10001df8:	e00f      	b.n	10001e1a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
10001dfa:	687a      	ldr	r2, [r7, #4]
10001dfc:	68fb      	ldr	r3, [r7, #12]
10001dfe:	009b      	lsls	r3, r3, #2
10001e00:	4413      	add	r3, r2
10001e02:	4a0b      	ldr	r2, [pc, #44]	; (10001e30 <IPCC_SetDefaultCallbacks+0x44>)
10001e04:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
10001e06:	687a      	ldr	r2, [r7, #4]
10001e08:	68fb      	ldr	r3, [r7, #12]
10001e0a:	3306      	adds	r3, #6
10001e0c:	009b      	lsls	r3, r3, #2
10001e0e:	4413      	add	r3, r2
10001e10:	4a08      	ldr	r2, [pc, #32]	; (10001e34 <IPCC_SetDefaultCallbacks+0x48>)
10001e12:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10001e14:	68fb      	ldr	r3, [r7, #12]
10001e16:	3301      	adds	r3, #1
10001e18:	60fb      	str	r3, [r7, #12]
10001e1a:	68fb      	ldr	r3, [r7, #12]
10001e1c:	2b05      	cmp	r3, #5
10001e1e:	d9ec      	bls.n	10001dfa <IPCC_SetDefaultCallbacks+0xe>
  }
}
10001e20:	bf00      	nop
10001e22:	bf00      	nop
10001e24:	3714      	adds	r7, #20
10001e26:	46bd      	mov	sp, r7
10001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
10001e2c:	4770      	bx	lr
10001e2e:	bf00      	nop
10001e30:	10001d5d 	.word	0x10001d5d
10001e34:	10001d77 	.word	0x10001d77

10001e38 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
10001e38:	b480      	push	{r7}
10001e3a:	b083      	sub	sp, #12
10001e3c:	af00      	add	r7, sp, #0
10001e3e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
10001e40:	687b      	ldr	r3, [r7, #4]
10001e42:	2200      	movs	r2, #0
10001e44:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
10001e46:	687b      	ldr	r3, [r7, #4]
10001e48:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
10001e4c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
10001e4e:	687b      	ldr	r3, [r7, #4]
10001e50:	223f      	movs	r2, #63	; 0x3f
10001e52:	609a      	str	r2, [r3, #8]
}
10001e54:	bf00      	nop
10001e56:	370c      	adds	r7, #12
10001e58:	46bd      	mov	sp, r7
10001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
10001e5e:	4770      	bx	lr

10001e60 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
10001e60:	b480      	push	{r7}
10001e62:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
10001e64:	4b05      	ldr	r3, [pc, #20]	; (10001e7c <HAL_PWR_EnableBkUpAccess+0x1c>)
10001e66:	681b      	ldr	r3, [r3, #0]
10001e68:	4a04      	ldr	r2, [pc, #16]	; (10001e7c <HAL_PWR_EnableBkUpAccess+0x1c>)
10001e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10001e6e:	6013      	str	r3, [r2, #0]
}
10001e70:	bf00      	nop
10001e72:	46bd      	mov	sp, r7
10001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
10001e78:	4770      	bx	lr
10001e7a:	bf00      	nop
10001e7c:	50001000 	.word	0x50001000

10001e80 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10001e80:	b580      	push	{r7, lr}
10001e82:	b084      	sub	sp, #16
10001e84:	af00      	add	r7, sp, #0
10001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
10001e88:	2300      	movs	r3, #0
10001e8a:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10001e8c:	687b      	ldr	r3, [r7, #4]
10001e8e:	2b00      	cmp	r3, #0
10001e90:	d101      	bne.n	10001e96 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
10001e92:	2301      	movs	r3, #1
10001e94:	e320      	b.n	100024d8 <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10001e96:	687b      	ldr	r3, [r7, #4]
10001e98:	681b      	ldr	r3, [r3, #0]
10001e9a:	f003 0301 	and.w	r3, r3, #1
10001e9e:	2b00      	cmp	r3, #0
10001ea0:	f000 8081 	beq.w	10001fa6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
10001ea4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ea8:	6a1b      	ldr	r3, [r3, #32]
10001eaa:	f003 0303 	and.w	r3, r3, #3
10001eae:	2b01      	cmp	r3, #1
10001eb0:	d107      	bne.n	10001ec2 <HAL_RCC_OscConfig+0x42>
10001eb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001eb6:	6a1b      	ldr	r3, [r3, #32]
10001eb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001ec0:	d054      	beq.n	10001f6c <HAL_RCC_OscConfig+0xec>
10001ec2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001ec8:	f003 0307 	and.w	r3, r3, #7
10001ecc:	2b01      	cmp	r3, #1
10001ece:	d107      	bne.n	10001ee0 <HAL_RCC_OscConfig+0x60>
10001ed0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001ed6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001eda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001ede:	d045      	beq.n	10001f6c <HAL_RCC_OscConfig+0xec>
10001ee0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001ee6:	f003 0303 	and.w	r3, r3, #3
10001eea:	2b01      	cmp	r3, #1
10001eec:	d107      	bne.n	10001efe <HAL_RCC_OscConfig+0x7e>
10001eee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001ef4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001efc:	d036      	beq.n	10001f6c <HAL_RCC_OscConfig+0xec>
10001efe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001f04:	f003 0303 	and.w	r3, r3, #3
10001f08:	2b01      	cmp	r3, #1
10001f0a:	d10f      	bne.n	10001f2c <HAL_RCC_OscConfig+0xac>
10001f0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001f14:	f003 0302 	and.w	r3, r3, #2
10001f18:	2b02      	cmp	r3, #2
10001f1a:	d027      	beq.n	10001f6c <HAL_RCC_OscConfig+0xec>
10001f1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001f24:	f003 0302 	and.w	r3, r3, #2
10001f28:	2b02      	cmp	r3, #2
10001f2a:	d01f      	beq.n	10001f6c <HAL_RCC_OscConfig+0xec>
10001f2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f30:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10001f34:	f003 0303 	and.w	r3, r3, #3
10001f38:	2b01      	cmp	r3, #1
10001f3a:	d107      	bne.n	10001f4c <HAL_RCC_OscConfig+0xcc>
10001f3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f40:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001f44:	f003 0302 	and.w	r3, r3, #2
10001f48:	2b02      	cmp	r3, #2
10001f4a:	d00f      	beq.n	10001f6c <HAL_RCC_OscConfig+0xec>
10001f4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f50:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10001f54:	f003 0303 	and.w	r3, r3, #3
10001f58:	2b01      	cmp	r3, #1
10001f5a:	d117      	bne.n	10001f8c <HAL_RCC_OscConfig+0x10c>
10001f5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f60:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10001f64:	f003 0302 	and.w	r3, r3, #2
10001f68:	2b02      	cmp	r3, #2
10001f6a:	d10f      	bne.n	10001f8c <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10001f6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f70:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001f7c:	d112      	bne.n	10001fa4 <HAL_RCC_OscConfig+0x124>
10001f7e:	687b      	ldr	r3, [r7, #4]
10001f80:	685b      	ldr	r3, [r3, #4]
10001f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001f86:	d00d      	beq.n	10001fa4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
10001f88:	2301      	movs	r3, #1
10001f8a:	e2a5      	b.n	100024d8 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
10001f8c:	687b      	ldr	r3, [r7, #4]
10001f8e:	685b      	ldr	r3, [r3, #4]
10001f90:	4618      	mov	r0, r3
10001f92:	f000 faa7 	bl	100024e4 <HAL_RCC_HSEConfig>
10001f96:	4603      	mov	r3, r0
10001f98:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
10001f9a:	7bfb      	ldrb	r3, [r7, #15]
10001f9c:	2b00      	cmp	r3, #0
10001f9e:	d002      	beq.n	10001fa6 <HAL_RCC_OscConfig+0x126>
      {
        return result;
10001fa0:	7bfb      	ldrb	r3, [r7, #15]
10001fa2:	e299      	b.n	100024d8 <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10001fa4:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10001fa6:	687b      	ldr	r3, [r7, #4]
10001fa8:	681b      	ldr	r3, [r3, #0]
10001faa:	f003 0302 	and.w	r3, r3, #2
10001fae:	2b00      	cmp	r3, #0
10001fb0:	f000 814e 	beq.w	10002250 <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
10001fb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fb8:	6a1b      	ldr	r3, [r3, #32]
10001fba:	f003 0303 	and.w	r3, r3, #3
10001fbe:	2b00      	cmp	r3, #0
10001fc0:	d107      	bne.n	10001fd2 <HAL_RCC_OscConfig+0x152>
10001fc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fc6:	6a1b      	ldr	r3, [r3, #32]
10001fc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001fcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001fd0:	d055      	beq.n	1000207e <HAL_RCC_OscConfig+0x1fe>
10001fd2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001fd8:	f003 0307 	and.w	r3, r3, #7
10001fdc:	2b00      	cmp	r3, #0
10001fde:	d107      	bne.n	10001ff0 <HAL_RCC_OscConfig+0x170>
10001fe0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001fe6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001fea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001fee:	d046      	beq.n	1000207e <HAL_RCC_OscConfig+0x1fe>
10001ff0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001ff6:	f003 0303 	and.w	r3, r3, #3
10001ffa:	2b00      	cmp	r3, #0
10001ffc:	d107      	bne.n	1000200e <HAL_RCC_OscConfig+0x18e>
10001ffe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002004:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002008:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000200c:	d037      	beq.n	1000207e <HAL_RCC_OscConfig+0x1fe>
1000200e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002014:	f003 0303 	and.w	r3, r3, #3
10002018:	2b00      	cmp	r3, #0
1000201a:	d10f      	bne.n	1000203c <HAL_RCC_OscConfig+0x1bc>
1000201c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002024:	f003 0302 	and.w	r3, r3, #2
10002028:	2b02      	cmp	r3, #2
1000202a:	d028      	beq.n	1000207e <HAL_RCC_OscConfig+0x1fe>
1000202c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002034:	f003 0302 	and.w	r3, r3, #2
10002038:	2b02      	cmp	r3, #2
1000203a:	d020      	beq.n	1000207e <HAL_RCC_OscConfig+0x1fe>
1000203c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002040:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10002044:	f003 0303 	and.w	r3, r3, #3
10002048:	2b00      	cmp	r3, #0
1000204a:	d107      	bne.n	1000205c <HAL_RCC_OscConfig+0x1dc>
1000204c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002050:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002054:	f003 0302 	and.w	r3, r3, #2
10002058:	2b02      	cmp	r3, #2
1000205a:	d010      	beq.n	1000207e <HAL_RCC_OscConfig+0x1fe>
1000205c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002060:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10002064:	f003 0303 	and.w	r3, r3, #3
10002068:	2b00      	cmp	r3, #0
1000206a:	f040 8088 	bne.w	1000217e <HAL_RCC_OscConfig+0x2fe>
1000206e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002072:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002076:	f003 0302 	and.w	r3, r3, #2
1000207a:	2b02      	cmp	r3, #2
1000207c:	d17f      	bne.n	1000217e <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
1000207e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002082:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002086:	f003 0301 	and.w	r3, r3, #1
1000208a:	2b01      	cmp	r3, #1
1000208c:	d105      	bne.n	1000209a <HAL_RCC_OscConfig+0x21a>
1000208e:	687b      	ldr	r3, [r7, #4]
10002090:	68db      	ldr	r3, [r3, #12]
10002092:	2b01      	cmp	r3, #1
10002094:	d001      	beq.n	1000209a <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
10002096:	2301      	movs	r3, #1
10002098:	e21e      	b.n	100024d8 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
1000209a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000209e:	699b      	ldr	r3, [r3, #24]
100020a0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
100020a4:	687b      	ldr	r3, [r7, #4]
100020a6:	691b      	ldr	r3, [r3, #16]
100020a8:	021b      	lsls	r3, r3, #8
100020aa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100020ae:	4313      	orrs	r3, r2
100020b0:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
100020b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100020b8:	f003 0303 	and.w	r3, r3, #3
100020bc:	2b00      	cmp	r3, #0
100020be:	d10f      	bne.n	100020e0 <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
100020c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100020c8:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
100020cc:	2b02      	cmp	r3, #2
100020ce:	d047      	beq.n	10002160 <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
100020d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100020d8:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
100020dc:	2b02      	cmp	r3, #2
100020de:	d03f      	beq.n	10002160 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
100020e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020e4:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
100020e8:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
100020ec:	2b00      	cmp	r3, #0
100020ee:	d107      	bne.n	10002100 <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
100020f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020f4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100020f8:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
100020fc:	2b02      	cmp	r3, #2
100020fe:	d02f      	beq.n	10002160 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10002100:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002104:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10002108:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
1000210c:	2b00      	cmp	r3, #0
1000210e:	d107      	bne.n	10002120 <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
10002110:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002114:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002118:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
1000211c:	2b02      	cmp	r3, #2
1000211e:	d01f      	beq.n	10002160 <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10002120:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002124:	699b      	ldr	r3, [r3, #24]
10002126:	f023 0203 	bic.w	r2, r3, #3
1000212a:	687b      	ldr	r3, [r7, #4]
1000212c:	695b      	ldr	r3, [r3, #20]
1000212e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002132:	4313      	orrs	r3, r2
10002134:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
10002136:	f7ff f99b 	bl	10001470 <HAL_GetTick>
1000213a:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
1000213c:	e008      	b.n	10002150 <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000213e:	f7ff f997 	bl	10001470 <HAL_GetTick>
10002142:	4602      	mov	r2, r0
10002144:	68bb      	ldr	r3, [r7, #8]
10002146:	1ad3      	subs	r3, r2, r3
10002148:	2b64      	cmp	r3, #100	; 0x64
1000214a:	d901      	bls.n	10002150 <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
1000214c:	2303      	movs	r3, #3
1000214e:	e1c3      	b.n	100024d8 <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10002150:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002154:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002158:	f003 0304 	and.w	r3, r3, #4
1000215c:	2b04      	cmp	r3, #4
1000215e:	d1ee      	bne.n	1000213e <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
10002160:	f001 f809 	bl	10003176 <HAL_RCC_GetSystemCoreClockFreq>
10002164:	4603      	mov	r3, r0
10002166:	4ab3      	ldr	r2, [pc, #716]	; (10002434 <HAL_RCC_OscConfig+0x5b4>)
10002168:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
1000216a:	4bb3      	ldr	r3, [pc, #716]	; (10002438 <HAL_RCC_OscConfig+0x5b8>)
1000216c:	681b      	ldr	r3, [r3, #0]
1000216e:	4618      	mov	r0, r3
10002170:	f7ff f934 	bl	100013dc <HAL_InitTick>
10002174:	4603      	mov	r3, r0
10002176:	2b00      	cmp	r3, #0
10002178:	d069      	beq.n	1000224e <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
1000217a:	2301      	movs	r3, #1
1000217c:	e1ac      	b.n	100024d8 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
1000217e:	687b      	ldr	r3, [r7, #4]
10002180:	68db      	ldr	r3, [r3, #12]
10002182:	2b00      	cmp	r3, #0
10002184:	d049      	beq.n	1000221a <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
10002186:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000218a:	68db      	ldr	r3, [r3, #12]
1000218c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002190:	f043 0301 	orr.w	r3, r3, #1
10002194:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002196:	f7ff f96b 	bl	10001470 <HAL_GetTick>
1000219a:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
1000219c:	e008      	b.n	100021b0 <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000219e:	f7ff f967 	bl	10001470 <HAL_GetTick>
100021a2:	4602      	mov	r2, r0
100021a4:	68bb      	ldr	r3, [r7, #8]
100021a6:	1ad3      	subs	r3, r2, r3
100021a8:	2b64      	cmp	r3, #100	; 0x64
100021aa:	d901      	bls.n	100021b0 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
100021ac:	2303      	movs	r3, #3
100021ae:	e193      	b.n	100024d8 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100021b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021b4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100021b8:	f003 0301 	and.w	r3, r3, #1
100021bc:	2b01      	cmp	r3, #1
100021be:	d1ee      	bne.n	1000219e <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
100021c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021c4:	699b      	ldr	r3, [r3, #24]
100021c6:	f023 0203 	bic.w	r2, r3, #3
100021ca:	687b      	ldr	r3, [r7, #4]
100021cc:	695b      	ldr	r3, [r3, #20]
100021ce:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100021d2:	4313      	orrs	r3, r2
100021d4:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100021d6:	f7ff f94b 	bl	10001470 <HAL_GetTick>
100021da:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
100021dc:	e008      	b.n	100021f0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100021de:	f7ff f947 	bl	10001470 <HAL_GetTick>
100021e2:	4602      	mov	r2, r0
100021e4:	68bb      	ldr	r3, [r7, #8]
100021e6:	1ad3      	subs	r3, r2, r3
100021e8:	2b64      	cmp	r3, #100	; 0x64
100021ea:	d901      	bls.n	100021f0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
100021ec:	2303      	movs	r3, #3
100021ee:	e173      	b.n	100024d8 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
100021f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021f4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100021f8:	f003 0304 	and.w	r3, r3, #4
100021fc:	2b04      	cmp	r3, #4
100021fe:	d1ee      	bne.n	100021de <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10002200:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002204:	699b      	ldr	r3, [r3, #24]
10002206:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
1000220a:	687b      	ldr	r3, [r7, #4]
1000220c:	691b      	ldr	r3, [r3, #16]
1000220e:	021b      	lsls	r3, r3, #8
10002210:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002214:	4313      	orrs	r3, r2
10002216:	618b      	str	r3, [r1, #24]
10002218:	e01a      	b.n	10002250 <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
1000221a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000221e:	2201      	movs	r2, #1
10002220:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002222:	f7ff f925 	bl	10001470 <HAL_GetTick>
10002226:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10002228:	e008      	b.n	1000223c <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000222a:	f7ff f921 	bl	10001470 <HAL_GetTick>
1000222e:	4602      	mov	r2, r0
10002230:	68bb      	ldr	r3, [r7, #8]
10002232:	1ad3      	subs	r3, r2, r3
10002234:	2b64      	cmp	r3, #100	; 0x64
10002236:	d901      	bls.n	1000223c <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
10002238:	2303      	movs	r3, #3
1000223a:	e14d      	b.n	100024d8 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
1000223c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002240:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002244:	f003 0301 	and.w	r3, r3, #1
10002248:	2b01      	cmp	r3, #1
1000224a:	d0ee      	beq.n	1000222a <HAL_RCC_OscConfig+0x3aa>
1000224c:	e000      	b.n	10002250 <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
1000224e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
10002250:	687b      	ldr	r3, [r7, #4]
10002252:	681b      	ldr	r3, [r3, #0]
10002254:	f003 0310 	and.w	r3, r3, #16
10002258:	2b00      	cmp	r3, #0
1000225a:	f000 8091 	beq.w	10002380 <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
1000225e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002262:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10002266:	f003 0303 	and.w	r3, r3, #3
1000226a:	2b02      	cmp	r3, #2
1000226c:	d107      	bne.n	1000227e <HAL_RCC_OscConfig+0x3fe>
1000226e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002272:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002276:	f003 0302 	and.w	r3, r3, #2
1000227a:	2b02      	cmp	r3, #2
1000227c:	d01e      	beq.n	100022bc <HAL_RCC_OscConfig+0x43c>
1000227e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002284:	f003 0303 	and.w	r3, r3, #3
10002288:	2b02      	cmp	r3, #2
1000228a:	d107      	bne.n	1000229c <HAL_RCC_OscConfig+0x41c>
1000228c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002292:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000229a:	d00f      	beq.n	100022bc <HAL_RCC_OscConfig+0x43c>
1000229c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022a0:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
100022a4:	f003 0303 	and.w	r3, r3, #3
100022a8:	2b02      	cmp	r3, #2
100022aa:	d122      	bne.n	100022f2 <HAL_RCC_OscConfig+0x472>
100022ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022b0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100022b4:	f003 0302 	and.w	r3, r3, #2
100022b8:	2b02      	cmp	r3, #2
100022ba:	d11a      	bne.n	100022f2 <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
100022bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022c0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100022c4:	f003 0310 	and.w	r3, r3, #16
100022c8:	2b10      	cmp	r3, #16
100022ca:	d105      	bne.n	100022d8 <HAL_RCC_OscConfig+0x458>
100022cc:	687b      	ldr	r3, [r7, #4]
100022ce:	69db      	ldr	r3, [r3, #28]
100022d0:	2b10      	cmp	r3, #16
100022d2:	d001      	beq.n	100022d8 <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
100022d4:	2301      	movs	r3, #1
100022d6:	e0ff      	b.n	100024d8 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
100022d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022dc:	69db      	ldr	r3, [r3, #28]
100022de:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
100022e2:	687b      	ldr	r3, [r7, #4]
100022e4:	6a1b      	ldr	r3, [r3, #32]
100022e6:	021b      	lsls	r3, r3, #8
100022e8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100022ec:	4313      	orrs	r3, r2
100022ee:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
100022f0:	e046      	b.n	10002380 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
100022f2:	687b      	ldr	r3, [r7, #4]
100022f4:	69db      	ldr	r3, [r3, #28]
100022f6:	2b00      	cmp	r3, #0
100022f8:	d029      	beq.n	1000234e <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
100022fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022fe:	68db      	ldr	r3, [r3, #12]
10002300:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002304:	f043 0310 	orr.w	r3, r3, #16
10002308:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000230a:	f7ff f8b1 	bl	10001470 <HAL_GetTick>
1000230e:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10002310:	e008      	b.n	10002324 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10002312:	f7ff f8ad 	bl	10001470 <HAL_GetTick>
10002316:	4602      	mov	r2, r0
10002318:	68bb      	ldr	r3, [r7, #8]
1000231a:	1ad3      	subs	r3, r2, r3
1000231c:	2b64      	cmp	r3, #100	; 0x64
1000231e:	d901      	bls.n	10002324 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
10002320:	2303      	movs	r3, #3
10002322:	e0d9      	b.n	100024d8 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10002324:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002328:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000232c:	f003 0310 	and.w	r3, r3, #16
10002330:	2b10      	cmp	r3, #16
10002332:	d1ee      	bne.n	10002312 <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10002334:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002338:	69db      	ldr	r3, [r3, #28]
1000233a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
1000233e:	687b      	ldr	r3, [r7, #4]
10002340:	6a1b      	ldr	r3, [r3, #32]
10002342:	021b      	lsls	r3, r3, #8
10002344:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002348:	4313      	orrs	r3, r2
1000234a:	61cb      	str	r3, [r1, #28]
1000234c:	e018      	b.n	10002380 <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
1000234e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002352:	2210      	movs	r2, #16
10002354:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002356:	f7ff f88b 	bl	10001470 <HAL_GetTick>
1000235a:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
1000235c:	e008      	b.n	10002370 <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
1000235e:	f7ff f887 	bl	10001470 <HAL_GetTick>
10002362:	4602      	mov	r2, r0
10002364:	68bb      	ldr	r3, [r7, #8]
10002366:	1ad3      	subs	r3, r2, r3
10002368:	2b64      	cmp	r3, #100	; 0x64
1000236a:	d901      	bls.n	10002370 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
1000236c:	2303      	movs	r3, #3
1000236e:	e0b3      	b.n	100024d8 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10002370:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002374:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002378:	f003 0310 	and.w	r3, r3, #16
1000237c:	2b10      	cmp	r3, #16
1000237e:	d0ee      	beq.n	1000235e <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10002380:	687b      	ldr	r3, [r7, #4]
10002382:	681b      	ldr	r3, [r3, #0]
10002384:	f003 0308 	and.w	r3, r3, #8
10002388:	2b00      	cmp	r3, #0
1000238a:	d042      	beq.n	10002412 <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
1000238c:	687b      	ldr	r3, [r7, #4]
1000238e:	699b      	ldr	r3, [r3, #24]
10002390:	2b00      	cmp	r3, #0
10002392:	d01f      	beq.n	100023d4 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
10002394:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002398:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
1000239c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100023a0:	f043 0301 	orr.w	r3, r3, #1
100023a4:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100023a8:	f7ff f862 	bl	10001470 <HAL_GetTick>
100023ac:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
100023ae:	e008      	b.n	100023c2 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
100023b0:	f7ff f85e 	bl	10001470 <HAL_GetTick>
100023b4:	4602      	mov	r2, r0
100023b6:	68bb      	ldr	r3, [r7, #8]
100023b8:	1ad3      	subs	r3, r2, r3
100023ba:	2b64      	cmp	r3, #100	; 0x64
100023bc:	d901      	bls.n	100023c2 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
100023be:	2303      	movs	r3, #3
100023c0:	e08a      	b.n	100024d8 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
100023c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023c6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
100023ca:	f003 0302 	and.w	r3, r3, #2
100023ce:	2b02      	cmp	r3, #2
100023d0:	d1ee      	bne.n	100023b0 <HAL_RCC_OscConfig+0x530>
100023d2:	e01e      	b.n	10002412 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
100023d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023d8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
100023dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100023e0:	f023 0301 	bic.w	r3, r3, #1
100023e4:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100023e8:	f7ff f842 	bl	10001470 <HAL_GetTick>
100023ec:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
100023ee:	e008      	b.n	10002402 <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
100023f0:	f7ff f83e 	bl	10001470 <HAL_GetTick>
100023f4:	4602      	mov	r2, r0
100023f6:	68bb      	ldr	r3, [r7, #8]
100023f8:	1ad3      	subs	r3, r2, r3
100023fa:	2b64      	cmp	r3, #100	; 0x64
100023fc:	d901      	bls.n	10002402 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
100023fe:	2303      	movs	r3, #3
10002400:	e06a      	b.n	100024d8 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10002402:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002406:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
1000240a:	f003 0302 	and.w	r3, r3, #2
1000240e:	2b02      	cmp	r3, #2
10002410:	d0ee      	beq.n	100023f0 <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10002412:	687b      	ldr	r3, [r7, #4]
10002414:	681b      	ldr	r3, [r3, #0]
10002416:	f003 0304 	and.w	r3, r3, #4
1000241a:	2b00      	cmp	r3, #0
1000241c:	d02b      	beq.n	10002476 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
1000241e:	4b07      	ldr	r3, [pc, #28]	; (1000243c <HAL_RCC_OscConfig+0x5bc>)
10002420:	681b      	ldr	r3, [r3, #0]
10002422:	4a06      	ldr	r2, [pc, #24]	; (1000243c <HAL_RCC_OscConfig+0x5bc>)
10002424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10002428:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
1000242a:	f7ff f821 	bl	10001470 <HAL_GetTick>
1000242e:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10002430:	e00f      	b.n	10002452 <HAL_RCC_OscConfig+0x5d2>
10002432:	bf00      	nop
10002434:	1002009c 	.word	0x1002009c
10002438:	100200a0 	.word	0x100200a0
1000243c:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10002440:	f7ff f816 	bl	10001470 <HAL_GetTick>
10002444:	4602      	mov	r2, r0
10002446:	68bb      	ldr	r3, [r7, #8]
10002448:	1ad3      	subs	r3, r2, r3
1000244a:	2b64      	cmp	r3, #100	; 0x64
1000244c:	d901      	bls.n	10002452 <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
1000244e:	2303      	movs	r3, #3
10002450:	e042      	b.n	100024d8 <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10002452:	4b23      	ldr	r3, [pc, #140]	; (100024e0 <HAL_RCC_OscConfig+0x660>)
10002454:	681b      	ldr	r3, [r3, #0]
10002456:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000245a:	2b00      	cmp	r3, #0
1000245c:	d0f0      	beq.n	10002440 <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
1000245e:	687b      	ldr	r3, [r7, #4]
10002460:	689b      	ldr	r3, [r3, #8]
10002462:	4618      	mov	r0, r3
10002464:	f000 f8a9 	bl	100025ba <HAL_RCC_LSEConfig>
10002468:	4603      	mov	r3, r0
1000246a:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
1000246c:	7bfb      	ldrb	r3, [r7, #15]
1000246e:	2b00      	cmp	r3, #0
10002470:	d001      	beq.n	10002476 <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
10002472:	7bfb      	ldrb	r3, [r7, #15]
10002474:	e030      	b.n	100024d8 <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
10002476:	687b      	ldr	r3, [r7, #4]
10002478:	3324      	adds	r3, #36	; 0x24
1000247a:	4618      	mov	r0, r3
1000247c:	f000 f91a 	bl	100026b4 <RCC_PLL1_Config>
10002480:	4603      	mov	r3, r0
10002482:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10002484:	7bfb      	ldrb	r3, [r7, #15]
10002486:	2b00      	cmp	r3, #0
10002488:	d001      	beq.n	1000248e <HAL_RCC_OscConfig+0x60e>
  {
    return result;
1000248a:	7bfb      	ldrb	r3, [r7, #15]
1000248c:	e024      	b.n	100024d8 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
1000248e:	687b      	ldr	r3, [r7, #4]
10002490:	3360      	adds	r3, #96	; 0x60
10002492:	4618      	mov	r0, r3
10002494:	f000 feb0 	bl	100031f8 <RCCEx_PLL2_Config>
10002498:	4603      	mov	r3, r0
1000249a:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
1000249c:	7bfb      	ldrb	r3, [r7, #15]
1000249e:	2b00      	cmp	r3, #0
100024a0:	d001      	beq.n	100024a6 <HAL_RCC_OscConfig+0x626>
  {
    return result;
100024a2:	7bfb      	ldrb	r3, [r7, #15]
100024a4:	e018      	b.n	100024d8 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
100024a6:	687b      	ldr	r3, [r7, #4]
100024a8:	339c      	adds	r3, #156	; 0x9c
100024aa:	4618      	mov	r0, r3
100024ac:	f001 f826 	bl	100034fc <RCCEx_PLL3_Config>
100024b0:	4603      	mov	r3, r0
100024b2:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
100024b4:	7bfb      	ldrb	r3, [r7, #15]
100024b6:	2b00      	cmp	r3, #0
100024b8:	d001      	beq.n	100024be <HAL_RCC_OscConfig+0x63e>
  {
    return result;
100024ba:	7bfb      	ldrb	r3, [r7, #15]
100024bc:	e00c      	b.n	100024d8 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
100024be:	687b      	ldr	r3, [r7, #4]
100024c0:	33d8      	adds	r3, #216	; 0xd8
100024c2:	4618      	mov	r0, r3
100024c4:	f001 f984 	bl	100037d0 <RCCEx_PLL4_Config>
100024c8:	4603      	mov	r3, r0
100024ca:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
100024cc:	7bfb      	ldrb	r3, [r7, #15]
100024ce:	2b00      	cmp	r3, #0
100024d0:	d001      	beq.n	100024d6 <HAL_RCC_OscConfig+0x656>
  {
    return result;
100024d2:	7bfb      	ldrb	r3, [r7, #15]
100024d4:	e000      	b.n	100024d8 <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
100024d6:	2300      	movs	r3, #0
}
100024d8:	4618      	mov	r0, r3
100024da:	3710      	adds	r7, #16
100024dc:	46bd      	mov	sp, r7
100024de:	bd80      	pop	{r7, pc}
100024e0:	50001000 	.word	0x50001000

100024e4 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
100024e4:	b580      	push	{r7, lr}
100024e6:	b084      	sub	sp, #16
100024e8:	af00      	add	r7, sp, #0
100024ea:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
100024ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024f0:	f44f 7280 	mov.w	r2, #256	; 0x100
100024f4:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100024f6:	f7fe ffbb 	bl	10001470 <HAL_GetTick>
100024fa:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
100024fc:	e008      	b.n	10002510 <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100024fe:	f7fe ffb7 	bl	10001470 <HAL_GetTick>
10002502:	4602      	mov	r2, r0
10002504:	68fb      	ldr	r3, [r7, #12]
10002506:	1ad3      	subs	r3, r2, r3
10002508:	2b64      	cmp	r3, #100	; 0x64
1000250a:	d901      	bls.n	10002510 <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
1000250c:	2303      	movs	r3, #3
1000250e:	e050      	b.n	100025b2 <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10002510:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002514:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002518:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000251c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10002520:	d0ed      	beq.n	100024fe <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
10002522:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002526:	f44f 6290 	mov.w	r2, #1152	; 0x480
1000252a:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
1000252c:	687b      	ldr	r3, [r7, #4]
1000252e:	2b00      	cmp	r3, #0
10002530:	d03e      	beq.n	100025b0 <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
10002532:	687b      	ldr	r3, [r7, #4]
10002534:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
10002538:	d108      	bne.n	1000254c <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
1000253a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000253e:	68db      	ldr	r3, [r3, #12]
10002540:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002544:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
10002548:	60d3      	str	r3, [r2, #12]
1000254a:	e013      	b.n	10002574 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
1000254c:	687b      	ldr	r3, [r7, #4]
1000254e:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
10002552:	d10f      	bne.n	10002574 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
10002554:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002558:	68db      	ldr	r3, [r3, #12]
1000255a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000255e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
10002562:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10002564:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002568:	68db      	ldr	r3, [r3, #12]
1000256a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000256e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
10002572:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
10002574:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002578:	68db      	ldr	r3, [r3, #12]
1000257a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000257e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10002582:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002584:	f7fe ff74 	bl	10001470 <HAL_GetTick>
10002588:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000258a:	e008      	b.n	1000259e <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1000258c:	f7fe ff70 	bl	10001470 <HAL_GetTick>
10002590:	4602      	mov	r2, r0
10002592:	68fb      	ldr	r3, [r7, #12]
10002594:	1ad3      	subs	r3, r2, r3
10002596:	2b64      	cmp	r3, #100	; 0x64
10002598:	d901      	bls.n	1000259e <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
1000259a:	2303      	movs	r3, #3
1000259c:	e009      	b.n	100025b2 <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000259e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025a2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
100025aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100025ae:	d1ed      	bne.n	1000258c <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
100025b0:	2300      	movs	r3, #0
}
100025b2:	4618      	mov	r0, r3
100025b4:	3710      	adds	r7, #16
100025b6:	46bd      	mov	sp, r7
100025b8:	bd80      	pop	{r7, pc}

100025ba <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
100025ba:	b580      	push	{r7, lr}
100025bc:	b084      	sub	sp, #16
100025be:	af00      	add	r7, sp, #0
100025c0:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
100025c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100025ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100025ce:	f023 0301 	bic.w	r3, r3, #1
100025d2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100025d6:	f7fe ff4b 	bl	10001470 <HAL_GetTick>
100025da:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
100025dc:	e00a      	b.n	100025f4 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
100025de:	f7fe ff47 	bl	10001470 <HAL_GetTick>
100025e2:	4602      	mov	r2, r0
100025e4:	68fb      	ldr	r3, [r7, #12]
100025e6:	1ad3      	subs	r3, r2, r3
100025e8:	f241 3288 	movw	r2, #5000	; 0x1388
100025ec:	4293      	cmp	r3, r2
100025ee:	d901      	bls.n	100025f4 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
100025f0:	2303      	movs	r3, #3
100025f2:	e05b      	b.n	100026ac <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
100025f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100025fc:	f003 0304 	and.w	r3, r3, #4
10002600:	2b04      	cmp	r3, #4
10002602:	d0ec      	beq.n	100025de <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
10002604:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002608:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000260c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002610:	f023 030a 	bic.w	r3, r3, #10
10002614:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
10002618:	687b      	ldr	r3, [r7, #4]
1000261a:	2b00      	cmp	r3, #0
1000261c:	d045      	beq.n	100026aa <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
1000261e:	687b      	ldr	r3, [r7, #4]
10002620:	2b03      	cmp	r3, #3
10002622:	d10a      	bne.n	1000263a <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10002624:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002628:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000262c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002630:	f043 0302 	orr.w	r3, r3, #2
10002634:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
10002638:	e016      	b.n	10002668 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
1000263a:	687b      	ldr	r3, [r7, #4]
1000263c:	2b0b      	cmp	r3, #11
1000263e:	d113      	bne.n	10002668 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
10002640:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002644:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10002648:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000264c:	f043 0308 	orr.w	r3, r3, #8
10002650:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10002654:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002658:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000265c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002660:	f043 0302 	orr.w	r3, r3, #2
10002664:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10002668:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000266c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10002670:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002674:	f043 0301 	orr.w	r3, r3, #1
10002678:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000267c:	f7fe fef8 	bl	10001470 <HAL_GetTick>
10002680:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10002682:	e00a      	b.n	1000269a <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10002684:	f7fe fef4 	bl	10001470 <HAL_GetTick>
10002688:	4602      	mov	r2, r0
1000268a:	68fb      	ldr	r3, [r7, #12]
1000268c:	1ad3      	subs	r3, r2, r3
1000268e:	f241 3288 	movw	r2, #5000	; 0x1388
10002692:	4293      	cmp	r3, r2
10002694:	d901      	bls.n	1000269a <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
10002696:	2303      	movs	r3, #3
10002698:	e008      	b.n	100026ac <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
1000269a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000269e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100026a2:	f003 0304 	and.w	r3, r3, #4
100026a6:	2b04      	cmp	r3, #4
100026a8:	d1ec      	bne.n	10002684 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
100026aa:	2300      	movs	r3, #0
}
100026ac:	4618      	mov	r0, r3
100026ae:	3710      	adds	r7, #16
100026b0:	46bd      	mov	sp, r7
100026b2:	bd80      	pop	{r7, pc}

100026b4 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
100026b4:	b580      	push	{r7, lr}
100026b6:	b084      	sub	sp, #16
100026b8:	af00      	add	r7, sp, #0
100026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
100026bc:	687b      	ldr	r3, [r7, #4]
100026be:	681b      	ldr	r3, [r3, #0]
100026c0:	2b00      	cmp	r3, #0
100026c2:	f000 8174 	beq.w	100029ae <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
100026c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026ca:	6a1b      	ldr	r3, [r3, #32]
100026cc:	f003 0303 	and.w	r3, r3, #3
100026d0:	2b02      	cmp	r3, #2
100026d2:	d108      	bne.n	100026e6 <RCC_PLL1_Config+0x32>
100026d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026d8:	6a1b      	ldr	r3, [r3, #32]
100026da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100026de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100026e2:	f000 8162 	beq.w	100029aa <RCC_PLL1_Config+0x2f6>
100026e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026ea:	6a1b      	ldr	r3, [r3, #32]
100026ec:	f003 0303 	and.w	r3, r3, #3
100026f0:	2b03      	cmp	r3, #3
100026f2:	d108      	bne.n	10002706 <RCC_PLL1_Config+0x52>
100026f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026f8:	6a1b      	ldr	r3, [r3, #32]
100026fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100026fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002702:	f000 8152 	beq.w	100029aa <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
10002706:	687b      	ldr	r3, [r7, #4]
10002708:	681b      	ldr	r3, [r3, #0]
1000270a:	2b02      	cmp	r3, #2
1000270c:	f040 8123 	bne.w	10002956 <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10002710:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002714:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002718:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000271c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002720:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
10002724:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000272c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002730:	f023 0301 	bic.w	r3, r3, #1
10002734:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002738:	f7fe fe9a 	bl	10001470 <HAL_GetTick>
1000273c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
1000273e:	e008      	b.n	10002752 <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002740:	f7fe fe96 	bl	10001470 <HAL_GetTick>
10002744:	4602      	mov	r2, r0
10002746:	68fb      	ldr	r3, [r7, #12]
10002748:	1ad3      	subs	r3, r2, r3
1000274a:	2b64      	cmp	r3, #100	; 0x64
1000274c:	d901      	bls.n	10002752 <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
1000274e:	2303      	movs	r3, #3
10002750:	e12e      	b.n	100029b0 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10002752:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000275a:	f003 0302 	and.w	r3, r3, #2
1000275e:	2b02      	cmp	r3, #2
10002760:	d0ee      	beq.n	10002740 <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
10002762:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002768:	f003 0307 	and.w	r3, r3, #7
1000276c:	2b02      	cmp	r3, #2
1000276e:	d112      	bne.n	10002796 <RCC_PLL1_Config+0xe2>
10002770:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002776:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000277a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000277e:	d10a      	bne.n	10002796 <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10002780:	687b      	ldr	r3, [r7, #4]
10002782:	685a      	ldr	r2, [r3, #4]
10002784:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000278a:	f003 0303 	and.w	r3, r3, #3
1000278e:	429a      	cmp	r2, r3
10002790:	d00c      	beq.n	100027ac <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
10002792:	2301      	movs	r3, #1
10002794:	e10c      	b.n	100029b0 <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
10002796:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000279c:	f023 0203 	bic.w	r2, r3, #3
100027a0:	687b      	ldr	r3, [r7, #4]
100027a2:	685b      	ldr	r3, [r3, #4]
100027a4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100027a8:	4313      	orrs	r3, r2
100027aa:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
100027ac:	e008      	b.n	100027c0 <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100027ae:	f7fe fe5f 	bl	10001470 <HAL_GetTick>
100027b2:	4602      	mov	r2, r0
100027b4:	68fb      	ldr	r3, [r7, #12]
100027b6:	1ad3      	subs	r3, r2, r3
100027b8:	2b64      	cmp	r3, #100	; 0x64
100027ba:	d901      	bls.n	100027c0 <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
100027bc:	2303      	movs	r3, #3
100027be:	e0f7      	b.n	100029b0 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
100027c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100027c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100027ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100027ce:	d1ee      	bne.n	100027ae <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
100027d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027d4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
100027d8:	4b77      	ldr	r3, [pc, #476]	; (100029b8 <RCC_PLL1_Config+0x304>)
100027da:	4013      	ands	r3, r2
100027dc:	687a      	ldr	r2, [r7, #4]
100027de:	68d2      	ldr	r2, [r2, #12]
100027e0:	1e51      	subs	r1, r2, #1
100027e2:	687a      	ldr	r2, [r7, #4]
100027e4:	6892      	ldr	r2, [r2, #8]
100027e6:	3a01      	subs	r2, #1
100027e8:	0412      	lsls	r2, r2, #16
100027ea:	430a      	orrs	r2, r1
100027ec:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100027f0:	4313      	orrs	r3, r2
100027f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
100027f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
100027fe:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10002802:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10002806:	687a      	ldr	r2, [r7, #4]
10002808:	6912      	ldr	r2, [r2, #16]
1000280a:	1e51      	subs	r1, r2, #1
1000280c:	687a      	ldr	r2, [r7, #4]
1000280e:	6952      	ldr	r2, [r2, #20]
10002810:	3a01      	subs	r2, #1
10002812:	0212      	lsls	r2, r2, #8
10002814:	4311      	orrs	r1, r2
10002816:	687a      	ldr	r2, [r7, #4]
10002818:	6992      	ldr	r2, [r2, #24]
1000281a:	3a01      	subs	r2, #1
1000281c:	0412      	lsls	r2, r2, #16
1000281e:	430a      	orrs	r2, r1
10002820:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002824:	4313      	orrs	r3, r2
10002826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
1000282a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000282e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10002832:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1000283a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
1000283e:	687b      	ldr	r3, [r7, #4]
10002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002842:	2b02      	cmp	r3, #2
10002844:	d003      	beq.n	1000284e <RCC_PLL1_Config+0x19a>
10002846:	687b      	ldr	r3, [r7, #4]
10002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000284a:	2b00      	cmp	r3, #0
1000284c:	d10c      	bne.n	10002868 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
1000284e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10002856:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000285a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000285e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002862:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
10002866:	e00f      	b.n	10002888 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
10002868:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000286c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10002870:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002874:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002878:	687a      	ldr	r2, [r7, #4]
1000287a:	6a12      	ldr	r2, [r2, #32]
1000287c:	00d2      	lsls	r2, r2, #3
1000287e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002882:	4313      	orrs	r3, r2
10002884:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
10002888:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000288c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10002890:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10002898:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
1000289c:	687b      	ldr	r3, [r7, #4]
1000289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100028a0:	2b02      	cmp	r3, #2
100028a2:	d124      	bne.n	100028ee <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
100028a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100028a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
100028ac:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
100028b0:	687b      	ldr	r3, [r7, #4]
100028b2:	6a99      	ldr	r1, [r3, #40]	; 0x28
100028b4:	687b      	ldr	r3, [r7, #4]
100028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100028b8:	4319      	orrs	r1, r3
100028ba:	687b      	ldr	r3, [r7, #4]
100028bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100028be:	4319      	orrs	r1, r3
100028c0:	687b      	ldr	r3, [r7, #4]
100028c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100028c4:	4319      	orrs	r1, r3
100028c6:	687b      	ldr	r3, [r7, #4]
100028c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100028ca:	041b      	lsls	r3, r3, #16
100028cc:	430b      	orrs	r3, r1
100028ce:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100028d2:	4313      	orrs	r3, r2
100028d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
100028d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100028dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100028e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100028e4:	f043 0304 	orr.w	r3, r3, #4
100028e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
100028ec:	e009      	b.n	10002902 <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
100028ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100028f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100028f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100028fa:	f023 0304 	bic.w	r3, r3, #4
100028fe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
10002902:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000290a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000290e:	f043 0301 	orr.w	r3, r3, #1
10002912:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002916:	f7fe fdab 	bl	10001470 <HAL_GetTick>
1000291a:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
1000291c:	e008      	b.n	10002930 <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000291e:	f7fe fda7 	bl	10001470 <HAL_GetTick>
10002922:	4602      	mov	r2, r0
10002924:	68fb      	ldr	r3, [r7, #12]
10002926:	1ad3      	subs	r3, r2, r3
10002928:	2b64      	cmp	r3, #100	; 0x64
1000292a:	d901      	bls.n	10002930 <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
1000292c:	2303      	movs	r3, #3
1000292e:	e03f      	b.n	100029b0 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10002930:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002938:	f003 0302 	and.w	r3, r3, #2
1000293c:	2b02      	cmp	r3, #2
1000293e:	d1ee      	bne.n	1000291e <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10002940:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002948:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000294c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10002950:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
10002954:	e02b      	b.n	100029ae <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10002956:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000295a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000295e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002966:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
1000296a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000296e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002972:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002976:	f023 0301 	bic.w	r3, r3, #1
1000297a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000297e:	f7fe fd77 	bl	10001470 <HAL_GetTick>
10002982:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10002984:	e008      	b.n	10002998 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002986:	f7fe fd73 	bl	10001470 <HAL_GetTick>
1000298a:	4602      	mov	r2, r0
1000298c:	68fb      	ldr	r3, [r7, #12]
1000298e:	1ad3      	subs	r3, r2, r3
10002990:	2b64      	cmp	r3, #100	; 0x64
10002992:	d901      	bls.n	10002998 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
10002994:	2303      	movs	r3, #3
10002996:	e00b      	b.n	100029b0 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10002998:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000299c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100029a0:	f003 0302 	and.w	r3, r3, #2
100029a4:	2b02      	cmp	r3, #2
100029a6:	d0ee      	beq.n	10002986 <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
100029a8:	e001      	b.n	100029ae <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100029aa:	2301      	movs	r3, #1
100029ac:	e000      	b.n	100029b0 <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
100029ae:	2300      	movs	r3, #0

}
100029b0:	4618      	mov	r0, r3
100029b2:	3710      	adds	r7, #16
100029b4:	46bd      	mov	sp, r7
100029b6:	bd80      	pop	{r7, pc}
100029b8:	ffc0fe00 	.word	0xffc0fe00

100029bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
100029bc:	b580      	push	{r7, lr}
100029be:	b084      	sub	sp, #16
100029c0:	af00      	add	r7, sp, #0
100029c2:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
100029c4:	2300      	movs	r3, #0
100029c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
100029c8:	687b      	ldr	r3, [r7, #4]
100029ca:	2b00      	cmp	r3, #0
100029cc:	d101      	bne.n	100029d2 <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
100029ce:	2301      	movs	r3, #1
100029d0:	e102      	b.n	10002bd8 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
100029d2:	687b      	ldr	r3, [r7, #4]
100029d4:	681b      	ldr	r3, [r3, #0]
100029d6:	f003 0301 	and.w	r3, r3, #1
100029da:	2b00      	cmp	r3, #0
100029dc:	d00b      	beq.n	100029f6 <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
100029de:	687b      	ldr	r3, [r7, #4]
100029e0:	3304      	adds	r3, #4
100029e2:	4618      	mov	r0, r3
100029e4:	f000 f8fc 	bl	10002be0 <RCC_MPUConfig>
100029e8:	4603      	mov	r3, r0
100029ea:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
100029ec:	7bfb      	ldrb	r3, [r7, #15]
100029ee:	2b00      	cmp	r3, #0
100029f0:	d001      	beq.n	100029f6 <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
100029f2:	7bfb      	ldrb	r3, [r7, #15]
100029f4:	e0f0      	b.n	10002bd8 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
100029f6:	687b      	ldr	r3, [r7, #4]
100029f8:	681b      	ldr	r3, [r3, #0]
100029fa:	f003 0302 	and.w	r3, r3, #2
100029fe:	2b00      	cmp	r3, #0
10002a00:	d00b      	beq.n	10002a1a <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
10002a02:	687b      	ldr	r3, [r7, #4]
10002a04:	330c      	adds	r3, #12
10002a06:	4618      	mov	r0, r3
10002a08:	f000 f960 	bl	10002ccc <RCC_AXISSConfig>
10002a0c:	4603      	mov	r3, r0
10002a0e:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10002a10:	7bfb      	ldrb	r3, [r7, #15]
10002a12:	2b00      	cmp	r3, #0
10002a14:	d001      	beq.n	10002a1a <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
10002a16:	7bfb      	ldrb	r3, [r7, #15]
10002a18:	e0de      	b.n	10002bd8 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
10002a1a:	687b      	ldr	r3, [r7, #4]
10002a1c:	681b      	ldr	r3, [r3, #0]
10002a1e:	f003 0304 	and.w	r3, r3, #4
10002a22:	2b00      	cmp	r3, #0
10002a24:	d00b      	beq.n	10002a3e <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
10002a26:	687b      	ldr	r3, [r7, #4]
10002a28:	3314      	adds	r3, #20
10002a2a:	4618      	mov	r0, r3
10002a2c:	f000 f9e6 	bl	10002dfc <RCC_MCUConfig>
10002a30:	4603      	mov	r3, r0
10002a32:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10002a34:	7bfb      	ldrb	r3, [r7, #15]
10002a36:	2b00      	cmp	r3, #0
10002a38:	d001      	beq.n	10002a3e <HAL_RCC_ClockConfig+0x82>
    {
      return status;
10002a3a:	7bfb      	ldrb	r3, [r7, #15]
10002a3c:	e0cc      	b.n	10002bd8 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
10002a3e:	687b      	ldr	r3, [r7, #4]
10002a40:	681b      	ldr	r3, [r3, #0]
10002a42:	f003 0308 	and.w	r3, r3, #8
10002a46:	2b00      	cmp	r3, #0
10002a48:	d020      	beq.n	10002a8c <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
10002a4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10002a50:	f023 0207 	bic.w	r2, r3, #7
10002a54:	687b      	ldr	r3, [r7, #4]
10002a56:	69db      	ldr	r3, [r3, #28]
10002a58:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002a5c:	4313      	orrs	r3, r2
10002a5e:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002a60:	f7fe fd06 	bl	10001470 <HAL_GetTick>
10002a64:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10002a66:	e009      	b.n	10002a7c <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002a68:	f7fe fd02 	bl	10001470 <HAL_GetTick>
10002a6c:	4602      	mov	r2, r0
10002a6e:	68bb      	ldr	r3, [r7, #8]
10002a70:	1ad3      	subs	r3, r2, r3
10002a72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002a76:	d901      	bls.n	10002a7c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
10002a78:	2303      	movs	r3, #3
10002a7a:	e0ad      	b.n	10002bd8 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10002a7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10002a82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002a86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002a8a:	d1ed      	bne.n	10002a68 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
10002a8c:	687b      	ldr	r3, [r7, #4]
10002a8e:	681b      	ldr	r3, [r3, #0]
10002a90:	f003 0310 	and.w	r3, r3, #16
10002a94:	2b00      	cmp	r3, #0
10002a96:	d020      	beq.n	10002ada <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
10002a98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10002a9e:	f023 0207 	bic.w	r2, r3, #7
10002aa2:	687b      	ldr	r3, [r7, #4]
10002aa4:	6a1b      	ldr	r3, [r3, #32]
10002aa6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002aaa:	4313      	orrs	r3, r2
10002aac:	640b      	str	r3, [r1, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002aae:	f7fe fcdf 	bl	10001470 <HAL_GetTick>
10002ab2:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10002ab4:	e009      	b.n	10002aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002ab6:	f7fe fcdb 	bl	10001470 <HAL_GetTick>
10002aba:	4602      	mov	r2, r0
10002abc:	68bb      	ldr	r3, [r7, #8]
10002abe:	1ad3      	subs	r3, r2, r3
10002ac0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002ac4:	d901      	bls.n	10002aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
10002ac6:	2303      	movs	r3, #3
10002ac8:	e086      	b.n	10002bd8 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10002aca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10002ad0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002ad4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002ad8:	d1ed      	bne.n	10002ab6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
10002ada:	687b      	ldr	r3, [r7, #4]
10002adc:	681b      	ldr	r3, [r3, #0]
10002ade:	f003 0320 	and.w	r3, r3, #32
10002ae2:	2b00      	cmp	r3, #0
10002ae4:	d023      	beq.n	10002b2e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
10002ae6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002aea:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10002aee:	f023 0207 	bic.w	r2, r3, #7
10002af2:	687b      	ldr	r3, [r7, #4]
10002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002af6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002afa:	4313      	orrs	r3, r2
10002afc:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002b00:	f7fe fcb6 	bl	10001470 <HAL_GetTick>
10002b04:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10002b06:	e009      	b.n	10002b1c <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002b08:	f7fe fcb2 	bl	10001470 <HAL_GetTick>
10002b0c:	4602      	mov	r2, r0
10002b0e:	68bb      	ldr	r3, [r7, #8]
10002b10:	1ad3      	subs	r3, r2, r3
10002b12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002b16:	d901      	bls.n	10002b1c <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
10002b18:	2303      	movs	r3, #3
10002b1a:	e05d      	b.n	10002bd8 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10002b1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b20:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10002b24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002b28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002b2c:	d1ec      	bne.n	10002b08 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
10002b2e:	687b      	ldr	r3, [r7, #4]
10002b30:	681b      	ldr	r3, [r3, #0]
10002b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
10002b36:	2b00      	cmp	r3, #0
10002b38:	d023      	beq.n	10002b82 <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
10002b3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b3e:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10002b42:	f023 0207 	bic.w	r2, r3, #7
10002b46:	687b      	ldr	r3, [r7, #4]
10002b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002b4a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002b4e:	4313      	orrs	r3, r2
10002b50:	f8c1 3838 	str.w	r3, [r1, #2104]	; 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002b54:	f7fe fc8c 	bl	10001470 <HAL_GetTick>
10002b58:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10002b5a:	e009      	b.n	10002b70 <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002b5c:	f7fe fc88 	bl	10001470 <HAL_GetTick>
10002b60:	4602      	mov	r2, r0
10002b62:	68bb      	ldr	r3, [r7, #8]
10002b64:	1ad3      	subs	r3, r2, r3
10002b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002b6a:	d901      	bls.n	10002b70 <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
10002b6c:	2303      	movs	r3, #3
10002b6e:	e033      	b.n	10002bd8 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10002b70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b74:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10002b78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002b7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002b80:	d1ec      	bne.n	10002b5c <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
10002b82:	687b      	ldr	r3, [r7, #4]
10002b84:	681b      	ldr	r3, [r3, #0]
10002b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
10002b8a:	2b00      	cmp	r3, #0
10002b8c:	d023      	beq.n	10002bd6 <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
10002b8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b92:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10002b96:	f023 0207 	bic.w	r2, r3, #7
10002b9a:	687b      	ldr	r3, [r7, #4]
10002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10002b9e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002ba2:	4313      	orrs	r3, r2
10002ba4:	f8c1 383c 	str.w	r3, [r1, #2108]	; 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002ba8:	f7fe fc62 	bl	10001470 <HAL_GetTick>
10002bac:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10002bae:	e009      	b.n	10002bc4 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002bb0:	f7fe fc5e 	bl	10001470 <HAL_GetTick>
10002bb4:	4602      	mov	r2, r0
10002bb6:	68bb      	ldr	r3, [r7, #8]
10002bb8:	1ad3      	subs	r3, r2, r3
10002bba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002bbe:	d901      	bls.n	10002bc4 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
10002bc0:	2303      	movs	r3, #3
10002bc2:	e009      	b.n	10002bd8 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10002bc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002bc8:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10002bcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002bd4:	d1ec      	bne.n	10002bb0 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
10002bd6:	2300      	movs	r3, #0
}
10002bd8:	4618      	mov	r0, r3
10002bda:	3710      	adds	r7, #16
10002bdc:	46bd      	mov	sp, r7
10002bde:	bd80      	pop	{r7, pc}

10002be0 <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
10002be0:	b580      	push	{r7, lr}
10002be2:	b084      	sub	sp, #16
10002be4:	af00      	add	r7, sp, #0
10002be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
10002be8:	687b      	ldr	r3, [r7, #4]
10002bea:	681b      	ldr	r3, [r3, #0]
10002bec:	2b03      	cmp	r3, #3
10002bee:	d840      	bhi.n	10002c72 <RCC_MPUConfig+0x92>
10002bf0:	a201      	add	r2, pc, #4	; (adr r2, 10002bf8 <RCC_MPUConfig+0x18>)
10002bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10002bf6:	bf00      	nop
10002bf8:	10002c09 	.word	0x10002c09
10002bfc:	10002c1d 	.word	0x10002c1d
10002c00:	10002c33 	.word	0x10002c33
10002c04:	10002c47 	.word	0x10002c47
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10002c08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c0c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002c10:	f003 0301 	and.w	r3, r3, #1
10002c14:	2b01      	cmp	r3, #1
10002c16:	d02e      	beq.n	10002c76 <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
10002c18:	2301      	movs	r3, #1
10002c1a:	e053      	b.n	10002cc4 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10002c1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c20:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
10002c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10002c2c:	d025      	beq.n	10002c7a <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
10002c2e:	2301      	movs	r3, #1
10002c30:	e048      	b.n	10002cc4 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10002c32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002c3a:	f003 0302 	and.w	r3, r3, #2
10002c3e:	2b02      	cmp	r3, #2
10002c40:	d01d      	beq.n	10002c7e <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
10002c42:	2301      	movs	r3, #1
10002c44:	e03e      	b.n	10002cc4 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10002c46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002c4e:	f003 0302 	and.w	r3, r3, #2
10002c52:	2b02      	cmp	r3, #2
10002c54:	d001      	beq.n	10002c5a <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
10002c56:	2301      	movs	r3, #1
10002c58:	e034      	b.n	10002cc4 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
10002c5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10002c60:	f023 0207 	bic.w	r2, r3, #7
10002c64:	687b      	ldr	r3, [r7, #4]
10002c66:	685b      	ldr	r3, [r3, #4]
10002c68:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002c6c:	4313      	orrs	r3, r2
10002c6e:	62cb      	str	r3, [r1, #44]	; 0x2c

      break;
10002c70:	e006      	b.n	10002c80 <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
10002c72:	2301      	movs	r3, #1
10002c74:	e026      	b.n	10002cc4 <RCC_MPUConfig+0xe4>
      break;
10002c76:	bf00      	nop
10002c78:	e002      	b.n	10002c80 <RCC_MPUConfig+0xa0>
      break;
10002c7a:	bf00      	nop
10002c7c:	e000      	b.n	10002c80 <RCC_MPUConfig+0xa0>
      break;
10002c7e:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
10002c80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c84:	6a1b      	ldr	r3, [r3, #32]
10002c86:	f023 0203 	bic.w	r2, r3, #3
10002c8a:	687b      	ldr	r3, [r7, #4]
10002c8c:	681b      	ldr	r3, [r3, #0]
10002c8e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002c92:	4313      	orrs	r3, r2
10002c94:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002c96:	f7fe fbeb 	bl	10001470 <HAL_GetTick>
10002c9a:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10002c9c:	e009      	b.n	10002cb2 <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002c9e:	f7fe fbe7 	bl	10001470 <HAL_GetTick>
10002ca2:	4602      	mov	r2, r0
10002ca4:	68fb      	ldr	r3, [r7, #12]
10002ca6:	1ad3      	subs	r3, r2, r3
10002ca8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002cac:	d901      	bls.n	10002cb2 <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
10002cae:	2303      	movs	r3, #3
10002cb0:	e008      	b.n	10002cc4 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10002cb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002cb6:	6a1b      	ldr	r3, [r3, #32]
10002cb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002cc0:	d1ed      	bne.n	10002c9e <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
10002cc2:	2300      	movs	r3, #0
}
10002cc4:	4618      	mov	r0, r3
10002cc6:	3710      	adds	r7, #16
10002cc8:	46bd      	mov	sp, r7
10002cca:	bd80      	pop	{r7, pc}

10002ccc <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
10002ccc:	b580      	push	{r7, lr}
10002cce:	b084      	sub	sp, #16
10002cd0:	af00      	add	r7, sp, #0
10002cd2:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
10002cd4:	687b      	ldr	r3, [r7, #4]
10002cd6:	681b      	ldr	r3, [r3, #0]
10002cd8:	2b02      	cmp	r3, #2
10002cda:	d01b      	beq.n	10002d14 <RCC_AXISSConfig+0x48>
10002cdc:	2b02      	cmp	r3, #2
10002cde:	d823      	bhi.n	10002d28 <RCC_AXISSConfig+0x5c>
10002ce0:	2b00      	cmp	r3, #0
10002ce2:	d002      	beq.n	10002cea <RCC_AXISSConfig+0x1e>
10002ce4:	2b01      	cmp	r3, #1
10002ce6:	d00a      	beq.n	10002cfe <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
10002ce8:	e01e      	b.n	10002d28 <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10002cea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002cee:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002cf2:	f003 0301 	and.w	r3, r3, #1
10002cf6:	2b01      	cmp	r3, #1
10002cf8:	d018      	beq.n	10002d2c <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
10002cfa:	2301      	movs	r3, #1
10002cfc:	e079      	b.n	10002df2 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10002cfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d02:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
10002d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10002d0e:	d00f      	beq.n	10002d30 <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
10002d10:	2301      	movs	r3, #1
10002d12:	e06e      	b.n	10002df2 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10002d14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002d1c:	f003 0302 	and.w	r3, r3, #2
10002d20:	2b02      	cmp	r3, #2
10002d22:	d007      	beq.n	10002d34 <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
10002d24:	2301      	movs	r3, #1
10002d26:	e064      	b.n	10002df2 <RCC_AXISSConfig+0x126>
      break;
10002d28:	bf00      	nop
10002d2a:	e004      	b.n	10002d36 <RCC_AXISSConfig+0x6a>
      break;
10002d2c:	bf00      	nop
10002d2e:	e002      	b.n	10002d36 <RCC_AXISSConfig+0x6a>
      break;
10002d30:	bf00      	nop
10002d32:	e000      	b.n	10002d36 <RCC_AXISSConfig+0x6a>
      break;
10002d34:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
10002d36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002d3c:	f023 0207 	bic.w	r2, r3, #7
10002d40:	687b      	ldr	r3, [r7, #4]
10002d42:	681b      	ldr	r3, [r3, #0]
10002d44:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002d48:	4313      	orrs	r3, r2
10002d4a:	624b      	str	r3, [r1, #36]	; 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
10002d4c:	687b      	ldr	r3, [r7, #4]
10002d4e:	681b      	ldr	r3, [r3, #0]
10002d50:	2b03      	cmp	r3, #3
10002d52:	d016      	beq.n	10002d82 <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002d54:	f7fe fb8c 	bl	10001470 <HAL_GetTick>
10002d58:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10002d5a:	e009      	b.n	10002d70 <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002d5c:	f7fe fb88 	bl	10001470 <HAL_GetTick>
10002d60:	4602      	mov	r2, r0
10002d62:	68fb      	ldr	r3, [r7, #12]
10002d64:	1ad3      	subs	r3, r2, r3
10002d66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002d6a:	d901      	bls.n	10002d70 <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
10002d6c:	2303      	movs	r3, #3
10002d6e:	e040      	b.n	10002df2 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10002d70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002d76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002d7e:	d1ed      	bne.n	10002d5c <RCC_AXISSConfig+0x90>
10002d80:	e015      	b.n	10002dae <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002d82:	f7fe fb75 	bl	10001470 <HAL_GetTick>
10002d86:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10002d88:	e009      	b.n	10002d9e <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002d8a:	f7fe fb71 	bl	10001470 <HAL_GetTick>
10002d8e:	4602      	mov	r2, r0
10002d90:	68fb      	ldr	r3, [r7, #12]
10002d92:	1ad3      	subs	r3, r2, r3
10002d94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002d98:	d901      	bls.n	10002d9e <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
10002d9a:	2303      	movs	r3, #3
10002d9c:	e029      	b.n	10002df2 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10002d9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002da4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002da8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002dac:	d0ed      	beq.n	10002d8a <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
10002dae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002db4:	f023 0207 	bic.w	r2, r3, #7
10002db8:	687b      	ldr	r3, [r7, #4]
10002dba:	685b      	ldr	r3, [r3, #4]
10002dbc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002dc0:	4313      	orrs	r3, r2
10002dc2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002dc4:	f7fe fb54 	bl	10001470 <HAL_GetTick>
10002dc8:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10002dca:	e009      	b.n	10002de0 <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002dcc:	f7fe fb50 	bl	10001470 <HAL_GetTick>
10002dd0:	4602      	mov	r2, r0
10002dd2:	68fb      	ldr	r3, [r7, #12]
10002dd4:	1ad3      	subs	r3, r2, r3
10002dd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002dda:	d901      	bls.n	10002de0 <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
10002ddc:	2303      	movs	r3, #3
10002dde:	e008      	b.n	10002df2 <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10002de0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002de6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002dea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002dee:	d1ed      	bne.n	10002dcc <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
10002df0:	2300      	movs	r3, #0
}
10002df2:	4618      	mov	r0, r3
10002df4:	3710      	adds	r7, #16
10002df6:	46bd      	mov	sp, r7
10002df8:	bd80      	pop	{r7, pc}
	...

10002dfc <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
10002dfc:	b580      	push	{r7, lr}
10002dfe:	b084      	sub	sp, #16
10002e00:	af00      	add	r7, sp, #0
10002e02:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
10002e04:	687b      	ldr	r3, [r7, #4]
10002e06:	681b      	ldr	r3, [r3, #0]
10002e08:	2b03      	cmp	r3, #3
10002e0a:	d834      	bhi.n	10002e76 <RCC_MCUConfig+0x7a>
10002e0c:	a201      	add	r2, pc, #4	; (adr r2, 10002e14 <RCC_MCUConfig+0x18>)
10002e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10002e12:	bf00      	nop
10002e14:	10002e25 	.word	0x10002e25
10002e18:	10002e39 	.word	0x10002e39
10002e1c:	10002e4f 	.word	0x10002e4f
10002e20:	10002e63 	.word	0x10002e63
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10002e24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002e28:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002e2c:	f003 0301 	and.w	r3, r3, #1
10002e30:	2b01      	cmp	r3, #1
10002e32:	d022      	beq.n	10002e7a <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10002e34:	2301      	movs	r3, #1
10002e36:	e081      	b.n	10002f3c <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10002e38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002e3c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
10002e44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10002e48:	d019      	beq.n	10002e7e <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
10002e4a:	2301      	movs	r3, #1
10002e4c:	e076      	b.n	10002f3c <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10002e4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002e52:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002e56:	f003 0310 	and.w	r3, r3, #16
10002e5a:	2b10      	cmp	r3, #16
10002e5c:	d011      	beq.n	10002e82 <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
10002e5e:	2301      	movs	r3, #1
10002e60:	e06c      	b.n	10002f3c <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10002e62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002e66:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002e6a:	f003 0302 	and.w	r3, r3, #2
10002e6e:	2b02      	cmp	r3, #2
10002e70:	d009      	beq.n	10002e86 <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
10002e72:	2301      	movs	r3, #1
10002e74:	e062      	b.n	10002f3c <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
10002e76:	bf00      	nop
10002e78:	e006      	b.n	10002e88 <RCC_MCUConfig+0x8c>
      break;
10002e7a:	bf00      	nop
10002e7c:	e004      	b.n	10002e88 <RCC_MCUConfig+0x8c>
      break;
10002e7e:	bf00      	nop
10002e80:	e002      	b.n	10002e88 <RCC_MCUConfig+0x8c>
      break;
10002e82:	bf00      	nop
10002e84:	e000      	b.n	10002e88 <RCC_MCUConfig+0x8c>
      break;
10002e86:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
10002e88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002e8e:	f023 0203 	bic.w	r2, r3, #3
10002e92:	687b      	ldr	r3, [r7, #4]
10002e94:	681b      	ldr	r3, [r3, #0]
10002e96:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002e9a:	4313      	orrs	r3, r2
10002e9c:	648b      	str	r3, [r1, #72]	; 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002e9e:	f7fe fae7 	bl	10001470 <HAL_GetTick>
10002ea2:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10002ea4:	e009      	b.n	10002eba <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002ea6:	f7fe fae3 	bl	10001470 <HAL_GetTick>
10002eaa:	4602      	mov	r2, r0
10002eac:	68fb      	ldr	r3, [r7, #12]
10002eae:	1ad3      	subs	r3, r2, r3
10002eb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002eb4:	d901      	bls.n	10002eba <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
10002eb6:	2303      	movs	r3, #3
10002eb8:	e040      	b.n	10002f3c <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10002eba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002ec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002ec8:	d1ed      	bne.n	10002ea6 <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10002eca:	f000 f954 	bl	10003176 <HAL_RCC_GetSystemCoreClockFreq>
10002ece:	4603      	mov	r3, r0
10002ed0:	4a1c      	ldr	r2, [pc, #112]	; (10002f44 <RCC_MCUConfig+0x148>)
10002ed2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10002ed4:	4b1c      	ldr	r3, [pc, #112]	; (10002f48 <RCC_MCUConfig+0x14c>)
10002ed6:	681b      	ldr	r3, [r3, #0]
10002ed8:	4618      	mov	r0, r3
10002eda:	f7fe fa7f 	bl	100013dc <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
10002ede:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002ee2:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10002ee6:	f023 020f 	bic.w	r2, r3, #15
10002eea:	687b      	ldr	r3, [r7, #4]
10002eec:	685b      	ldr	r3, [r3, #4]
10002eee:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002ef2:	4313      	orrs	r3, r2
10002ef4:	f8c1 3830 	str.w	r3, [r1, #2096]	; 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002ef8:	f7fe faba 	bl	10001470 <HAL_GetTick>
10002efc:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10002efe:	e009      	b.n	10002f14 <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002f00:	f7fe fab6 	bl	10001470 <HAL_GetTick>
10002f04:	4602      	mov	r2, r0
10002f06:	68fb      	ldr	r3, [r7, #12]
10002f08:	1ad3      	subs	r3, r2, r3
10002f0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002f0e:	d901      	bls.n	10002f14 <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
10002f10:	2303      	movs	r3, #3
10002f12:	e013      	b.n	10002f3c <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10002f14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002f18:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10002f1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002f20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002f24:	d1ec      	bne.n	10002f00 <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10002f26:	f000 f926 	bl	10003176 <HAL_RCC_GetSystemCoreClockFreq>
10002f2a:	4603      	mov	r3, r0
10002f2c:	4a05      	ldr	r2, [pc, #20]	; (10002f44 <RCC_MCUConfig+0x148>)
10002f2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10002f30:	4b05      	ldr	r3, [pc, #20]	; (10002f48 <RCC_MCUConfig+0x14c>)
10002f32:	681b      	ldr	r3, [r3, #0]
10002f34:	4618      	mov	r0, r3
10002f36:	f7fe fa51 	bl	100013dc <HAL_InitTick>
#endif

  return HAL_OK;
10002f3a:	2300      	movs	r3, #0
}
10002f3c:	4618      	mov	r0, r3
10002f3e:	3710      	adds	r7, #16
10002f40:	46bd      	mov	sp, r7
10002f42:	bd80      	pop	{r7, pc}
10002f44:	1002009c 	.word	0x1002009c
10002f48:	100200a0 	.word	0x100200a0

10002f4c <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10002f4c:	b480      	push	{r7}
10002f4e:	b089      	sub	sp, #36	; 0x24
10002f50:	af00      	add	r7, sp, #0
10002f52:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10002f54:	2300      	movs	r3, #0
10002f56:	61bb      	str	r3, [r7, #24]
10002f58:	2301      	movs	r3, #1
10002f5a:	617b      	str	r3, [r7, #20]
10002f5c:	2300      	movs	r3, #0
10002f5e:	613b      	str	r3, [r7, #16]
10002f60:	2300      	movs	r3, #0
10002f62:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10002f64:	f04f 0300 	mov.w	r3, #0
10002f68:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
10002f6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002f6e:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10002f72:	f003 0303 	and.w	r3, r3, #3
10002f76:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10002f78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002f7c:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10002f80:	0c1b      	lsrs	r3, r3, #16
10002f82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10002f86:	3301      	adds	r3, #1
10002f88:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
10002f8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002f8e:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10002f92:	0c1b      	lsrs	r3, r3, #16
10002f94:	f003 0301 	and.w	r3, r3, #1
10002f98:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
10002f9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002f9e:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10002fa2:	08db      	lsrs	r3, r3, #3
10002fa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
10002fa8:	693a      	ldr	r2, [r7, #16]
10002faa:	fb02 f303 	mul.w	r3, r2, r3
10002fae:	ee07 3a90 	vmov	s15, r3
10002fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002fb6:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
10002fba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002fbe:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10002fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
10002fc6:	3301      	adds	r3, #1
10002fc8:	ee07 3a90 	vmov	s15, r3
10002fcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002fd0:	edd7 6a02 	vldr	s13, [r7, #8]
10002fd4:	ed9f 6a56 	vldr	s12, [pc, #344]	; 10003130 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
10002fd8:	eec6 7a86 	vdiv.f32	s15, s13, s12
10002fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
10002fe0:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10002fe4:	69bb      	ldr	r3, [r7, #24]
10002fe6:	2b03      	cmp	r3, #3
10002fe8:	d85b      	bhi.n	100030a2 <HAL_RCC_GetPLL3ClockFreq+0x156>
10002fea:	a201      	add	r2, pc, #4	; (adr r2, 10002ff0 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
10002fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10002ff0:	10003001 	.word	0x10003001
10002ff4:	1000305f 	.word	0x1000305f
10002ff8:	1000307d 	.word	0x1000307d
10002ffc:	1000309b 	.word	0x1000309b
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10003000:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003004:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003008:	f003 0304 	and.w	r3, r3, #4
1000300c:	2b04      	cmp	r3, #4
1000300e:	d117      	bne.n	10003040 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10003010:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003014:	699b      	ldr	r3, [r3, #24]
10003016:	f003 0303 	and.w	r3, r3, #3
1000301a:	4a46      	ldr	r2, [pc, #280]	; (10003134 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
1000301c:	fa22 f303 	lsr.w	r3, r2, r3
10003020:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
10003022:	68fa      	ldr	r2, [r7, #12]
10003024:	697b      	ldr	r3, [r7, #20]
10003026:	fbb2 f3f3 	udiv	r3, r2, r3
1000302a:	ee07 3a90 	vmov	s15, r3
1000302e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10003032:	ed97 7a07 	vldr	s14, [r7, #28]
10003036:	ee67 7a27 	vmul.f32	s15, s14, s15
1000303a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
1000303e:	e030      	b.n	100030a2 <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10003040:	4a3c      	ldr	r2, [pc, #240]	; (10003134 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10003042:	697b      	ldr	r3, [r7, #20]
10003044:	fbb2 f3f3 	udiv	r3, r2, r3
10003048:	ee07 3a90 	vmov	s15, r3
1000304c:	eef8 7a67 	vcvt.f32.u32	s15, s15
10003050:	ed97 7a07 	vldr	s14, [r7, #28]
10003054:	ee67 7a27 	vmul.f32	s15, s14, s15
10003058:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
1000305c:	e021      	b.n	100030a2 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
1000305e:	4a36      	ldr	r2, [pc, #216]	; (10003138 <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
10003060:	697b      	ldr	r3, [r7, #20]
10003062:	fbb2 f3f3 	udiv	r3, r2, r3
10003066:	ee07 3a90 	vmov	s15, r3
1000306a:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000306e:	ed97 7a07 	vldr	s14, [r7, #28]
10003072:	ee67 7a27 	vmul.f32	s15, s14, s15
10003076:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
1000307a:	e012      	b.n	100030a2 <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
1000307c:	4a2f      	ldr	r2, [pc, #188]	; (1000313c <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
1000307e:	697b      	ldr	r3, [r7, #20]
10003080:	fbb2 f3f3 	udiv	r3, r2, r3
10003084:	ee07 3a90 	vmov	s15, r3
10003088:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000308c:	ed97 7a07 	vldr	s14, [r7, #28]
10003090:	ee67 7a27 	vmul.f32	s15, s14, s15
10003094:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10003098:	e003      	b.n	100030a2 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
1000309a:	f04f 0300 	mov.w	r3, #0
1000309e:	61fb      	str	r3, [r7, #28]
      break;
100030a0:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
100030a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100030a6:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
100030aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100030ae:	3301      	adds	r3, #1
100030b0:	ee07 3a90 	vmov	s15, r3
100030b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100030b8:	edd7 6a07 	vldr	s13, [r7, #28]
100030bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
100030c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100030c4:	ee17 2a90 	vmov	r2, s15
100030c8:	687b      	ldr	r3, [r7, #4]
100030ca:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
100030cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100030d0:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
100030d4:	0a1b      	lsrs	r3, r3, #8
100030d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100030da:	3301      	adds	r3, #1
100030dc:	ee07 3a90 	vmov	s15, r3
100030e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100030e4:	edd7 6a07 	vldr	s13, [r7, #28]
100030e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
100030ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100030f0:	ee17 2a90 	vmov	r2, s15
100030f4:	687b      	ldr	r3, [r7, #4]
100030f6:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
100030f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100030fc:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10003100:	0c1b      	lsrs	r3, r3, #16
10003102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10003106:	3301      	adds	r3, #1
10003108:	ee07 3a90 	vmov	s15, r3
1000310c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10003110:	edd7 6a07 	vldr	s13, [r7, #28]
10003114:	eec6 7a87 	vdiv.f32	s15, s13, s14
10003118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1000311c:	ee17 2a90 	vmov	r2, s15
10003120:	687b      	ldr	r3, [r7, #4]
10003122:	609a      	str	r2, [r3, #8]
}
10003124:	bf00      	nop
10003126:	3724      	adds	r7, #36	; 0x24
10003128:	46bd      	mov	sp, r7
1000312a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000312e:	4770      	bx	lr
10003130:	46000000 	.word	0x46000000
10003134:	03d09000 	.word	0x03d09000
10003138:	016e3600 	.word	0x016e3600
1000313c:	003d0900 	.word	0x003d0900

10003140 <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
10003140:	b580      	push	{r7, lr}
10003142:	b082      	sub	sp, #8
10003144:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
10003146:	2300      	movs	r3, #0
10003148:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
1000314a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000314e:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10003152:	f003 030f 	and.w	r3, r3, #15
10003156:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
10003158:	687b      	ldr	r3, [r7, #4]
1000315a:	2b09      	cmp	r3, #9
1000315c:	d901      	bls.n	10003162 <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
1000315e:	2309      	movs	r3, #9
10003160:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
10003162:	f000 f80f 	bl	10003184 <HAL_RCC_GetMCUSSFreq>
10003166:	4602      	mov	r2, r0
10003168:	687b      	ldr	r3, [r7, #4]
1000316a:	fa22 f303 	lsr.w	r3, r2, r3
}
1000316e:	4618      	mov	r0, r3
10003170:	3708      	adds	r7, #8
10003172:	46bd      	mov	sp, r7
10003174:	bd80      	pop	{r7, pc}

10003176 <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
10003176:	b580      	push	{r7, lr}
10003178:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
1000317a:	f7ff ffe1 	bl	10003140 <HAL_RCC_GetMCUFreq>
1000317e:	4603      	mov	r3, r0
#endif
}
10003180:	4618      	mov	r0, r3
10003182:	bd80      	pop	{r7, pc}

10003184 <HAL_RCC_GetMCUSSFreq>:

  return axissfreq;
}

uint32_t HAL_RCC_GetMCUSSFreq()
{
10003184:	b580      	push	{r7, lr}
10003186:	b084      	sub	sp, #16
10003188:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
1000318a:	2300      	movs	r3, #0
1000318c:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
1000318e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003194:	f003 0303 	and.w	r3, r3, #3
10003198:	2b03      	cmp	r3, #3
1000319a:	d822      	bhi.n	100031e2 <HAL_RCC_GetMCUSSFreq+0x5e>
1000319c:	a201      	add	r2, pc, #4	; (adr r2, 100031a4 <HAL_RCC_GetMCUSSFreq+0x20>)
1000319e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100031a2:	bf00      	nop
100031a4:	100031c3 	.word	0x100031c3
100031a8:	100031d7 	.word	0x100031d7
100031ac:	100031dd 	.word	0x100031dd
100031b0:	100031b5 	.word	0x100031b5
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100031b4:	463b      	mov	r3, r7
100031b6:	4618      	mov	r0, r3
100031b8:	f7ff fec8 	bl	10002f4c <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
100031bc:	683b      	ldr	r3, [r7, #0]
100031be:	60fb      	str	r3, [r7, #12]
      break;
100031c0:	e00f      	b.n	100031e2 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100031c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100031c6:	699b      	ldr	r3, [r3, #24]
100031c8:	f003 0303 	and.w	r3, r3, #3
100031cc:	4a07      	ldr	r2, [pc, #28]	; (100031ec <HAL_RCC_GetMCUSSFreq+0x68>)
100031ce:	fa22 f303 	lsr.w	r3, r2, r3
100031d2:	60fb      	str	r3, [r7, #12]

      break;
100031d4:	e005      	b.n	100031e2 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
100031d6:	4b06      	ldr	r3, [pc, #24]	; (100031f0 <HAL_RCC_GetMCUSSFreq+0x6c>)
100031d8:	60fb      	str	r3, [r7, #12]
      break;
100031da:	e002      	b.n	100031e2 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
100031dc:	4b05      	ldr	r3, [pc, #20]	; (100031f4 <HAL_RCC_GetMCUSSFreq+0x70>)
100031de:	60fb      	str	r3, [r7, #12]
      break;
100031e0:	bf00      	nop
  }

  return mcussfreq;
100031e2:	68fb      	ldr	r3, [r7, #12]
}
100031e4:	4618      	mov	r0, r3
100031e6:	3710      	adds	r7, #16
100031e8:	46bd      	mov	sp, r7
100031ea:	bd80      	pop	{r7, pc}
100031ec:	03d09000 	.word	0x03d09000
100031f0:	016e3600 	.word	0x016e3600
100031f4:	003d0900 	.word	0x003d0900

100031f8 <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
100031f8:	b580      	push	{r7, lr}
100031fa:	b084      	sub	sp, #16
100031fc:	af00      	add	r7, sp, #0
100031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
10003200:	687b      	ldr	r3, [r7, #4]
10003202:	681b      	ldr	r3, [r3, #0]
10003204:	2b00      	cmp	r3, #0
10003206:	f000 8171 	beq.w	100034ec <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
1000320a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003210:	f003 0307 	and.w	r3, r3, #7
10003214:	2b02      	cmp	r3, #2
10003216:	d108      	bne.n	1000322a <RCCEx_PLL2_Config+0x32>
10003218:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000321e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003222:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003226:	f000 815f 	beq.w	100034e8 <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
1000322a:	687b      	ldr	r3, [r7, #4]
1000322c:	681b      	ldr	r3, [r3, #0]
1000322e:	2b02      	cmp	r3, #2
10003230:	f040 8130 	bne.w	10003494 <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10003234:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000323a:	f003 0303 	and.w	r3, r3, #3
1000323e:	2b00      	cmp	r3, #0
10003240:	d008      	beq.n	10003254 <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
10003242:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10003248:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
1000324c:	2b01      	cmp	r3, #1
1000324e:	d001      	beq.n	10003254 <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
10003250:	2301      	movs	r3, #1
10003252:	e14c      	b.n	100034ee <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10003254:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000325c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10003264:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
10003268:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000326c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003270:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003274:	f023 0301 	bic.w	r3, r3, #1
10003278:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000327c:	f7fe f8f8 	bl	10001470 <HAL_GetTick>
10003280:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10003282:	e008      	b.n	10003296 <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003284:	f7fe f8f4 	bl	10001470 <HAL_GetTick>
10003288:	4602      	mov	r2, r0
1000328a:	68fb      	ldr	r3, [r7, #12]
1000328c:	1ad3      	subs	r3, r2, r3
1000328e:	2b64      	cmp	r3, #100	; 0x64
10003290:	d901      	bls.n	10003296 <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
10003292:	2303      	movs	r3, #3
10003294:	e12b      	b.n	100034ee <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10003296:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000329a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000329e:	f003 0302 	and.w	r3, r3, #2
100032a2:	2b02      	cmp	r3, #2
100032a4:	d0ee      	beq.n	10003284 <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
100032a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100032aa:	6a1b      	ldr	r3, [r3, #32]
100032ac:	f003 0303 	and.w	r3, r3, #3
100032b0:	2b02      	cmp	r3, #2
100032b2:	d107      	bne.n	100032c4 <RCCEx_PLL2_Config+0xcc>
100032b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100032b8:	6a1b      	ldr	r3, [r3, #32]
100032ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100032be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100032c2:	d00e      	beq.n	100032e2 <RCCEx_PLL2_Config+0xea>
100032c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100032c8:	6a1b      	ldr	r3, [r3, #32]
100032ca:	f003 0303 	and.w	r3, r3, #3
100032ce:	2b03      	cmp	r3, #3
100032d0:	d112      	bne.n	100032f8 <RCCEx_PLL2_Config+0x100>
100032d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100032d6:	6a1b      	ldr	r3, [r3, #32]
100032d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100032dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100032e0:	d10a      	bne.n	100032f8 <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
100032e2:	687b      	ldr	r3, [r7, #4]
100032e4:	685a      	ldr	r2, [r3, #4]
100032e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100032ec:	f003 0303 	and.w	r3, r3, #3
100032f0:	429a      	cmp	r2, r3
100032f2:	d00c      	beq.n	1000330e <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
100032f4:	2301      	movs	r3, #1
100032f6:	e0fa      	b.n	100034ee <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
100032f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100032fe:	f023 0203 	bic.w	r2, r3, #3
10003302:	687b      	ldr	r3, [r7, #4]
10003304:	685b      	ldr	r3, [r3, #4]
10003306:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000330a:	4313      	orrs	r3, r2
1000330c:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
1000330e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003312:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
10003316:	4b78      	ldr	r3, [pc, #480]	; (100034f8 <RCCEx_PLL2_Config+0x300>)
10003318:	4013      	ands	r3, r2
1000331a:	687a      	ldr	r2, [r7, #4]
1000331c:	68d2      	ldr	r2, [r2, #12]
1000331e:	1e51      	subs	r1, r2, #1
10003320:	687a      	ldr	r2, [r7, #4]
10003322:	6892      	ldr	r2, [r2, #8]
10003324:	3a01      	subs	r2, #1
10003326:	0412      	lsls	r2, r2, #16
10003328:	430a      	orrs	r2, r1
1000332a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000332e:	4313      	orrs	r3, r2
10003330:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
10003334:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003338:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
1000333c:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10003340:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10003344:	687a      	ldr	r2, [r7, #4]
10003346:	6912      	ldr	r2, [r2, #16]
10003348:	1e51      	subs	r1, r2, #1
1000334a:	687a      	ldr	r2, [r7, #4]
1000334c:	6952      	ldr	r2, [r2, #20]
1000334e:	3a01      	subs	r2, #1
10003350:	0212      	lsls	r2, r2, #8
10003352:	4311      	orrs	r1, r2
10003354:	687a      	ldr	r2, [r7, #4]
10003356:	6992      	ldr	r2, [r2, #24]
10003358:	3a01      	subs	r2, #1
1000335a:	0412      	lsls	r2, r2, #16
1000335c:	430a      	orrs	r2, r1
1000335e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003362:	4313      	orrs	r3, r2
10003364:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
10003368:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000336c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10003370:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10003378:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
1000337c:	687b      	ldr	r3, [r7, #4]
1000337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003380:	2b02      	cmp	r3, #2
10003382:	d003      	beq.n	1000338c <RCCEx_PLL2_Config+0x194>
10003384:	687b      	ldr	r3, [r7, #4]
10003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003388:	2b00      	cmp	r3, #0
1000338a:	d10c      	bne.n	100033a6 <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
1000338c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003390:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10003394:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003398:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000339c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100033a0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
100033a4:	e00f      	b.n	100033c6 <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
100033a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100033aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
100033ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100033b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100033b6:	687a      	ldr	r2, [r7, #4]
100033b8:	6a12      	ldr	r2, [r2, #32]
100033ba:	00d2      	lsls	r2, r2, #3
100033bc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100033c0:	4313      	orrs	r3, r2
100033c2:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
100033c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100033ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
100033ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100033d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
100033d6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100033da:	687b      	ldr	r3, [r7, #4]
100033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100033de:	2b02      	cmp	r3, #2
100033e0:	d124      	bne.n	1000342c <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
100033e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100033e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
100033ea:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
100033ee:	687b      	ldr	r3, [r7, #4]
100033f0:	6a99      	ldr	r1, [r3, #40]	; 0x28
100033f2:	687b      	ldr	r3, [r7, #4]
100033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100033f6:	4319      	orrs	r1, r3
100033f8:	687b      	ldr	r3, [r7, #4]
100033fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100033fc:	4319      	orrs	r1, r3
100033fe:	687b      	ldr	r3, [r7, #4]
10003400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10003402:	4319      	orrs	r1, r3
10003404:	687b      	ldr	r3, [r7, #4]
10003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10003408:	041b      	lsls	r3, r3, #16
1000340a:	430b      	orrs	r3, r1
1000340c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003410:	4313      	orrs	r3, r2
10003412:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
10003416:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000341a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000341e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003422:	f043 0304 	orr.w	r3, r3, #4
10003426:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
1000342a:	e009      	b.n	10003440 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
1000342c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003434:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003438:	f023 0304 	bic.w	r3, r3, #4
1000343c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
10003440:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003444:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003448:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000344c:	f043 0301 	orr.w	r3, r3, #1
10003450:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003454:	f7fe f80c 	bl	10001470 <HAL_GetTick>
10003458:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
1000345a:	e008      	b.n	1000346e <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000345c:	f7fe f808 	bl	10001470 <HAL_GetTick>
10003460:	4602      	mov	r2, r0
10003462:	68fb      	ldr	r3, [r7, #12]
10003464:	1ad3      	subs	r3, r2, r3
10003466:	2b64      	cmp	r3, #100	; 0x64
10003468:	d901      	bls.n	1000346e <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
1000346a:	2303      	movs	r3, #3
1000346c:	e03f      	b.n	100034ee <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
1000346e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003476:	f003 0302 	and.w	r3, r3, #2
1000347a:	2b02      	cmp	r3, #2
1000347c:	d1ee      	bne.n	1000345c <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
1000347e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003486:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000348a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
1000348e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
10003492:	e02b      	b.n	100034ec <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10003494:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003498:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000349c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100034a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100034a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
100034a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100034ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100034b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100034b4:	f023 0301 	bic.w	r3, r3, #1
100034b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100034bc:	f7fd ffd8 	bl	10001470 <HAL_GetTick>
100034c0:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100034c2:	e008      	b.n	100034d6 <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100034c4:	f7fd ffd4 	bl	10001470 <HAL_GetTick>
100034c8:	4602      	mov	r2, r0
100034ca:	68fb      	ldr	r3, [r7, #12]
100034cc:	1ad3      	subs	r3, r2, r3
100034ce:	2b64      	cmp	r3, #100	; 0x64
100034d0:	d901      	bls.n	100034d6 <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
100034d2:	2303      	movs	r3, #3
100034d4:	e00b      	b.n	100034ee <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100034d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100034da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100034de:	f003 0302 	and.w	r3, r3, #2
100034e2:	2b02      	cmp	r3, #2
100034e4:	d0ee      	beq.n	100034c4 <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
100034e6:	e001      	b.n	100034ec <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100034e8:	2301      	movs	r3, #1
100034ea:	e000      	b.n	100034ee <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
100034ec:	2300      	movs	r3, #0

}
100034ee:	4618      	mov	r0, r3
100034f0:	3710      	adds	r7, #16
100034f2:	46bd      	mov	sp, r7
100034f4:	bd80      	pop	{r7, pc}
100034f6:	bf00      	nop
100034f8:	ffc0fe00 	.word	0xffc0fe00

100034fc <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
100034fc:	b580      	push	{r7, lr}
100034fe:	b084      	sub	sp, #16
10003500:	af00      	add	r7, sp, #0
10003502:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
10003504:	687b      	ldr	r3, [r7, #4]
10003506:	681b      	ldr	r3, [r3, #0]
10003508:	2b00      	cmp	r3, #0
1000350a:	f000 815a 	beq.w	100037c2 <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
1000350e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003514:	f003 0303 	and.w	r3, r3, #3
10003518:	2b03      	cmp	r3, #3
1000351a:	d108      	bne.n	1000352e <RCCEx_PLL3_Config+0x32>
1000351c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003522:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003526:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000352a:	f000 8148 	beq.w	100037be <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
1000352e:	687b      	ldr	r3, [r7, #4]
10003530:	681b      	ldr	r3, [r3, #0]
10003532:	2b02      	cmp	r3, #2
10003534:	f040 8119 	bne.w	1000376a <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10003538:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000353c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003540:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10003548:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
1000354c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003550:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003554:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003558:	f023 0301 	bic.w	r3, r3, #1
1000355c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003560:	f7fd ff86 	bl	10001470 <HAL_GetTick>
10003564:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10003566:	e008      	b.n	1000357a <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003568:	f7fd ff82 	bl	10001470 <HAL_GetTick>
1000356c:	4602      	mov	r2, r0
1000356e:	68fb      	ldr	r3, [r7, #12]
10003570:	1ad3      	subs	r3, r2, r3
10003572:	2b64      	cmp	r3, #100	; 0x64
10003574:	d901      	bls.n	1000357a <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
10003576:	2303      	movs	r3, #3
10003578:	e124      	b.n	100037c4 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
1000357a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000357e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003582:	f003 0302 	and.w	r3, r3, #2
10003586:	2b02      	cmp	r3, #2
10003588:	d0ee      	beq.n	10003568 <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
1000358a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000358e:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10003592:	f023 0203 	bic.w	r2, r3, #3
10003596:	687b      	ldr	r3, [r7, #4]
10003598:	685b      	ldr	r3, [r3, #4]
1000359a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000359e:	4313      	orrs	r3, r2
100035a0:	f8c1 3820 	str.w	r3, [r1, #2080]	; 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
100035a4:	e008      	b.n	100035b8 <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100035a6:	f7fd ff63 	bl	10001470 <HAL_GetTick>
100035aa:	4602      	mov	r2, r0
100035ac:	68fb      	ldr	r3, [r7, #12]
100035ae:	1ad3      	subs	r3, r2, r3
100035b0:	2b64      	cmp	r3, #100	; 0x64
100035b2:	d901      	bls.n	100035b8 <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
100035b4:	2303      	movs	r3, #3
100035b6:	e105      	b.n	100037c4 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
100035b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100035bc:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
100035c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100035c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100035c8:	d1ed      	bne.n	100035a6 <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
100035ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100035ce:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
100035d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
100035d6:	687b      	ldr	r3, [r7, #4]
100035d8:	69db      	ldr	r3, [r3, #28]
100035da:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100035de:	4313      	orrs	r3, r2
100035e0:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
100035e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100035e8:	f8d3 2884 	ldr.w	r2, [r3, #2180]	; 0x884
100035ec:	4b77      	ldr	r3, [pc, #476]	; (100037cc <RCCEx_PLL3_Config+0x2d0>)
100035ee:	4013      	ands	r3, r2
100035f0:	687a      	ldr	r2, [r7, #4]
100035f2:	68d2      	ldr	r2, [r2, #12]
100035f4:	1e51      	subs	r1, r2, #1
100035f6:	687a      	ldr	r2, [r7, #4]
100035f8:	6892      	ldr	r2, [r2, #8]
100035fa:	3a01      	subs	r2, #1
100035fc:	0412      	lsls	r2, r2, #16
100035fe:	430a      	orrs	r2, r1
10003600:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003604:	4313      	orrs	r3, r2
10003606:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884
1000360a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000360e:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10003612:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10003616:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
1000361a:	687a      	ldr	r2, [r7, #4]
1000361c:	6912      	ldr	r2, [r2, #16]
1000361e:	1e51      	subs	r1, r2, #1
10003620:	687a      	ldr	r2, [r7, #4]
10003622:	6952      	ldr	r2, [r2, #20]
10003624:	3a01      	subs	r2, #1
10003626:	0212      	lsls	r2, r2, #8
10003628:	4311      	orrs	r1, r2
1000362a:	687a      	ldr	r2, [r7, #4]
1000362c:	6992      	ldr	r2, [r2, #24]
1000362e:	3a01      	subs	r2, #1
10003630:	0412      	lsls	r2, r2, #16
10003632:	430a      	orrs	r2, r1
10003634:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003638:	4313      	orrs	r3, r2
1000363a:	f8c1 3888 	str.w	r3, [r1, #2184]	; 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
1000363e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003642:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10003646:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000364a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1000364e:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
10003652:	687b      	ldr	r3, [r7, #4]
10003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003656:	2b02      	cmp	r3, #2
10003658:	d003      	beq.n	10003662 <RCCEx_PLL3_Config+0x166>
1000365a:	687b      	ldr	r3, [r7, #4]
1000365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000365e:	2b00      	cmp	r3, #0
10003660:	d10c      	bne.n	1000367c <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
10003662:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003666:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
1000366a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000366e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10003672:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10003676:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
1000367a:	e00f      	b.n	1000369c <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
1000367c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003680:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10003684:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10003688:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000368c:	687a      	ldr	r2, [r7, #4]
1000368e:	6a12      	ldr	r2, [r2, #32]
10003690:	00d2      	lsls	r2, r2, #3
10003692:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003696:	4313      	orrs	r3, r2
10003698:	f8c1 388c 	str.w	r3, [r1, #2188]	; 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
1000369c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100036a0:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100036a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100036a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
100036ac:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100036b0:	687b      	ldr	r3, [r7, #4]
100036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100036b4:	2b02      	cmp	r3, #2
100036b6:	d124      	bne.n	10003702 <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
100036b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100036bc:	f8d3 3890 	ldr.w	r3, [r3, #2192]	; 0x890
100036c0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
100036c4:	687b      	ldr	r3, [r7, #4]
100036c6:	6a99      	ldr	r1, [r3, #40]	; 0x28
100036c8:	687b      	ldr	r3, [r7, #4]
100036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100036cc:	4319      	orrs	r1, r3
100036ce:	687b      	ldr	r3, [r7, #4]
100036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100036d2:	4319      	orrs	r1, r3
100036d4:	687b      	ldr	r3, [r7, #4]
100036d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100036d8:	4319      	orrs	r1, r3
100036da:	687b      	ldr	r3, [r7, #4]
100036dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100036de:	041b      	lsls	r3, r3, #16
100036e0:	430b      	orrs	r3, r1
100036e2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100036e6:	4313      	orrs	r3, r2
100036e8:	f8c1 3890 	str.w	r3, [r1, #2192]	; 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
100036ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100036f0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100036f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100036f8:	f043 0304 	orr.w	r3, r3, #4
100036fc:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
10003700:	e009      	b.n	10003716 <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
10003702:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003706:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000370a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000370e:	f023 0304 	bic.w	r3, r3, #4
10003712:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
10003716:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000371a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000371e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003722:	f043 0301 	orr.w	r3, r3, #1
10003726:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000372a:	f7fd fea1 	bl	10001470 <HAL_GetTick>
1000372e:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10003730:	e008      	b.n	10003744 <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003732:	f7fd fe9d 	bl	10001470 <HAL_GetTick>
10003736:	4602      	mov	r2, r0
10003738:	68fb      	ldr	r3, [r7, #12]
1000373a:	1ad3      	subs	r3, r2, r3
1000373c:	2b64      	cmp	r3, #100	; 0x64
1000373e:	d901      	bls.n	10003744 <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
10003740:	2303      	movs	r3, #3
10003742:	e03f      	b.n	100037c4 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10003744:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003748:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000374c:	f003 0302 	and.w	r3, r3, #2
10003750:	2b02      	cmp	r3, #2
10003752:	d1ee      	bne.n	10003732 <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10003754:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003758:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000375c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003760:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10003764:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
10003768:	e02b      	b.n	100037c2 <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
1000376a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000376e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003772:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
1000377a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
1000377e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003782:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003786:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000378a:	f023 0301 	bic.w	r3, r3, #1
1000378e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003792:	f7fd fe6d 	bl	10001470 <HAL_GetTick>
10003796:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10003798:	e008      	b.n	100037ac <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000379a:	f7fd fe69 	bl	10001470 <HAL_GetTick>
1000379e:	4602      	mov	r2, r0
100037a0:	68fb      	ldr	r3, [r7, #12]
100037a2:	1ad3      	subs	r3, r2, r3
100037a4:	2b64      	cmp	r3, #100	; 0x64
100037a6:	d901      	bls.n	100037ac <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
100037a8:	2303      	movs	r3, #3
100037aa:	e00b      	b.n	100037c4 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100037ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100037b0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100037b4:	f003 0302 	and.w	r3, r3, #2
100037b8:	2b02      	cmp	r3, #2
100037ba:	d0ee      	beq.n	1000379a <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
100037bc:	e001      	b.n	100037c2 <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100037be:	2301      	movs	r3, #1
100037c0:	e000      	b.n	100037c4 <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
100037c2:	2300      	movs	r3, #0
}
100037c4:	4618      	mov	r0, r3
100037c6:	3710      	adds	r7, #16
100037c8:	46bd      	mov	sp, r7
100037ca:	bd80      	pop	{r7, pc}
100037cc:	ffc0fe00 	.word	0xffc0fe00

100037d0 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
100037d0:	b580      	push	{r7, lr}
100037d2:	b084      	sub	sp, #16
100037d4:	af00      	add	r7, sp, #0
100037d6:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
100037d8:	687b      	ldr	r3, [r7, #4]
100037da:	681b      	ldr	r3, [r3, #0]
100037dc:	2b00      	cmp	r3, #0
100037de:	f000 8147 	beq.w	10003a70 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
100037e2:	687b      	ldr	r3, [r7, #4]
100037e4:	681b      	ldr	r3, [r3, #0]
100037e6:	2b02      	cmp	r3, #2
100037e8:	f040 8119 	bne.w	10003a1e <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
100037ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100037f0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100037f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100037f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100037fc:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
10003800:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003804:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003808:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000380c:	f023 0301 	bic.w	r3, r3, #1
10003810:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10003814:	f7fd fe2c 	bl	10001470 <HAL_GetTick>
10003818:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
1000381a:	e008      	b.n	1000382e <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000381c:	f7fd fe28 	bl	10001470 <HAL_GetTick>
10003820:	4602      	mov	r2, r0
10003822:	68fb      	ldr	r3, [r7, #12]
10003824:	1ad3      	subs	r3, r2, r3
10003826:	2b64      	cmp	r3, #100	; 0x64
10003828:	d901      	bls.n	1000382e <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
1000382a:	2303      	movs	r3, #3
1000382c:	e121      	b.n	10003a72 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
1000382e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003832:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003836:	f003 0302 	and.w	r3, r3, #2
1000383a:	2b02      	cmp	r3, #2
1000383c:	d0ee      	beq.n	1000381c <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
1000383e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003842:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10003846:	f023 0203 	bic.w	r2, r3, #3
1000384a:	687b      	ldr	r3, [r7, #4]
1000384c:	685b      	ldr	r3, [r3, #4]
1000384e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003852:	4313      	orrs	r3, r2
10003854:	f8c1 3824 	str.w	r3, [r1, #2084]	; 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10003858:	e008      	b.n	1000386c <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000385a:	f7fd fe09 	bl	10001470 <HAL_GetTick>
1000385e:	4602      	mov	r2, r0
10003860:	68fb      	ldr	r3, [r7, #12]
10003862:	1ad3      	subs	r3, r2, r3
10003864:	2b64      	cmp	r3, #100	; 0x64
10003866:	d901      	bls.n	1000386c <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
10003868:	2303      	movs	r3, #3
1000386a:	e102      	b.n	10003a72 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
1000386c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003870:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10003874:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003878:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000387c:	d1ed      	bne.n	1000385a <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
1000387e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003882:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
10003886:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
1000388a:	687b      	ldr	r3, [r7, #4]
1000388c:	69db      	ldr	r3, [r3, #28]
1000388e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003892:	4313      	orrs	r3, r2
10003894:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
10003898:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000389c:	f8d3 2898 	ldr.w	r2, [r3, #2200]	; 0x898
100038a0:	4b76      	ldr	r3, [pc, #472]	; (10003a7c <RCCEx_PLL4_Config+0x2ac>)
100038a2:	4013      	ands	r3, r2
100038a4:	687a      	ldr	r2, [r7, #4]
100038a6:	68d2      	ldr	r2, [r2, #12]
100038a8:	1e51      	subs	r1, r2, #1
100038aa:	687a      	ldr	r2, [r7, #4]
100038ac:	6892      	ldr	r2, [r2, #8]
100038ae:	3a01      	subs	r2, #1
100038b0:	0412      	lsls	r2, r2, #16
100038b2:	430a      	orrs	r2, r1
100038b4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100038b8:	4313      	orrs	r3, r2
100038ba:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898
100038be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100038c2:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
100038c6:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
100038ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
100038ce:	687a      	ldr	r2, [r7, #4]
100038d0:	6912      	ldr	r2, [r2, #16]
100038d2:	1e51      	subs	r1, r2, #1
100038d4:	687a      	ldr	r2, [r7, #4]
100038d6:	6952      	ldr	r2, [r2, #20]
100038d8:	3a01      	subs	r2, #1
100038da:	0212      	lsls	r2, r2, #8
100038dc:	4311      	orrs	r1, r2
100038de:	687a      	ldr	r2, [r7, #4]
100038e0:	6992      	ldr	r2, [r2, #24]
100038e2:	3a01      	subs	r2, #1
100038e4:	0412      	lsls	r2, r2, #16
100038e6:	430a      	orrs	r2, r1
100038e8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100038ec:	4313      	orrs	r3, r2
100038ee:	f8c1 389c 	str.w	r3, [r1, #2204]	; 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
100038f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100038f6:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100038fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100038fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10003902:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
10003906:	687b      	ldr	r3, [r7, #4]
10003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000390a:	2b02      	cmp	r3, #2
1000390c:	d003      	beq.n	10003916 <RCCEx_PLL4_Config+0x146>
1000390e:	687b      	ldr	r3, [r7, #4]
10003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003912:	2b00      	cmp	r3, #0
10003914:	d10c      	bne.n	10003930 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
10003916:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000391a:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
1000391e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10003926:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000392a:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
1000392e:	e00f      	b.n	10003950 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10003930:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003934:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10003938:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000393c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10003940:	687a      	ldr	r2, [r7, #4]
10003942:	6a12      	ldr	r2, [r2, #32]
10003944:	00d2      	lsls	r2, r2, #3
10003946:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000394a:	4313      	orrs	r3, r2
1000394c:	f8c1 38a0 	str.w	r3, [r1, #2208]	; 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
10003950:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003954:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10003958:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000395c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10003960:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10003964:	687b      	ldr	r3, [r7, #4]
10003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003968:	2b02      	cmp	r3, #2
1000396a:	d124      	bne.n	100039b6 <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
1000396c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003970:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	; 0x8a4
10003974:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10003978:	687b      	ldr	r3, [r7, #4]
1000397a:	6a99      	ldr	r1, [r3, #40]	; 0x28
1000397c:	687b      	ldr	r3, [r7, #4]
1000397e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10003980:	4319      	orrs	r1, r3
10003982:	687b      	ldr	r3, [r7, #4]
10003984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10003986:	4319      	orrs	r1, r3
10003988:	687b      	ldr	r3, [r7, #4]
1000398a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000398c:	4319      	orrs	r1, r3
1000398e:	687b      	ldr	r3, [r7, #4]
10003990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10003992:	041b      	lsls	r3, r3, #16
10003994:	430b      	orrs	r3, r1
10003996:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000399a:	4313      	orrs	r3, r2
1000399c:	f8c1 38a4 	str.w	r3, [r1, #2212]	; 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
100039a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039a4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100039a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100039ac:	f043 0304 	orr.w	r3, r3, #4
100039b0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
100039b4:	e009      	b.n	100039ca <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
100039b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039ba:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100039be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100039c2:	f023 0304 	bic.w	r3, r3, #4
100039c6:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
100039ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039ce:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100039d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100039d6:	f043 0301 	orr.w	r3, r3, #1
100039da:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100039de:	f7fd fd47 	bl	10001470 <HAL_GetTick>
100039e2:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
100039e4:	e008      	b.n	100039f8 <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100039e6:	f7fd fd43 	bl	10001470 <HAL_GetTick>
100039ea:	4602      	mov	r2, r0
100039ec:	68fb      	ldr	r3, [r7, #12]
100039ee:	1ad3      	subs	r3, r2, r3
100039f0:	2b64      	cmp	r3, #100	; 0x64
100039f2:	d901      	bls.n	100039f8 <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
100039f4:	2303      	movs	r3, #3
100039f6:	e03c      	b.n	10003a72 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
100039f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039fc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003a00:	f003 0302 	and.w	r3, r3, #2
10003a04:	2b02      	cmp	r3, #2
10003a06:	d1ee      	bne.n	100039e6 <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10003a08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a0c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003a10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003a14:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10003a18:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10003a1c:	e028      	b.n	10003a70 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10003a1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a22:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003a26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10003a2e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
10003a32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a36:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003a3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003a3e:	f023 0301 	bic.w	r3, r3, #1
10003a42:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10003a46:	f7fd fd13 	bl	10001470 <HAL_GetTick>
10003a4a:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10003a4c:	e008      	b.n	10003a60 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003a4e:	f7fd fd0f 	bl	10001470 <HAL_GetTick>
10003a52:	4602      	mov	r2, r0
10003a54:	68fb      	ldr	r3, [r7, #12]
10003a56:	1ad3      	subs	r3, r2, r3
10003a58:	2b64      	cmp	r3, #100	; 0x64
10003a5a:	d901      	bls.n	10003a60 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
10003a5c:	2303      	movs	r3, #3
10003a5e:	e008      	b.n	10003a72 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10003a60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a64:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003a68:	f003 0302 	and.w	r3, r3, #2
10003a6c:	2b02      	cmp	r3, #2
10003a6e:	d0ee      	beq.n	10003a4e <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
10003a70:	2300      	movs	r3, #0
}
10003a72:	4618      	mov	r0, r3
10003a74:	3710      	adds	r7, #16
10003a76:	46bd      	mov	sp, r7
10003a78:	bd80      	pop	{r7, pc}
10003a7a:	bf00      	nop
10003a7c:	ffc0fe00 	.word	0xffc0fe00

10003a80 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
10003a80:	b480      	push	{r7}
10003a82:	b083      	sub	sp, #12
10003a84:	af00      	add	r7, sp, #0
10003a86:	6078      	str	r0, [r7, #4]
	list->prev = list;
10003a88:	687b      	ldr	r3, [r7, #4]
10003a8a:	687a      	ldr	r2, [r7, #4]
10003a8c:	605a      	str	r2, [r3, #4]
	list->next = list;
10003a8e:	687b      	ldr	r3, [r7, #4]
10003a90:	687a      	ldr	r2, [r7, #4]
10003a92:	601a      	str	r2, [r3, #0]
}
10003a94:	bf00      	nop
10003a96:	370c      	adds	r7, #12
10003a98:	46bd      	mov	sp, r7
10003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
10003a9e:	4770      	bx	lr

10003aa0 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
10003aa0:	b480      	push	{r7}
10003aa2:	b083      	sub	sp, #12
10003aa4:	af00      	add	r7, sp, #0
10003aa6:	6078      	str	r0, [r7, #4]
10003aa8:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
10003aaa:	687b      	ldr	r3, [r7, #4]
10003aac:	685a      	ldr	r2, [r3, #4]
10003aae:	683b      	ldr	r3, [r7, #0]
10003ab0:	605a      	str	r2, [r3, #4]
	new_node->next = node;
10003ab2:	683b      	ldr	r3, [r7, #0]
10003ab4:	687a      	ldr	r2, [r7, #4]
10003ab6:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
10003ab8:	683b      	ldr	r3, [r7, #0]
10003aba:	681b      	ldr	r3, [r3, #0]
10003abc:	683a      	ldr	r2, [r7, #0]
10003abe:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
10003ac0:	683b      	ldr	r3, [r7, #0]
10003ac2:	685b      	ldr	r3, [r3, #4]
10003ac4:	683a      	ldr	r2, [r7, #0]
10003ac6:	601a      	str	r2, [r3, #0]
}
10003ac8:	bf00      	nop
10003aca:	370c      	adds	r7, #12
10003acc:	46bd      	mov	sp, r7
10003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
10003ad2:	4770      	bx	lr

10003ad4 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
10003ad4:	b580      	push	{r7, lr}
10003ad6:	b082      	sub	sp, #8
10003ad8:	af00      	add	r7, sp, #0
10003ada:	6078      	str	r0, [r7, #4]
10003adc:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
10003ade:	6839      	ldr	r1, [r7, #0]
10003ae0:	6878      	ldr	r0, [r7, #4]
10003ae2:	f7ff ffdd 	bl	10003aa0 <metal_list_add_before>
}
10003ae6:	bf00      	nop
10003ae8:	3708      	adds	r7, #8
10003aea:	46bd      	mov	sp, r7
10003aec:	bd80      	pop	{r7, pc}

10003aee <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
10003aee:	b580      	push	{r7, lr}
10003af0:	b082      	sub	sp, #8
10003af2:	af00      	add	r7, sp, #0
10003af4:	6078      	str	r0, [r7, #4]
10003af6:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
10003af8:	6839      	ldr	r1, [r7, #0]
10003afa:	6878      	ldr	r0, [r7, #4]
10003afc:	f000 fbc2 	bl	10004284 <metal_machine_cache_flush>
}
10003b00:	bf00      	nop
10003b02:	3708      	adds	r7, #8
10003b04:	46bd      	mov	sp, r7
10003b06:	bd80      	pop	{r7, pc}

10003b08 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
10003b08:	b580      	push	{r7, lr}
10003b0a:	b082      	sub	sp, #8
10003b0c:	af00      	add	r7, sp, #0
10003b0e:	6078      	str	r0, [r7, #4]
10003b10:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
10003b12:	6839      	ldr	r1, [r7, #0]
10003b14:	6878      	ldr	r0, [r7, #4]
10003b16:	f000 fbc0 	bl	1000429a <metal_machine_cache_invalidate>
}
10003b1a:	bf00      	nop
10003b1c:	3708      	adds	r7, #8
10003b1e:	46bd      	mov	sp, r7
10003b20:	bd80      	pop	{r7, pc}

10003b22 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
10003b22:	b580      	push	{r7, lr}
10003b24:	b082      	sub	sp, #8
10003b26:	af00      	add	r7, sp, #0
10003b28:	6078      	str	r0, [r7, #4]
10003b2a:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
10003b2c:	6839      	ldr	r1, [r7, #0]
10003b2e:	6878      	ldr	r0, [r7, #4]
10003b30:	f7ff ffdd 	bl	10003aee <__metal_cache_flush>
}
10003b34:	bf00      	nop
10003b36:	3708      	adds	r7, #8
10003b38:	46bd      	mov	sp, r7
10003b3a:	bd80      	pop	{r7, pc}

10003b3c <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
10003b3c:	b580      	push	{r7, lr}
10003b3e:	b082      	sub	sp, #8
10003b40:	af00      	add	r7, sp, #0
10003b42:	6078      	str	r0, [r7, #4]
10003b44:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
10003b46:	6839      	ldr	r1, [r7, #0]
10003b48:	6878      	ldr	r0, [r7, #4]
10003b4a:	f7ff ffdd 	bl	10003b08 <__metal_cache_invalidate>
}
10003b4e:	bf00      	nop
10003b50:	3708      	adds	r7, #8
10003b52:	46bd      	mov	sp, r7
10003b54:	bd80      	pop	{r7, pc}
	...

10003b58 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
10003b58:	b580      	push	{r7, lr}
10003b5a:	b082      	sub	sp, #8
10003b5c:	af00      	add	r7, sp, #0
10003b5e:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
10003b60:	687b      	ldr	r3, [r7, #4]
10003b62:	2b00      	cmp	r3, #0
10003b64:	d008      	beq.n	10003b78 <metal_bus_register+0x20>
10003b66:	687b      	ldr	r3, [r7, #4]
10003b68:	681b      	ldr	r3, [r3, #0]
10003b6a:	2b00      	cmp	r3, #0
10003b6c:	d004      	beq.n	10003b78 <metal_bus_register+0x20>
10003b6e:	687b      	ldr	r3, [r7, #4]
10003b70:	681b      	ldr	r3, [r3, #0]
10003b72:	781b      	ldrb	r3, [r3, #0]
10003b74:	2b00      	cmp	r3, #0
10003b76:	d102      	bne.n	10003b7e <metal_bus_register+0x26>
		return -EINVAL;
10003b78:	f06f 0315 	mvn.w	r3, #21
10003b7c:	e026      	b.n	10003bcc <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
10003b7e:	687b      	ldr	r3, [r7, #4]
10003b80:	681b      	ldr	r3, [r3, #0]
10003b82:	2100      	movs	r1, #0
10003b84:	4618      	mov	r0, r3
10003b86:	f000 f82b 	bl	10003be0 <metal_bus_find>
10003b8a:	4603      	mov	r3, r0
10003b8c:	2b00      	cmp	r3, #0
10003b8e:	d102      	bne.n	10003b96 <metal_bus_register+0x3e>
		return -EEXIST;
10003b90:	f06f 0310 	mvn.w	r3, #16
10003b94:	e01a      	b.n	10003bcc <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
10003b96:	687b      	ldr	r3, [r7, #4]
10003b98:	331c      	adds	r3, #28
10003b9a:	4618      	mov	r0, r3
10003b9c:	f7ff ff70 	bl	10003a80 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
10003ba0:	687b      	ldr	r3, [r7, #4]
10003ba2:	3324      	adds	r3, #36	; 0x24
10003ba4:	4619      	mov	r1, r3
10003ba6:	480b      	ldr	r0, [pc, #44]	; (10003bd4 <metal_bus_register+0x7c>)
10003ba8:	f7ff ff94 	bl	10003ad4 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
10003bac:	4b0a      	ldr	r3, [pc, #40]	; (10003bd8 <metal_bus_register+0x80>)
10003bae:	781b      	ldrb	r3, [r3, #0]
10003bb0:	2b06      	cmp	r3, #6
10003bb2:	d90a      	bls.n	10003bca <metal_bus_register+0x72>
10003bb4:	4b08      	ldr	r3, [pc, #32]	; (10003bd8 <metal_bus_register+0x80>)
10003bb6:	685b      	ldr	r3, [r3, #4]
10003bb8:	2b00      	cmp	r3, #0
10003bba:	d006      	beq.n	10003bca <metal_bus_register+0x72>
10003bbc:	4b06      	ldr	r3, [pc, #24]	; (10003bd8 <metal_bus_register+0x80>)
10003bbe:	685b      	ldr	r3, [r3, #4]
10003bc0:	687a      	ldr	r2, [r7, #4]
10003bc2:	6812      	ldr	r2, [r2, #0]
10003bc4:	4905      	ldr	r1, [pc, #20]	; (10003bdc <metal_bus_register+0x84>)
10003bc6:	2007      	movs	r0, #7
10003bc8:	4798      	blx	r3
	return 0;
10003bca:	2300      	movs	r3, #0
}
10003bcc:	4618      	mov	r0, r3
10003bce:	3708      	adds	r7, #8
10003bd0:	46bd      	mov	sp, r7
10003bd2:	bd80      	pop	{r7, pc}
10003bd4:	10020d2c 	.word	0x10020d2c
10003bd8:	10020d24 	.word	0x10020d24
10003bdc:	10007314 	.word	0x10007314

10003be0 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
10003be0:	b580      	push	{r7, lr}
10003be2:	b084      	sub	sp, #16
10003be4:	af00      	add	r7, sp, #0
10003be6:	6078      	str	r0, [r7, #4]
10003be8:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
10003bea:	4b12      	ldr	r3, [pc, #72]	; (10003c34 <metal_bus_find+0x54>)
10003bec:	689b      	ldr	r3, [r3, #8]
10003bee:	60fb      	str	r3, [r7, #12]
10003bf0:	e016      	b.n	10003c20 <metal_bus_find+0x40>
		bus = metal_container_of(node, struct metal_bus, node);
10003bf2:	68fb      	ldr	r3, [r7, #12]
10003bf4:	3b24      	subs	r3, #36	; 0x24
10003bf6:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) == 0 && result) {
10003bf8:	68bb      	ldr	r3, [r7, #8]
10003bfa:	681b      	ldr	r3, [r3, #0]
10003bfc:	6879      	ldr	r1, [r7, #4]
10003bfe:	4618      	mov	r0, r3
10003c00:	f7fc fa1e 	bl	10000040 <strcmp>
10003c04:	4603      	mov	r3, r0
10003c06:	2b00      	cmp	r3, #0
10003c08:	d107      	bne.n	10003c1a <metal_bus_find+0x3a>
10003c0a:	683b      	ldr	r3, [r7, #0]
10003c0c:	2b00      	cmp	r3, #0
10003c0e:	d004      	beq.n	10003c1a <metal_bus_find+0x3a>
			*result = bus;
10003c10:	683b      	ldr	r3, [r7, #0]
10003c12:	68ba      	ldr	r2, [r7, #8]
10003c14:	601a      	str	r2, [r3, #0]
			return 0;
10003c16:	2300      	movs	r3, #0
10003c18:	e008      	b.n	10003c2c <metal_bus_find+0x4c>
	metal_list_for_each(&_metal.common.bus_list, node) {
10003c1a:	68fb      	ldr	r3, [r7, #12]
10003c1c:	681b      	ldr	r3, [r3, #0]
10003c1e:	60fb      	str	r3, [r7, #12]
10003c20:	68fb      	ldr	r3, [r7, #12]
10003c22:	4a05      	ldr	r2, [pc, #20]	; (10003c38 <metal_bus_find+0x58>)
10003c24:	4293      	cmp	r3, r2
10003c26:	d1e4      	bne.n	10003bf2 <metal_bus_find+0x12>
		}
	}
	return -ENOENT;
10003c28:	f06f 0301 	mvn.w	r3, #1
}
10003c2c:	4618      	mov	r0, r3
10003c2e:	3710      	adds	r7, #16
10003c30:	46bd      	mov	sp, r7
10003c32:	bd80      	pop	{r7, pc}
10003c34:	10020d24 	.word	0x10020d24
10003c38:	10020d2c 	.word	0x10020d2c

10003c3c <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
10003c3c:	b580      	push	{r7, lr}
10003c3e:	b086      	sub	sp, #24
10003c40:	af00      	add	r7, sp, #0
10003c42:	60f8      	str	r0, [r7, #12]
10003c44:	60b9      	str	r1, [r7, #8]
10003c46:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
10003c48:	68fb      	ldr	r3, [r7, #12]
10003c4a:	2b00      	cmp	r3, #0
10003c4c:	d00d      	beq.n	10003c6a <metal_device_open+0x2e>
10003c4e:	68fb      	ldr	r3, [r7, #12]
10003c50:	781b      	ldrb	r3, [r3, #0]
10003c52:	2b00      	cmp	r3, #0
10003c54:	d009      	beq.n	10003c6a <metal_device_open+0x2e>
10003c56:	68bb      	ldr	r3, [r7, #8]
10003c58:	2b00      	cmp	r3, #0
10003c5a:	d006      	beq.n	10003c6a <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
10003c5c:	68bb      	ldr	r3, [r7, #8]
10003c5e:	781b      	ldrb	r3, [r3, #0]
10003c60:	2b00      	cmp	r3, #0
10003c62:	d002      	beq.n	10003c6a <metal_device_open+0x2e>
10003c64:	687b      	ldr	r3, [r7, #4]
10003c66:	2b00      	cmp	r3, #0
10003c68:	d102      	bne.n	10003c70 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
10003c6a:	f06f 0315 	mvn.w	r3, #21
10003c6e:	e01f      	b.n	10003cb0 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
10003c70:	f107 0310 	add.w	r3, r7, #16
10003c74:	4619      	mov	r1, r3
10003c76:	68f8      	ldr	r0, [r7, #12]
10003c78:	f7ff ffb2 	bl	10003be0 <metal_bus_find>
10003c7c:	6178      	str	r0, [r7, #20]
	if (error)
10003c7e:	697b      	ldr	r3, [r7, #20]
10003c80:	2b00      	cmp	r3, #0
10003c82:	d001      	beq.n	10003c88 <metal_device_open+0x4c>
		return error;
10003c84:	697b      	ldr	r3, [r7, #20]
10003c86:	e013      	b.n	10003cb0 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
10003c88:	693b      	ldr	r3, [r7, #16]
10003c8a:	689b      	ldr	r3, [r3, #8]
10003c8c:	2b00      	cmp	r3, #0
10003c8e:	d102      	bne.n	10003c96 <metal_device_open+0x5a>
		return -ENODEV;
10003c90:	f06f 0312 	mvn.w	r3, #18
10003c94:	e00c      	b.n	10003cb0 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
10003c96:	693b      	ldr	r3, [r7, #16]
10003c98:	689b      	ldr	r3, [r3, #8]
10003c9a:	6938      	ldr	r0, [r7, #16]
10003c9c:	687a      	ldr	r2, [r7, #4]
10003c9e:	68b9      	ldr	r1, [r7, #8]
10003ca0:	4798      	blx	r3
10003ca2:	6178      	str	r0, [r7, #20]
	if (error)
10003ca4:	697b      	ldr	r3, [r7, #20]
10003ca6:	2b00      	cmp	r3, #0
10003ca8:	d001      	beq.n	10003cae <metal_device_open+0x72>
		return error;
10003caa:	697b      	ldr	r3, [r7, #20]
10003cac:	e000      	b.n	10003cb0 <metal_device_open+0x74>

	return 0;
10003cae:	2300      	movs	r3, #0
}
10003cb0:	4618      	mov	r0, r3
10003cb2:	3718      	adds	r7, #24
10003cb4:	46bd      	mov	sp, r7
10003cb6:	bd80      	pop	{r7, pc}

10003cb8 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
10003cb8:	b580      	push	{r7, lr}
10003cba:	b082      	sub	sp, #8
10003cbc:	af00      	add	r7, sp, #0
10003cbe:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
10003cc0:	687b      	ldr	r3, [r7, #4]
10003cc2:	681b      	ldr	r3, [r3, #0]
10003cc4:	2b00      	cmp	r3, #0
10003cc6:	d008      	beq.n	10003cda <metal_register_generic_device+0x22>
10003cc8:	687b      	ldr	r3, [r7, #4]
10003cca:	681b      	ldr	r3, [r3, #0]
10003ccc:	781b      	ldrb	r3, [r3, #0]
10003cce:	2b00      	cmp	r3, #0
10003cd0:	d003      	beq.n	10003cda <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
10003cd2:	687b      	ldr	r3, [r7, #4]
10003cd4:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
10003cd6:	2b02      	cmp	r3, #2
10003cd8:	d902      	bls.n	10003ce0 <metal_register_generic_device+0x28>
		return -EINVAL;
10003cda:	f06f 0315 	mvn.w	r3, #21
10003cde:	e009      	b.n	10003cf4 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
10003ce0:	687b      	ldr	r3, [r7, #4]
10003ce2:	4a06      	ldr	r2, [pc, #24]	; (10003cfc <metal_register_generic_device+0x44>)
10003ce4:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
10003ce6:	687b      	ldr	r3, [r7, #4]
10003ce8:	337c      	adds	r3, #124	; 0x7c
10003cea:	4619      	mov	r1, r3
10003cec:	4804      	ldr	r0, [pc, #16]	; (10003d00 <metal_register_generic_device+0x48>)
10003cee:	f7ff fef1 	bl	10003ad4 <metal_list_add_tail>
			    &device->node);
	return 0;
10003cf2:	2300      	movs	r3, #0
}
10003cf4:	4618      	mov	r0, r3
10003cf6:	3708      	adds	r7, #8
10003cf8:	46bd      	mov	sp, r7
10003cfa:	bd80      	pop	{r7, pc}
10003cfc:	100200a8 	.word	0x100200a8
10003d00:	10020d3c 	.word	0x10020d3c

10003d04 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
10003d04:	b580      	push	{r7, lr}
10003d06:	b086      	sub	sp, #24
10003d08:	af00      	add	r7, sp, #0
10003d0a:	60f8      	str	r0, [r7, #12]
10003d0c:	60b9      	str	r1, [r7, #8]
10003d0e:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
10003d10:	4b12      	ldr	r3, [pc, #72]	; (10003d5c <metal_generic_dev_open+0x58>)
10003d12:	699b      	ldr	r3, [r3, #24]
10003d14:	617b      	str	r3, [r7, #20]
10003d16:	e016      	b.n	10003d46 <metal_generic_dev_open+0x42>
		dev = metal_container_of(node, struct metal_device, node);
10003d18:	697b      	ldr	r3, [r7, #20]
10003d1a:	3b7c      	subs	r3, #124	; 0x7c
10003d1c:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) == 0) {
10003d1e:	693b      	ldr	r3, [r7, #16]
10003d20:	681b      	ldr	r3, [r3, #0]
10003d22:	68b9      	ldr	r1, [r7, #8]
10003d24:	4618      	mov	r0, r3
10003d26:	f7fc f98b 	bl	10000040 <strcmp>
10003d2a:	4603      	mov	r3, r0
10003d2c:	2b00      	cmp	r3, #0
10003d2e:	d107      	bne.n	10003d40 <metal_generic_dev_open+0x3c>
			*device = dev;
10003d30:	687b      	ldr	r3, [r7, #4]
10003d32:	693a      	ldr	r2, [r7, #16]
10003d34:	601a      	str	r2, [r3, #0]
			return metal_generic_dev_sys_open(dev);
10003d36:	6938      	ldr	r0, [r7, #16]
10003d38:	f000 fa31 	bl	1000419e <metal_generic_dev_sys_open>
10003d3c:	4603      	mov	r3, r0
10003d3e:	e008      	b.n	10003d52 <metal_generic_dev_open+0x4e>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
10003d40:	697b      	ldr	r3, [r7, #20]
10003d42:	681b      	ldr	r3, [r3, #0]
10003d44:	617b      	str	r3, [r7, #20]
10003d46:	697b      	ldr	r3, [r7, #20]
10003d48:	4a05      	ldr	r2, [pc, #20]	; (10003d60 <metal_generic_dev_open+0x5c>)
10003d4a:	4293      	cmp	r3, r2
10003d4c:	d1e4      	bne.n	10003d18 <metal_generic_dev_open+0x14>
		}
	}

	return -ENODEV;
10003d4e:	f06f 0312 	mvn.w	r3, #18
}
10003d52:	4618      	mov	r0, r3
10003d54:	3718      	adds	r7, #24
10003d56:	46bd      	mov	sp, r7
10003d58:	bd80      	pop	{r7, pc}
10003d5a:	bf00      	nop
10003d5c:	10020d24 	.word	0x10020d24
10003d60:	10020d3c 	.word	0x10020d3c

10003d64 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
10003d64:	b580      	push	{r7, lr}
10003d66:	b086      	sub	sp, #24
10003d68:	af00      	add	r7, sp, #0
10003d6a:	60f8      	str	r0, [r7, #12]
10003d6c:	60b9      	str	r1, [r7, #8]
10003d6e:	607a      	str	r2, [r7, #4]
10003d70:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;

	if (sg_out != sg_in)
10003d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10003d74:	683b      	ldr	r3, [r7, #0]
10003d76:	429a      	cmp	r2, r3
10003d78:	d009      	beq.n	10003d8e <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
10003d7a:	6a3a      	ldr	r2, [r7, #32]
10003d7c:	4613      	mov	r3, r2
10003d7e:	005b      	lsls	r3, r3, #1
10003d80:	4413      	add	r3, r2
10003d82:	009b      	lsls	r3, r3, #2
10003d84:	461a      	mov	r2, r3
10003d86:	6839      	ldr	r1, [r7, #0]
10003d88:	6a78      	ldr	r0, [r7, #36]	; 0x24
10003d8a:	f002 fbed 	bl	10006568 <memcpy>
	for (i = 0; i < nents_in; i++) {
10003d8e:	2300      	movs	r3, #0
10003d90:	617b      	str	r3, [r7, #20]
10003d92:	e02f      	b.n	10003df4 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
10003d94:	687b      	ldr	r3, [r7, #4]
10003d96:	2b02      	cmp	r3, #2
10003d98:	d114      	bne.n	10003dc4 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
10003d9a:	697a      	ldr	r2, [r7, #20]
10003d9c:	4613      	mov	r3, r2
10003d9e:	005b      	lsls	r3, r3, #1
10003da0:	4413      	add	r3, r2
10003da2:	009b      	lsls	r3, r3, #2
10003da4:	461a      	mov	r2, r3
10003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003da8:	4413      	add	r3, r2
10003daa:	6818      	ldr	r0, [r3, #0]
10003dac:	697a      	ldr	r2, [r7, #20]
10003dae:	4613      	mov	r3, r2
10003db0:	005b      	lsls	r3, r3, #1
10003db2:	4413      	add	r3, r2
10003db4:	009b      	lsls	r3, r3, #2
10003db6:	461a      	mov	r2, r3
10003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003dba:	4413      	add	r3, r2
10003dbc:	689b      	ldr	r3, [r3, #8]
10003dbe:	4619      	mov	r1, r3
10003dc0:	f7ff feaf 	bl	10003b22 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
10003dc4:	697a      	ldr	r2, [r7, #20]
10003dc6:	4613      	mov	r3, r2
10003dc8:	005b      	lsls	r3, r3, #1
10003dca:	4413      	add	r3, r2
10003dcc:	009b      	lsls	r3, r3, #2
10003dce:	461a      	mov	r2, r3
10003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003dd2:	4413      	add	r3, r2
10003dd4:	6818      	ldr	r0, [r3, #0]
10003dd6:	697a      	ldr	r2, [r7, #20]
10003dd8:	4613      	mov	r3, r2
10003dda:	005b      	lsls	r3, r3, #1
10003ddc:	4413      	add	r3, r2
10003dde:	009b      	lsls	r3, r3, #2
10003de0:	461a      	mov	r2, r3
10003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003de4:	4413      	add	r3, r2
10003de6:	689b      	ldr	r3, [r3, #8]
10003de8:	4619      	mov	r1, r3
10003dea:	f7ff fea7 	bl	10003b3c <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
10003dee:	697b      	ldr	r3, [r7, #20]
10003df0:	3301      	adds	r3, #1
10003df2:	617b      	str	r3, [r7, #20]
10003df4:	697a      	ldr	r2, [r7, #20]
10003df6:	6a3b      	ldr	r3, [r7, #32]
10003df8:	429a      	cmp	r2, r3
10003dfa:	dbcb      	blt.n	10003d94 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
10003dfc:	6a3b      	ldr	r3, [r7, #32]
}
10003dfe:	4618      	mov	r0, r3
10003e00:	3718      	adds	r7, #24
10003e02:	46bd      	mov	sp, r7
10003e04:	bd80      	pop	{r7, pc}

10003e06 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
10003e06:	b580      	push	{r7, lr}
10003e08:	b086      	sub	sp, #24
10003e0a:	af00      	add	r7, sp, #0
10003e0c:	60f8      	str	r0, [r7, #12]
10003e0e:	60b9      	str	r1, [r7, #8]
10003e10:	607a      	str	r2, [r7, #4]
10003e12:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;
	(void)dir;

	for (i = 0; i < nents; i++) {
10003e14:	2300      	movs	r3, #0
10003e16:	617b      	str	r3, [r7, #20]
10003e18:	e017      	b.n	10003e4a <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
10003e1a:	697a      	ldr	r2, [r7, #20]
10003e1c:	4613      	mov	r3, r2
10003e1e:	005b      	lsls	r3, r3, #1
10003e20:	4413      	add	r3, r2
10003e22:	009b      	lsls	r3, r3, #2
10003e24:	461a      	mov	r2, r3
10003e26:	683b      	ldr	r3, [r7, #0]
10003e28:	4413      	add	r3, r2
10003e2a:	6818      	ldr	r0, [r3, #0]
10003e2c:	697a      	ldr	r2, [r7, #20]
10003e2e:	4613      	mov	r3, r2
10003e30:	005b      	lsls	r3, r3, #1
10003e32:	4413      	add	r3, r2
10003e34:	009b      	lsls	r3, r3, #2
10003e36:	461a      	mov	r2, r3
10003e38:	683b      	ldr	r3, [r7, #0]
10003e3a:	4413      	add	r3, r2
10003e3c:	689b      	ldr	r3, [r3, #8]
10003e3e:	4619      	mov	r1, r3
10003e40:	f7ff fe7c 	bl	10003b3c <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
10003e44:	697b      	ldr	r3, [r7, #20]
10003e46:	3301      	adds	r3, #1
10003e48:	617b      	str	r3, [r7, #20]
10003e4a:	697a      	ldr	r2, [r7, #20]
10003e4c:	6a3b      	ldr	r3, [r7, #32]
10003e4e:	429a      	cmp	r2, r3
10003e50:	dbe3      	blt.n	10003e1a <metal_generic_dev_dma_unmap+0x14>
	}
}
10003e52:	bf00      	nop
10003e54:	bf00      	nop
10003e56:	3718      	adds	r7, #24
10003e58:	46bd      	mov	sp, r7
10003e5a:	bd80      	pop	{r7, pc}

10003e5c <metal_list_init>:
{
10003e5c:	b480      	push	{r7}
10003e5e:	b083      	sub	sp, #12
10003e60:	af00      	add	r7, sp, #0
10003e62:	6078      	str	r0, [r7, #4]
	list->prev = list;
10003e64:	687b      	ldr	r3, [r7, #4]
10003e66:	687a      	ldr	r2, [r7, #4]
10003e68:	605a      	str	r2, [r3, #4]
	list->next = list;
10003e6a:	687b      	ldr	r3, [r7, #4]
10003e6c:	687a      	ldr	r2, [r7, #4]
10003e6e:	601a      	str	r2, [r3, #0]
}
10003e70:	bf00      	nop
10003e72:	370c      	adds	r7, #12
10003e74:	46bd      	mov	sp, r7
10003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
10003e7a:	4770      	bx	lr

10003e7c <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
10003e7c:	b580      	push	{r7, lr}
10003e7e:	b084      	sub	sp, #16
10003e80:	af00      	add	r7, sp, #0
10003e82:	6078      	str	r0, [r7, #4]
	int error = 0;
10003e84:	2300      	movs	r3, #0
10003e86:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
10003e88:	2220      	movs	r2, #32
10003e8a:	2100      	movs	r1, #0
10003e8c:	4810      	ldr	r0, [pc, #64]	; (10003ed0 <metal_init+0x54>)
10003e8e:	f002 fabc 	bl	1000640a <memset>

	_metal.common.log_handler   = params->log_handler;
10003e92:	687b      	ldr	r3, [r7, #4]
10003e94:	681b      	ldr	r3, [r3, #0]
10003e96:	4a0e      	ldr	r2, [pc, #56]	; (10003ed0 <metal_init+0x54>)
10003e98:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
10003e9a:	687b      	ldr	r3, [r7, #4]
10003e9c:	791a      	ldrb	r2, [r3, #4]
10003e9e:	4b0c      	ldr	r3, [pc, #48]	; (10003ed0 <metal_init+0x54>)
10003ea0:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
10003ea2:	480c      	ldr	r0, [pc, #48]	; (10003ed4 <metal_init+0x58>)
10003ea4:	f7ff ffda 	bl	10003e5c <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
10003ea8:	480b      	ldr	r0, [pc, #44]	; (10003ed8 <metal_init+0x5c>)
10003eaa:	f7ff ffd7 	bl	10003e5c <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
10003eae:	480b      	ldr	r0, [pc, #44]	; (10003edc <metal_init+0x60>)
10003eb0:	f7ff ffd4 	bl	10003e5c <metal_list_init>

	error = metal_sys_init(params);
10003eb4:	6878      	ldr	r0, [r7, #4]
10003eb6:	f000 f999 	bl	100041ec <metal_sys_init>
10003eba:	60f8      	str	r0, [r7, #12]
	if (error)
10003ebc:	68fb      	ldr	r3, [r7, #12]
10003ebe:	2b00      	cmp	r3, #0
10003ec0:	d001      	beq.n	10003ec6 <metal_init+0x4a>
		return error;
10003ec2:	68fb      	ldr	r3, [r7, #12]
10003ec4:	e000      	b.n	10003ec8 <metal_init+0x4c>

	return error;
10003ec6:	68fb      	ldr	r3, [r7, #12]
}
10003ec8:	4618      	mov	r0, r3
10003eca:	3710      	adds	r7, #16
10003ecc:	46bd      	mov	sp, r7
10003ece:	bd80      	pop	{r7, pc}
10003ed0:	10020d24 	.word	0x10020d24
10003ed4:	10020d2c 	.word	0x10020d2c
10003ed8:	10020d34 	.word	0x10020d34
10003edc:	10020d3c 	.word	0x10020d3c

10003ee0 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
10003ee0:	b480      	push	{r7}
10003ee2:	b083      	sub	sp, #12
10003ee4:	af00      	add	r7, sp, #0
10003ee6:	6078      	str	r0, [r7, #4]
10003ee8:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
10003eea:	687b      	ldr	r3, [r7, #4]
10003eec:	681b      	ldr	r3, [r3, #0]
		? (void *)((uintptr_t)io->virt + offset)
		: NULL);
10003eee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10003ef2:	d00a      	beq.n	10003f0a <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
10003ef4:	687b      	ldr	r3, [r7, #4]
10003ef6:	689b      	ldr	r3, [r3, #8]
10003ef8:	683a      	ldr	r2, [r7, #0]
10003efa:	429a      	cmp	r2, r3
10003efc:	d205      	bcs.n	10003f0a <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
10003efe:	687b      	ldr	r3, [r7, #4]
10003f00:	681b      	ldr	r3, [r3, #0]
10003f02:	461a      	mov	r2, r3
10003f04:	683b      	ldr	r3, [r7, #0]
10003f06:	4413      	add	r3, r2
		: NULL);
10003f08:	e000      	b.n	10003f0c <metal_io_virt+0x2c>
10003f0a:	2300      	movs	r3, #0
}
10003f0c:	4618      	mov	r0, r3
10003f0e:	370c      	adds	r7, #12
10003f10:	46bd      	mov	sp, r7
10003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
10003f16:	4770      	bx	lr

10003f18 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
10003f18:	b5b0      	push	{r4, r5, r7, lr}
10003f1a:	b08c      	sub	sp, #48	; 0x30
10003f1c:	af00      	add	r7, sp, #0
10003f1e:	60f8      	str	r0, [r7, #12]
10003f20:	60b9      	str	r1, [r7, #8]
10003f22:	607a      	str	r2, [r7, #4]
10003f24:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {
10003f26:	f107 0310 	add.w	r3, r7, #16
10003f2a:	2220      	movs	r2, #32
10003f2c:	2100      	movs	r1, #0
10003f2e:	4618      	mov	r0, r3
10003f30:	f002 fa6b 	bl	1000640a <memset>
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
10003f34:	68fb      	ldr	r3, [r7, #12]
10003f36:	68ba      	ldr	r2, [r7, #8]
10003f38:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
10003f3a:	68fb      	ldr	r3, [r7, #12]
10003f3c:	687a      	ldr	r2, [r7, #4]
10003f3e:	605a      	str	r2, [r3, #4]
	io->size = size;
10003f40:	68fb      	ldr	r3, [r7, #12]
10003f42:	683a      	ldr	r2, [r7, #0]
10003f44:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
10003f46:	68fb      	ldr	r3, [r7, #12]
10003f48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
10003f4a:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
10003f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10003f4e:	2b1f      	cmp	r3, #31
10003f50:	d904      	bls.n	10003f5c <metal_io_init+0x44>
		/* avoid overflow */
		io->page_mask = -1UL;
10003f52:	68fb      	ldr	r3, [r7, #12]
10003f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
10003f58:	611a      	str	r2, [r3, #16]
10003f5a:	e006      	b.n	10003f6a <metal_io_init+0x52>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
10003f5c:	2201      	movs	r2, #1
10003f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10003f60:	fa02 f303 	lsl.w	r3, r2, r3
10003f64:	1e5a      	subs	r2, r3, #1
10003f66:	68fb      	ldr	r3, [r7, #12]
10003f68:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
10003f6a:	68fb      	ldr	r3, [r7, #12]
10003f6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
10003f6e:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
10003f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10003f72:	2b00      	cmp	r3, #0
10003f74:	d00b      	beq.n	10003f8e <metal_io_init+0x76>
10003f76:	68fb      	ldr	r3, [r7, #12]
10003f78:	6cba      	ldr	r2, [r7, #72]	; 0x48
10003f7a:	f103 0418 	add.w	r4, r3, #24
10003f7e:	4615      	mov	r5, r2
10003f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
10003f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
10003f84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
10003f88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
10003f8c:	e00a      	b.n	10003fa4 <metal_io_init+0x8c>
10003f8e:	68fb      	ldr	r3, [r7, #12]
10003f90:	f103 0418 	add.w	r4, r3, #24
10003f94:	f107 0510 	add.w	r5, r7, #16
10003f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
10003f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
10003f9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
10003fa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
10003fa4:	68f8      	ldr	r0, [r7, #12]
10003fa6:	f000 f92f 	bl	10004208 <metal_sys_io_mem_map>
}
10003faa:	bf00      	nop
10003fac:	3730      	adds	r7, #48	; 0x30
10003fae:	46bd      	mov	sp, r7
10003fb0:	bdb0      	pop	{r4, r5, r7, pc}

10003fb2 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
10003fb2:	b590      	push	{r4, r7, lr}
10003fb4:	b08b      	sub	sp, #44	; 0x2c
10003fb6:	af02      	add	r7, sp, #8
10003fb8:	60f8      	str	r0, [r7, #12]
10003fba:	60b9      	str	r1, [r7, #8]
10003fbc:	607a      	str	r2, [r7, #4]
10003fbe:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
10003fc0:	68b9      	ldr	r1, [r7, #8]
10003fc2:	68f8      	ldr	r0, [r7, #12]
10003fc4:	f7ff ff8c 	bl	10003ee0 <metal_io_virt>
10003fc8:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
10003fca:	687b      	ldr	r3, [r7, #4]
10003fcc:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
10003fce:	69fb      	ldr	r3, [r7, #28]
10003fd0:	2b00      	cmp	r3, #0
10003fd2:	d102      	bne.n	10003fda <metal_io_block_read+0x28>
		return -ERANGE;
10003fd4:	f06f 0321 	mvn.w	r3, #33	; 0x21
10003fd8:	e05c      	b.n	10004094 <metal_io_block_read+0xe2>
	if ((offset + len) > io->size)
10003fda:	683a      	ldr	r2, [r7, #0]
10003fdc:	68bb      	ldr	r3, [r7, #8]
10003fde:	441a      	add	r2, r3
10003fe0:	68fb      	ldr	r3, [r7, #12]
10003fe2:	689b      	ldr	r3, [r3, #8]
10003fe4:	429a      	cmp	r2, r3
10003fe6:	d904      	bls.n	10003ff2 <metal_io_block_read+0x40>
		len = io->size - offset;
10003fe8:	68fb      	ldr	r3, [r7, #12]
10003fea:	689a      	ldr	r2, [r3, #8]
10003fec:	68bb      	ldr	r3, [r7, #8]
10003fee:	1ad3      	subs	r3, r2, r3
10003ff0:	603b      	str	r3, [r7, #0]
	retlen = len;
10003ff2:	683b      	ldr	r3, [r7, #0]
10003ff4:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
10003ff6:	68fb      	ldr	r3, [r7, #12]
10003ff8:	6a1b      	ldr	r3, [r3, #32]
10003ffa:	2b00      	cmp	r3, #0
10003ffc:	d00a      	beq.n	10004014 <metal_io_block_read+0x62>
		retlen = (*io->ops.block_read)(
10003ffe:	68fb      	ldr	r3, [r7, #12]
10004000:	6a1c      	ldr	r4, [r3, #32]
10004002:	683b      	ldr	r3, [r7, #0]
10004004:	9300      	str	r3, [sp, #0]
10004006:	2305      	movs	r3, #5
10004008:	687a      	ldr	r2, [r7, #4]
1000400a:	68b9      	ldr	r1, [r7, #8]
1000400c:	68f8      	ldr	r0, [r7, #12]
1000400e:	47a0      	blx	r4
10004010:	6178      	str	r0, [r7, #20]
10004012:	e03e      	b.n	10004092 <metal_io_block_read+0xe0>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
10004014:	f3bf 8f5b 	dmb	ish
		while ( len && (
10004018:	e00c      	b.n	10004034 <metal_io_block_read+0x82>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
1000401a:	69fb      	ldr	r3, [r7, #28]
1000401c:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
1000401e:	69bb      	ldr	r3, [r7, #24]
10004020:	701a      	strb	r2, [r3, #0]
			dest++;
10004022:	69bb      	ldr	r3, [r7, #24]
10004024:	3301      	adds	r3, #1
10004026:	61bb      	str	r3, [r7, #24]
			ptr++;
10004028:	69fb      	ldr	r3, [r7, #28]
1000402a:	3301      	adds	r3, #1
1000402c:	61fb      	str	r3, [r7, #28]
			len--;
1000402e:	683b      	ldr	r3, [r7, #0]
10004030:	3b01      	subs	r3, #1
10004032:	603b      	str	r3, [r7, #0]
		while ( len && (
10004034:	683b      	ldr	r3, [r7, #0]
10004036:	2b00      	cmp	r3, #0
10004038:	d017      	beq.n	1000406a <metal_io_block_read+0xb8>
			((uintptr_t)dest % sizeof(int)) ||
1000403a:	69bb      	ldr	r3, [r7, #24]
1000403c:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
10004040:	2b00      	cmp	r3, #0
10004042:	d1ea      	bne.n	1000401a <metal_io_block_read+0x68>
			((uintptr_t)ptr % sizeof(int)))) {
10004044:	69fb      	ldr	r3, [r7, #28]
10004046:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
1000404a:	2b00      	cmp	r3, #0
1000404c:	d1e5      	bne.n	1000401a <metal_io_block_read+0x68>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000404e:	e00c      	b.n	1000406a <metal_io_block_read+0xb8>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
10004050:	69fb      	ldr	r3, [r7, #28]
10004052:	681a      	ldr	r2, [r3, #0]
10004054:	69bb      	ldr	r3, [r7, #24]
10004056:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
10004058:	69bb      	ldr	r3, [r7, #24]
1000405a:	3304      	adds	r3, #4
1000405c:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
1000405e:	69fb      	ldr	r3, [r7, #28]
10004060:	3304      	adds	r3, #4
10004062:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
10004064:	683b      	ldr	r3, [r7, #0]
10004066:	3b04      	subs	r3, #4
10004068:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000406a:	683b      	ldr	r3, [r7, #0]
1000406c:	2b03      	cmp	r3, #3
1000406e:	dcef      	bgt.n	10004050 <metal_io_block_read+0x9e>
		for (; len != 0; dest++, ptr++, len--)
10004070:	e00c      	b.n	1000408c <metal_io_block_read+0xda>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
10004072:	69fb      	ldr	r3, [r7, #28]
10004074:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
10004076:	69bb      	ldr	r3, [r7, #24]
10004078:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
1000407a:	69bb      	ldr	r3, [r7, #24]
1000407c:	3301      	adds	r3, #1
1000407e:	61bb      	str	r3, [r7, #24]
10004080:	69fb      	ldr	r3, [r7, #28]
10004082:	3301      	adds	r3, #1
10004084:	61fb      	str	r3, [r7, #28]
10004086:	683b      	ldr	r3, [r7, #0]
10004088:	3b01      	subs	r3, #1
1000408a:	603b      	str	r3, [r7, #0]
1000408c:	683b      	ldr	r3, [r7, #0]
1000408e:	2b00      	cmp	r3, #0
10004090:	d1ef      	bne.n	10004072 <metal_io_block_read+0xc0>
	}
	return retlen;
10004092:	697b      	ldr	r3, [r7, #20]
}
10004094:	4618      	mov	r0, r3
10004096:	3724      	adds	r7, #36	; 0x24
10004098:	46bd      	mov	sp, r7
1000409a:	bd90      	pop	{r4, r7, pc}

1000409c <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
1000409c:	b590      	push	{r4, r7, lr}
1000409e:	b08b      	sub	sp, #44	; 0x2c
100040a0:	af02      	add	r7, sp, #8
100040a2:	60f8      	str	r0, [r7, #12]
100040a4:	60b9      	str	r1, [r7, #8]
100040a6:	607a      	str	r2, [r7, #4]
100040a8:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
100040aa:	68b9      	ldr	r1, [r7, #8]
100040ac:	68f8      	ldr	r0, [r7, #12]
100040ae:	f7ff ff17 	bl	10003ee0 <metal_io_virt>
100040b2:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
100040b4:	687b      	ldr	r3, [r7, #4]
100040b6:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
100040b8:	69fb      	ldr	r3, [r7, #28]
100040ba:	2b00      	cmp	r3, #0
100040bc:	d102      	bne.n	100040c4 <metal_io_block_write+0x28>
		return -ERANGE;
100040be:	f06f 0321 	mvn.w	r3, #33	; 0x21
100040c2:	e05b      	b.n	1000417c <metal_io_block_write+0xe0>
	if ((offset + len) > io->size)
100040c4:	683a      	ldr	r2, [r7, #0]
100040c6:	68bb      	ldr	r3, [r7, #8]
100040c8:	441a      	add	r2, r3
100040ca:	68fb      	ldr	r3, [r7, #12]
100040cc:	689b      	ldr	r3, [r3, #8]
100040ce:	429a      	cmp	r2, r3
100040d0:	d904      	bls.n	100040dc <metal_io_block_write+0x40>
		len = io->size - offset;
100040d2:	68fb      	ldr	r3, [r7, #12]
100040d4:	689a      	ldr	r2, [r3, #8]
100040d6:	68bb      	ldr	r3, [r7, #8]
100040d8:	1ad3      	subs	r3, r2, r3
100040da:	603b      	str	r3, [r7, #0]
	retlen = len;
100040dc:	683b      	ldr	r3, [r7, #0]
100040de:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
100040e0:	68fb      	ldr	r3, [r7, #12]
100040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100040e4:	2b00      	cmp	r3, #0
100040e6:	d017      	beq.n	10004118 <metal_io_block_write+0x7c>
		retlen = (*io->ops.block_write)(
100040e8:	68fb      	ldr	r3, [r7, #12]
100040ea:	6a5c      	ldr	r4, [r3, #36]	; 0x24
100040ec:	683b      	ldr	r3, [r7, #0]
100040ee:	9300      	str	r3, [sp, #0]
100040f0:	2305      	movs	r3, #5
100040f2:	687a      	ldr	r2, [r7, #4]
100040f4:	68b9      	ldr	r1, [r7, #8]
100040f6:	68f8      	ldr	r0, [r7, #12]
100040f8:	47a0      	blx	r4
100040fa:	6178      	str	r0, [r7, #20]
100040fc:	e03d      	b.n	1000417a <metal_io_block_write+0xde>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
100040fe:	69bb      	ldr	r3, [r7, #24]
10004100:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
10004102:	69fb      	ldr	r3, [r7, #28]
10004104:	701a      	strb	r2, [r3, #0]
			ptr++;
10004106:	69fb      	ldr	r3, [r7, #28]
10004108:	3301      	adds	r3, #1
1000410a:	61fb      	str	r3, [r7, #28]
			source++;
1000410c:	69bb      	ldr	r3, [r7, #24]
1000410e:	3301      	adds	r3, #1
10004110:	61bb      	str	r3, [r7, #24]
			len--;
10004112:	683b      	ldr	r3, [r7, #0]
10004114:	3b01      	subs	r3, #1
10004116:	603b      	str	r3, [r7, #0]
		while ( len && (
10004118:	683b      	ldr	r3, [r7, #0]
1000411a:	2b00      	cmp	r3, #0
1000411c:	d017      	beq.n	1000414e <metal_io_block_write+0xb2>
			((uintptr_t)ptr % sizeof(int)) ||
1000411e:	69fb      	ldr	r3, [r7, #28]
10004120:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
10004124:	2b00      	cmp	r3, #0
10004126:	d1ea      	bne.n	100040fe <metal_io_block_write+0x62>
			((uintptr_t)source % sizeof(int)))) {
10004128:	69bb      	ldr	r3, [r7, #24]
1000412a:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
1000412e:	2b00      	cmp	r3, #0
10004130:	d1e5      	bne.n	100040fe <metal_io_block_write+0x62>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
10004132:	e00c      	b.n	1000414e <metal_io_block_write+0xb2>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
10004134:	69bb      	ldr	r3, [r7, #24]
10004136:	681a      	ldr	r2, [r3, #0]
10004138:	69fb      	ldr	r3, [r7, #28]
1000413a:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000413c:	69fb      	ldr	r3, [r7, #28]
1000413e:	3304      	adds	r3, #4
10004140:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
10004142:	69bb      	ldr	r3, [r7, #24]
10004144:	3304      	adds	r3, #4
10004146:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
10004148:	683b      	ldr	r3, [r7, #0]
1000414a:	3b04      	subs	r3, #4
1000414c:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000414e:	683b      	ldr	r3, [r7, #0]
10004150:	2b03      	cmp	r3, #3
10004152:	dcef      	bgt.n	10004134 <metal_io_block_write+0x98>
		for (; len != 0; ptr++, source++, len--)
10004154:	e00c      	b.n	10004170 <metal_io_block_write+0xd4>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
10004156:	69bb      	ldr	r3, [r7, #24]
10004158:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
1000415a:	69fb      	ldr	r3, [r7, #28]
1000415c:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
1000415e:	69fb      	ldr	r3, [r7, #28]
10004160:	3301      	adds	r3, #1
10004162:	61fb      	str	r3, [r7, #28]
10004164:	69bb      	ldr	r3, [r7, #24]
10004166:	3301      	adds	r3, #1
10004168:	61bb      	str	r3, [r7, #24]
1000416a:	683b      	ldr	r3, [r7, #0]
1000416c:	3b01      	subs	r3, #1
1000416e:	603b      	str	r3, [r7, #0]
10004170:	683b      	ldr	r3, [r7, #0]
10004172:	2b00      	cmp	r3, #0
10004174:	d1ef      	bne.n	10004156 <metal_io_block_write+0xba>
		atomic_thread_fence(memory_order_seq_cst);
10004176:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
1000417a:	697b      	ldr	r3, [r7, #20]
}
1000417c:	4618      	mov	r0, r3
1000417e:	3724      	adds	r7, #36	; 0x24
10004180:	46bd      	mov	sp, r7
10004182:	bd90      	pop	{r4, r7, pc}

10004184 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
10004184:	b40e      	push	{r1, r2, r3}
10004186:	b480      	push	{r7}
10004188:	b082      	sub	sp, #8
1000418a:	af00      	add	r7, sp, #0
1000418c:	4603      	mov	r3, r0
1000418e:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
10004190:	bf00      	nop
10004192:	3708      	adds	r7, #8
10004194:	46bd      	mov	sp, r7
10004196:	f85d 7b04 	ldr.w	r7, [sp], #4
1000419a:	b003      	add	sp, #12
1000419c:	4770      	bx	lr

1000419e <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
1000419e:	b580      	push	{r7, lr}
100041a0:	b084      	sub	sp, #16
100041a2:	af00      	add	r7, sp, #0
100041a4:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned int i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
100041a6:	2300      	movs	r3, #0
100041a8:	60fb      	str	r3, [r7, #12]
100041aa:	e013      	b.n	100041d4 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
100041ac:	68fa      	ldr	r2, [r7, #12]
100041ae:	4613      	mov	r3, r2
100041b0:	00db      	lsls	r3, r3, #3
100041b2:	1a9b      	subs	r3, r3, r2
100041b4:	00db      	lsls	r3, r3, #3
100041b6:	3308      	adds	r3, #8
100041b8:	687a      	ldr	r2, [r7, #4]
100041ba:	4413      	add	r3, r2
100041bc:	3304      	adds	r3, #4
100041be:	60bb      	str	r3, [r7, #8]
		if (!io->size)
100041c0:	68bb      	ldr	r3, [r7, #8]
100041c2:	689b      	ldr	r3, [r3, #8]
100041c4:	2b00      	cmp	r3, #0
100041c6:	d00b      	beq.n	100041e0 <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
100041c8:	68b8      	ldr	r0, [r7, #8]
100041ca:	f000 f81d 	bl	10004208 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
100041ce:	68fb      	ldr	r3, [r7, #12]
100041d0:	3301      	adds	r3, #1
100041d2:	60fb      	str	r3, [r7, #12]
100041d4:	687b      	ldr	r3, [r7, #4]
100041d6:	689b      	ldr	r3, [r3, #8]
100041d8:	68fa      	ldr	r2, [r7, #12]
100041da:	429a      	cmp	r2, r3
100041dc:	d3e6      	bcc.n	100041ac <metal_generic_dev_sys_open+0xe>
100041de:	e000      	b.n	100041e2 <metal_generic_dev_sys_open+0x44>
			break;
100041e0:	bf00      	nop
	}

	return 0;
100041e2:	2300      	movs	r3, #0
}
100041e4:	4618      	mov	r0, r3
100041e6:	3710      	adds	r7, #16
100041e8:	46bd      	mov	sp, r7
100041ea:	bd80      	pop	{r7, pc}

100041ec <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
100041ec:	b580      	push	{r7, lr}
100041ee:	b082      	sub	sp, #8
100041f0:	af00      	add	r7, sp, #0
100041f2:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
100041f4:	4803      	ldr	r0, [pc, #12]	; (10004204 <metal_sys_init+0x18>)
100041f6:	f7ff fcaf 	bl	10003b58 <metal_bus_register>
	return 0;
100041fa:	2300      	movs	r3, #0
}
100041fc:	4618      	mov	r0, r3
100041fe:	3708      	adds	r7, #8
10004200:	46bd      	mov	sp, r7
10004202:	bd80      	pop	{r7, pc}
10004204:	100200a8 	.word	0x100200a8

10004208 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
10004208:	b580      	push	{r7, lr}
1000420a:	b086      	sub	sp, #24
1000420c:	af00      	add	r7, sp, #0
1000420e:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = io->virt;
10004210:	687b      	ldr	r3, [r7, #4]
10004212:	681b      	ldr	r3, [r3, #0]
10004214:	60fb      	str	r3, [r7, #12]
	psize = (size_t)io->size;
10004216:	687b      	ldr	r3, [r7, #4]
10004218:	689b      	ldr	r3, [r3, #8]
1000421a:	613b      	str	r3, [r7, #16]
	if (psize) {
1000421c:	693b      	ldr	r3, [r7, #16]
1000421e:	2b00      	cmp	r3, #0
10004220:	d02c      	beq.n	1000427c <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
10004222:	687b      	ldr	r3, [r7, #4]
10004224:	68db      	ldr	r3, [r3, #12]
10004226:	693a      	ldr	r2, [r7, #16]
10004228:	fa22 f303 	lsr.w	r3, r2, r3
1000422c:	2b00      	cmp	r3, #0
1000422e:	d005      	beq.n	1000423c <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
10004230:	687b      	ldr	r3, [r7, #4]
10004232:	68db      	ldr	r3, [r3, #12]
10004234:	2201      	movs	r2, #1
10004236:	fa02 f303 	lsl.w	r3, r2, r3
1000423a:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
1000423c:	2300      	movs	r3, #0
1000423e:	617b      	str	r3, [r7, #20]
10004240:	e013      	b.n	1000426a <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
10004242:	687b      	ldr	r3, [r7, #4]
10004244:	685a      	ldr	r2, [r3, #4]
10004246:	697b      	ldr	r3, [r7, #20]
10004248:	009b      	lsls	r3, r3, #2
1000424a:	4413      	add	r3, r2
1000424c:	6819      	ldr	r1, [r3, #0]
1000424e:	687b      	ldr	r3, [r7, #4]
10004250:	695b      	ldr	r3, [r3, #20]
10004252:	693a      	ldr	r2, [r7, #16]
10004254:	68f8      	ldr	r0, [r7, #12]
10004256:	f000 f82b 	bl	100042b0 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
1000425a:	693b      	ldr	r3, [r7, #16]
1000425c:	009b      	lsls	r3, r3, #2
1000425e:	68fa      	ldr	r2, [r7, #12]
10004260:	4413      	add	r3, r2
10004262:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
10004264:	697b      	ldr	r3, [r7, #20]
10004266:	3301      	adds	r3, #1
10004268:	617b      	str	r3, [r7, #20]
1000426a:	687b      	ldr	r3, [r7, #4]
1000426c:	689a      	ldr	r2, [r3, #8]
1000426e:	687b      	ldr	r3, [r7, #4]
10004270:	68db      	ldr	r3, [r3, #12]
10004272:	fa22 f303 	lsr.w	r3, r2, r3
10004276:	697a      	ldr	r2, [r7, #20]
10004278:	429a      	cmp	r2, r3
1000427a:	d9e2      	bls.n	10004242 <metal_sys_io_mem_map+0x3a>
		}
	}
}
1000427c:	bf00      	nop
1000427e:	3718      	adds	r7, #24
10004280:	46bd      	mov	sp, r7
10004282:	bd80      	pop	{r7, pc}

10004284 <metal_machine_cache_flush>:

	/* Add implementation here */
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
10004284:	b480      	push	{r7}
10004286:	b083      	sub	sp, #12
10004288:	af00      	add	r7, sp, #0
1000428a:	6078      	str	r0, [r7, #4]
1000428c:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
1000428e:	bf00      	nop
10004290:	370c      	adds	r7, #12
10004292:	46bd      	mov	sp, r7
10004294:	f85d 7b04 	ldr.w	r7, [sp], #4
10004298:	4770      	bx	lr

1000429a <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
1000429a:	b480      	push	{r7}
1000429c:	b083      	sub	sp, #12
1000429e:	af00      	add	r7, sp, #0
100042a0:	6078      	str	r0, [r7, #4]
100042a2:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
100042a4:	bf00      	nop
100042a6:	370c      	adds	r7, #12
100042a8:	46bd      	mov	sp, r7
100042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
100042ae:	4770      	bx	lr

100042b0 <metal_machine_io_mem_map>:
	/* Add implementation here */
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
100042b0:	b480      	push	{r7}
100042b2:	b085      	sub	sp, #20
100042b4:	af00      	add	r7, sp, #0
100042b6:	60f8      	str	r0, [r7, #12]
100042b8:	60b9      	str	r1, [r7, #8]
100042ba:	607a      	str	r2, [r7, #4]
100042bc:	603b      	str	r3, [r7, #0]
	metal_unused(size);
	metal_unused(flags);

	/* Add implementation here */

	return va;
100042be:	68fb      	ldr	r3, [r7, #12]
}
100042c0:	4618      	mov	r0, r3
100042c2:	3714      	adds	r7, #20
100042c4:	46bd      	mov	sp, r7
100042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
100042ca:	4770      	bx	lr

100042cc <metal_io_virt>:
{
100042cc:	b480      	push	{r7}
100042ce:	b083      	sub	sp, #12
100042d0:	af00      	add	r7, sp, #0
100042d2:	6078      	str	r0, [r7, #4]
100042d4:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
100042d6:	687b      	ldr	r3, [r7, #4]
100042d8:	681b      	ldr	r3, [r3, #0]
		: NULL);
100042da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
100042de:	d00a      	beq.n	100042f6 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
100042e0:	687b      	ldr	r3, [r7, #4]
100042e2:	689b      	ldr	r3, [r3, #8]
100042e4:	683a      	ldr	r2, [r7, #0]
100042e6:	429a      	cmp	r2, r3
100042e8:	d205      	bcs.n	100042f6 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
100042ea:	687b      	ldr	r3, [r7, #4]
100042ec:	681b      	ldr	r3, [r3, #0]
100042ee:	461a      	mov	r2, r3
100042f0:	683b      	ldr	r3, [r7, #0]
100042f2:	4413      	add	r3, r2
		: NULL);
100042f4:	e000      	b.n	100042f8 <metal_io_virt+0x2c>
100042f6:	2300      	movs	r3, #0
}
100042f8:	4618      	mov	r0, r3
100042fa:	370c      	adds	r7, #12
100042fc:	46bd      	mov	sp, r7
100042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
10004302:	4770      	bx	lr

10004304 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
10004304:	b480      	push	{r7}
10004306:	b085      	sub	sp, #20
10004308:	af00      	add	r7, sp, #0
1000430a:	6078      	str	r0, [r7, #4]
1000430c:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
1000430e:	683b      	ldr	r3, [r7, #0]
10004310:	687a      	ldr	r2, [r7, #4]
10004312:	6812      	ldr	r2, [r2, #0]
10004314:	1a9b      	subs	r3, r3, r2
10004316:	60fb      	str	r3, [r7, #12]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
10004318:	687b      	ldr	r3, [r7, #4]
1000431a:	689b      	ldr	r3, [r3, #8]
1000431c:	68fa      	ldr	r2, [r7, #12]
1000431e:	429a      	cmp	r2, r3
10004320:	d201      	bcs.n	10004326 <metal_io_virt_to_offset+0x22>
10004322:	68fb      	ldr	r3, [r7, #12]
10004324:	e001      	b.n	1000432a <metal_io_virt_to_offset+0x26>
10004326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
1000432a:	4618      	mov	r0, r3
1000432c:	3714      	adds	r7, #20
1000432e:	46bd      	mov	sp, r7
10004330:	f85d 7b04 	ldr.w	r7, [sp], #4
10004334:	4770      	bx	lr
	...

10004338 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
10004338:	b5b0      	push	{r4, r5, r7, lr}
1000433a:	b08c      	sub	sp, #48	; 0x30
1000433c:	af00      	add	r7, sp, #0
1000433e:	60f8      	str	r0, [r7, #12]
10004340:	60b9      	str	r1, [r7, #8]
10004342:	603b      	str	r3, [r7, #0]
10004344:	4613      	mov	r3, r2
10004346:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
10004348:	68b9      	ldr	r1, [r7, #8]
1000434a:	68f8      	ldr	r0, [r7, #12]
1000434c:	f7ff ffbe 	bl	100042cc <metal_io_virt>
10004350:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
10004352:	68fb      	ldr	r3, [r7, #12]
10004354:	699b      	ldr	r3, [r3, #24]
10004356:	2b00      	cmp	r3, #0
10004358:	d009      	beq.n	1000436e <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
1000435a:	68fb      	ldr	r3, [r7, #12]
1000435c:	699c      	ldr	r4, [r3, #24]
1000435e:	79fa      	ldrb	r2, [r7, #7]
10004360:	683b      	ldr	r3, [r7, #0]
10004362:	68b9      	ldr	r1, [r7, #8]
10004364:	68f8      	ldr	r0, [r7, #12]
10004366:	47a0      	blx	r4
10004368:	4604      	mov	r4, r0
1000436a:	460d      	mov	r5, r1
1000436c:	e059      	b.n	10004422 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
1000436e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10004370:	2b00      	cmp	r3, #0
10004372:	d012      	beq.n	1000439a <metal_io_read+0x62>
10004374:	683b      	ldr	r3, [r7, #0]
10004376:	2b01      	cmp	r3, #1
10004378:	d10f      	bne.n	1000439a <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
1000437a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000437c:	62bb      	str	r3, [r7, #40]	; 0x28
1000437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
10004380:	f3bf 8f5b 	dmb	ish
10004384:	781b      	ldrb	r3, [r3, #0]
10004386:	f3bf 8f5b 	dmb	ish
1000438a:	b2db      	uxtb	r3, r3
1000438c:	76fb      	strb	r3, [r7, #27]
1000438e:	7efb      	ldrb	r3, [r7, #27]
10004390:	b2db      	uxtb	r3, r3
10004392:	2200      	movs	r2, #0
10004394:	461c      	mov	r4, r3
10004396:	4615      	mov	r5, r2
10004398:	e043      	b.n	10004422 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
1000439a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000439c:	2b00      	cmp	r3, #0
1000439e:	d012      	beq.n	100043c6 <metal_io_read+0x8e>
100043a0:	683b      	ldr	r3, [r7, #0]
100043a2:	2b02      	cmp	r3, #2
100043a4:	d10f      	bne.n	100043c6 <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
100043a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100043a8:	627b      	str	r3, [r7, #36]	; 0x24
100043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100043ac:	f3bf 8f5b 	dmb	ish
100043b0:	881b      	ldrh	r3, [r3, #0]
100043b2:	f3bf 8f5b 	dmb	ish
100043b6:	b29b      	uxth	r3, r3
100043b8:	833b      	strh	r3, [r7, #24]
100043ba:	8b3b      	ldrh	r3, [r7, #24]
100043bc:	b29b      	uxth	r3, r3
100043be:	2200      	movs	r2, #0
100043c0:	461c      	mov	r4, r3
100043c2:	4615      	mov	r5, r2
100043c4:	e02d      	b.n	10004422 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
100043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100043c8:	2b00      	cmp	r3, #0
100043ca:	d010      	beq.n	100043ee <metal_io_read+0xb6>
100043cc:	683b      	ldr	r3, [r7, #0]
100043ce:	2b04      	cmp	r3, #4
100043d0:	d10d      	bne.n	100043ee <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
100043d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100043d4:	623b      	str	r3, [r7, #32]
100043d6:	6a3b      	ldr	r3, [r7, #32]
100043d8:	f3bf 8f5b 	dmb	ish
100043dc:	681b      	ldr	r3, [r3, #0]
100043de:	f3bf 8f5b 	dmb	ish
100043e2:	617b      	str	r3, [r7, #20]
100043e4:	697b      	ldr	r3, [r7, #20]
100043e6:	2200      	movs	r2, #0
100043e8:	461c      	mov	r4, r3
100043ea:	4615      	mov	r5, r2
100043ec:	e019      	b.n	10004422 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
100043ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100043f0:	2b00      	cmp	r3, #0
100043f2:	d010      	beq.n	10004416 <metal_io_read+0xde>
100043f4:	683b      	ldr	r3, [r7, #0]
100043f6:	2b04      	cmp	r3, #4
100043f8:	d10d      	bne.n	10004416 <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
100043fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100043fc:	61fb      	str	r3, [r7, #28]
100043fe:	69fb      	ldr	r3, [r7, #28]
10004400:	f3bf 8f5b 	dmb	ish
10004404:	681b      	ldr	r3, [r3, #0]
10004406:	f3bf 8f5b 	dmb	ish
1000440a:	613b      	str	r3, [r7, #16]
1000440c:	693b      	ldr	r3, [r7, #16]
1000440e:	2200      	movs	r2, #0
10004410:	461c      	mov	r4, r3
10004412:	4615      	mov	r5, r2
10004414:	e005      	b.n	10004422 <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
10004416:	4b06      	ldr	r3, [pc, #24]	; (10004430 <metal_io_read+0xf8>)
10004418:	4a06      	ldr	r2, [pc, #24]	; (10004434 <metal_io_read+0xfc>)
1000441a:	21fe      	movs	r1, #254	; 0xfe
1000441c:	4806      	ldr	r0, [pc, #24]	; (10004438 <metal_io_read+0x100>)
1000441e:	f001 fe03 	bl	10006028 <__assert_func>
	return 0; /* quiet compiler */
}
10004422:	4622      	mov	r2, r4
10004424:	462b      	mov	r3, r5
10004426:	4610      	mov	r0, r2
10004428:	4619      	mov	r1, r3
1000442a:	3730      	adds	r7, #48	; 0x30
1000442c:	46bd      	mov	sp, r7
1000442e:	bdb0      	pop	{r4, r5, r7, pc}
10004430:	100073b4 	.word	0x100073b4
10004434:	100075c4 	.word	0x100075c4
10004438:	100073b8 	.word	0x100073b8

1000443c <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
1000443c:	b580      	push	{r7, lr}
1000443e:	b082      	sub	sp, #8
10004440:	af00      	add	r7, sp, #0
10004442:	6078      	str	r0, [r7, #4]
	return malloc(size);
10004444:	6878      	ldr	r0, [r7, #4]
10004446:	f001 fe0d 	bl	10006064 <malloc>
1000444a:	4603      	mov	r3, r0
}
1000444c:	4618      	mov	r0, r3
1000444e:	3708      	adds	r7, #8
10004450:	46bd      	mov	sp, r7
10004452:	bd80      	pop	{r7, pc}

10004454 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
10004454:	b580      	push	{r7, lr}
10004456:	b082      	sub	sp, #8
10004458:	af00      	add	r7, sp, #0
1000445a:	6078      	str	r0, [r7, #4]
	free(ptr);
1000445c:	6878      	ldr	r0, [r7, #4]
1000445e:	f001 fe09 	bl	10006074 <free>
}
10004462:	bf00      	nop
10004464:	3708      	adds	r7, #8
10004466:	46bd      	mov	sp, r7
10004468:	bd80      	pop	{r7, pc}

1000446a <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
1000446a:	b580      	push	{r7, lr}
1000446c:	b084      	sub	sp, #16
1000446e:	af00      	add	r7, sp, #0
10004470:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
10004472:	687b      	ldr	r3, [r7, #4]
10004474:	00db      	lsls	r3, r3, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
10004476:	3334      	adds	r3, #52	; 0x34
10004478:	60fb      	str	r3, [r7, #12]

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
1000447a:	68f8      	ldr	r0, [r7, #12]
1000447c:	f7ff ffde 	bl	1000443c <metal_allocate_memory>
10004480:	60b8      	str	r0, [r7, #8]
	if (vqs) {
10004482:	68bb      	ldr	r3, [r7, #8]
10004484:	2b00      	cmp	r3, #0
10004486:	d004      	beq.n	10004492 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
10004488:	68fa      	ldr	r2, [r7, #12]
1000448a:	2100      	movs	r1, #0
1000448c:	68b8      	ldr	r0, [r7, #8]
1000448e:	f001 ffbc 	bl	1000640a <memset>
	}

	return vqs;
10004492:	68bb      	ldr	r3, [r7, #8]
}
10004494:	4618      	mov	r0, r3
10004496:	3710      	adds	r7, #16
10004498:	46bd      	mov	sp, r7
1000449a:	bd80      	pop	{r7, pc}

1000449c <rproc_virtio_virtqueue_notify>:
#include <metal/cpu.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
1000449c:	b580      	push	{r7, lr}
1000449e:	b086      	sub	sp, #24
100044a0:	af00      	add	r7, sp, #0
100044a2:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
100044a4:	687b      	ldr	r3, [r7, #4]
100044a6:	891b      	ldrh	r3, [r3, #8]
100044a8:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
100044aa:	687b      	ldr	r3, [r7, #4]
100044ac:	681b      	ldr	r3, [r3, #0]
100044ae:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
100044b0:	693b      	ldr	r3, [r7, #16]
100044b2:	3b10      	subs	r3, #16
100044b4:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id < vdev->vrings_num);
100044b6:	693b      	ldr	r3, [r7, #16]
100044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100044ba:	697a      	ldr	r2, [r7, #20]
100044bc:	429a      	cmp	r2, r3
100044be:	d305      	bcc.n	100044cc <rproc_virtio_virtqueue_notify+0x30>
100044c0:	4b0d      	ldr	r3, [pc, #52]	; (100044f8 <rproc_virtio_virtqueue_notify+0x5c>)
100044c2:	4a0e      	ldr	r2, [pc, #56]	; (100044fc <rproc_virtio_virtqueue_notify+0x60>)
100044c4:	211c      	movs	r1, #28
100044c6:	480e      	ldr	r0, [pc, #56]	; (10004500 <rproc_virtio_virtqueue_notify+0x64>)
100044c8:	f001 fdae 	bl	10006028 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
100044cc:	693b      	ldr	r3, [r7, #16]
100044ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
100044d0:	697a      	ldr	r2, [r7, #20]
100044d2:	4613      	mov	r3, r2
100044d4:	005b      	lsls	r3, r3, #1
100044d6:	4413      	add	r3, r2
100044d8:	00db      	lsls	r3, r3, #3
100044da:	440b      	add	r3, r1
100044dc:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
100044de:	68fb      	ldr	r3, [r7, #12]
100044e0:	68db      	ldr	r3, [r3, #12]
100044e2:	68fa      	ldr	r2, [r7, #12]
100044e4:	6810      	ldr	r0, [r2, #0]
100044e6:	68ba      	ldr	r2, [r7, #8]
100044e8:	6912      	ldr	r2, [r2, #16]
100044ea:	4611      	mov	r1, r2
100044ec:	4798      	blx	r3
}
100044ee:	bf00      	nop
100044f0:	3718      	adds	r7, #24
100044f2:	46bd      	mov	sp, r7
100044f4:	bd80      	pop	{r7, pc}
100044f6:	bf00      	nop
100044f8:	10007410 	.word	0x10007410
100044fc:	100075a4 	.word	0x100075a4
10004500:	1000742c 	.word	0x1000742c

10004504 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
10004504:	b580      	push	{r7, lr}
10004506:	b086      	sub	sp, #24
10004508:	af00      	add	r7, sp, #0
1000450a:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000450c:	687b      	ldr	r3, [r7, #4]
1000450e:	3b10      	subs	r3, #16
10004510:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
10004512:	697b      	ldr	r3, [r7, #20]
10004514:	685b      	ldr	r3, [r3, #4]
10004516:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
10004518:	697b      	ldr	r3, [r7, #20]
1000451a:	689b      	ldr	r3, [r3, #8]
1000451c:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
1000451e:	693b      	ldr	r3, [r7, #16]
10004520:	3318      	adds	r3, #24
10004522:	4619      	mov	r1, r3
10004524:	68f8      	ldr	r0, [r7, #12]
10004526:	f7ff feed 	bl	10004304 <metal_io_virt_to_offset>
1000452a:	4601      	mov	r1, r0
1000452c:	2301      	movs	r3, #1
1000452e:	2205      	movs	r2, #5
10004530:	68f8      	ldr	r0, [r7, #12]
10004532:	f7ff ff01 	bl	10004338 <metal_io_read>
10004536:	4602      	mov	r2, r0
10004538:	460b      	mov	r3, r1
1000453a:	4613      	mov	r3, r2
1000453c:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
1000453e:	7afb      	ldrb	r3, [r7, #11]
}
10004540:	4618      	mov	r0, r3
10004542:	3718      	adds	r7, #24
10004544:	46bd      	mov	sp, r7
10004546:	bd80      	pop	{r7, pc}

10004548 <rproc_virtio_get_dfeatures>:
	rpvdev->notify(rpvdev->priv, vdev->notifyid);
}
#endif

static uint32_t rproc_virtio_get_dfeatures(struct virtio_device *vdev)
{
10004548:	b580      	push	{r7, lr}
1000454a:	b086      	sub	sp, #24
1000454c:	af00      	add	r7, sp, #0
1000454e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10004550:	687b      	ldr	r3, [r7, #4]
10004552:	3b10      	subs	r3, #16
10004554:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
10004556:	697b      	ldr	r3, [r7, #20]
10004558:	685b      	ldr	r3, [r3, #4]
1000455a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
1000455c:	697b      	ldr	r3, [r7, #20]
1000455e:	689b      	ldr	r3, [r3, #8]
10004560:	60fb      	str	r3, [r7, #12]
	features = metal_io_read32(io,
10004562:	693b      	ldr	r3, [r7, #16]
10004564:	330c      	adds	r3, #12
10004566:	4619      	mov	r1, r3
10004568:	68f8      	ldr	r0, [r7, #12]
1000456a:	f7ff fecb 	bl	10004304 <metal_io_virt_to_offset>
1000456e:	4601      	mov	r1, r0
10004570:	2304      	movs	r3, #4
10004572:	2205      	movs	r2, #5
10004574:	68f8      	ldr	r0, [r7, #12]
10004576:	f7ff fedf 	bl	10004338 <metal_io_read>
1000457a:	4602      	mov	r2, r0
1000457c:	460b      	mov	r3, r1
1000457e:	4613      	mov	r3, r2
10004580:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
10004582:	68bb      	ldr	r3, [r7, #8]
}
10004584:	4618      	mov	r0, r3
10004586:	3718      	adds	r7, #24
10004588:	46bd      	mov	sp, r7
1000458a:	bd80      	pop	{r7, pc}

1000458c <rproc_virtio_get_features>:

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
1000458c:	b580      	push	{r7, lr}
1000458e:	b088      	sub	sp, #32
10004590:	af00      	add	r7, sp, #0
10004592:	6078      	str	r0, [r7, #4]
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t gfeatures;
	uint32_t dfeatures;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10004594:	687b      	ldr	r3, [r7, #4]
10004596:	3b10      	subs	r3, #16
10004598:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
1000459a:	69fb      	ldr	r3, [r7, #28]
1000459c:	685b      	ldr	r3, [r3, #4]
1000459e:	61bb      	str	r3, [r7, #24]
	io = rpvdev->vdev_rsc_io;
100045a0:	69fb      	ldr	r3, [r7, #28]
100045a2:	689b      	ldr	r3, [r3, #8]
100045a4:	617b      	str	r3, [r7, #20]
	gfeatures = metal_io_read32(io,
100045a6:	69bb      	ldr	r3, [r7, #24]
100045a8:	3310      	adds	r3, #16
100045aa:	4619      	mov	r1, r3
100045ac:	6978      	ldr	r0, [r7, #20]
100045ae:	f7ff fea9 	bl	10004304 <metal_io_virt_to_offset>
100045b2:	4601      	mov	r1, r0
100045b4:	2304      	movs	r3, #4
100045b6:	2205      	movs	r2, #5
100045b8:	6978      	ldr	r0, [r7, #20]
100045ba:	f7ff febd 	bl	10004338 <metal_io_read>
100045be:	4602      	mov	r2, r0
100045c0:	460b      	mov	r3, r1
100045c2:	4613      	mov	r3, r2
100045c4:	613b      	str	r3, [r7, #16]
			metal_io_virt_to_offset(io, &vdev_rsc->gfeatures));
	dfeatures = rproc_virtio_get_dfeatures(vdev);
100045c6:	6878      	ldr	r0, [r7, #4]
100045c8:	f7ff ffbe 	bl	10004548 <rproc_virtio_get_dfeatures>
100045cc:	60f8      	str	r0, [r7, #12]

	return dfeatures & gfeatures;
100045ce:	68fa      	ldr	r2, [r7, #12]
100045d0:	693b      	ldr	r3, [r7, #16]
100045d2:	4013      	ands	r3, r2
}
100045d4:	4618      	mov	r0, r3
100045d6:	3720      	adds	r7, #32
100045d8:	46bd      	mov	sp, r7
100045da:	bd80      	pop	{r7, pc}

100045dc <rproc_virtio_read_config>:
}
#endif

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
100045dc:	b580      	push	{r7, lr}
100045de:	b088      	sub	sp, #32
100045e0:	af00      	add	r7, sp, #0
100045e2:	60f8      	str	r0, [r7, #12]
100045e4:	60b9      	str	r1, [r7, #8]
100045e6:	607a      	str	r2, [r7, #4]
100045e8:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char *config;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
100045ea:	68fb      	ldr	r3, [r7, #12]
100045ec:	3b10      	subs	r3, #16
100045ee:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
100045f0:	69fb      	ldr	r3, [r7, #28]
100045f2:	685b      	ldr	r3, [r3, #4]
100045f4:	61bb      	str	r3, [r7, #24]
	config = (char *)(&vdev_rsc->vring[vdev->vrings_num]);
100045f6:	68fb      	ldr	r3, [r7, #12]
100045f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
100045fa:	4613      	mov	r3, r2
100045fc:	009b      	lsls	r3, r3, #2
100045fe:	4413      	add	r3, r2
10004600:	009b      	lsls	r3, r3, #2
10004602:	3318      	adds	r3, #24
10004604:	69ba      	ldr	r2, [r7, #24]
10004606:	4413      	add	r3, r2
10004608:	3304      	adds	r3, #4
1000460a:	617b      	str	r3, [r7, #20]
	io = rpvdev->vdev_rsc_io;
1000460c:	69fb      	ldr	r3, [r7, #28]
1000460e:	689b      	ldr	r3, [r3, #8]
10004610:	613b      	str	r3, [r7, #16]

	if (offset + length <= vdev_rsc->config_len)
10004612:	683a      	ldr	r2, [r7, #0]
10004614:	68bb      	ldr	r3, [r7, #8]
10004616:	441a      	add	r2, r3
10004618:	69bb      	ldr	r3, [r7, #24]
1000461a:	695b      	ldr	r3, [r3, #20]
1000461c:	429a      	cmp	r2, r3
1000461e:	d80c      	bhi.n	1000463a <rproc_virtio_read_config+0x5e>
		metal_io_block_read(io,
				metal_io_virt_to_offset(io, config + offset),
10004620:	697a      	ldr	r2, [r7, #20]
10004622:	68bb      	ldr	r3, [r7, #8]
10004624:	4413      	add	r3, r2
		metal_io_block_read(io,
10004626:	4619      	mov	r1, r3
10004628:	6938      	ldr	r0, [r7, #16]
1000462a:	f7ff fe6b 	bl	10004304 <metal_io_virt_to_offset>
1000462e:	4601      	mov	r1, r0
10004630:	683b      	ldr	r3, [r7, #0]
10004632:	687a      	ldr	r2, [r7, #4]
10004634:	6938      	ldr	r0, [r7, #16]
10004636:	f7ff fcbc 	bl	10003fb2 <metal_io_block_read>
				dst, length);
}
1000463a:	bf00      	nop
1000463c:	3720      	adds	r7, #32
1000463e:	46bd      	mov	sp, r7
10004640:	bd80      	pop	{r7, pc}
	...

10004644 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
10004644:	b580      	push	{r7, lr}
10004646:	b08e      	sub	sp, #56	; 0x38
10004648:	af00      	add	r7, sp, #0
1000464a:	60f8      	str	r0, [r7, #12]
1000464c:	60b9      	str	r1, [r7, #8]
1000464e:	607a      	str	r2, [r7, #4]
10004650:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
10004652:	687b      	ldr	r3, [r7, #4]
10004654:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
10004656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10004658:	7e5b      	ldrb	r3, [r3, #25]
1000465a:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
1000465c:	2048      	movs	r0, #72	; 0x48
1000465e:	f7ff feed 	bl	1000443c <metal_allocate_memory>
10004662:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
10004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10004666:	2b00      	cmp	r3, #0
10004668:	d101      	bne.n	1000466e <rproc_virtio_create_vdev+0x2a>
		return NULL;
1000466a:	2300      	movs	r3, #0
1000466c:	e092      	b.n	10004794 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
1000466e:	6aba      	ldr	r2, [r7, #40]	; 0x28
10004670:	4613      	mov	r3, r2
10004672:	005b      	lsls	r3, r3, #1
10004674:	4413      	add	r3, r2
10004676:	00db      	lsls	r3, r3, #3
10004678:	4618      	mov	r0, r3
1000467a:	f7ff fedf 	bl	1000443c <metal_allocate_memory>
1000467e:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
10004680:	6a3b      	ldr	r3, [r7, #32]
10004682:	2b00      	cmp	r3, #0
10004684:	f000 8081 	beq.w	1000478a <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
10004688:	2248      	movs	r2, #72	; 0x48
1000468a:	2100      	movs	r1, #0
1000468c:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000468e:	f001 febc 	bl	1000640a <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
10004692:	2218      	movs	r2, #24
10004694:	2100      	movs	r1, #0
10004696:	6a38      	ldr	r0, [r7, #32]
10004698:	f001 feb7 	bl	1000640a <memset>
	vdev = &rpvdev->vdev;
1000469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000469e:	3310      	adds	r3, #16
100046a0:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
100046a2:	2300      	movs	r3, #0
100046a4:	637b      	str	r3, [r7, #52]	; 0x34
100046a6:	e025      	b.n	100046f4 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
100046a8:	2300      	movs	r3, #0
100046aa:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
100046ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
100046ae:	4613      	mov	r3, r2
100046b0:	009b      	lsls	r3, r3, #2
100046b2:	4413      	add	r3, r2
100046b4:	009b      	lsls	r3, r3, #2
100046b6:	3318      	adds	r3, #24
100046b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
100046ba:	4413      	add	r3, r2
100046bc:	3304      	adds	r3, #4
100046be:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
100046c0:	68fb      	ldr	r3, [r7, #12]
100046c2:	2b00      	cmp	r3, #0
100046c4:	d102      	bne.n	100046cc <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
100046c6:	69bb      	ldr	r3, [r7, #24]
100046c8:	689b      	ldr	r3, [r3, #8]
100046ca:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
100046cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
100046ce:	f7ff fecc 	bl	1000446a <virtqueue_allocate>
100046d2:	6178      	str	r0, [r7, #20]
		if (!vq)
100046d4:	697b      	ldr	r3, [r7, #20]
100046d6:	2b00      	cmp	r3, #0
100046d8:	d031      	beq.n	1000473e <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
100046da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
100046dc:	4613      	mov	r3, r2
100046de:	005b      	lsls	r3, r3, #1
100046e0:	4413      	add	r3, r2
100046e2:	00db      	lsls	r3, r3, #3
100046e4:	461a      	mov	r2, r3
100046e6:	6a3b      	ldr	r3, [r7, #32]
100046e8:	4413      	add	r3, r2
100046ea:	697a      	ldr	r2, [r7, #20]
100046ec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
100046ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100046f0:	3301      	adds	r3, #1
100046f2:	637b      	str	r3, [r7, #52]	; 0x34
100046f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
100046f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
100046f8:	429a      	cmp	r2, r3
100046fa:	d3d5      	bcc.n	100046a8 <rproc_virtio_create_vdev+0x64>
	}

	rpvdev->notify = notify;
100046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100046fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
10004700:	60da      	str	r2, [r3, #12]
	rpvdev->priv = priv;
10004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10004704:	6c3a      	ldr	r2, [r7, #64]	; 0x40
10004706:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
10004708:	69fb      	ldr	r3, [r7, #28]
1000470a:	6a3a      	ldr	r2, [r7, #32]
1000470c:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
1000470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10004710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10004712:	605a      	str	r2, [r3, #4]
	rpvdev->vdev_rsc_io = rsc_io;
10004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10004716:	683a      	ldr	r2, [r7, #0]
10004718:	609a      	str	r2, [r3, #8]

	vdev->notifyid = notifyid;
1000471a:	69fb      	ldr	r3, [r7, #28]
1000471c:	68ba      	ldr	r2, [r7, #8]
1000471e:	601a      	str	r2, [r3, #0]
	vdev->role = role;
10004720:	69fb      	ldr	r3, [r7, #28]
10004722:	68fa      	ldr	r2, [r7, #12]
10004724:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
10004726:	69fb      	ldr	r3, [r7, #28]
10004728:	6cba      	ldr	r2, [r7, #72]	; 0x48
1000472a:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
1000472c:	69fb      	ldr	r3, [r7, #28]
1000472e:	6aba      	ldr	r2, [r7, #40]	; 0x28
10004730:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
10004732:	69fb      	ldr	r3, [r7, #28]
10004734:	4a19      	ldr	r2, [pc, #100]	; (1000479c <rproc_virtio_create_vdev+0x158>)
10004736:	621a      	str	r2, [r3, #32]
		/* Assume the master support all slave features */
		rproc_virtio_negotiate_features(vdev, dfeatures);
	}
#endif

	return &rpvdev->vdev;
10004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000473a:	3310      	adds	r3, #16
1000473c:	e02a      	b.n	10004794 <rproc_virtio_create_vdev+0x150>
			goto err1;
1000473e:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
10004740:	2300      	movs	r3, #0
10004742:	637b      	str	r3, [r7, #52]	; 0x34
10004744:	e019      	b.n	1000477a <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
10004746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
10004748:	4613      	mov	r3, r2
1000474a:	005b      	lsls	r3, r3, #1
1000474c:	4413      	add	r3, r2
1000474e:	00db      	lsls	r3, r3, #3
10004750:	461a      	mov	r2, r3
10004752:	6a3b      	ldr	r3, [r7, #32]
10004754:	4413      	add	r3, r2
10004756:	681b      	ldr	r3, [r3, #0]
10004758:	2b00      	cmp	r3, #0
1000475a:	d00b      	beq.n	10004774 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
1000475c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000475e:	4613      	mov	r3, r2
10004760:	005b      	lsls	r3, r3, #1
10004762:	4413      	add	r3, r2
10004764:	00db      	lsls	r3, r3, #3
10004766:	461a      	mov	r2, r3
10004768:	6a3b      	ldr	r3, [r7, #32]
1000476a:	4413      	add	r3, r2
1000476c:	681b      	ldr	r3, [r3, #0]
1000476e:	4618      	mov	r0, r3
10004770:	f7ff fe70 	bl	10004454 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
10004774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10004776:	3301      	adds	r3, #1
10004778:	637b      	str	r3, [r7, #52]	; 0x34
1000477a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000477c:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000477e:	429a      	cmp	r2, r3
10004780:	d3e1      	bcc.n	10004746 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
10004782:	6a38      	ldr	r0, [r7, #32]
10004784:	f7ff fe66 	bl	10004454 <metal_free_memory>
10004788:	e000      	b.n	1000478c <rproc_virtio_create_vdev+0x148>
		goto err0;
1000478a:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
1000478c:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000478e:	f7ff fe61 	bl	10004454 <metal_free_memory>
	return NULL;
10004792:	2300      	movs	r3, #0
}
10004794:	4618      	mov	r0, r3
10004796:	3738      	adds	r7, #56	; 0x38
10004798:	46bd      	mov	sp, r7
1000479a:	bd80      	pop	{r7, pc}
1000479c:	10007580 	.word	0x10007580

100047a0 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
100047a0:	b480      	push	{r7}
100047a2:	b087      	sub	sp, #28
100047a4:	af00      	add	r7, sp, #0
100047a6:	60f8      	str	r0, [r7, #12]
100047a8:	60b9      	str	r1, [r7, #8]
100047aa:	607a      	str	r2, [r7, #4]
100047ac:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
100047ae:	68fb      	ldr	r3, [r7, #12]
100047b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100047b2:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
100047b4:	68ba      	ldr	r2, [r7, #8]
100047b6:	697b      	ldr	r3, [r7, #20]
100047b8:	429a      	cmp	r2, r3
100047ba:	d302      	bcc.n	100047c2 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
100047bc:	f06f 0301 	mvn.w	r3, #1
100047c0:	e019      	b.n	100047f6 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
100047c2:	68fb      	ldr	r3, [r7, #12]
100047c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
100047c6:	68ba      	ldr	r2, [r7, #8]
100047c8:	4613      	mov	r3, r2
100047ca:	005b      	lsls	r3, r3, #1
100047cc:	4413      	add	r3, r2
100047ce:	00db      	lsls	r3, r3, #3
100047d0:	440b      	add	r3, r1
100047d2:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
100047d4:	693b      	ldr	r3, [r7, #16]
100047d6:	6a3a      	ldr	r2, [r7, #32]
100047d8:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
100047da:	693b      	ldr	r3, [r7, #16]
100047dc:	687a      	ldr	r2, [r7, #4]
100047de:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
100047e0:	693b      	ldr	r3, [r7, #16]
100047e2:	683a      	ldr	r2, [r7, #0]
100047e4:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
100047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100047e8:	b29a      	uxth	r2, r3
100047ea:	693b      	ldr	r3, [r7, #16]
100047ec:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
100047ee:	693b      	ldr	r3, [r7, #16]
100047f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
100047f2:	609a      	str	r2, [r3, #8]

	return 0;
100047f4:	2300      	movs	r3, #0
}
100047f6:	4618      	mov	r0, r3
100047f8:	371c      	adds	r7, #28
100047fa:	46bd      	mov	sp, r7
100047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
10004800:	4770      	bx	lr

10004802 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
10004802:	b580      	push	{r7, lr}
10004804:	b086      	sub	sp, #24
10004806:	af00      	add	r7, sp, #0
10004808:	6078      	str	r0, [r7, #4]
1000480a:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
1000480c:	687b      	ldr	r3, [r7, #4]
1000480e:	2b00      	cmp	r3, #0
10004810:	d102      	bne.n	10004818 <rproc_virtio_notified+0x16>
		return -RPROC_EINVAL;
10004812:	f06f 0301 	mvn.w	r3, #1
10004816:	e02c      	b.n	10004872 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->notifyid == notifyid)
10004818:	687b      	ldr	r3, [r7, #4]
1000481a:	681b      	ldr	r3, [r3, #0]
1000481c:	683a      	ldr	r2, [r7, #0]
1000481e:	429a      	cmp	r2, r3
10004820:	d101      	bne.n	10004826 <rproc_virtio_notified+0x24>
		return 0;
10004822:	2300      	movs	r3, #0
10004824:	e025      	b.n	10004872 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
10004826:	687b      	ldr	r3, [r7, #4]
10004828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000482a:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
1000482c:	2300      	movs	r3, #0
1000482e:	617b      	str	r3, [r7, #20]
10004830:	e01a      	b.n	10004868 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
10004832:	687b      	ldr	r3, [r7, #4]
10004834:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
10004836:	697a      	ldr	r2, [r7, #20]
10004838:	4613      	mov	r3, r2
1000483a:	005b      	lsls	r3, r3, #1
1000483c:	4413      	add	r3, r2
1000483e:	00db      	lsls	r3, r3, #3
10004840:	440b      	add	r3, r1
10004842:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
10004844:	68fb      	ldr	r3, [r7, #12]
10004846:	691b      	ldr	r3, [r3, #16]
10004848:	683a      	ldr	r2, [r7, #0]
1000484a:	429a      	cmp	r2, r3
1000484c:	d003      	beq.n	10004856 <rproc_virtio_notified+0x54>
1000484e:	683b      	ldr	r3, [r7, #0]
10004850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10004854:	d105      	bne.n	10004862 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
10004856:	68fb      	ldr	r3, [r7, #12]
10004858:	681b      	ldr	r3, [r3, #0]
1000485a:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
1000485c:	68b8      	ldr	r0, [r7, #8]
1000485e:	f001 fae9 	bl	10005e34 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
10004862:	697b      	ldr	r3, [r7, #20]
10004864:	3301      	adds	r3, #1
10004866:	617b      	str	r3, [r7, #20]
10004868:	697a      	ldr	r2, [r7, #20]
1000486a:	693b      	ldr	r3, [r7, #16]
1000486c:	429a      	cmp	r2, r3
1000486e:	d3e0      	bcc.n	10004832 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
10004870:	2300      	movs	r3, #0
}
10004872:	4618      	mov	r0, r3
10004874:	3718      	adds	r7, #24
10004876:	46bd      	mov	sp, r7
10004878:	bd80      	pop	{r7, pc}

1000487a <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
1000487a:	b580      	push	{r7, lr}
1000487c:	b084      	sub	sp, #16
1000487e:	af00      	add	r7, sp, #0
10004880:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
10004882:	687b      	ldr	r3, [r7, #4]
10004884:	699b      	ldr	r3, [r3, #24]
10004886:	2b00      	cmp	r3, #0
10004888:	d00a      	beq.n	100048a0 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
1000488a:	6878      	ldr	r0, [r7, #4]
1000488c:	f7ff fe3a 	bl	10004504 <rproc_virtio_get_status>
10004890:	4603      	mov	r3, r0
10004892:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
10004894:	7bfb      	ldrb	r3, [r7, #15]
10004896:	f003 0304 	and.w	r3, r3, #4
1000489a:	2b00      	cmp	r3, #0
1000489c:	d102      	bne.n	100048a4 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
1000489e:	e7f4      	b.n	1000488a <rproc_virtio_wait_remote_ready+0x10>
		return;
100048a0:	bf00      	nop
100048a2:	e000      	b.n	100048a6 <rproc_virtio_wait_remote_ready+0x2c>
			return;
100048a4:	bf00      	nop
		metal_cpu_yield();
	}
}
100048a6:	3710      	adds	r7, #16
100048a8:	46bd      	mov	sp, r7
100048aa:	bd80      	pop	{r7, pc}

100048ac <__metal_mutex_acquire>:
		return 0; /* not acquired */
	}
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
100048ac:	b490      	push	{r4, r7}
100048ae:	b086      	sub	sp, #24
100048b0:	af00      	add	r7, sp, #0
100048b2:	6078      	str	r0, [r7, #4]
	int unlocked = METAL_MUTEX_UNLOCKED;
100048b4:	2300      	movs	r3, #0
100048b6:	613b      	str	r3, [r7, #16]

	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
100048b8:	bf00      	nop
100048ba:	687b      	ldr	r3, [r7, #4]
100048bc:	617b      	str	r3, [r7, #20]
100048be:	2301      	movs	r3, #1
100048c0:	60fb      	str	r3, [r7, #12]
100048c2:	68fb      	ldr	r3, [r7, #12]
100048c4:	461c      	mov	r4, r3
100048c6:	697a      	ldr	r2, [r7, #20]
100048c8:	f107 0310 	add.w	r3, r7, #16
100048cc:	6818      	ldr	r0, [r3, #0]
100048ce:	f3bf 8f5b 	dmb	ish
100048d2:	e852 1f00 	ldrex	r1, [r2]
100048d6:	4281      	cmp	r1, r0
100048d8:	d103      	bne.n	100048e2 <__metal_mutex_acquire+0x36>
100048da:	e842 4c00 	strex	ip, r4, [r2]
100048de:	f1bc 0f00 	cmp.w	ip, #0
100048e2:	f3bf 8f5b 	dmb	ish
100048e6:	bf0c      	ite	eq
100048e8:	2201      	moveq	r2, #1
100048ea:	2200      	movne	r2, #0
100048ec:	2a00      	cmp	r2, #0
100048ee:	d100      	bne.n	100048f2 <__metal_mutex_acquire+0x46>
100048f0:	6019      	str	r1, [r3, #0]
100048f2:	4613      	mov	r3, r2
100048f4:	f083 0301 	eor.w	r3, r3, #1
100048f8:	b2db      	uxtb	r3, r3
100048fa:	2b00      	cmp	r3, #0
100048fc:	d1dd      	bne.n	100048ba <__metal_mutex_acquire+0xe>
					     METAL_MUTEX_LOCKED)) {
		;
	}
}
100048fe:	bf00      	nop
10004900:	bf00      	nop
10004902:	3718      	adds	r7, #24
10004904:	46bd      	mov	sp, r7
10004906:	bc90      	pop	{r4, r7}
10004908:	4770      	bx	lr

1000490a <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
1000490a:	b480      	push	{r7}
1000490c:	b085      	sub	sp, #20
1000490e:	af00      	add	r7, sp, #0
10004910:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
10004912:	687b      	ldr	r3, [r7, #4]
10004914:	60fb      	str	r3, [r7, #12]
10004916:	2300      	movs	r3, #0
10004918:	60bb      	str	r3, [r7, #8]
1000491a:	68bb      	ldr	r3, [r7, #8]
1000491c:	461a      	mov	r2, r3
1000491e:	68fb      	ldr	r3, [r7, #12]
10004920:	f3bf 8f5b 	dmb	ish
10004924:	601a      	str	r2, [r3, #0]
10004926:	f3bf 8f5b 	dmb	ish
}
1000492a:	bf00      	nop
1000492c:	3714      	adds	r7, #20
1000492e:	46bd      	mov	sp, r7
10004930:	f85d 7b04 	ldr.w	r7, [sp], #4
10004934:	4770      	bx	lr

10004936 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
10004936:	b580      	push	{r7, lr}
10004938:	b082      	sub	sp, #8
1000493a:	af00      	add	r7, sp, #0
1000493c:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
1000493e:	6878      	ldr	r0, [r7, #4]
10004940:	f7ff ffb4 	bl	100048ac <__metal_mutex_acquire>
}
10004944:	bf00      	nop
10004946:	3708      	adds	r7, #8
10004948:	46bd      	mov	sp, r7
1000494a:	bd80      	pop	{r7, pc}

1000494c <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
1000494c:	b580      	push	{r7, lr}
1000494e:	b082      	sub	sp, #8
10004950:	af00      	add	r7, sp, #0
10004952:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
10004954:	6878      	ldr	r0, [r7, #4]
10004956:	f7ff ffd8 	bl	1000490a <__metal_mutex_release>
}
1000495a:	bf00      	nop
1000495c:	3708      	adds	r7, #8
1000495e:	46bd      	mov	sp, r7
10004960:	bd80      	pop	{r7, pc}

10004962 <metal_list_add_before>:
{
10004962:	b480      	push	{r7}
10004964:	b083      	sub	sp, #12
10004966:	af00      	add	r7, sp, #0
10004968:	6078      	str	r0, [r7, #4]
1000496a:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
1000496c:	687b      	ldr	r3, [r7, #4]
1000496e:	685a      	ldr	r2, [r3, #4]
10004970:	683b      	ldr	r3, [r7, #0]
10004972:	605a      	str	r2, [r3, #4]
	new_node->next = node;
10004974:	683b      	ldr	r3, [r7, #0]
10004976:	687a      	ldr	r2, [r7, #4]
10004978:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
1000497a:	683b      	ldr	r3, [r7, #0]
1000497c:	681b      	ldr	r3, [r3, #0]
1000497e:	683a      	ldr	r2, [r7, #0]
10004980:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
10004982:	683b      	ldr	r3, [r7, #0]
10004984:	685b      	ldr	r3, [r3, #4]
10004986:	683a      	ldr	r2, [r7, #0]
10004988:	601a      	str	r2, [r3, #0]
}
1000498a:	bf00      	nop
1000498c:	370c      	adds	r7, #12
1000498e:	46bd      	mov	sp, r7
10004990:	f85d 7b04 	ldr.w	r7, [sp], #4
10004994:	4770      	bx	lr

10004996 <metal_list_add_tail>:
{
10004996:	b580      	push	{r7, lr}
10004998:	b082      	sub	sp, #8
1000499a:	af00      	add	r7, sp, #0
1000499c:	6078      	str	r0, [r7, #4]
1000499e:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
100049a0:	6839      	ldr	r1, [r7, #0]
100049a2:	6878      	ldr	r0, [r7, #4]
100049a4:	f7ff ffdd 	bl	10004962 <metal_list_add_before>
}
100049a8:	bf00      	nop
100049aa:	3708      	adds	r7, #8
100049ac:	46bd      	mov	sp, r7
100049ae:	bd80      	pop	{r7, pc}

100049b0 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
100049b0:	b480      	push	{r7}
100049b2:	b083      	sub	sp, #12
100049b4:	af00      	add	r7, sp, #0
100049b6:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
100049b8:	687b      	ldr	r3, [r7, #4]
100049ba:	681b      	ldr	r3, [r3, #0]
100049bc:	687a      	ldr	r2, [r7, #4]
100049be:	6852      	ldr	r2, [r2, #4]
100049c0:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
100049c2:	687b      	ldr	r3, [r7, #4]
100049c4:	685b      	ldr	r3, [r3, #4]
100049c6:	687a      	ldr	r2, [r7, #4]
100049c8:	6812      	ldr	r2, [r2, #0]
100049ca:	601a      	str	r2, [r3, #0]
	node->prev = node;
100049cc:	687b      	ldr	r3, [r7, #4]
100049ce:	687a      	ldr	r2, [r7, #4]
100049d0:	605a      	str	r2, [r3, #4]
	node->next = node;
100049d2:	687b      	ldr	r3, [r7, #4]
100049d4:	687a      	ldr	r2, [r7, #4]
100049d6:	601a      	str	r2, [r3, #0]
}
100049d8:	bf00      	nop
100049da:	370c      	adds	r7, #12
100049dc:	46bd      	mov	sp, r7
100049de:	f85d 7b04 	ldr.w	r7, [sp], #4
100049e2:	4770      	bx	lr

100049e4 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
100049e4:	b480      	push	{r7}
100049e6:	b083      	sub	sp, #12
100049e8:	af00      	add	r7, sp, #0
100049ea:	6078      	str	r0, [r7, #4]
100049ec:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
100049ee:	683b      	ldr	r3, [r7, #0]
100049f0:	095b      	lsrs	r3, r3, #5
100049f2:	009a      	lsls	r2, r3, #2
100049f4:	6879      	ldr	r1, [r7, #4]
100049f6:	440a      	add	r2, r1
100049f8:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
100049fa:	683a      	ldr	r2, [r7, #0]
100049fc:	f002 021f 	and.w	r2, r2, #31
10004a00:	2001      	movs	r0, #1
10004a02:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
10004a06:	009b      	lsls	r3, r3, #2
10004a08:	6878      	ldr	r0, [r7, #4]
10004a0a:	4403      	add	r3, r0
10004a0c:	430a      	orrs	r2, r1
10004a0e:	601a      	str	r2, [r3, #0]
}
10004a10:	bf00      	nop
10004a12:	370c      	adds	r7, #12
10004a14:	46bd      	mov	sp, r7
10004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
10004a1a:	4770      	bx	lr

10004a1c <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
10004a1c:	b480      	push	{r7}
10004a1e:	b083      	sub	sp, #12
10004a20:	af00      	add	r7, sp, #0
10004a22:	6078      	str	r0, [r7, #4]
10004a24:	6039      	str	r1, [r7, #0]
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
10004a26:	683b      	ldr	r3, [r7, #0]
10004a28:	095b      	lsrs	r3, r3, #5
10004a2a:	009b      	lsls	r3, r3, #2
10004a2c:	687a      	ldr	r2, [r7, #4]
10004a2e:	4413      	add	r3, r2
10004a30:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
10004a32:	683b      	ldr	r3, [r7, #0]
10004a34:	f003 031f 	and.w	r3, r3, #31
10004a38:	fa22 f303 	lsr.w	r3, r2, r3
10004a3c:	f003 0301 	and.w	r3, r3, #1
10004a40:	2b00      	cmp	r3, #0
10004a42:	bf14      	ite	ne
10004a44:	2301      	movne	r3, #1
10004a46:	2300      	moveq	r3, #0
10004a48:	b2db      	uxtb	r3, r3
}
10004a4a:	4618      	mov	r0, r3
10004a4c:	370c      	adds	r7, #12
10004a4e:	46bd      	mov	sp, r7
10004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
10004a54:	4770      	bx	lr

10004a56 <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
10004a56:	b480      	push	{r7}
10004a58:	b083      	sub	sp, #12
10004a5a:	af00      	add	r7, sp, #0
10004a5c:	6078      	str	r0, [r7, #4]
10004a5e:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
10004a60:	683b      	ldr	r3, [r7, #0]
10004a62:	095b      	lsrs	r3, r3, #5
10004a64:	009a      	lsls	r2, r3, #2
10004a66:	6879      	ldr	r1, [r7, #4]
10004a68:	440a      	add	r2, r1
10004a6a:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
10004a6c:	683a      	ldr	r2, [r7, #0]
10004a6e:	f002 021f 	and.w	r2, r2, #31
10004a72:	2001      	movs	r0, #1
10004a74:	fa00 f202 	lsl.w	r2, r0, r2
10004a78:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
10004a7a:	009b      	lsls	r3, r3, #2
10004a7c:	6878      	ldr	r0, [r7, #4]
10004a7e:	4403      	add	r3, r0
10004a80:	400a      	ands	r2, r1
10004a82:	601a      	str	r2, [r3, #0]
}
10004a84:	bf00      	nop
10004a86:	370c      	adds	r7, #12
10004a88:	46bd      	mov	sp, r7
10004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
10004a8e:	4770      	bx	lr

10004a90 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
10004a90:	b580      	push	{r7, lr}
10004a92:	b082      	sub	sp, #8
10004a94:	af00      	add	r7, sp, #0
10004a96:	6078      	str	r0, [r7, #4]
10004a98:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
10004a9a:	6839      	ldr	r1, [r7, #0]
10004a9c:	6878      	ldr	r0, [r7, #4]
10004a9e:	f7ff ffbd 	bl	10004a1c <metal_bitmap_is_bit_set>
10004aa2:	4603      	mov	r3, r0
10004aa4:	2b00      	cmp	r3, #0
10004aa6:	bf0c      	ite	eq
10004aa8:	2301      	moveq	r3, #1
10004aaa:	2300      	movne	r3, #0
10004aac:	b2db      	uxtb	r3, r3
}
10004aae:	4618      	mov	r0, r3
10004ab0:	3708      	adds	r7, #8
10004ab2:	46bd      	mov	sp, r7
10004ab4:	bd80      	pop	{r7, pc}

10004ab6 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit + 1), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
10004ab6:	b580      	push	{r7, lr}
10004ab8:	b086      	sub	sp, #24
10004aba:	af00      	add	r7, sp, #0
10004abc:	60f8      	str	r0, [r7, #12]
10004abe:	60b9      	str	r1, [r7, #8]
10004ac0:	607a      	str	r2, [r7, #4]
	unsigned int bit;

	for (bit = start;
10004ac2:	68bb      	ldr	r3, [r7, #8]
10004ac4:	617b      	str	r3, [r7, #20]
10004ac6:	e002      	b.n	10004ace <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit++)
10004ac8:	697b      	ldr	r3, [r7, #20]
10004aca:	3301      	adds	r3, #1
10004acc:	617b      	str	r3, [r7, #20]
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
10004ace:	697a      	ldr	r2, [r7, #20]
10004ad0:	687b      	ldr	r3, [r7, #4]
10004ad2:	429a      	cmp	r2, r3
10004ad4:	d207      	bcs.n	10004ae6 <metal_bitmap_next_clear_bit+0x30>
10004ad6:	697b      	ldr	r3, [r7, #20]
10004ad8:	4619      	mov	r1, r3
10004ada:	68f8      	ldr	r0, [r7, #12]
10004adc:	f7ff ffd8 	bl	10004a90 <metal_bitmap_is_bit_clear>
10004ae0:	4603      	mov	r3, r0
10004ae2:	2b00      	cmp	r3, #0
10004ae4:	d0f0      	beq.n	10004ac8 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
10004ae6:	697b      	ldr	r3, [r7, #20]
}
10004ae8:	4618      	mov	r0, r3
10004aea:	3718      	adds	r7, #24
10004aec:	46bd      	mov	sp, r7
10004aee:	bd80      	pop	{r7, pc}

10004af0 <rpmsg_initialize_ept>:
static inline void rpmsg_initialize_ept(struct rpmsg_endpoint *ept,
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
10004af0:	b580      	push	{r7, lr}
10004af2:	b084      	sub	sp, #16
10004af4:	af00      	add	r7, sp, #0
10004af6:	60f8      	str	r0, [r7, #12]
10004af8:	60b9      	str	r1, [r7, #8]
10004afa:	607a      	str	r2, [r7, #4]
10004afc:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
10004afe:	68f8      	ldr	r0, [r7, #12]
10004b00:	68bb      	ldr	r3, [r7, #8]
10004b02:	2b00      	cmp	r3, #0
10004b04:	d001      	beq.n	10004b0a <rpmsg_initialize_ept+0x1a>
10004b06:	68bb      	ldr	r3, [r7, #8]
10004b08:	e000      	b.n	10004b0c <rpmsg_initialize_ept+0x1c>
10004b0a:	4b0a      	ldr	r3, [pc, #40]	; (10004b34 <rpmsg_initialize_ept+0x44>)
10004b0c:	2220      	movs	r2, #32
10004b0e:	4619      	mov	r1, r3
10004b10:	f001 fc95 	bl	1000643e <strncpy>
	ept->addr = src;
10004b14:	68fb      	ldr	r3, [r7, #12]
10004b16:	687a      	ldr	r2, [r7, #4]
10004b18:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
10004b1a:	68fb      	ldr	r3, [r7, #12]
10004b1c:	683a      	ldr	r2, [r7, #0]
10004b1e:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
10004b20:	68fb      	ldr	r3, [r7, #12]
10004b22:	69ba      	ldr	r2, [r7, #24]
10004b24:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
10004b26:	68fb      	ldr	r3, [r7, #12]
10004b28:	69fa      	ldr	r2, [r7, #28]
10004b2a:	631a      	str	r2, [r3, #48]	; 0x30
}
10004b2c:	bf00      	nop
10004b2e:	3710      	adds	r7, #16
10004b30:	46bd      	mov	sp, r7
10004b32:	bd80      	pop	{r7, pc}
10004b34:	10007494 	.word	0x10007494

10004b38 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
10004b38:	b580      	push	{r7, lr}
10004b3a:	b084      	sub	sp, #16
10004b3c:	af00      	add	r7, sp, #0
10004b3e:	6078      	str	r0, [r7, #4]
10004b40:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
10004b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10004b46:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
10004b48:	683b      	ldr	r3, [r7, #0]
10004b4a:	461a      	mov	r2, r3
10004b4c:	2100      	movs	r1, #0
10004b4e:	6878      	ldr	r0, [r7, #4]
10004b50:	f7ff ffb1 	bl	10004ab6 <metal_bitmap_next_clear_bit>
10004b54:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
10004b56:	683b      	ldr	r3, [r7, #0]
10004b58:	68ba      	ldr	r2, [r7, #8]
10004b5a:	429a      	cmp	r2, r3
10004b5c:	d208      	bcs.n	10004b70 <rpmsg_get_address+0x38>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
10004b5e:	68bb      	ldr	r3, [r7, #8]
10004b60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
10004b64:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
10004b66:	68bb      	ldr	r3, [r7, #8]
10004b68:	4619      	mov	r1, r3
10004b6a:	6878      	ldr	r0, [r7, #4]
10004b6c:	f7ff ff3a 	bl	100049e4 <metal_bitmap_set_bit>
	}

	return addr;
10004b70:	68fb      	ldr	r3, [r7, #12]
}
10004b72:	4618      	mov	r0, r3
10004b74:	3710      	adds	r7, #16
10004b76:	46bd      	mov	sp, r7
10004b78:	bd80      	pop	{r7, pc}

10004b7a <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
10004b7a:	b580      	push	{r7, lr}
10004b7c:	b084      	sub	sp, #16
10004b7e:	af00      	add	r7, sp, #0
10004b80:	60f8      	str	r0, [r7, #12]
10004b82:	60b9      	str	r1, [r7, #8]
10004b84:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
10004b86:	687b      	ldr	r3, [r7, #4]
10004b88:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
10004b8c:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size)
10004b8e:	687b      	ldr	r3, [r7, #4]
10004b90:	2b00      	cmp	r3, #0
10004b92:	db07      	blt.n	10004ba4 <rpmsg_release_address+0x2a>
10004b94:	687a      	ldr	r2, [r7, #4]
10004b96:	68bb      	ldr	r3, [r7, #8]
10004b98:	429a      	cmp	r2, r3
10004b9a:	da03      	bge.n	10004ba4 <rpmsg_release_address+0x2a>
		metal_bitmap_clear_bit(bitmap, addr);
10004b9c:	6879      	ldr	r1, [r7, #4]
10004b9e:	68f8      	ldr	r0, [r7, #12]
10004ba0:	f7ff ff59 	bl	10004a56 <metal_bitmap_clear_bit>
}
10004ba4:	bf00      	nop
10004ba6:	3710      	adds	r7, #16
10004ba8:	46bd      	mov	sp, r7
10004baa:	bd80      	pop	{r7, pc}

10004bac <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
10004bac:	b580      	push	{r7, lr}
10004bae:	b084      	sub	sp, #16
10004bb0:	af00      	add	r7, sp, #0
10004bb2:	60f8      	str	r0, [r7, #12]
10004bb4:	60b9      	str	r1, [r7, #8]
10004bb6:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
10004bb8:	687b      	ldr	r3, [r7, #4]
10004bba:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
10004bbe:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size)
10004bc0:	687b      	ldr	r3, [r7, #4]
10004bc2:	2b00      	cmp	r3, #0
10004bc4:	db09      	blt.n	10004bda <rpmsg_is_address_set+0x2e>
10004bc6:	687a      	ldr	r2, [r7, #4]
10004bc8:	68bb      	ldr	r3, [r7, #8]
10004bca:	429a      	cmp	r2, r3
10004bcc:	da05      	bge.n	10004bda <rpmsg_is_address_set+0x2e>
		return metal_bitmap_is_bit_set(bitmap, addr);
10004bce:	6879      	ldr	r1, [r7, #4]
10004bd0:	68f8      	ldr	r0, [r7, #12]
10004bd2:	f7ff ff23 	bl	10004a1c <metal_bitmap_is_bit_set>
10004bd6:	4603      	mov	r3, r0
10004bd8:	e000      	b.n	10004bdc <rpmsg_is_address_set+0x30>
	else
		return RPMSG_ERR_PARAM;
10004bda:	4b02      	ldr	r3, [pc, #8]	; (10004be4 <rpmsg_is_address_set+0x38>)
}
10004bdc:	4618      	mov	r0, r3
10004bde:	3710      	adds	r7, #16
10004be0:	46bd      	mov	sp, r7
10004be2:	bd80      	pop	{r7, pc}
10004be4:	fffff82d 	.word	0xfffff82d

10004be8 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
10004be8:	b580      	push	{r7, lr}
10004bea:	b084      	sub	sp, #16
10004bec:	af00      	add	r7, sp, #0
10004bee:	60f8      	str	r0, [r7, #12]
10004bf0:	60b9      	str	r1, [r7, #8]
10004bf2:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
10004bf4:	687b      	ldr	r3, [r7, #4]
10004bf6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
10004bfa:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size) {
10004bfc:	687b      	ldr	r3, [r7, #4]
10004bfe:	2b00      	cmp	r3, #0
10004c00:	db09      	blt.n	10004c16 <rpmsg_set_address+0x2e>
10004c02:	687a      	ldr	r2, [r7, #4]
10004c04:	68bb      	ldr	r3, [r7, #8]
10004c06:	429a      	cmp	r2, r3
10004c08:	da05      	bge.n	10004c16 <rpmsg_set_address+0x2e>
		metal_bitmap_set_bit(bitmap, addr);
10004c0a:	6879      	ldr	r1, [r7, #4]
10004c0c:	68f8      	ldr	r0, [r7, #12]
10004c0e:	f7ff fee9 	bl	100049e4 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
10004c12:	2300      	movs	r3, #0
10004c14:	e000      	b.n	10004c18 <rpmsg_set_address+0x30>
	} else {
		return RPMSG_ERR_PARAM;
10004c16:	4b02      	ldr	r3, [pc, #8]	; (10004c20 <rpmsg_set_address+0x38>)
	}
}
10004c18:	4618      	mov	r0, r3
10004c1a:	3710      	adds	r7, #16
10004c1c:	46bd      	mov	sp, r7
10004c1e:	bd80      	pop	{r7, pc}
10004c20:	fffff82d 	.word	0xfffff82d

10004c24 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
10004c24:	b590      	push	{r4, r7, lr}
10004c26:	b089      	sub	sp, #36	; 0x24
10004c28:	af02      	add	r7, sp, #8
10004c2a:	60f8      	str	r0, [r7, #12]
10004c2c:	60b9      	str	r1, [r7, #8]
10004c2e:	607a      	str	r2, [r7, #4]
10004c30:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
10004c32:	68fb      	ldr	r3, [r7, #12]
10004c34:	2b00      	cmp	r3, #0
10004c36:	d00a      	beq.n	10004c4e <rpmsg_send_offchannel_raw+0x2a>
10004c38:	68fb      	ldr	r3, [r7, #12]
10004c3a:	6a1b      	ldr	r3, [r3, #32]
10004c3c:	2b00      	cmp	r3, #0
10004c3e:	d006      	beq.n	10004c4e <rpmsg_send_offchannel_raw+0x2a>
10004c40:	683b      	ldr	r3, [r7, #0]
10004c42:	2b00      	cmp	r3, #0
10004c44:	d003      	beq.n	10004c4e <rpmsg_send_offchannel_raw+0x2a>
10004c46:	687b      	ldr	r3, [r7, #4]
10004c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10004c4c:	d101      	bne.n	10004c52 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
10004c4e:	4b0d      	ldr	r3, [pc, #52]	; (10004c84 <rpmsg_send_offchannel_raw+0x60>)
10004c50:	e014      	b.n	10004c7c <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
10004c52:	68fb      	ldr	r3, [r7, #12]
10004c54:	6a1b      	ldr	r3, [r3, #32]
10004c56:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
10004c58:	697b      	ldr	r3, [r7, #20]
10004c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10004c5c:	2b00      	cmp	r3, #0
10004c5e:	d00c      	beq.n	10004c7a <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
10004c60:	697b      	ldr	r3, [r7, #20]
10004c62:	6e1c      	ldr	r4, [r3, #96]	; 0x60
10004c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10004c66:	9301      	str	r3, [sp, #4]
10004c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
10004c6a:	9300      	str	r3, [sp, #0]
10004c6c:	683b      	ldr	r3, [r7, #0]
10004c6e:	687a      	ldr	r2, [r7, #4]
10004c70:	68b9      	ldr	r1, [r7, #8]
10004c72:	6978      	ldr	r0, [r7, #20]
10004c74:	47a0      	blx	r4
10004c76:	4603      	mov	r3, r0
10004c78:	e000      	b.n	10004c7c <rpmsg_send_offchannel_raw+0x58>
						     len, wait);

	return RPMSG_ERR_PARAM;
10004c7a:	4b02      	ldr	r3, [pc, #8]	; (10004c84 <rpmsg_send_offchannel_raw+0x60>)
}
10004c7c:	4618      	mov	r0, r3
10004c7e:	371c      	adds	r7, #28
10004c80:	46bd      	mov	sp, r7
10004c82:	bd90      	pop	{r4, r7, pc}
10004c84:	fffff82d 	.word	0xfffff82d

10004c88 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
10004c88:	b580      	push	{r7, lr}
10004c8a:	b090      	sub	sp, #64	; 0x40
10004c8c:	af02      	add	r7, sp, #8
10004c8e:	6078      	str	r0, [r7, #4]
10004c90:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
10004c92:	683b      	ldr	r3, [r7, #0]
10004c94:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
10004c96:	687b      	ldr	r3, [r7, #4]
10004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
10004c9c:	6879      	ldr	r1, [r7, #4]
10004c9e:	f107 030c 	add.w	r3, r7, #12
10004ca2:	2220      	movs	r2, #32
10004ca4:	4618      	mov	r0, r3
10004ca6:	f001 fbca 	bl	1000643e <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
10004caa:	687b      	ldr	r3, [r7, #4]
10004cac:	6a59      	ldr	r1, [r3, #36]	; 0x24
10004cae:	f107 030c 	add.w	r3, r7, #12
10004cb2:	2201      	movs	r2, #1
10004cb4:	9201      	str	r2, [sp, #4]
10004cb6:	2228      	movs	r2, #40	; 0x28
10004cb8:	9200      	str	r2, [sp, #0]
10004cba:	2235      	movs	r2, #53	; 0x35
10004cbc:	6878      	ldr	r0, [r7, #4]
10004cbe:	f7ff ffb1 	bl	10004c24 <rpmsg_send_offchannel_raw>
10004cc2:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
10004cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10004cc6:	2b00      	cmp	r3, #0
10004cc8:	da01      	bge.n	10004cce <rpmsg_send_ns_message+0x46>
		return ret;
10004cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10004ccc:	e000      	b.n	10004cd0 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
10004cce:	2300      	movs	r3, #0
}
10004cd0:	4618      	mov	r0, r3
10004cd2:	3738      	adds	r7, #56	; 0x38
10004cd4:	46bd      	mov	sp, r7
10004cd6:	bd80      	pop	{r7, pc}

10004cd8 <rpmsg_get_endpoint>:
}

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
10004cd8:	b580      	push	{r7, lr}
10004cda:	b088      	sub	sp, #32
10004cdc:	af00      	add	r7, sp, #0
10004cde:	60f8      	str	r0, [r7, #12]
10004ce0:	60b9      	str	r1, [r7, #8]
10004ce2:	607a      	str	r2, [r7, #4]
10004ce4:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
10004ce6:	68fb      	ldr	r3, [r7, #12]
10004ce8:	681b      	ldr	r3, [r3, #0]
10004cea:	61fb      	str	r3, [r7, #28]
10004cec:	e04b      	b.n	10004d86 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
10004cee:	2300      	movs	r3, #0
10004cf0:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
10004cf2:	69fb      	ldr	r3, [r7, #28]
10004cf4:	3b34      	subs	r3, #52	; 0x34
10004cf6:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
10004cf8:	687b      	ldr	r3, [r7, #4]
10004cfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10004cfe:	d006      	beq.n	10004d0e <rpmsg_get_endpoint+0x36>
10004d00:	697b      	ldr	r3, [r7, #20]
10004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004d04:	687a      	ldr	r2, [r7, #4]
10004d06:	429a      	cmp	r2, r3
10004d08:	d101      	bne.n	10004d0e <rpmsg_get_endpoint+0x36>
			return ept;
10004d0a:	697b      	ldr	r3, [r7, #20]
10004d0c:	e040      	b.n	10004d90 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
10004d0e:	697b      	ldr	r3, [r7, #20]
10004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004d12:	687a      	ldr	r2, [r7, #4]
10004d14:	429a      	cmp	r2, r3
10004d16:	d106      	bne.n	10004d26 <rpmsg_get_endpoint+0x4e>
10004d18:	697b      	ldr	r3, [r7, #20]
10004d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004d1c:	683a      	ldr	r2, [r7, #0]
10004d1e:	429a      	cmp	r2, r3
10004d20:	d101      	bne.n	10004d26 <rpmsg_get_endpoint+0x4e>
			return ept;
10004d22:	697b      	ldr	r3, [r7, #20]
10004d24:	e034      	b.n	10004d90 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
10004d26:	68bb      	ldr	r3, [r7, #8]
10004d28:	2b00      	cmp	r3, #0
10004d2a:	d00c      	beq.n	10004d46 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
10004d2c:	697b      	ldr	r3, [r7, #20]
10004d2e:	2220      	movs	r2, #32
10004d30:	68b9      	ldr	r1, [r7, #8]
10004d32:	4618      	mov	r0, r3
10004d34:	f001 fb71 	bl	1000641a <strncmp>
10004d38:	4603      	mov	r3, r0
10004d3a:	2b00      	cmp	r3, #0
10004d3c:	bf0c      	ite	eq
10004d3e:	2301      	moveq	r3, #1
10004d40:	2300      	movne	r3, #0
10004d42:	b2db      	uxtb	r3, r3
10004d44:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
10004d46:	68bb      	ldr	r3, [r7, #8]
10004d48:	2b00      	cmp	r3, #0
10004d4a:	d018      	beq.n	10004d7e <rpmsg_get_endpoint+0xa6>
10004d4c:	69bb      	ldr	r3, [r7, #24]
10004d4e:	2b00      	cmp	r3, #0
10004d50:	d015      	beq.n	10004d7e <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address */
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
10004d52:	683b      	ldr	r3, [r7, #0]
10004d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10004d58:	d006      	beq.n	10004d68 <rpmsg_get_endpoint+0x90>
10004d5a:	697b      	ldr	r3, [r7, #20]
10004d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004d5e:	683a      	ldr	r2, [r7, #0]
10004d60:	429a      	cmp	r2, r3
10004d62:	d101      	bne.n	10004d68 <rpmsg_get_endpoint+0x90>
			return ept;
10004d64:	697b      	ldr	r3, [r7, #20]
10004d66:	e013      	b.n	10004d90 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept */
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
10004d68:	687b      	ldr	r3, [r7, #4]
10004d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10004d6e:	d107      	bne.n	10004d80 <rpmsg_get_endpoint+0xa8>
10004d70:	697b      	ldr	r3, [r7, #20]
10004d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10004d78:	d102      	bne.n	10004d80 <rpmsg_get_endpoint+0xa8>
			return ept;
10004d7a:	697b      	ldr	r3, [r7, #20]
10004d7c:	e008      	b.n	10004d90 <rpmsg_get_endpoint+0xb8>
			continue;
10004d7e:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
10004d80:	69fb      	ldr	r3, [r7, #28]
10004d82:	681b      	ldr	r3, [r3, #0]
10004d84:	61fb      	str	r3, [r7, #28]
10004d86:	68fb      	ldr	r3, [r7, #12]
10004d88:	69fa      	ldr	r2, [r7, #28]
10004d8a:	429a      	cmp	r2, r3
10004d8c:	d1af      	bne.n	10004cee <rpmsg_get_endpoint+0x16>
	}
	return NULL;
10004d8e:	2300      	movs	r3, #0
}
10004d90:	4618      	mov	r0, r3
10004d92:	3720      	adds	r7, #32
10004d94:	46bd      	mov	sp, r7
10004d96:	bd80      	pop	{r7, pc}

10004d98 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
10004d98:	b580      	push	{r7, lr}
10004d9a:	b084      	sub	sp, #16
10004d9c:	af00      	add	r7, sp, #0
10004d9e:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev = ept->rdev;
10004da0:	687b      	ldr	r3, [r7, #4]
10004da2:	6a1b      	ldr	r3, [r3, #32]
10004da4:	60fb      	str	r3, [r7, #12]

	metal_mutex_acquire(&rdev->lock);
10004da6:	68fb      	ldr	r3, [r7, #12]
10004da8:	3358      	adds	r3, #88	; 0x58
10004daa:	4618      	mov	r0, r3
10004dac:	f7ff fdc3 	bl	10004936 <metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
10004db0:	687b      	ldr	r3, [r7, #4]
10004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10004db8:	d008      	beq.n	10004dcc <rpmsg_unregister_endpoint+0x34>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
10004dba:	68fb      	ldr	r3, [r7, #12]
10004dbc:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
10004dc0:	687b      	ldr	r3, [r7, #4]
10004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
10004dc4:	461a      	mov	r2, r3
10004dc6:	2180      	movs	r1, #128	; 0x80
10004dc8:	f7ff fed7 	bl	10004b7a <rpmsg_release_address>
	metal_list_del(&ept->node);
10004dcc:	687b      	ldr	r3, [r7, #4]
10004dce:	3334      	adds	r3, #52	; 0x34
10004dd0:	4618      	mov	r0, r3
10004dd2:	f7ff fded 	bl	100049b0 <metal_list_del>
	ept->rdev = NULL;
10004dd6:	687b      	ldr	r3, [r7, #4]
10004dd8:	2200      	movs	r2, #0
10004dda:	621a      	str	r2, [r3, #32]
	metal_mutex_release(&rdev->lock);
10004ddc:	68fb      	ldr	r3, [r7, #12]
10004dde:	3358      	adds	r3, #88	; 0x58
10004de0:	4618      	mov	r0, r3
10004de2:	f7ff fdb3 	bl	1000494c <metal_mutex_release>
}
10004de6:	bf00      	nop
10004de8:	3710      	adds	r7, #16
10004dea:	46bd      	mov	sp, r7
10004dec:	bd80      	pop	{r7, pc}

10004dee <rpmsg_register_endpoint>:

void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept)
{
10004dee:	b580      	push	{r7, lr}
10004df0:	b082      	sub	sp, #8
10004df2:	af00      	add	r7, sp, #0
10004df4:	6078      	str	r0, [r7, #4]
10004df6:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
10004df8:	683b      	ldr	r3, [r7, #0]
10004dfa:	687a      	ldr	r2, [r7, #4]
10004dfc:	621a      	str	r2, [r3, #32]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
10004dfe:	687a      	ldr	r2, [r7, #4]
10004e00:	683b      	ldr	r3, [r7, #0]
10004e02:	3334      	adds	r3, #52	; 0x34
10004e04:	4619      	mov	r1, r3
10004e06:	4610      	mov	r0, r2
10004e08:	f7ff fdc5 	bl	10004996 <metal_list_add_tail>
}
10004e0c:	bf00      	nop
10004e0e:	3708      	adds	r7, #8
10004e10:	46bd      	mov	sp, r7
10004e12:	bd80      	pop	{r7, pc}

10004e14 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
10004e14:	b580      	push	{r7, lr}
10004e16:	b088      	sub	sp, #32
10004e18:	af02      	add	r7, sp, #8
10004e1a:	60f8      	str	r0, [r7, #12]
10004e1c:	60b9      	str	r1, [r7, #8]
10004e1e:	607a      	str	r2, [r7, #4]
10004e20:	603b      	str	r3, [r7, #0]
	int status = RPMSG_SUCCESS;
10004e22:	2300      	movs	r3, #0
10004e24:	617b      	str	r3, [r7, #20]
	uint32_t addr = src;
10004e26:	683b      	ldr	r3, [r7, #0]
10004e28:	613b      	str	r3, [r7, #16]

	if (!ept)
10004e2a:	68fb      	ldr	r3, [r7, #12]
10004e2c:	2b00      	cmp	r3, #0
10004e2e:	d101      	bne.n	10004e34 <rpmsg_create_ept+0x20>
		return RPMSG_ERR_PARAM;
10004e30:	4b37      	ldr	r3, [pc, #220]	; (10004f10 <rpmsg_create_ept+0xfc>)
10004e32:	e068      	b.n	10004f06 <rpmsg_create_ept+0xf2>

	metal_mutex_acquire(&rdev->lock);
10004e34:	68bb      	ldr	r3, [r7, #8]
10004e36:	3358      	adds	r3, #88	; 0x58
10004e38:	4618      	mov	r0, r3
10004e3a:	f7ff fd7c 	bl	10004936 <metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
10004e3e:	683b      	ldr	r3, [r7, #0]
10004e40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10004e44:	d10d      	bne.n	10004e62 <rpmsg_create_ept+0x4e>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
10004e46:	68bb      	ldr	r3, [r7, #8]
10004e48:	3348      	adds	r3, #72	; 0x48
10004e4a:	2180      	movs	r1, #128	; 0x80
10004e4c:	4618      	mov	r0, r3
10004e4e:	f7ff fe73 	bl	10004b38 <rpmsg_get_address>
10004e52:	6138      	str	r0, [r7, #16]
		if (addr == RPMSG_ADDR_ANY) {
10004e54:	693b      	ldr	r3, [r7, #16]
10004e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10004e5a:	d11f      	bne.n	10004e9c <rpmsg_create_ept+0x88>
			status = RPMSG_ERR_ADDR;
10004e5c:	4b2d      	ldr	r3, [pc, #180]	; (10004f14 <rpmsg_create_ept+0x100>)
10004e5e:	617b      	str	r3, [r7, #20]
			goto ret_status;
10004e60:	e04b      	b.n	10004efa <rpmsg_create_ept+0xe6>
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
10004e62:	683b      	ldr	r3, [r7, #0]
10004e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
10004e68:	d318      	bcc.n	10004e9c <rpmsg_create_ept+0x88>
		status = rpmsg_is_address_set(rdev->bitmap,
10004e6a:	68bb      	ldr	r3, [r7, #8]
10004e6c:	3348      	adds	r3, #72	; 0x48
10004e6e:	683a      	ldr	r2, [r7, #0]
10004e70:	2180      	movs	r1, #128	; 0x80
10004e72:	4618      	mov	r0, r3
10004e74:	f7ff fe9a 	bl	10004bac <rpmsg_is_address_set>
10004e78:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
10004e7a:	697b      	ldr	r3, [r7, #20]
10004e7c:	2b00      	cmp	r3, #0
10004e7e:	d107      	bne.n	10004e90 <rpmsg_create_ept+0x7c>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
10004e80:	68bb      	ldr	r3, [r7, #8]
10004e82:	3348      	adds	r3, #72	; 0x48
10004e84:	683a      	ldr	r2, [r7, #0]
10004e86:	2180      	movs	r1, #128	; 0x80
10004e88:	4618      	mov	r0, r3
10004e8a:	f7ff fead 	bl	10004be8 <rpmsg_set_address>
10004e8e:	e005      	b.n	10004e9c <rpmsg_create_ept+0x88>
					  src);
		} else if (status > 0) {
10004e90:	697b      	ldr	r3, [r7, #20]
10004e92:	2b00      	cmp	r3, #0
10004e94:	dd30      	ble.n	10004ef8 <rpmsg_create_ept+0xe4>
			status = RPMSG_ERR_ADDR;
10004e96:	4b1f      	ldr	r3, [pc, #124]	; (10004f14 <rpmsg_create_ept+0x100>)
10004e98:	617b      	str	r3, [r7, #20]
			goto ret_status;
10004e9a:	e02e      	b.n	10004efa <rpmsg_create_ept+0xe6>
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
10004e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
10004e9e:	9301      	str	r3, [sp, #4]
10004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10004ea2:	9300      	str	r3, [sp, #0]
10004ea4:	6a3b      	ldr	r3, [r7, #32]
10004ea6:	693a      	ldr	r2, [r7, #16]
10004ea8:	6879      	ldr	r1, [r7, #4]
10004eaa:	68f8      	ldr	r0, [r7, #12]
10004eac:	f7ff fe20 	bl	10004af0 <rpmsg_initialize_ept>
	rpmsg_register_endpoint(rdev, ept);
10004eb0:	68f9      	ldr	r1, [r7, #12]
10004eb2:	68b8      	ldr	r0, [r7, #8]
10004eb4:	f7ff ff9b 	bl	10004dee <rpmsg_register_endpoint>
	metal_mutex_release(&rdev->lock);
10004eb8:	68bb      	ldr	r3, [r7, #8]
10004eba:	3358      	adds	r3, #88	; 0x58
10004ebc:	4618      	mov	r0, r3
10004ebe:	f7ff fd45 	bl	1000494c <metal_mutex_release>

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
10004ec2:	68fb      	ldr	r3, [r7, #12]
10004ec4:	781b      	ldrb	r3, [r3, #0]
10004ec6:	2b00      	cmp	r3, #0
10004ec8:	d00e      	beq.n	10004ee8 <rpmsg_create_ept+0xd4>
10004eca:	68bb      	ldr	r3, [r7, #8]
10004ecc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
10004ed0:	2b00      	cmp	r3, #0
10004ed2:	d009      	beq.n	10004ee8 <rpmsg_create_ept+0xd4>
	    ept->dest_addr == RPMSG_ADDR_ANY)
10004ed4:	68fb      	ldr	r3, [r7, #12]
10004ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (ept->name[0] && rdev->support_ns &&
10004ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10004edc:	d104      	bne.n	10004ee8 <rpmsg_create_ept+0xd4>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
10004ede:	2100      	movs	r1, #0
10004ee0:	68f8      	ldr	r0, [r7, #12]
10004ee2:	f7ff fed1 	bl	10004c88 <rpmsg_send_ns_message>
10004ee6:	6178      	str	r0, [r7, #20]

	if (status)
10004ee8:	697b      	ldr	r3, [r7, #20]
10004eea:	2b00      	cmp	r3, #0
10004eec:	d002      	beq.n	10004ef4 <rpmsg_create_ept+0xe0>
		rpmsg_unregister_endpoint(ept);
10004eee:	68f8      	ldr	r0, [r7, #12]
10004ef0:	f7ff ff52 	bl	10004d98 <rpmsg_unregister_endpoint>
	return status;
10004ef4:	697b      	ldr	r3, [r7, #20]
10004ef6:	e006      	b.n	10004f06 <rpmsg_create_ept+0xf2>
			goto ret_status;
10004ef8:	bf00      	nop

ret_status:
	metal_mutex_release(&rdev->lock);
10004efa:	68bb      	ldr	r3, [r7, #8]
10004efc:	3358      	adds	r3, #88	; 0x58
10004efe:	4618      	mov	r0, r3
10004f00:	f7ff fd24 	bl	1000494c <metal_mutex_release>
	return status;
10004f04:	697b      	ldr	r3, [r7, #20]
}
10004f06:	4618      	mov	r0, r3
10004f08:	3718      	adds	r7, #24
10004f0a:	46bd      	mov	sp, r7
10004f0c:	bd80      	pop	{r7, pc}
10004f0e:	bf00      	nop
10004f10:	fffff82d 	.word	0xfffff82d
10004f14:	fffff829 	.word	0xfffff829

10004f18 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
10004f18:	b480      	push	{r7}
10004f1a:	b083      	sub	sp, #12
10004f1c:	af00      	add	r7, sp, #0
10004f1e:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
10004f20:	2300      	movs	r3, #0
}
10004f22:	4618      	mov	r0, r3
10004f24:	370c      	adds	r7, #12
10004f26:	46bd      	mov	sp, r7
10004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
10004f2c:	4770      	bx	lr

10004f2e <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
10004f2e:	b580      	push	{r7, lr}
10004f30:	b082      	sub	sp, #8
10004f32:	af00      	add	r7, sp, #0
10004f34:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
10004f36:	6878      	ldr	r0, [r7, #4]
10004f38:	f7ff ffee 	bl	10004f18 <__metal_sleep_usec>
10004f3c:	4603      	mov	r3, r0
}
10004f3e:	4618      	mov	r0, r3
10004f40:	3708      	adds	r7, #8
10004f42:	46bd      	mov	sp, r7
10004f44:	bd80      	pop	{r7, pc}

10004f46 <metal_list_init>:
{
10004f46:	b480      	push	{r7}
10004f48:	b083      	sub	sp, #12
10004f4a:	af00      	add	r7, sp, #0
10004f4c:	6078      	str	r0, [r7, #4]
	list->prev = list;
10004f4e:	687b      	ldr	r3, [r7, #4]
10004f50:	687a      	ldr	r2, [r7, #4]
10004f52:	605a      	str	r2, [r3, #4]
	list->next = list;
10004f54:	687b      	ldr	r3, [r7, #4]
10004f56:	687a      	ldr	r2, [r7, #4]
10004f58:	601a      	str	r2, [r3, #0]
}
10004f5a:	bf00      	nop
10004f5c:	370c      	adds	r7, #12
10004f5e:	46bd      	mov	sp, r7
10004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
10004f64:	4770      	bx	lr

10004f66 <metal_io_virt_to_offset>:
{
10004f66:	b480      	push	{r7}
10004f68:	b085      	sub	sp, #20
10004f6a:	af00      	add	r7, sp, #0
10004f6c:	6078      	str	r0, [r7, #4]
10004f6e:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
10004f70:	683b      	ldr	r3, [r7, #0]
10004f72:	687a      	ldr	r2, [r7, #4]
10004f74:	6812      	ldr	r2, [r2, #0]
10004f76:	1a9b      	subs	r3, r3, r2
10004f78:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
10004f7a:	687b      	ldr	r3, [r7, #4]
10004f7c:	689b      	ldr	r3, [r3, #8]
10004f7e:	68fa      	ldr	r2, [r7, #12]
10004f80:	429a      	cmp	r2, r3
10004f82:	d201      	bcs.n	10004f88 <metal_io_virt_to_offset+0x22>
10004f84:	68fb      	ldr	r3, [r7, #12]
10004f86:	e001      	b.n	10004f8c <metal_io_virt_to_offset+0x26>
10004f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
10004f8c:	4618      	mov	r0, r3
10004f8e:	3714      	adds	r7, #20
10004f90:	46bd      	mov	sp, r7
10004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
10004f96:	4770      	bx	lr

10004f98 <__metal_mutex_init>:
{
10004f98:	b480      	push	{r7}
10004f9a:	b085      	sub	sp, #20
10004f9c:	af00      	add	r7, sp, #0
10004f9e:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
10004fa0:	687b      	ldr	r3, [r7, #4]
10004fa2:	60fb      	str	r3, [r7, #12]
10004fa4:	2300      	movs	r3, #0
10004fa6:	60bb      	str	r3, [r7, #8]
10004fa8:	68bb      	ldr	r3, [r7, #8]
10004faa:	461a      	mov	r2, r3
10004fac:	68fb      	ldr	r3, [r7, #12]
10004fae:	f3bf 8f5b 	dmb	ish
10004fb2:	601a      	str	r2, [r3, #0]
10004fb4:	f3bf 8f5b 	dmb	ish
}
10004fb8:	bf00      	nop
10004fba:	3714      	adds	r7, #20
10004fbc:	46bd      	mov	sp, r7
10004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
10004fc2:	4770      	bx	lr

10004fc4 <__metal_mutex_acquire>:
{
10004fc4:	b490      	push	{r4, r7}
10004fc6:	b086      	sub	sp, #24
10004fc8:	af00      	add	r7, sp, #0
10004fca:	6078      	str	r0, [r7, #4]
	int unlocked = METAL_MUTEX_UNLOCKED;
10004fcc:	2300      	movs	r3, #0
10004fce:	613b      	str	r3, [r7, #16]
	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
10004fd0:	bf00      	nop
10004fd2:	687b      	ldr	r3, [r7, #4]
10004fd4:	617b      	str	r3, [r7, #20]
10004fd6:	2301      	movs	r3, #1
10004fd8:	60fb      	str	r3, [r7, #12]
10004fda:	68fb      	ldr	r3, [r7, #12]
10004fdc:	461c      	mov	r4, r3
10004fde:	697a      	ldr	r2, [r7, #20]
10004fe0:	f107 0310 	add.w	r3, r7, #16
10004fe4:	6818      	ldr	r0, [r3, #0]
10004fe6:	f3bf 8f5b 	dmb	ish
10004fea:	e852 1f00 	ldrex	r1, [r2]
10004fee:	4281      	cmp	r1, r0
10004ff0:	d103      	bne.n	10004ffa <__metal_mutex_acquire+0x36>
10004ff2:	e842 4c00 	strex	ip, r4, [r2]
10004ff6:	f1bc 0f00 	cmp.w	ip, #0
10004ffa:	f3bf 8f5b 	dmb	ish
10004ffe:	bf0c      	ite	eq
10005000:	2201      	moveq	r2, #1
10005002:	2200      	movne	r2, #0
10005004:	2a00      	cmp	r2, #0
10005006:	d100      	bne.n	1000500a <__metal_mutex_acquire+0x46>
10005008:	6019      	str	r1, [r3, #0]
1000500a:	4613      	mov	r3, r2
1000500c:	f083 0301 	eor.w	r3, r3, #1
10005010:	b2db      	uxtb	r3, r3
10005012:	2b00      	cmp	r3, #0
10005014:	d1dd      	bne.n	10004fd2 <__metal_mutex_acquire+0xe>
}
10005016:	bf00      	nop
10005018:	bf00      	nop
1000501a:	3718      	adds	r7, #24
1000501c:	46bd      	mov	sp, r7
1000501e:	bc90      	pop	{r4, r7}
10005020:	4770      	bx	lr

10005022 <__metal_mutex_release>:
{
10005022:	b480      	push	{r7}
10005024:	b085      	sub	sp, #20
10005026:	af00      	add	r7, sp, #0
10005028:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
1000502a:	687b      	ldr	r3, [r7, #4]
1000502c:	60fb      	str	r3, [r7, #12]
1000502e:	2300      	movs	r3, #0
10005030:	60bb      	str	r3, [r7, #8]
10005032:	68bb      	ldr	r3, [r7, #8]
10005034:	461a      	mov	r2, r3
10005036:	68fb      	ldr	r3, [r7, #12]
10005038:	f3bf 8f5b 	dmb	ish
1000503c:	601a      	str	r2, [r3, #0]
1000503e:	f3bf 8f5b 	dmb	ish
}
10005042:	bf00      	nop
10005044:	3714      	adds	r7, #20
10005046:	46bd      	mov	sp, r7
10005048:	f85d 7b04 	ldr.w	r7, [sp], #4
1000504c:	4770      	bx	lr

1000504e <metal_mutex_init>:
{
1000504e:	b580      	push	{r7, lr}
10005050:	b082      	sub	sp, #8
10005052:	af00      	add	r7, sp, #0
10005054:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
10005056:	6878      	ldr	r0, [r7, #4]
10005058:	f7ff ff9e 	bl	10004f98 <__metal_mutex_init>
}
1000505c:	bf00      	nop
1000505e:	3708      	adds	r7, #8
10005060:	46bd      	mov	sp, r7
10005062:	bd80      	pop	{r7, pc}

10005064 <metal_mutex_acquire>:
{
10005064:	b580      	push	{r7, lr}
10005066:	b082      	sub	sp, #8
10005068:	af00      	add	r7, sp, #0
1000506a:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
1000506c:	6878      	ldr	r0, [r7, #4]
1000506e:	f7ff ffa9 	bl	10004fc4 <__metal_mutex_acquire>
}
10005072:	bf00      	nop
10005074:	3708      	adds	r7, #8
10005076:	46bd      	mov	sp, r7
10005078:	bd80      	pop	{r7, pc}

1000507a <metal_mutex_release>:
{
1000507a:	b580      	push	{r7, lr}
1000507c:	b082      	sub	sp, #8
1000507e:	af00      	add	r7, sp, #0
10005080:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
10005082:	6878      	ldr	r0, [r7, #4]
10005084:	f7ff ffcd 	bl	10005022 <__metal_mutex_release>
}
10005088:	bf00      	nop
1000508a:	3708      	adds	r7, #8
1000508c:	46bd      	mov	sp, r7
1000508e:	bd80      	pop	{r7, pc}

10005090 <rpmsg_virtio_get_role>:
#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
10005090:	b480      	push	{r7}
10005092:	b083      	sub	sp, #12
10005094:	af00      	add	r7, sp, #0
10005096:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
10005098:	687b      	ldr	r3, [r7, #4]
1000509a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000509c:	699b      	ldr	r3, [r3, #24]
}
1000509e:	4618      	mov	r0, r3
100050a0:	370c      	adds	r7, #12
100050a2:	46bd      	mov	sp, r7
100050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
100050a8:	4770      	bx	lr

100050aa <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
100050aa:	b580      	push	{r7, lr}
100050ac:	b082      	sub	sp, #8
100050ae:	af00      	add	r7, sp, #0
100050b0:	6078      	str	r0, [r7, #4]
100050b2:	460b      	mov	r3, r1
100050b4:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
100050b6:	687b      	ldr	r3, [r7, #4]
100050b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
100050ba:	6a1b      	ldr	r3, [r3, #32]
100050bc:	685b      	ldr	r3, [r3, #4]
100050be:	687a      	ldr	r2, [r7, #4]
100050c0:	6f92      	ldr	r2, [r2, #120]	; 0x78
100050c2:	78f9      	ldrb	r1, [r7, #3]
100050c4:	4610      	mov	r0, r2
100050c6:	4798      	blx	r3
}
100050c8:	bf00      	nop
100050ca:	3708      	adds	r7, #8
100050cc:	46bd      	mov	sp, r7
100050ce:	bd80      	pop	{r7, pc}

100050d0 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
100050d0:	b580      	push	{r7, lr}
100050d2:	b082      	sub	sp, #8
100050d4:	af00      	add	r7, sp, #0
100050d6:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
100050d8:	687b      	ldr	r3, [r7, #4]
100050da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
100050dc:	6a1b      	ldr	r3, [r3, #32]
100050de:	681b      	ldr	r3, [r3, #0]
100050e0:	687a      	ldr	r2, [r7, #4]
100050e2:	6f92      	ldr	r2, [r2, #120]	; 0x78
100050e4:	4610      	mov	r0, r2
100050e6:	4798      	blx	r3
100050e8:	4603      	mov	r3, r0
}
100050ea:	4618      	mov	r0, r3
100050ec:	3708      	adds	r7, #8
100050ee:	46bd      	mov	sp, r7
100050f0:	bd80      	pop	{r7, pc}

100050f2 <rpmsg_virtio_get_features>:

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
100050f2:	b580      	push	{r7, lr}
100050f4:	b082      	sub	sp, #8
100050f6:	af00      	add	r7, sp, #0
100050f8:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
100050fa:	687b      	ldr	r3, [r7, #4]
100050fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
100050fe:	6a1b      	ldr	r3, [r3, #32]
10005100:	689b      	ldr	r3, [r3, #8]
10005102:	687a      	ldr	r2, [r7, #4]
10005104:	6f92      	ldr	r2, [r2, #120]	; 0x78
10005106:	4610      	mov	r0, r2
10005108:	4798      	blx	r3
1000510a:	4603      	mov	r3, r0
}
1000510c:	4618      	mov	r0, r3
1000510e:	3708      	adds	r7, #8
10005110:	46bd      	mov	sp, r7
10005112:	bd80      	pop	{r7, pc}

10005114 <rpmsg_virtio_create_virtqueues>:
static inline int
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
10005114:	b580      	push	{r7, lr}
10005116:	b086      	sub	sp, #24
10005118:	af02      	add	r7, sp, #8
1000511a:	60f8      	str	r0, [r7, #12]
1000511c:	60b9      	str	r1, [r7, #8]
1000511e:	607a      	str	r2, [r7, #4]
10005120:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
10005122:	68fb      	ldr	r3, [r7, #12]
10005124:	6f98      	ldr	r0, [r3, #120]	; 0x78
10005126:	68b9      	ldr	r1, [r7, #8]
10005128:	69bb      	ldr	r3, [r7, #24]
1000512a:	9300      	str	r3, [sp, #0]
1000512c:	683b      	ldr	r3, [r7, #0]
1000512e:	687a      	ldr	r2, [r7, #4]
10005130:	f000 fc08 	bl	10005944 <virtio_create_virtqueues>
10005134:	4603      	mov	r3, r0
					callbacks);
}
10005136:	4618      	mov	r0, r3
10005138:	3710      	adds	r7, #16
1000513a:	46bd      	mov	sp, r7
1000513c:	bd80      	pop	{r7, pc}
	...

10005140 <rpmsg_initialize_ept>:
{
10005140:	b580      	push	{r7, lr}
10005142:	b084      	sub	sp, #16
10005144:	af00      	add	r7, sp, #0
10005146:	60f8      	str	r0, [r7, #12]
10005148:	60b9      	str	r1, [r7, #8]
1000514a:	607a      	str	r2, [r7, #4]
1000514c:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
1000514e:	68f8      	ldr	r0, [r7, #12]
10005150:	68bb      	ldr	r3, [r7, #8]
10005152:	2b00      	cmp	r3, #0
10005154:	d001      	beq.n	1000515a <rpmsg_initialize_ept+0x1a>
10005156:	68bb      	ldr	r3, [r7, #8]
10005158:	e000      	b.n	1000515c <rpmsg_initialize_ept+0x1c>
1000515a:	4b0a      	ldr	r3, [pc, #40]	; (10005184 <rpmsg_initialize_ept+0x44>)
1000515c:	2220      	movs	r2, #32
1000515e:	4619      	mov	r1, r3
10005160:	f001 f96d 	bl	1000643e <strncpy>
	ept->addr = src;
10005164:	68fb      	ldr	r3, [r7, #12]
10005166:	687a      	ldr	r2, [r7, #4]
10005168:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
1000516a:	68fb      	ldr	r3, [r7, #12]
1000516c:	683a      	ldr	r2, [r7, #0]
1000516e:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
10005170:	68fb      	ldr	r3, [r7, #12]
10005172:	69ba      	ldr	r2, [r7, #24]
10005174:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
10005176:	68fb      	ldr	r3, [r7, #12]
10005178:	69fa      	ldr	r2, [r7, #28]
1000517a:	631a      	str	r2, [r3, #48]	; 0x30
}
1000517c:	bf00      	nop
1000517e:	3710      	adds	r7, #16
10005180:	46bd      	mov	sp, r7
10005182:	bd80      	pop	{r7, pc}
10005184:	10007498 	.word	0x10007498

10005188 <rpmsg_get_ept_from_addr>:
void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
10005188:	b580      	push	{r7, lr}
1000518a:	b082      	sub	sp, #8
1000518c:	af00      	add	r7, sp, #0
1000518e:	6078      	str	r0, [r7, #4]
10005190:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
10005192:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10005196:	683a      	ldr	r2, [r7, #0]
10005198:	2100      	movs	r1, #0
1000519a:	6878      	ldr	r0, [r7, #4]
1000519c:	f7ff fd9c 	bl	10004cd8 <rpmsg_get_endpoint>
100051a0:	4603      	mov	r3, r0
}
100051a2:	4618      	mov	r0, r3
100051a4:	3708      	adds	r7, #8
100051a6:	46bd      	mov	sp, r7
100051a8:	bd80      	pop	{r7, pc}

100051aa <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
100051aa:	b480      	push	{r7}
100051ac:	b085      	sub	sp, #20
100051ae:	af00      	add	r7, sp, #0
100051b0:	60f8      	str	r0, [r7, #12]
100051b2:	60b9      	str	r1, [r7, #8]
100051b4:	607a      	str	r2, [r7, #4]
	if (!shpool)
100051b6:	68fb      	ldr	r3, [r7, #12]
100051b8:	2b00      	cmp	r3, #0
100051ba:	d009      	beq.n	100051d0 <rpmsg_virtio_init_shm_pool+0x26>
		return;
	shpool->base = shb;
100051bc:	68fb      	ldr	r3, [r7, #12]
100051be:	68ba      	ldr	r2, [r7, #8]
100051c0:	601a      	str	r2, [r3, #0]
	shpool->size = size;
100051c2:	68fb      	ldr	r3, [r7, #12]
100051c4:	687a      	ldr	r2, [r7, #4]
100051c6:	609a      	str	r2, [r3, #8]
	shpool->avail = size;
100051c8:	68fb      	ldr	r3, [r7, #12]
100051ca:	687a      	ldr	r2, [r7, #4]
100051cc:	605a      	str	r2, [r3, #4]
100051ce:	e000      	b.n	100051d2 <rpmsg_virtio_init_shm_pool+0x28>
		return;
100051d0:	bf00      	nop
}
100051d2:	3714      	adds	r7, #20
100051d4:	46bd      	mov	sp, r7
100051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
100051da:	4770      	bx	lr

100051dc <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
100051dc:	b580      	push	{r7, lr}
100051de:	b086      	sub	sp, #24
100051e0:	af00      	add	r7, sp, #0
100051e2:	60f8      	str	r0, [r7, #12]
100051e4:	60b9      	str	r1, [r7, #8]
100051e6:	607a      	str	r2, [r7, #4]
100051e8:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
100051ea:	68f8      	ldr	r0, [r7, #12]
100051ec:	f7ff ff50 	bl	10005090 <rpmsg_virtio_get_role>
100051f0:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
100051f2:	697b      	ldr	r3, [r7, #20]
100051f4:	2b01      	cmp	r3, #1
100051f6:	d106      	bne.n	10005206 <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
100051f8:	68fb      	ldr	r3, [r7, #12]
100051fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
100051fc:	8879      	ldrh	r1, [r7, #2]
100051fe:	687a      	ldr	r2, [r7, #4]
10005200:	4618      	mov	r0, r3
10005202:	f000 fd71 	bl	10005ce8 <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
10005206:	bf00      	nop
10005208:	3718      	adds	r7, #24
1000520a:	46bd      	mov	sp, r7
1000520c:	bd80      	pop	{r7, pc}

1000520e <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
1000520e:	b580      	push	{r7, lr}
10005210:	b086      	sub	sp, #24
10005212:	af00      	add	r7, sp, #0
10005214:	60f8      	str	r0, [r7, #12]
10005216:	60b9      	str	r1, [r7, #8]
10005218:	607a      	str	r2, [r7, #4]
1000521a:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000521c:	68f8      	ldr	r0, [r7, #12]
1000521e:	f7ff ff37 	bl	10005090 <rpmsg_virtio_get_role>
10005222:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10005224:	697b      	ldr	r3, [r7, #20]
10005226:	2b01      	cmp	r3, #1
10005228:	d109      	bne.n	1000523e <rpmsg_virtio_enqueue_buffer+0x30>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
1000522a:	68fb      	ldr	r3, [r7, #12]
1000522c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10005230:	8879      	ldrh	r1, [r7, #2]
10005232:	687a      	ldr	r2, [r7, #4]
10005234:	4618      	mov	r0, r3
10005236:	f000 fd57 	bl	10005ce8 <virtqueue_add_consumed_buffer>
1000523a:	4603      	mov	r3, r0
1000523c:	e000      	b.n	10005240 <rpmsg_virtio_enqueue_buffer+0x32>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
1000523e:	2300      	movs	r3, #0
}
10005240:	4618      	mov	r0, r3
10005242:	3718      	adds	r7, #24
10005244:	46bd      	mov	sp, r7
10005246:	bd80      	pop	{r7, pc}

10005248 <rpmsg_virtio_get_tx_buffer>:
 *
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
10005248:	b580      	push	{r7, lr}
1000524a:	b086      	sub	sp, #24
1000524c:	af00      	add	r7, sp, #0
1000524e:	60f8      	str	r0, [r7, #12]
10005250:	60b9      	str	r1, [r7, #8]
10005252:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
10005254:	68f8      	ldr	r0, [r7, #12]
10005256:	f7ff ff1b 	bl	10005090 <rpmsg_virtio_get_role>
1000525a:	6138      	str	r0, [r7, #16]
	void *data = NULL;
1000525c:	2300      	movs	r3, #0
1000525e:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10005260:	693b      	ldr	r3, [r7, #16]
10005262:	2b01      	cmp	r3, #1
10005264:	d108      	bne.n	10005278 <rpmsg_virtio_get_tx_buffer+0x30>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
10005266:	68fb      	ldr	r3, [r7, #12]
10005268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000526c:	68ba      	ldr	r2, [r7, #8]
1000526e:	6879      	ldr	r1, [r7, #4]
10005270:	4618      	mov	r0, r3
10005272:	f000 fcf1 	bl	10005c58 <virtqueue_get_available_buffer>
10005276:	6178      	str	r0, [r7, #20]
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
10005278:	697b      	ldr	r3, [r7, #20]
}
1000527a:	4618      	mov	r0, r3
1000527c:	3718      	adds	r7, #24
1000527e:	46bd      	mov	sp, r7
10005280:	bd80      	pop	{r7, pc}

10005282 <rpmsg_virtio_get_rx_buffer>:
 * @return - pointer to received buffer
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
10005282:	b580      	push	{r7, lr}
10005284:	b086      	sub	sp, #24
10005286:	af00      	add	r7, sp, #0
10005288:	60f8      	str	r0, [r7, #12]
1000528a:	60b9      	str	r1, [r7, #8]
1000528c:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000528e:	68f8      	ldr	r0, [r7, #12]
10005290:	f7ff fefe 	bl	10005090 <rpmsg_virtio_get_role>
10005294:	6138      	str	r0, [r7, #16]
	void *data = NULL;
10005296:	2300      	movs	r3, #0
10005298:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000529a:	693b      	ldr	r3, [r7, #16]
1000529c:	2b01      	cmp	r3, #1
1000529e:	d107      	bne.n	100052b0 <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
100052a0:	68fb      	ldr	r3, [r7, #12]
100052a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
100052a4:	68ba      	ldr	r2, [r7, #8]
100052a6:	6879      	ldr	r1, [r7, #4]
100052a8:	4618      	mov	r0, r3
100052aa:	f000 fcd5 	bl	10005c58 <virtqueue_get_available_buffer>
100052ae:	6178      	str	r0, [r7, #20]
#ifdef VIRTIO_CACHED_BUFFERS
	/* Invalidate the buffer before returning it */
	metal_cache_invalidate(data, *len);
#endif /* VIRTIO_CACHED_BUFFERS */

	return data;
100052b0:	697b      	ldr	r3, [r7, #20]
}
100052b2:	4618      	mov	r0, r3
100052b4:	3718      	adds	r7, #24
100052b6:	46bd      	mov	sp, r7
100052b8:	bd80      	pop	{r7, pc}

100052ba <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
100052ba:	b580      	push	{r7, lr}
100052bc:	b084      	sub	sp, #16
100052be:	af00      	add	r7, sp, #0
100052c0:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
100052c2:	6878      	ldr	r0, [r7, #4]
100052c4:	f7ff ff04 	bl	100050d0 <rpmsg_virtio_get_status>
100052c8:	4603      	mov	r3, r0
100052ca:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
100052cc:	7bfb      	ldrb	r3, [r7, #15]
100052ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
100052d2:	2b00      	cmp	r3, #0
100052d4:	d004      	beq.n	100052e0 <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
100052d6:	2100      	movs	r1, #0
100052d8:	6878      	ldr	r0, [r7, #4]
100052da:	f7ff fee6 	bl	100050aa <rpmsg_virtio_set_status>
100052de:	e7f0      	b.n	100052c2 <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
100052e0:	7bfb      	ldrb	r3, [r7, #15]
100052e2:	f003 0304 	and.w	r3, r3, #4
100052e6:	2b00      	cmp	r3, #0
100052e8:	d0eb      	beq.n	100052c2 <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
100052ea:	2301      	movs	r3, #1
		}
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}
}
100052ec:	4618      	mov	r0, r3
100052ee:	3710      	adds	r7, #16
100052f0:	46bd      	mov	sp, r7
100052f2:	bd80      	pop	{r7, pc}

100052f4 <rpmsg_virtio_hold_rx_buffer>:

	return length;
}

static void rpmsg_virtio_hold_rx_buffer(struct rpmsg_device *rdev, void *rxbuf)
{
100052f4:	b480      	push	{r7}
100052f6:	b085      	sub	sp, #20
100052f8:	af00      	add	r7, sp, #0
100052fa:	6078      	str	r0, [r7, #4]
100052fc:	6039      	str	r1, [r7, #0]
	struct rpmsg_hdr *rp_hdr;

	(void)rdev;

	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
100052fe:	683b      	ldr	r3, [r7, #0]
10005300:	3b10      	subs	r3, #16
10005302:	60fb      	str	r3, [r7, #12]

	/* Set held status to keep buffer */
	rp_hdr->reserved |= RPMSG_BUF_HELD;
10005304:	68fb      	ldr	r3, [r7, #12]
10005306:	689b      	ldr	r3, [r3, #8]
10005308:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
1000530c:	68fb      	ldr	r3, [r7, #12]
1000530e:	609a      	str	r2, [r3, #8]
}
10005310:	bf00      	nop
10005312:	3714      	adds	r7, #20
10005314:	46bd      	mov	sp, r7
10005316:	f85d 7b04 	ldr.w	r7, [sp], #4
1000531a:	4770      	bx	lr

1000531c <rpmsg_virtio_release_rx_buffer>:

static void rpmsg_virtio_release_rx_buffer(struct rpmsg_device *rdev,
					   void *rxbuf)
{
1000531c:	b580      	push	{r7, lr}
1000531e:	b086      	sub	sp, #24
10005320:	af00      	add	r7, sp, #0
10005322:	6078      	str	r0, [r7, #4]
10005324:	6039      	str	r1, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr *rp_hdr;
	uint16_t idx;
	uint32_t len;

	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10005326:	687b      	ldr	r3, [r7, #4]
10005328:	617b      	str	r3, [r7, #20]
	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
1000532a:	683b      	ldr	r3, [r7, #0]
1000532c:	3b10      	subs	r3, #16
1000532e:	613b      	str	r3, [r7, #16]
	/* The reserved field contains buffer index */
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
10005330:	693b      	ldr	r3, [r7, #16]
10005332:	689b      	ldr	r3, [r3, #8]
10005334:	81fb      	strh	r3, [r7, #14]

	metal_mutex_acquire(&rdev->lock);
10005336:	687b      	ldr	r3, [r7, #4]
10005338:	3358      	adds	r3, #88	; 0x58
1000533a:	4618      	mov	r0, r3
1000533c:	f7ff fe92 	bl	10005064 <metal_mutex_acquire>
	/* Return buffer on virtqueue. */
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
10005340:	697b      	ldr	r3, [r7, #20]
10005342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
10005344:	89fa      	ldrh	r2, [r7, #14]
10005346:	4611      	mov	r1, r2
10005348:	4618      	mov	r0, r3
1000534a:	f000 fc73 	bl	10005c34 <virtqueue_get_buffer_length>
1000534e:	60b8      	str	r0, [r7, #8]
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
10005350:	89fb      	ldrh	r3, [r7, #14]
10005352:	68ba      	ldr	r2, [r7, #8]
10005354:	6939      	ldr	r1, [r7, #16]
10005356:	6978      	ldr	r0, [r7, #20]
10005358:	f7ff ff40 	bl	100051dc <rpmsg_virtio_return_buffer>
	metal_mutex_release(&rdev->lock);
1000535c:	687b      	ldr	r3, [r7, #4]
1000535e:	3358      	adds	r3, #88	; 0x58
10005360:	4618      	mov	r0, r3
10005362:	f7ff fe8a 	bl	1000507a <metal_mutex_release>
}
10005366:	bf00      	nop
10005368:	3718      	adds	r7, #24
1000536a:	46bd      	mov	sp, r7
1000536c:	bd80      	pop	{r7, pc}

1000536e <rpmsg_virtio_get_tx_payload_buffer>:

static void *rpmsg_virtio_get_tx_payload_buffer(struct rpmsg_device *rdev,
						uint32_t *len, int wait)
{
1000536e:	b580      	push	{r7, lr}
10005370:	b08a      	sub	sp, #40	; 0x28
10005372:	af00      	add	r7, sp, #0
10005374:	60f8      	str	r0, [r7, #12]
10005376:	60b9      	str	r1, [r7, #8]
10005378:	607a      	str	r2, [r7, #4]
	uint16_t idx;
	int tick_count;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000537a:	68fb      	ldr	r3, [r7, #12]
1000537c:	623b      	str	r3, [r7, #32]

	/* Validate device state */
	status = rpmsg_virtio_get_status(rvdev);
1000537e:	6a38      	ldr	r0, [r7, #32]
10005380:	f7ff fea6 	bl	100050d0 <rpmsg_virtio_get_status>
10005384:	4603      	mov	r3, r0
10005386:	61fb      	str	r3, [r7, #28]
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
10005388:	69fb      	ldr	r3, [r7, #28]
1000538a:	f003 0304 	and.w	r3, r3, #4
1000538e:	2b00      	cmp	r3, #0
10005390:	d101      	bne.n	10005396 <rpmsg_virtio_get_tx_payload_buffer+0x28>
		return NULL;
10005392:	2300      	movs	r3, #0
10005394:	e039      	b.n	1000540a <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	if (wait)
10005396:	687b      	ldr	r3, [r7, #4]
10005398:	2b00      	cmp	r3, #0
1000539a:	d003      	beq.n	100053a4 <rpmsg_virtio_get_tx_payload_buffer+0x36>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
1000539c:	f643 2398 	movw	r3, #15000	; 0x3a98
100053a0:	627b      	str	r3, [r7, #36]	; 0x24
100053a2:	e001      	b.n	100053a8 <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	else
		tick_count = 0;
100053a4:	2300      	movs	r3, #0
100053a6:	627b      	str	r3, [r7, #36]	; 0x24

	while (1) {
		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
100053a8:	68fb      	ldr	r3, [r7, #12]
100053aa:	3358      	adds	r3, #88	; 0x58
100053ac:	4618      	mov	r0, r3
100053ae:	f7ff fe59 	bl	10005064 <metal_mutex_acquire>
		rp_hdr = rpmsg_virtio_get_tx_buffer(rvdev, len, &idx);
100053b2:	f107 0316 	add.w	r3, r7, #22
100053b6:	461a      	mov	r2, r3
100053b8:	68b9      	ldr	r1, [r7, #8]
100053ba:	6a38      	ldr	r0, [r7, #32]
100053bc:	f7ff ff44 	bl	10005248 <rpmsg_virtio_get_tx_buffer>
100053c0:	61b8      	str	r0, [r7, #24]
		metal_mutex_release(&rdev->lock);
100053c2:	68fb      	ldr	r3, [r7, #12]
100053c4:	3358      	adds	r3, #88	; 0x58
100053c6:	4618      	mov	r0, r3
100053c8:	f7ff fe57 	bl	1000507a <metal_mutex_release>
		if (rp_hdr || !tick_count)
100053cc:	69bb      	ldr	r3, [r7, #24]
100053ce:	2b00      	cmp	r3, #0
100053d0:	d10a      	bne.n	100053e8 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
100053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100053d4:	2b00      	cmp	r3, #0
100053d6:	d007      	beq.n	100053e8 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
			break;
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
100053d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
100053dc:	f7ff fda7 	bl	10004f2e <metal_sleep_usec>
		tick_count--;
100053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100053e2:	3b01      	subs	r3, #1
100053e4:	627b      	str	r3, [r7, #36]	; 0x24
		metal_mutex_acquire(&rdev->lock);
100053e6:	e7df      	b.n	100053a8 <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	}

	if (!rp_hdr)
100053e8:	69bb      	ldr	r3, [r7, #24]
100053ea:	2b00      	cmp	r3, #0
100053ec:	d101      	bne.n	100053f2 <rpmsg_virtio_get_tx_payload_buffer+0x84>
		return NULL;
100053ee:	2300      	movs	r3, #0
100053f0:	e00b      	b.n	1000540a <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	/* Store the index into the reserved field to be used when sending */
	rp_hdr->reserved = idx;
100053f2:	8afb      	ldrh	r3, [r7, #22]
100053f4:	461a      	mov	r2, r3
100053f6:	69bb      	ldr	r3, [r7, #24]
100053f8:	609a      	str	r2, [r3, #8]

	/* Actual data buffer size is vring buffer size minus header length */
	*len -= sizeof(struct rpmsg_hdr);
100053fa:	68bb      	ldr	r3, [r7, #8]
100053fc:	681b      	ldr	r3, [r3, #0]
100053fe:	f1a3 0210 	sub.w	r2, r3, #16
10005402:	68bb      	ldr	r3, [r7, #8]
10005404:	601a      	str	r2, [r3, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
10005406:	69bb      	ldr	r3, [r7, #24]
10005408:	3310      	adds	r3, #16
}
1000540a:	4618      	mov	r0, r3
1000540c:	3728      	adds	r7, #40	; 0x28
1000540e:	46bd      	mov	sp, r7
10005410:	bd80      	pop	{r7, pc}
	...

10005414 <rpmsg_virtio_send_offchannel_nocopy>:

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
10005414:	b580      	push	{r7, lr}
10005416:	b08e      	sub	sp, #56	; 0x38
10005418:	af00      	add	r7, sp, #0
1000541a:	60f8      	str	r0, [r7, #12]
1000541c:	60b9      	str	r1, [r7, #8]
1000541e:	607a      	str	r2, [r7, #4]
10005420:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	uint16_t idx;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10005422:	68fb      	ldr	r3, [r7, #12]
10005424:	637b      	str	r3, [r7, #52]	; 0x34

	hdr = RPMSG_LOCATE_HDR(data);
10005426:	683b      	ldr	r3, [r7, #0]
10005428:	3b10      	subs	r3, #16
1000542a:	633b      	str	r3, [r7, #48]	; 0x30
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
1000542c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000542e:	689b      	ldr	r3, [r3, #8]
10005430:	85fb      	strh	r3, [r7, #46]	; 0x2e

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
10005432:	687b      	ldr	r3, [r7, #4]
10005434:	617b      	str	r3, [r7, #20]
	rp_hdr.src = src;
10005436:	68bb      	ldr	r3, [r7, #8]
10005438:	613b      	str	r3, [r7, #16]
	rp_hdr.len = len;
1000543a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000543c:	b29b      	uxth	r3, r3
1000543e:	83bb      	strh	r3, [r7, #28]
	rp_hdr.reserved = 0;
10005440:	2300      	movs	r3, #0
10005442:	61bb      	str	r3, [r7, #24]
	rp_hdr.flags = 0;
10005444:	2300      	movs	r3, #0
10005446:	83fb      	strh	r3, [r7, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
10005448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000544a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
1000544e:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
10005450:	6b39      	ldr	r1, [r7, #48]	; 0x30
10005452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
10005454:	f7ff fd87 	bl	10004f66 <metal_io_virt_to_offset>
10005458:	4601      	mov	r1, r0
1000545a:	f107 0210 	add.w	r2, r7, #16
1000545e:	2310      	movs	r3, #16
10005460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
10005462:	f7fe fe1b 	bl	1000409c <metal_io_block_write>
10005466:	6278      	str	r0, [r7, #36]	; 0x24
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
10005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000546a:	2b10      	cmp	r3, #16
1000546c:	d006      	beq.n	1000547c <rpmsg_virtio_send_offchannel_nocopy+0x68>
1000546e:	4b1b      	ldr	r3, [pc, #108]	; (100054dc <rpmsg_virtio_send_offchannel_nocopy+0xc8>)
10005470:	4a1b      	ldr	r2, [pc, #108]	; (100054e0 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
10005472:	f240 117d 	movw	r1, #381	; 0x17d
10005476:	481b      	ldr	r0, [pc, #108]	; (100054e4 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
10005478:	f000 fdd6 	bl	10006028 <__assert_func>

	metal_mutex_acquire(&rdev->lock);
1000547c:	68fb      	ldr	r3, [r7, #12]
1000547e:	3358      	adds	r3, #88	; 0x58
10005480:	4618      	mov	r0, r3
10005482:	f7ff fdef 	bl	10005064 <metal_mutex_acquire>
#ifndef VIRTIO_SLAVE_ONLY
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_MASTER)
		buff_len = RPMSG_BUFFER_SIZE;
	else
#endif /*!VIRTIO_SLAVE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
10005486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10005488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000548c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
1000548e:	4611      	mov	r1, r2
10005490:	4618      	mov	r0, r3
10005492:	f000 fbcf 	bl	10005c34 <virtqueue_get_buffer_length>
10005496:	6238      	str	r0, [r7, #32]

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
10005498:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
1000549a:	6a3a      	ldr	r2, [r7, #32]
1000549c:	6b39      	ldr	r1, [r7, #48]	; 0x30
1000549e:	6b78      	ldr	r0, [r7, #52]	; 0x34
100054a0:	f7ff feb5 	bl	1000520e <rpmsg_virtio_enqueue_buffer>
100054a4:	6278      	str	r0, [r7, #36]	; 0x24
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
100054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100054a8:	2b00      	cmp	r3, #0
100054aa:	d006      	beq.n	100054ba <rpmsg_virtio_send_offchannel_nocopy+0xa6>
100054ac:	4b0e      	ldr	r3, [pc, #56]	; (100054e8 <rpmsg_virtio_send_offchannel_nocopy+0xd4>)
100054ae:	4a0c      	ldr	r2, [pc, #48]	; (100054e0 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
100054b0:	f44f 71c5 	mov.w	r1, #394	; 0x18a
100054b4:	480b      	ldr	r0, [pc, #44]	; (100054e4 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
100054b6:	f000 fdb7 	bl	10006028 <__assert_func>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
100054ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100054bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100054c0:	4618      	mov	r0, r3
100054c2:	f000 fc8b 	bl	10005ddc <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
100054c6:	68fb      	ldr	r3, [r7, #12]
100054c8:	3358      	adds	r3, #88	; 0x58
100054ca:	4618      	mov	r0, r3
100054cc:	f7ff fdd5 	bl	1000507a <metal_mutex_release>

	return len;
100054d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
100054d2:	4618      	mov	r0, r3
100054d4:	3738      	adds	r7, #56	; 0x38
100054d6:	46bd      	mov	sp, r7
100054d8:	bd80      	pop	{r7, pc}
100054da:	bf00      	nop
100054dc:	1000749c 	.word	0x1000749c
100054e0:	100075d4 	.word	0x100075d4
100054e4:	100074b8 	.word	0x100074b8
100054e8:	10007518 	.word	0x10007518

100054ec <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
100054ec:	b580      	push	{r7, lr}
100054ee:	b08c      	sub	sp, #48	; 0x30
100054f0:	af02      	add	r7, sp, #8
100054f2:	60f8      	str	r0, [r7, #12]
100054f4:	60b9      	str	r1, [r7, #8]
100054f6:	607a      	str	r2, [r7, #4]
100054f8:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	void *buffer;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
100054fa:	68fb      	ldr	r3, [r7, #12]
100054fc:	627b      	str	r3, [r7, #36]	; 0x24

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
100054fe:	f107 0314 	add.w	r3, r7, #20
10005502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
10005504:	4619      	mov	r1, r3
10005506:	68f8      	ldr	r0, [r7, #12]
10005508:	f7ff ff31 	bl	1000536e <rpmsg_virtio_get_tx_payload_buffer>
1000550c:	6238      	str	r0, [r7, #32]
	if (!buffer)
1000550e:	6a3b      	ldr	r3, [r7, #32]
10005510:	2b00      	cmp	r3, #0
10005512:	d101      	bne.n	10005518 <rpmsg_virtio_send_offchannel_raw+0x2c>
		return RPMSG_ERR_NO_BUFF;
10005514:	4b17      	ldr	r3, [pc, #92]	; (10005574 <rpmsg_virtio_send_offchannel_raw+0x88>)
10005516:	e029      	b.n	1000556c <rpmsg_virtio_send_offchannel_raw+0x80>

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
10005518:	697b      	ldr	r3, [r7, #20]
1000551a:	461a      	mov	r2, r3
1000551c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000551e:	4293      	cmp	r3, r2
10005520:	dd01      	ble.n	10005526 <rpmsg_virtio_send_offchannel_raw+0x3a>
		len = buff_len;
10005522:	697b      	ldr	r3, [r7, #20]
10005524:	633b      	str	r3, [r7, #48]	; 0x30
	io = rvdev->shbuf_io;
10005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
1000552c:	61fb      	str	r3, [r7, #28]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
1000552e:	6a39      	ldr	r1, [r7, #32]
10005530:	69f8      	ldr	r0, [r7, #28]
10005532:	f7ff fd18 	bl	10004f66 <metal_io_virt_to_offset>
10005536:	4601      	mov	r1, r0
10005538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000553a:	683a      	ldr	r2, [r7, #0]
1000553c:	69f8      	ldr	r0, [r7, #28]
1000553e:	f7fe fdad 	bl	1000409c <metal_io_block_write>
10005542:	61b8      	str	r0, [r7, #24]
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
10005544:	69ba      	ldr	r2, [r7, #24]
10005546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005548:	429a      	cmp	r2, r3
1000554a:	d006      	beq.n	1000555a <rpmsg_virtio_send_offchannel_raw+0x6e>
1000554c:	4b0a      	ldr	r3, [pc, #40]	; (10005578 <rpmsg_virtio_send_offchannel_raw+0x8c>)
1000554e:	4a0b      	ldr	r2, [pc, #44]	; (1000557c <rpmsg_virtio_send_offchannel_raw+0x90>)
10005550:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
10005554:	480a      	ldr	r0, [pc, #40]	; (10005580 <rpmsg_virtio_send_offchannel_raw+0x94>)
10005556:	f000 fd67 	bl	10006028 <__assert_func>

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
1000555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000555c:	9300      	str	r3, [sp, #0]
1000555e:	6a3b      	ldr	r3, [r7, #32]
10005560:	687a      	ldr	r2, [r7, #4]
10005562:	68b9      	ldr	r1, [r7, #8]
10005564:	68f8      	ldr	r0, [r7, #12]
10005566:	f7ff ff55 	bl	10005414 <rpmsg_virtio_send_offchannel_nocopy>
1000556a:	4603      	mov	r3, r0
}
1000556c:	4618      	mov	r0, r3
1000556e:	3728      	adds	r7, #40	; 0x28
10005570:	46bd      	mov	sp, r7
10005572:	bd80      	pop	{r7, pc}
10005574:	fffff82e 	.word	0xfffff82e
10005578:	10007524 	.word	0x10007524
1000557c:	100075f8 	.word	0x100075f8
10005580:	100074b8 	.word	0x100074b8

10005584 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
10005584:	b480      	push	{r7}
10005586:	b083      	sub	sp, #12
10005588:	af00      	add	r7, sp, #0
1000558a:	6078      	str	r0, [r7, #4]
	(void)vq;
}
1000558c:	bf00      	nop
1000558e:	370c      	adds	r7, #12
10005590:	46bd      	mov	sp, r7
10005592:	f85d 7b04 	ldr.w	r7, [sp], #4
10005596:	4770      	bx	lr

10005598 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
10005598:	b590      	push	{r4, r7, lr}
1000559a:	b08d      	sub	sp, #52	; 0x34
1000559c:	af02      	add	r7, sp, #8
1000559e:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
100055a0:	687b      	ldr	r3, [r7, #4]
100055a2:	681b      	ldr	r3, [r3, #0]
100055a4:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
100055a6:	6a3b      	ldr	r3, [r7, #32]
100055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100055aa:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
100055ac:	69fb      	ldr	r3, [r7, #28]
100055ae:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
100055b0:	69bb      	ldr	r3, [r7, #24]
100055b2:	3358      	adds	r3, #88	; 0x58
100055b4:	4618      	mov	r0, r3
100055b6:	f7ff fd55 	bl	10005064 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
100055ba:	f107 020a 	add.w	r2, r7, #10
100055be:	f107 030c 	add.w	r3, r7, #12
100055c2:	4619      	mov	r1, r3
100055c4:	69f8      	ldr	r0, [r7, #28]
100055c6:	f7ff fe5c 	bl	10005282 <rpmsg_virtio_get_rx_buffer>
100055ca:	6278      	str	r0, [r7, #36]	; 0x24

	metal_mutex_release(&rdev->lock);
100055cc:	69bb      	ldr	r3, [r7, #24]
100055ce:	3358      	adds	r3, #88	; 0x58
100055d0:	4618      	mov	r0, r3
100055d2:	f7ff fd52 	bl	1000507a <metal_mutex_release>

	while (rp_hdr) {
100055d6:	e062      	b.n	1000569e <rpmsg_virtio_rx_callback+0x106>
		rp_hdr->reserved = idx;
100055d8:	897b      	ldrh	r3, [r7, #10]
100055da:	461a      	mov	r2, r3
100055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100055de:	609a      	str	r2, [r3, #8]

		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
100055e0:	69bb      	ldr	r3, [r7, #24]
100055e2:	3358      	adds	r3, #88	; 0x58
100055e4:	4618      	mov	r0, r3
100055e6:	f7ff fd3d 	bl	10005064 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
100055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100055ec:	685b      	ldr	r3, [r3, #4]
100055ee:	4619      	mov	r1, r3
100055f0:	69b8      	ldr	r0, [r7, #24]
100055f2:	f7ff fdc9 	bl	10005188 <rpmsg_get_ept_from_addr>
100055f6:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
100055f8:	69bb      	ldr	r3, [r7, #24]
100055fa:	3358      	adds	r3, #88	; 0x58
100055fc:	4618      	mov	r0, r3
100055fe:	f7ff fd3c 	bl	1000507a <metal_mutex_release>

		if (ept) {
10005602:	697b      	ldr	r3, [r7, #20]
10005604:	2b00      	cmp	r3, #0
10005606:	d025      	beq.n	10005654 <rpmsg_virtio_rx_callback+0xbc>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
10005608:	697b      	ldr	r3, [r7, #20]
1000560a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000560c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10005610:	d103      	bne.n	1000561a <rpmsg_virtio_rx_callback+0x82>
				/*
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
10005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005614:	681a      	ldr	r2, [r3, #0]
10005616:	697b      	ldr	r3, [r7, #20]
10005618:	629a      	str	r2, [r3, #40]	; 0x28
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
1000561a:	697b      	ldr	r3, [r7, #20]
1000561c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
1000561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005620:	f103 0110 	add.w	r1, r3, #16
					 rp_hdr->len, rp_hdr->src, ept->priv);
10005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005626:	899b      	ldrh	r3, [r3, #12]
10005628:	b29b      	uxth	r3, r3
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
1000562a:	4618      	mov	r0, r3
1000562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000562e:	681a      	ldr	r2, [r3, #0]
10005630:	697b      	ldr	r3, [r7, #20]
10005632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10005634:	9300      	str	r3, [sp, #0]
10005636:	4613      	mov	r3, r2
10005638:	4602      	mov	r2, r0
1000563a:	6978      	ldr	r0, [r7, #20]
1000563c:	47a0      	blx	r4
1000563e:	6138      	str	r0, [r7, #16]

			RPMSG_ASSERT(status >= 0,
10005640:	693b      	ldr	r3, [r7, #16]
10005642:	2b00      	cmp	r3, #0
10005644:	da06      	bge.n	10005654 <rpmsg_virtio_rx_callback+0xbc>
10005646:	4b1a      	ldr	r3, [pc, #104]	; (100056b0 <rpmsg_virtio_rx_callback+0x118>)
10005648:	4a1a      	ldr	r2, [pc, #104]	; (100056b4 <rpmsg_virtio_rx_callback+0x11c>)
1000564a:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
1000564e:	481a      	ldr	r0, [pc, #104]	; (100056b8 <rpmsg_virtio_rx_callback+0x120>)
10005650:	f000 fcea 	bl	10006028 <__assert_func>
				     "unexpected callback status\r\n");
		}

		metal_mutex_acquire(&rdev->lock);
10005654:	69bb      	ldr	r3, [r7, #24]
10005656:	3358      	adds	r3, #88	; 0x58
10005658:	4618      	mov	r0, r3
1000565a:	f7ff fd03 	bl	10005064 <metal_mutex_acquire>

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
1000565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005660:	689b      	ldr	r3, [r3, #8]
10005662:	2b00      	cmp	r3, #0
10005664:	db05      	blt.n	10005672 <rpmsg_virtio_rx_callback+0xda>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
10005666:	68fa      	ldr	r2, [r7, #12]
10005668:	897b      	ldrh	r3, [r7, #10]
1000566a:	6a79      	ldr	r1, [r7, #36]	; 0x24
1000566c:	69f8      	ldr	r0, [r7, #28]
1000566e:	f7ff fdb5 	bl	100051dc <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
10005672:	f107 020a 	add.w	r2, r7, #10
10005676:	f107 030c 	add.w	r3, r7, #12
1000567a:	4619      	mov	r1, r3
1000567c:	69f8      	ldr	r0, [r7, #28]
1000567e:	f7ff fe00 	bl	10005282 <rpmsg_virtio_get_rx_buffer>
10005682:	6278      	str	r0, [r7, #36]	; 0x24
		if (!rp_hdr) {
10005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005686:	2b00      	cmp	r3, #0
10005688:	d104      	bne.n	10005694 <rpmsg_virtio_rx_callback+0xfc>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
1000568a:	69fb      	ldr	r3, [r7, #28]
1000568c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000568e:	4618      	mov	r0, r3
10005690:	f000 fba4 	bl	10005ddc <virtqueue_kick>
		}
		metal_mutex_release(&rdev->lock);
10005694:	69bb      	ldr	r3, [r7, #24]
10005696:	3358      	adds	r3, #88	; 0x58
10005698:	4618      	mov	r0, r3
1000569a:	f7ff fcee 	bl	1000507a <metal_mutex_release>
	while (rp_hdr) {
1000569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100056a0:	2b00      	cmp	r3, #0
100056a2:	d199      	bne.n	100055d8 <rpmsg_virtio_rx_callback+0x40>
	}
}
100056a4:	bf00      	nop
100056a6:	bf00      	nop
100056a8:	372c      	adds	r7, #44	; 0x2c
100056aa:	46bd      	mov	sp, r7
100056ac:	bd90      	pop	{r4, r7, pc}
100056ae:	bf00      	nop
100056b0:	10007534 	.word	0x10007534
100056b4:	1000761c 	.word	0x1000761c
100056b8:	100074b8 	.word	0x100074b8

100056bc <rpmsg_virtio_ns_callback>:
 *
 * @return - rpmag endpoint callback handled
 */
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
100056bc:	b580      	push	{r7, lr}
100056be:	b092      	sub	sp, #72	; 0x48
100056c0:	af00      	add	r7, sp, #0
100056c2:	60f8      	str	r0, [r7, #12]
100056c4:	60b9      	str	r1, [r7, #8]
100056c6:	607a      	str	r2, [r7, #4]
100056c8:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
100056ca:	68fb      	ldr	r3, [r7, #12]
100056cc:	6a1b      	ldr	r3, [r3, #32]
100056ce:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
100056d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
100056d2:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
100056d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
100056d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
100056da:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = data;
100056dc:	68bb      	ldr	r3, [r7, #8]
100056de:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
100056e0:	687b      	ldr	r3, [r7, #4]
100056e2:	2b28      	cmp	r3, #40	; 0x28
100056e4:	d001      	beq.n	100056ea <rpmsg_virtio_ns_callback+0x2e>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
100056e6:	2300      	movs	r3, #0
100056e8:	e057      	b.n	1000579a <rpmsg_virtio_ns_callback+0xde>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
100056ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
100056ec:	4619      	mov	r1, r3
100056ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
100056f0:	f7ff fc39 	bl	10004f66 <metal_io_virt_to_offset>
100056f4:	4601      	mov	r1, r0
100056f6:	f107 0210 	add.w	r2, r7, #16
100056fa:	2320      	movs	r3, #32
100056fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
100056fe:	f7fe fc58 	bl	10003fb2 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
10005702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10005704:	6a1b      	ldr	r3, [r3, #32]
10005706:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
10005708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000570a:	3358      	adds	r3, #88	; 0x58
1000570c:	4618      	mov	r0, r3
1000570e:	f7ff fca9 	bl	10005064 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
10005712:	f107 0110 	add.w	r1, r7, #16
10005716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10005718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1000571c:	6c78      	ldr	r0, [r7, #68]	; 0x44
1000571e:	f7ff fadb 	bl	10004cd8 <rpmsg_get_endpoint>
10005722:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
10005724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005728:	f003 0301 	and.w	r3, r3, #1
1000572c:	2b00      	cmp	r3, #0
1000572e:	d017      	beq.n	10005760 <rpmsg_virtio_ns_callback+0xa4>
		if (_ept)
10005730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005732:	2b00      	cmp	r3, #0
10005734:	d003      	beq.n	1000573e <rpmsg_virtio_ns_callback+0x82>
			_ept->dest_addr = RPMSG_ADDR_ANY;
10005736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1000573c:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
1000573e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10005740:	3358      	adds	r3, #88	; 0x58
10005742:	4618      	mov	r0, r3
10005744:	f7ff fc99 	bl	1000507a <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
10005748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000574a:	2b00      	cmp	r3, #0
1000574c:	d024      	beq.n	10005798 <rpmsg_virtio_ns_callback+0xdc>
1000574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10005752:	2b00      	cmp	r3, #0
10005754:	d020      	beq.n	10005798 <rpmsg_virtio_ns_callback+0xdc>
			_ept->ns_unbind_cb(_ept);
10005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000575a:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000575c:	4798      	blx	r3
1000575e:	e01b      	b.n	10005798 <rpmsg_virtio_ns_callback+0xdc>
	} else {
		if (!_ept) {
10005760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005762:	2b00      	cmp	r3, #0
10005764:	d110      	bne.n	10005788 <rpmsg_virtio_ns_callback+0xcc>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
10005766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10005768:	3358      	adds	r3, #88	; 0x58
1000576a:	4618      	mov	r0, r3
1000576c:	f7ff fc85 	bl	1000507a <metal_mutex_release>
			if (rdev->ns_bind_cb)
10005770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10005772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
10005774:	2b00      	cmp	r3, #0
10005776:	d00f      	beq.n	10005798 <rpmsg_virtio_ns_callback+0xdc>
				rdev->ns_bind_cb(rdev, name, dest);
10005778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000577a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000577c:	f107 0110 	add.w	r1, r7, #16
10005780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
10005782:	6c78      	ldr	r0, [r7, #68]	; 0x44
10005784:	4798      	blx	r3
10005786:	e007      	b.n	10005798 <rpmsg_virtio_ns_callback+0xdc>
		} else {
			_ept->dest_addr = dest;
10005788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000578a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000578c:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
1000578e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10005790:	3358      	adds	r3, #88	; 0x58
10005792:	4618      	mov	r0, r3
10005794:	f7ff fc71 	bl	1000507a <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
10005798:	2300      	movs	r3, #0
}
1000579a:	4618      	mov	r0, r3
1000579c:	3748      	adds	r7, #72	; 0x48
1000579e:	46bd      	mov	sp, r7
100057a0:	bd80      	pop	{r7, pc}
	...

100057a4 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
100057a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
100057a8:	b090      	sub	sp, #64	; 0x40
100057aa:	af02      	add	r7, sp, #8
100057ac:	60f8      	str	r0, [r7, #12]
100057ae:	60b9      	str	r1, [r7, #8]
100057b0:	607a      	str	r2, [r7, #4]
100057b2:	603b      	str	r3, [r7, #0]
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
100057b4:	68fb      	ldr	r3, [r7, #12]
100057b6:	633b      	str	r3, [r7, #48]	; 0x30
	memset(rdev, 0, sizeof(*rdev));
100057b8:	2278      	movs	r2, #120	; 0x78
100057ba:	2100      	movs	r1, #0
100057bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
100057be:	f000 fe24 	bl	1000640a <memset>
	metal_mutex_init(&rdev->lock);
100057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100057c4:	3358      	adds	r3, #88	; 0x58
100057c6:	4618      	mov	r0, r3
100057c8:	f7ff fc41 	bl	1000504e <metal_mutex_init>
	rvdev->vdev = vdev;
100057cc:	68fb      	ldr	r3, [r7, #12]
100057ce:	68ba      	ldr	r2, [r7, #8]
100057d0:	679a      	str	r2, [r3, #120]	; 0x78
	rdev->ns_bind_cb = ns_bind_cb;
100057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100057d4:	687a      	ldr	r2, [r7, #4]
100057d6:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
100057d8:	68bb      	ldr	r3, [r7, #8]
100057da:	68fa      	ldr	r2, [r7, #12]
100057dc:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
100057de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100057e0:	4a4d      	ldr	r2, [pc, #308]	; (10005918 <rpmsg_init_vdev+0x174>)
100057e2:	661a      	str	r2, [r3, #96]	; 0x60
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
100057e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100057e6:	4a4d      	ldr	r2, [pc, #308]	; (1000591c <rpmsg_init_vdev+0x178>)
100057e8:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
100057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100057ec:	4a4c      	ldr	r2, [pc, #304]	; (10005920 <rpmsg_init_vdev+0x17c>)
100057ee:	669a      	str	r2, [r3, #104]	; 0x68
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
100057f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100057f2:	4a4c      	ldr	r2, [pc, #304]	; (10005924 <rpmsg_init_vdev+0x180>)
100057f4:	66da      	str	r2, [r3, #108]	; 0x6c
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
100057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100057f8:	4a4b      	ldr	r2, [pc, #300]	; (10005928 <rpmsg_init_vdev+0x184>)
100057fa:	671a      	str	r2, [r3, #112]	; 0x70
	role = rpmsg_virtio_get_role(rvdev);
100057fc:	68f8      	ldr	r0, [r7, #12]
100057fe:	f7ff fc47 	bl	10005090 <rpmsg_virtio_get_role>
10005802:	62f8      	str	r0, [r7, #44]	; 0x2c

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10005804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10005806:	2b01      	cmp	r3, #1
10005808:	d102      	bne.n	10005810 <rpmsg_init_vdev+0x6c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
1000580a:	68f8      	ldr	r0, [r7, #12]
1000580c:	f7ff fd55 	bl	100052ba <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
10005810:	68f8      	ldr	r0, [r7, #12]
10005812:	f7ff fc6e 	bl	100050f2 <rpmsg_virtio_get_features>
10005816:	4603      	mov	r3, r0
10005818:	2200      	movs	r2, #0
1000581a:	4698      	mov	r8, r3
1000581c:	4691      	mov	r9, r2
1000581e:	68bb      	ldr	r3, [r7, #8]
10005820:	e9c3 8904 	strd	r8, r9, [r3, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
10005824:	68bb      	ldr	r3, [r7, #8]
10005826:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
1000582a:	f002 0401 	and.w	r4, r2, #1
1000582e:	2500      	movs	r5, #0
10005830:	ea44 0305 	orr.w	r3, r4, r5
10005834:	2b00      	cmp	r3, #0
10005836:	bf14      	ite	ne
10005838:	2301      	movne	r3, #1
1000583a:	2300      	moveq	r3, #0
1000583c:	b2da      	uxtb	r2, r3
1000583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005840:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
10005844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10005846:	2b01      	cmp	r3, #1
10005848:	d113      	bne.n	10005872 <rpmsg_init_vdev+0xce>
		vq_names[0] = "tx_vq";
1000584a:	4b38      	ldr	r3, [pc, #224]	; (1000592c <rpmsg_init_vdev+0x188>)
1000584c:	61fb      	str	r3, [r7, #28]
		vq_names[1] = "rx_vq";
1000584e:	4b38      	ldr	r3, [pc, #224]	; (10005930 <rpmsg_init_vdev+0x18c>)
10005850:	623b      	str	r3, [r7, #32]
		callback[0] = rpmsg_virtio_tx_callback;
10005852:	4b38      	ldr	r3, [pc, #224]	; (10005934 <rpmsg_init_vdev+0x190>)
10005854:	617b      	str	r3, [r7, #20]
		callback[1] = rpmsg_virtio_rx_callback;
10005856:	4b38      	ldr	r3, [pc, #224]	; (10005938 <rpmsg_init_vdev+0x194>)
10005858:	61bb      	str	r3, [r7, #24]
		rvdev->rvq  = vdev->vrings_info[1].vq;
1000585a:	68bb      	ldr	r3, [r7, #8]
1000585c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000585e:	3318      	adds	r3, #24
10005860:	681a      	ldr	r2, [r3, #0]
10005862:	68fb      	ldr	r3, [r7, #12]
10005864:	67da      	str	r2, [r3, #124]	; 0x7c
		rvdev->svq  = vdev->vrings_info[0].vq;
10005866:	68bb      	ldr	r3, [r7, #8]
10005868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000586a:	681a      	ldr	r2, [r3, #0]
1000586c:	68fb      	ldr	r3, [r7, #12]
1000586e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
10005872:	68fb      	ldr	r3, [r7, #12]
10005874:	683a      	ldr	r2, [r7, #0]
10005876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
1000587a:	f107 021c 	add.w	r2, r7, #28
1000587e:	f107 0314 	add.w	r3, r7, #20
10005882:	9300      	str	r3, [sp, #0]
10005884:	4613      	mov	r3, r2
10005886:	2202      	movs	r2, #2
10005888:	2100      	movs	r1, #0
1000588a:	68f8      	ldr	r0, [r7, #12]
1000588c:	f7ff fc42 	bl	10005114 <rpmsg_virtio_create_virtqueues>
10005890:	62b8      	str	r0, [r7, #40]	; 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
10005892:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005894:	2b00      	cmp	r3, #0
10005896:	d001      	beq.n	1000589c <rpmsg_init_vdev+0xf8>
		return status;
10005898:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000589a:	e037      	b.n	1000590c <rpmsg_init_vdev+0x168>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
1000589c:	68fb      	ldr	r3, [r7, #12]
1000589e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100058a2:	4618      	mov	r0, r3
100058a4:	f000 fa62 	bl	10005d6c <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
100058a8:	2300      	movs	r3, #0
100058aa:	637b      	str	r3, [r7, #52]	; 0x34
100058ac:	e00f      	b.n	100058ce <rpmsg_init_vdev+0x12a>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
100058ae:	68bb      	ldr	r3, [r7, #8]
100058b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
100058b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
100058b4:	4613      	mov	r3, r2
100058b6:	005b      	lsls	r3, r3, #1
100058b8:	4413      	add	r3, r2
100058ba:	00db      	lsls	r3, r3, #3
100058bc:	440b      	add	r3, r1
100058be:	681b      	ldr	r3, [r3, #0]
100058c0:	627b      	str	r3, [r7, #36]	; 0x24
		vq->shm_io = shm_io;
100058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100058c4:	683a      	ldr	r2, [r7, #0]
100058c6:	629a      	str	r2, [r3, #40]	; 0x28
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
100058c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100058ca:	3301      	adds	r3, #1
100058cc:	637b      	str	r3, [r7, #52]	; 0x34
100058ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100058d0:	2b01      	cmp	r3, #1
100058d2:	d9ec      	bls.n	100058ae <rpmsg_init_vdev+0x10a>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
100058d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100058d6:	4618      	mov	r0, r3
100058d8:	f7ff fb35 	bl	10004f46 <metal_list_init>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
100058dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100058de:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
100058e2:	2b00      	cmp	r3, #0
100058e4:	d011      	beq.n	1000590a <rpmsg_init_vdev+0x166>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
100058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100058e8:	f103 0008 	add.w	r0, r3, #8
100058ec:	2300      	movs	r3, #0
100058ee:	9301      	str	r3, [sp, #4]
100058f0:	4b12      	ldr	r3, [pc, #72]	; (1000593c <rpmsg_init_vdev+0x198>)
100058f2:	9300      	str	r3, [sp, #0]
100058f4:	2335      	movs	r3, #53	; 0x35
100058f6:	2235      	movs	r2, #53	; 0x35
100058f8:	4911      	ldr	r1, [pc, #68]	; (10005940 <rpmsg_init_vdev+0x19c>)
100058fa:	f7ff fc21 	bl	10005140 <rpmsg_initialize_ept>
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
100058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005900:	3308      	adds	r3, #8
10005902:	4619      	mov	r1, r3
10005904:	6b38      	ldr	r0, [r7, #48]	; 0x30
10005906:	f7ff fa72 	bl	10004dee <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
1000590a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
1000590c:	4618      	mov	r0, r3
1000590e:	3738      	adds	r7, #56	; 0x38
10005910:	46bd      	mov	sp, r7
10005912:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
10005916:	bf00      	nop
10005918:	100054ed 	.word	0x100054ed
1000591c:	100052f5 	.word	0x100052f5
10005920:	1000531d 	.word	0x1000531d
10005924:	1000536f 	.word	0x1000536f
10005928:	10005415 	.word	0x10005415
1000592c:	10007540 	.word	0x10007540
10005930:	10007548 	.word	0x10007548
10005934:	10005585 	.word	0x10005585
10005938:	10005599 	.word	0x10005599
1000593c:	100056bd 	.word	0x100056bd
10005940:	10007550 	.word	0x10007550

10005944 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
10005944:	b590      	push	{r4, r7, lr}
10005946:	b08f      	sub	sp, #60	; 0x3c
10005948:	af04      	add	r7, sp, #16
1000594a:	60f8      	str	r0, [r7, #12]
1000594c:	60b9      	str	r1, [r7, #8]
1000594e:	607a      	str	r2, [r7, #4]
10005950:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
10005952:	68fb      	ldr	r3, [r7, #12]
10005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005956:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
10005958:	687a      	ldr	r2, [r7, #4]
1000595a:	6a3b      	ldr	r3, [r7, #32]
1000595c:	429a      	cmp	r2, r3
1000595e:	d901      	bls.n	10005964 <virtio_create_virtqueues+0x20>
		return ERROR_VQUEUE_INVLD_PARAM;
10005960:	4b1e      	ldr	r3, [pc, #120]	; (100059dc <virtio_create_virtqueues+0x98>)
10005962:	e036      	b.n	100059d2 <virtio_create_virtqueues+0x8e>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
10005964:	2300      	movs	r3, #0
10005966:	627b      	str	r3, [r7, #36]	; 0x24
10005968:	e02e      	b.n	100059c8 <virtio_create_virtqueues+0x84>
		vring_info = &vdev->vrings_info[i];
1000596a:	68fb      	ldr	r3, [r7, #12]
1000596c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1000596e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10005970:	4613      	mov	r3, r2
10005972:	005b      	lsls	r3, r3, #1
10005974:	4413      	add	r3, r2
10005976:	00db      	lsls	r3, r3, #3
10005978:	440b      	add	r3, r1
1000597a:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
1000597c:	69fb      	ldr	r3, [r7, #28]
1000597e:	3304      	adds	r3, #4
10005980:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
10005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005984:	b298      	uxth	r0, r3
10005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005988:	009b      	lsls	r3, r3, #2
1000598a:	683a      	ldr	r2, [r7, #0]
1000598c:	4413      	add	r3, r2
1000598e:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
10005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005992:	009b      	lsls	r3, r3, #2
10005994:	6bba      	ldr	r2, [r7, #56]	; 0x38
10005996:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
10005998:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
1000599a:	68fa      	ldr	r2, [r7, #12]
1000599c:	6a12      	ldr	r2, [r2, #32]
1000599e:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
100059a0:	69f9      	ldr	r1, [r7, #28]
100059a2:	6809      	ldr	r1, [r1, #0]
100059a4:	9102      	str	r1, [sp, #8]
100059a6:	9201      	str	r2, [sp, #4]
100059a8:	9300      	str	r3, [sp, #0]
100059aa:	69bb      	ldr	r3, [r7, #24]
100059ac:	4622      	mov	r2, r4
100059ae:	4601      	mov	r1, r0
100059b0:	68f8      	ldr	r0, [r7, #12]
100059b2:	f000 f90e 	bl	10005bd2 <virtqueue_create>
100059b6:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
100059b8:	697b      	ldr	r3, [r7, #20]
100059ba:	2b00      	cmp	r3, #0
100059bc:	d001      	beq.n	100059c2 <virtio_create_virtqueues+0x7e>
			return ret;
100059be:	697b      	ldr	r3, [r7, #20]
100059c0:	e007      	b.n	100059d2 <virtio_create_virtqueues+0x8e>
	for (i = 0; i < nvqs; i++) {
100059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100059c4:	3301      	adds	r3, #1
100059c6:	627b      	str	r3, [r7, #36]	; 0x24
100059c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100059ca:	687b      	ldr	r3, [r7, #4]
100059cc:	429a      	cmp	r2, r3
100059ce:	d3cc      	bcc.n	1000596a <virtio_create_virtqueues+0x26>
	}
	return 0;
100059d0:	2300      	movs	r3, #0
}
100059d2:	4618      	mov	r0, r3
100059d4:	372c      	adds	r7, #44	; 0x2c
100059d6:	46bd      	mov	sp, r7
100059d8:	bd90      	pop	{r4, r7, pc}
100059da:	bf00      	nop
100059dc:	fffff440 	.word	0xfffff440

100059e0 <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
100059e0:	b480      	push	{r7}
100059e2:	b085      	sub	sp, #20
100059e4:	af00      	add	r7, sp, #0
100059e6:	60f8      	str	r0, [r7, #12]
100059e8:	60b9      	str	r1, [r7, #8]
100059ea:	607a      	str	r2, [r7, #4]
100059ec:	603b      	str	r3, [r7, #0]
	vr->num = num;
100059ee:	68fb      	ldr	r3, [r7, #12]
100059f0:	68ba      	ldr	r2, [r7, #8]
100059f2:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
100059f4:	68fb      	ldr	r3, [r7, #12]
100059f6:	687a      	ldr	r2, [r7, #4]
100059f8:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
100059fa:	68bb      	ldr	r3, [r7, #8]
100059fc:	011b      	lsls	r3, r3, #4
100059fe:	687a      	ldr	r2, [r7, #4]
10005a00:	441a      	add	r2, r3
10005a02:	68fb      	ldr	r3, [r7, #12]
10005a04:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
10005a06:	68fb      	ldr	r3, [r7, #12]
10005a08:	689a      	ldr	r2, [r3, #8]
10005a0a:	68bb      	ldr	r3, [r7, #8]
10005a0c:	005b      	lsls	r3, r3, #1
10005a0e:	4413      	add	r3, r2
10005a10:	3304      	adds	r3, #4
10005a12:	461a      	mov	r2, r3
10005a14:	683b      	ldr	r3, [r7, #0]
10005a16:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
10005a18:	1c5a      	adds	r2, r3, #1
10005a1a:	683b      	ldr	r3, [r7, #0]
10005a1c:	425b      	negs	r3, r3
10005a1e:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
10005a20:	461a      	mov	r2, r3
10005a22:	68fb      	ldr	r3, [r7, #12]
10005a24:	60da      	str	r2, [r3, #12]
}
10005a26:	bf00      	nop
10005a28:	3714      	adds	r7, #20
10005a2a:	46bd      	mov	sp, r7
10005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
10005a30:	4770      	bx	lr

10005a32 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
10005a32:	b480      	push	{r7}
10005a34:	b083      	sub	sp, #12
10005a36:	af00      	add	r7, sp, #0
10005a38:	4603      	mov	r3, r0
10005a3a:	80fb      	strh	r3, [r7, #6]
10005a3c:	460b      	mov	r3, r1
10005a3e:	80bb      	strh	r3, [r7, #4]
10005a40:	4613      	mov	r3, r2
10005a42:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
10005a44:	88ba      	ldrh	r2, [r7, #4]
10005a46:	88fb      	ldrh	r3, [r7, #6]
10005a48:	1ad3      	subs	r3, r2, r3
10005a4a:	b29b      	uxth	r3, r3
10005a4c:	3b01      	subs	r3, #1
10005a4e:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
10005a50:	88b9      	ldrh	r1, [r7, #4]
10005a52:	887b      	ldrh	r3, [r7, #2]
10005a54:	1acb      	subs	r3, r1, r3
10005a56:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
10005a58:	429a      	cmp	r2, r3
10005a5a:	bf34      	ite	cc
10005a5c:	2301      	movcc	r3, #1
10005a5e:	2300      	movcs	r3, #0
10005a60:	b2db      	uxtb	r3, r3
}
10005a62:	4618      	mov	r0, r3
10005a64:	370c      	adds	r7, #12
10005a66:	46bd      	mov	sp, r7
10005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
10005a6c:	4770      	bx	lr

10005a6e <metal_io_virt>:
{
10005a6e:	b480      	push	{r7}
10005a70:	b083      	sub	sp, #12
10005a72:	af00      	add	r7, sp, #0
10005a74:	6078      	str	r0, [r7, #4]
10005a76:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
10005a78:	687b      	ldr	r3, [r7, #4]
10005a7a:	681b      	ldr	r3, [r3, #0]
		: NULL);
10005a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10005a80:	d00a      	beq.n	10005a98 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
10005a82:	687b      	ldr	r3, [r7, #4]
10005a84:	689b      	ldr	r3, [r3, #8]
10005a86:	683a      	ldr	r2, [r7, #0]
10005a88:	429a      	cmp	r2, r3
10005a8a:	d205      	bcs.n	10005a98 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
10005a8c:	687b      	ldr	r3, [r7, #4]
10005a8e:	681b      	ldr	r3, [r3, #0]
10005a90:	461a      	mov	r2, r3
10005a92:	683b      	ldr	r3, [r7, #0]
10005a94:	4413      	add	r3, r2
		: NULL);
10005a96:	e000      	b.n	10005a9a <metal_io_virt+0x2c>
10005a98:	2300      	movs	r3, #0
}
10005a9a:	4618      	mov	r0, r3
10005a9c:	370c      	adds	r7, #12
10005a9e:	46bd      	mov	sp, r7
10005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
10005aa4:	4770      	bx	lr

10005aa6 <metal_io_phys>:
{
10005aa6:	b580      	push	{r7, lr}
10005aa8:	b084      	sub	sp, #16
10005aaa:	af00      	add	r7, sp, #0
10005aac:	6078      	str	r0, [r7, #4]
10005aae:	6039      	str	r1, [r7, #0]
	if (!io->ops.offset_to_phys) {
10005ab0:	687b      	ldr	r3, [r7, #4]
10005ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10005ab4:	2b00      	cmp	r3, #0
10005ab6:	d123      	bne.n	10005b00 <metal_io_phys+0x5a>
		unsigned long page = (io->page_shift >=
10005ab8:	687b      	ldr	r3, [r7, #4]
10005aba:	68db      	ldr	r3, [r3, #12]
				     0 : offset >> io->page_shift);
10005abc:	2b1f      	cmp	r3, #31
10005abe:	d805      	bhi.n	10005acc <metal_io_phys+0x26>
10005ac0:	687b      	ldr	r3, [r7, #4]
10005ac2:	68db      	ldr	r3, [r3, #12]
10005ac4:	683a      	ldr	r2, [r7, #0]
10005ac6:	fa22 f303 	lsr.w	r3, r2, r3
10005aca:	e000      	b.n	10005ace <metal_io_phys+0x28>
10005acc:	2300      	movs	r3, #0
		unsigned long page = (io->page_shift >=
10005ace:	60fb      	str	r3, [r7, #12]
		return (io->physmap && offset < io->size
10005ad0:	687b      	ldr	r3, [r7, #4]
10005ad2:	685b      	ldr	r3, [r3, #4]
			: METAL_BAD_PHYS);
10005ad4:	2b00      	cmp	r3, #0
10005ad6:	d010      	beq.n	10005afa <metal_io_phys+0x54>
		return (io->physmap && offset < io->size
10005ad8:	687b      	ldr	r3, [r7, #4]
10005ada:	689b      	ldr	r3, [r3, #8]
10005adc:	683a      	ldr	r2, [r7, #0]
10005ade:	429a      	cmp	r2, r3
10005ae0:	d20b      	bcs.n	10005afa <metal_io_phys+0x54>
			? io->physmap[page] + (offset & io->page_mask)
10005ae2:	687b      	ldr	r3, [r7, #4]
10005ae4:	685a      	ldr	r2, [r3, #4]
10005ae6:	68fb      	ldr	r3, [r7, #12]
10005ae8:	009b      	lsls	r3, r3, #2
10005aea:	4413      	add	r3, r2
10005aec:	681a      	ldr	r2, [r3, #0]
10005aee:	687b      	ldr	r3, [r7, #4]
10005af0:	6919      	ldr	r1, [r3, #16]
10005af2:	683b      	ldr	r3, [r7, #0]
10005af4:	400b      	ands	r3, r1
			: METAL_BAD_PHYS);
10005af6:	4413      	add	r3, r2
10005af8:	e008      	b.n	10005b0c <metal_io_phys+0x66>
10005afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10005afe:	e005      	b.n	10005b0c <metal_io_phys+0x66>
	return io->ops.offset_to_phys(io, offset);
10005b00:	687b      	ldr	r3, [r7, #4]
10005b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10005b04:	6839      	ldr	r1, [r7, #0]
10005b06:	6878      	ldr	r0, [r7, #4]
10005b08:	4798      	blx	r3
10005b0a:	4603      	mov	r3, r0
}
10005b0c:	4618      	mov	r0, r3
10005b0e:	3710      	adds	r7, #16
10005b10:	46bd      	mov	sp, r7
10005b12:	bd80      	pop	{r7, pc}

10005b14 <metal_io_phys_to_offset>:
{
10005b14:	b580      	push	{r7, lr}
10005b16:	b084      	sub	sp, #16
10005b18:	af00      	add	r7, sp, #0
10005b1a:	6078      	str	r0, [r7, #4]
10005b1c:	6039      	str	r1, [r7, #0]
	if (!io->ops.phys_to_offset) {
10005b1e:	687b      	ldr	r3, [r7, #4]
10005b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10005b22:	2b00      	cmp	r3, #0
10005b24:	d127      	bne.n	10005b76 <metal_io_phys_to_offset+0x62>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
10005b26:	687b      	ldr	r3, [r7, #4]
10005b28:	691b      	ldr	r3, [r3, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
10005b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10005b2e:	d105      	bne.n	10005b3c <metal_io_phys_to_offset+0x28>
10005b30:	687b      	ldr	r3, [r7, #4]
10005b32:	685b      	ldr	r3, [r3, #4]
10005b34:	681b      	ldr	r3, [r3, #0]
10005b36:	683a      	ldr	r2, [r7, #0]
10005b38:	1ad3      	subs	r3, r2, r3
10005b3a:	e003      	b.n	10005b44 <metal_io_phys_to_offset+0x30>
10005b3c:	687b      	ldr	r3, [r7, #4]
10005b3e:	691a      	ldr	r2, [r3, #16]
10005b40:	683b      	ldr	r3, [r7, #0]
10005b42:	4013      	ands	r3, r2
		unsigned long offset =
10005b44:	60fb      	str	r3, [r7, #12]
			if (metal_io_phys(io, offset) == phys)
10005b46:	68f9      	ldr	r1, [r7, #12]
10005b48:	6878      	ldr	r0, [r7, #4]
10005b4a:	f7ff ffac 	bl	10005aa6 <metal_io_phys>
10005b4e:	4602      	mov	r2, r0
10005b50:	683b      	ldr	r3, [r7, #0]
10005b52:	4293      	cmp	r3, r2
10005b54:	d101      	bne.n	10005b5a <metal_io_phys_to_offset+0x46>
				return offset;
10005b56:	68fb      	ldr	r3, [r7, #12]
10005b58:	e013      	b.n	10005b82 <metal_io_phys_to_offset+0x6e>
			offset += io->page_mask + 1;
10005b5a:	687b      	ldr	r3, [r7, #4]
10005b5c:	691a      	ldr	r2, [r3, #16]
10005b5e:	68fb      	ldr	r3, [r7, #12]
10005b60:	4413      	add	r3, r2
10005b62:	3301      	adds	r3, #1
10005b64:	60fb      	str	r3, [r7, #12]
		} while (offset < io->size);
10005b66:	687b      	ldr	r3, [r7, #4]
10005b68:	689b      	ldr	r3, [r3, #8]
10005b6a:	68fa      	ldr	r2, [r7, #12]
10005b6c:	429a      	cmp	r2, r3
10005b6e:	d3ea      	bcc.n	10005b46 <metal_io_phys_to_offset+0x32>
		return METAL_BAD_OFFSET;
10005b70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10005b74:	e005      	b.n	10005b82 <metal_io_phys_to_offset+0x6e>
	return (*io->ops.phys_to_offset)(io, phys);
10005b76:	687b      	ldr	r3, [r7, #4]
10005b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10005b7a:	6839      	ldr	r1, [r7, #0]
10005b7c:	6878      	ldr	r0, [r7, #4]
10005b7e:	4798      	blx	r3
10005b80:	4603      	mov	r3, r0
}
10005b82:	4618      	mov	r0, r3
10005b84:	3710      	adds	r7, #16
10005b86:	46bd      	mov	sp, r7
10005b88:	bd80      	pop	{r7, pc}

10005b8a <metal_io_phys_to_virt>:
{
10005b8a:	b580      	push	{r7, lr}
10005b8c:	b082      	sub	sp, #8
10005b8e:	af00      	add	r7, sp, #0
10005b90:	6078      	str	r0, [r7, #4]
10005b92:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
10005b94:	6839      	ldr	r1, [r7, #0]
10005b96:	6878      	ldr	r0, [r7, #4]
10005b98:	f7ff ffbc 	bl	10005b14 <metal_io_phys_to_offset>
10005b9c:	4603      	mov	r3, r0
10005b9e:	4619      	mov	r1, r3
10005ba0:	6878      	ldr	r0, [r7, #4]
10005ba2:	f7ff ff64 	bl	10005a6e <metal_io_virt>
10005ba6:	4603      	mov	r3, r0
}
10005ba8:	4618      	mov	r0, r3
10005baa:	3708      	adds	r7, #8
10005bac:	46bd      	mov	sp, r7
10005bae:	bd80      	pop	{r7, pc}

10005bb0 <virtqueue_phys_to_virt>:
#endif /* VIRTIO_CACHED_VRINGS */

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
10005bb0:	b580      	push	{r7, lr}
10005bb2:	b084      	sub	sp, #16
10005bb4:	af00      	add	r7, sp, #0
10005bb6:	6078      	str	r0, [r7, #4]
10005bb8:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
10005bba:	687b      	ldr	r3, [r7, #4]
10005bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005bbe:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
10005bc0:	6839      	ldr	r1, [r7, #0]
10005bc2:	68f8      	ldr	r0, [r7, #12]
10005bc4:	f7ff ffe1 	bl	10005b8a <metal_io_phys_to_virt>
10005bc8:	4603      	mov	r3, r0
}
10005bca:	4618      	mov	r0, r3
10005bcc:	3710      	adds	r7, #16
10005bce:	46bd      	mov	sp, r7
10005bd0:	bd80      	pop	{r7, pc}

10005bd2 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
10005bd2:	b580      	push	{r7, lr}
10005bd4:	b086      	sub	sp, #24
10005bd6:	af00      	add	r7, sp, #0
10005bd8:	60f8      	str	r0, [r7, #12]
10005bda:	607a      	str	r2, [r7, #4]
10005bdc:	603b      	str	r3, [r7, #0]
10005bde:	460b      	mov	r3, r1
10005be0:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
10005be2:	2300      	movs	r3, #0
10005be4:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
10005be6:	697b      	ldr	r3, [r7, #20]
10005be8:	2b00      	cmp	r3, #0
10005bea:	d11e      	bne.n	10005c2a <virtqueue_create+0x58>
		vq->vq_dev = virt_dev;
10005bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005bee:	68fa      	ldr	r2, [r7, #12]
10005bf0:	601a      	str	r2, [r3, #0]
		vq->vq_name = name;
10005bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005bf4:	687a      	ldr	r2, [r7, #4]
10005bf6:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
10005bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005bfa:	897a      	ldrh	r2, [r7, #10]
10005bfc:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
10005bfe:	683b      	ldr	r3, [r7, #0]
10005c00:	891a      	ldrh	r2, [r3, #8]
10005c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005c04:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
10005c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005c08:	895a      	ldrh	r2, [r3, #10]
10005c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005c0c:	849a      	strh	r2, [r3, #36]	; 0x24
		vq->callback = callback;
10005c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005c10:	6a3a      	ldr	r2, [r7, #32]
10005c12:	60da      	str	r2, [r3, #12]
		vq->notify = notify;
10005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10005c18:	611a      	str	r2, [r3, #16]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, ring->vaddr, ring->align);
10005c1a:	683b      	ldr	r3, [r7, #0]
10005c1c:	6819      	ldr	r1, [r3, #0]
10005c1e:	683b      	ldr	r3, [r7, #0]
10005c20:	685b      	ldr	r3, [r3, #4]
10005c22:	461a      	mov	r2, r3
10005c24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
10005c26:	f000 f8ef 	bl	10005e08 <vq_ring_init>
	/*
	 * CACHE: nothing to be done here. Only desc.next is setup at this
	 * stage but that is only written by master, so no need to flush it.
	 */

	return status;
10005c2a:	697b      	ldr	r3, [r7, #20]
}
10005c2c:	4618      	mov	r0, r3
10005c2e:	3718      	adds	r7, #24
10005c30:	46bd      	mov	sp, r7
10005c32:	bd80      	pop	{r7, pc}

10005c34 <virtqueue_get_buffer_length>:

	return cookie;
}

uint32_t virtqueue_get_buffer_length(struct virtqueue *vq, uint16_t idx)
{
10005c34:	b480      	push	{r7}
10005c36:	b083      	sub	sp, #12
10005c38:	af00      	add	r7, sp, #0
10005c3a:	6078      	str	r0, [r7, #4]
10005c3c:	460b      	mov	r3, r1
10005c3e:	807b      	strh	r3, [r7, #2]
	VRING_INVALIDATE(vq->vq_ring.desc[idx].len);
	return vq->vq_ring.desc[idx].len;
10005c40:	687b      	ldr	r3, [r7, #4]
10005c42:	699a      	ldr	r2, [r3, #24]
10005c44:	887b      	ldrh	r3, [r7, #2]
10005c46:	011b      	lsls	r3, r3, #4
10005c48:	4413      	add	r3, r2
10005c4a:	689b      	ldr	r3, [r3, #8]
}
10005c4c:	4618      	mov	r0, r3
10005c4e:	370c      	adds	r7, #12
10005c50:	46bd      	mov	sp, r7
10005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
10005c56:	4770      	bx	lr

10005c58 <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
10005c58:	b580      	push	{r7, lr}
10005c5a:	b086      	sub	sp, #24
10005c5c:	af00      	add	r7, sp, #0
10005c5e:	60f8      	str	r0, [r7, #12]
10005c60:	60b9      	str	r1, [r7, #8]
10005c62:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
10005c64:	2300      	movs	r3, #0
10005c66:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
10005c68:	f3bf 8f5b 	dmb	ish

	/* Avail.idx is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->idx);
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
10005c6c:	68fb      	ldr	r3, [r7, #12]
10005c6e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
10005c70:	68fb      	ldr	r3, [r7, #12]
10005c72:	69db      	ldr	r3, [r3, #28]
10005c74:	885b      	ldrh	r3, [r3, #2]
10005c76:	b29b      	uxth	r3, r3
10005c78:	429a      	cmp	r2, r3
10005c7a:	d101      	bne.n	10005c80 <virtqueue_get_available_buffer+0x28>
		return NULL;
10005c7c:	2300      	movs	r3, #0
10005c7e:	e02f      	b.n	10005ce0 <virtqueue_get_available_buffer+0x88>
	VQUEUE_BUSY(vq);

	/* Avail.ring is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->ring[head_idx]);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
10005c80:	68fb      	ldr	r3, [r7, #12]
10005c82:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
10005c84:	1c5a      	adds	r2, r3, #1
10005c86:	b291      	uxth	r1, r2
10005c88:	68fa      	ldr	r2, [r7, #12]
10005c8a:	8611      	strh	r1, [r2, #48]	; 0x30
10005c8c:	b21a      	sxth	r2, r3
10005c8e:	68fb      	ldr	r3, [r7, #12]
10005c90:	895b      	ldrh	r3, [r3, #10]
10005c92:	3b01      	subs	r3, #1
10005c94:	b29b      	uxth	r3, r3
10005c96:	b21b      	sxth	r3, r3
10005c98:	4013      	ands	r3, r2
10005c9a:	b21b      	sxth	r3, r3
10005c9c:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
10005c9e:	68fb      	ldr	r3, [r7, #12]
10005ca0:	69da      	ldr	r2, [r3, #28]
10005ca2:	8afb      	ldrh	r3, [r7, #22]
10005ca4:	005b      	lsls	r3, r3, #1
10005ca6:	4413      	add	r3, r2
10005ca8:	889b      	ldrh	r3, [r3, #4]
10005caa:	b29a      	uxth	r2, r3
10005cac:	68bb      	ldr	r3, [r7, #8]
10005cae:	801a      	strh	r2, [r3, #0]

	/* Invalidate the desc entry written by master before accessing it */
	VRING_INVALIDATE(vq->vq_ring.desc[*avail_idx]);
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
10005cb0:	68fb      	ldr	r3, [r7, #12]
10005cb2:	699a      	ldr	r2, [r3, #24]
10005cb4:	68bb      	ldr	r3, [r7, #8]
10005cb6:	881b      	ldrh	r3, [r3, #0]
10005cb8:	011b      	lsls	r3, r3, #4
10005cba:	18d1      	adds	r1, r2, r3
10005cbc:	680a      	ldr	r2, [r1, #0]
10005cbe:	684b      	ldr	r3, [r1, #4]
10005cc0:	4613      	mov	r3, r2
10005cc2:	4619      	mov	r1, r3
10005cc4:	68f8      	ldr	r0, [r7, #12]
10005cc6:	f7ff ff73 	bl	10005bb0 <virtqueue_phys_to_virt>
10005cca:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
10005ccc:	68fb      	ldr	r3, [r7, #12]
10005cce:	699a      	ldr	r2, [r3, #24]
10005cd0:	68bb      	ldr	r3, [r7, #8]
10005cd2:	881b      	ldrh	r3, [r3, #0]
10005cd4:	011b      	lsls	r3, r3, #4
10005cd6:	4413      	add	r3, r2
10005cd8:	689a      	ldr	r2, [r3, #8]
10005cda:	687b      	ldr	r3, [r7, #4]
10005cdc:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
10005cde:	693b      	ldr	r3, [r7, #16]
}
10005ce0:	4618      	mov	r0, r3
10005ce2:	3718      	adds	r7, #24
10005ce4:	46bd      	mov	sp, r7
10005ce6:	bd80      	pop	{r7, pc}

10005ce8 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
10005ce8:	b480      	push	{r7}
10005cea:	b087      	sub	sp, #28
10005cec:	af00      	add	r7, sp, #0
10005cee:	60f8      	str	r0, [r7, #12]
10005cf0:	460b      	mov	r3, r1
10005cf2:	607a      	str	r2, [r7, #4]
10005cf4:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
10005cf6:	2300      	movs	r3, #0
10005cf8:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
10005cfa:	68fb      	ldr	r3, [r7, #12]
10005cfc:	895b      	ldrh	r3, [r3, #10]
10005cfe:	897a      	ldrh	r2, [r7, #10]
10005d00:	429a      	cmp	r2, r3
10005d02:	d901      	bls.n	10005d08 <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
10005d04:	4b18      	ldr	r3, [pc, #96]	; (10005d68 <virtqueue_add_consumed_buffer+0x80>)
10005d06:	e029      	b.n	10005d5c <virtqueue_add_consumed_buffer+0x74>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by master, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
10005d08:	68fb      	ldr	r3, [r7, #12]
10005d0a:	6a1b      	ldr	r3, [r3, #32]
10005d0c:	885b      	ldrh	r3, [r3, #2]
10005d0e:	b29b      	uxth	r3, r3
10005d10:	b21a      	sxth	r2, r3
10005d12:	68fb      	ldr	r3, [r7, #12]
10005d14:	895b      	ldrh	r3, [r3, #10]
10005d16:	3b01      	subs	r3, #1
10005d18:	b29b      	uxth	r3, r3
10005d1a:	b21b      	sxth	r3, r3
10005d1c:	4013      	ands	r3, r2
10005d1e:	b21b      	sxth	r3, r3
10005d20:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
10005d22:	68fb      	ldr	r3, [r7, #12]
10005d24:	6a1a      	ldr	r2, [r3, #32]
10005d26:	8a7b      	ldrh	r3, [r7, #18]
10005d28:	00db      	lsls	r3, r3, #3
10005d2a:	4413      	add	r3, r2
10005d2c:	3304      	adds	r3, #4
10005d2e:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
10005d30:	897a      	ldrh	r2, [r7, #10]
10005d32:	697b      	ldr	r3, [r7, #20]
10005d34:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
10005d36:	697b      	ldr	r3, [r7, #20]
10005d38:	687a      	ldr	r2, [r7, #4]
10005d3a:	605a      	str	r2, [r3, #4]

	/* We still need to flush it because this is read by master */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
10005d3c:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
10005d40:	68fb      	ldr	r3, [r7, #12]
10005d42:	6a1b      	ldr	r3, [r3, #32]
10005d44:	885a      	ldrh	r2, [r3, #2]
10005d46:	b292      	uxth	r2, r2
10005d48:	3201      	adds	r2, #1
10005d4a:	b292      	uxth	r2, r2
10005d4c:	805a      	strh	r2, [r3, #2]

	/* Used.idx is read by master, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
10005d4e:	68fb      	ldr	r3, [r7, #12]
10005d50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
10005d52:	3301      	adds	r3, #1
10005d54:	b29a      	uxth	r2, r3
10005d56:	68fb      	ldr	r3, [r7, #12]
10005d58:	84da      	strh	r2, [r3, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
10005d5a:	2300      	movs	r3, #0
}
10005d5c:	4618      	mov	r0, r3
10005d5e:	371c      	adds	r7, #28
10005d60:	46bd      	mov	sp, r7
10005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
10005d66:	4770      	bx	lr
10005d68:	fffff441 	.word	0xfffff441

10005d6c <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
10005d6c:	b480      	push	{r7}
10005d6e:	b083      	sub	sp, #12
10005d70:	af00      	add	r7, sp, #0
10005d72:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
10005d74:	6879      	ldr	r1, [r7, #4]
10005d76:	6809      	ldr	r1, [r1, #0]
10005d78:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
10005d7c:	f000 5200 	and.w	r2, r0, #536870912	; 0x20000000
10005d80:	2300      	movs	r3, #0
10005d82:	4313      	orrs	r3, r2
10005d84:	d015      	beq.n	10005db2 <virtqueue_disable_cb+0x46>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
			VRING_FLUSH(vring_used_event(&vq->vq_ring));
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10005d86:	687b      	ldr	r3, [r7, #4]
10005d88:	681b      	ldr	r3, [r3, #0]
10005d8a:	699b      	ldr	r3, [r3, #24]
10005d8c:	2b01      	cmp	r3, #1
10005d8e:	d11f      	bne.n	10005dd0 <virtqueue_disable_cb+0x64>
			vring_avail_event(&vq->vq_ring) =
			    vq->vq_available_idx - vq->vq_nentries - 1;
10005d90:	687b      	ldr	r3, [r7, #4]
10005d92:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
10005d94:	687b      	ldr	r3, [r7, #4]
10005d96:	895b      	ldrh	r3, [r3, #10]
10005d98:	1ad3      	subs	r3, r2, r3
10005d9a:	b299      	uxth	r1, r3
			vring_avail_event(&vq->vq_ring) =
10005d9c:	687b      	ldr	r3, [r7, #4]
10005d9e:	6a1a      	ldr	r2, [r3, #32]
10005da0:	687b      	ldr	r3, [r7, #4]
10005da2:	695b      	ldr	r3, [r3, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
10005da4:	3901      	subs	r1, #1
10005da6:	b289      	uxth	r1, r1
			vring_avail_event(&vq->vq_ring) =
10005da8:	00db      	lsls	r3, r3, #3
10005daa:	4413      	add	r3, r2
10005dac:	460a      	mov	r2, r1
10005dae:	809a      	strh	r2, [r3, #4]
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	VQUEUE_IDLE(vq);
}
10005db0:	e00e      	b.n	10005dd0 <virtqueue_disable_cb+0x64>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10005db2:	687b      	ldr	r3, [r7, #4]
10005db4:	681b      	ldr	r3, [r3, #0]
10005db6:	699b      	ldr	r3, [r3, #24]
10005db8:	2b01      	cmp	r3, #1
10005dba:	d109      	bne.n	10005dd0 <virtqueue_disable_cb+0x64>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
10005dbc:	687b      	ldr	r3, [r7, #4]
10005dbe:	6a1b      	ldr	r3, [r3, #32]
10005dc0:	881b      	ldrh	r3, [r3, #0]
10005dc2:	b29a      	uxth	r2, r3
10005dc4:	687b      	ldr	r3, [r7, #4]
10005dc6:	6a1b      	ldr	r3, [r3, #32]
10005dc8:	f042 0201 	orr.w	r2, r2, #1
10005dcc:	b292      	uxth	r2, r2
10005dce:	801a      	strh	r2, [r3, #0]
}
10005dd0:	bf00      	nop
10005dd2:	370c      	adds	r7, #12
10005dd4:	46bd      	mov	sp, r7
10005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
10005dda:	4770      	bx	lr

10005ddc <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
10005ddc:	b580      	push	{r7, lr}
10005dde:	b082      	sub	sp, #8
10005de0:	af00      	add	r7, sp, #0
10005de2:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
10005de4:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify(vq))
10005de8:	6878      	ldr	r0, [r7, #4]
10005dea:	f000 f835 	bl	10005e58 <vq_ring_must_notify>
10005dee:	4603      	mov	r3, r0
10005df0:	2b00      	cmp	r3, #0
10005df2:	d002      	beq.n	10005dfa <virtqueue_kick+0x1e>
		vq_ring_notify(vq);
10005df4:	6878      	ldr	r0, [r7, #4]
10005df6:	f000 f87d 	bl	10005ef4 <vq_ring_notify>

	vq->vq_queued_cnt = 0;
10005dfa:	687b      	ldr	r3, [r7, #4]
10005dfc:	2200      	movs	r2, #0
10005dfe:	84da      	strh	r2, [r3, #38]	; 0x26

	VQUEUE_IDLE(vq);
}
10005e00:	bf00      	nop
10005e02:	3708      	adds	r7, #8
10005e04:	46bd      	mov	sp, r7
10005e06:	bd80      	pop	{r7, pc}

10005e08 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
10005e08:	b580      	push	{r7, lr}
10005e0a:	b086      	sub	sp, #24
10005e0c:	af00      	add	r7, sp, #0
10005e0e:	60f8      	str	r0, [r7, #12]
10005e10:	60b9      	str	r1, [r7, #8]
10005e12:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int size;

	size = vq->vq_nentries;
10005e14:	68fb      	ldr	r3, [r7, #12]
10005e16:	895b      	ldrh	r3, [r3, #10]
10005e18:	617b      	str	r3, [r7, #20]
	vr = &vq->vq_ring;
10005e1a:	68fb      	ldr	r3, [r7, #12]
10005e1c:	3314      	adds	r3, #20
10005e1e:	613b      	str	r3, [r7, #16]

	vring_init(vr, size, ring_mem, alignment);
10005e20:	6979      	ldr	r1, [r7, #20]
10005e22:	687b      	ldr	r3, [r7, #4]
10005e24:	68ba      	ldr	r2, [r7, #8]
10005e26:	6938      	ldr	r0, [r7, #16]
10005e28:	f7ff fdda 	bl	100059e0 <vring_init>
		for (i = 0; i < size - 1; i++)
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
	}
#endif /*VIRTIO_SLAVE_ONLY*/
}
10005e2c:	bf00      	nop
10005e2e:	3718      	adds	r7, #24
10005e30:	46bd      	mov	sp, r7
10005e32:	bd80      	pop	{r7, pc}

10005e34 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
10005e34:	b580      	push	{r7, lr}
10005e36:	b082      	sub	sp, #8
10005e38:	af00      	add	r7, sp, #0
10005e3a:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
10005e3c:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
10005e40:	687b      	ldr	r3, [r7, #4]
10005e42:	68db      	ldr	r3, [r3, #12]
10005e44:	2b00      	cmp	r3, #0
10005e46:	d003      	beq.n	10005e50 <virtqueue_notification+0x1c>
		vq->callback(vq);
10005e48:	687b      	ldr	r3, [r7, #4]
10005e4a:	68db      	ldr	r3, [r3, #12]
10005e4c:	6878      	ldr	r0, [r7, #4]
10005e4e:	4798      	blx	r3
}
10005e50:	bf00      	nop
10005e52:	3708      	adds	r7, #8
10005e54:	46bd      	mov	sp, r7
10005e56:	bd80      	pop	{r7, pc}

10005e58 <vq_ring_must_notify>:
 *
 * vq_ring_must_notify
 *
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
10005e58:	b580      	push	{r7, lr}
10005e5a:	b084      	sub	sp, #16
10005e5c:	af00      	add	r7, sp, #0
10005e5e:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
10005e60:	6879      	ldr	r1, [r7, #4]
10005e62:	6809      	ldr	r1, [r1, #0]
10005e64:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
10005e68:	f000 5200 	and.w	r2, r0, #536870912	; 0x20000000
10005e6c:	2300      	movs	r3, #0
10005e6e:	4313      	orrs	r3, r2
10005e70:	d02a      	beq.n	10005ec8 <vq_ring_must_notify+0x70>
			return vring_need_event(event_idx, new_idx,
						prev_idx) != 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10005e72:	687b      	ldr	r3, [r7, #4]
10005e74:	681b      	ldr	r3, [r3, #0]
10005e76:	699b      	ldr	r3, [r3, #24]
10005e78:	2b01      	cmp	r3, #1
10005e7a:	d136      	bne.n	10005eea <vq_ring_must_notify+0x92>
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
10005e7c:	687b      	ldr	r3, [r7, #4]
10005e7e:	6a1b      	ldr	r3, [r3, #32]
10005e80:	789a      	ldrb	r2, [r3, #2]
10005e82:	78db      	ldrb	r3, [r3, #3]
10005e84:	021b      	lsls	r3, r3, #8
10005e86:	4313      	orrs	r3, r2
10005e88:	81fb      	strh	r3, [r7, #14]
			prev_idx = new_idx - vq->vq_queued_cnt;
10005e8a:	687b      	ldr	r3, [r7, #4]
10005e8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
10005e8e:	89fa      	ldrh	r2, [r7, #14]
10005e90:	1ad3      	subs	r3, r2, r3
10005e92:	81bb      	strh	r3, [r7, #12]
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
10005e94:	687b      	ldr	r3, [r7, #4]
10005e96:	69da      	ldr	r2, [r3, #28]
10005e98:	687b      	ldr	r3, [r7, #4]
10005e9a:	6959      	ldr	r1, [r3, #20]
10005e9c:	004b      	lsls	r3, r1, #1
10005e9e:	4413      	add	r3, r2
10005ea0:	7918      	ldrb	r0, [r3, #4]
10005ea2:	004b      	lsls	r3, r1, #1
10005ea4:	4413      	add	r3, r2
10005ea6:	795b      	ldrb	r3, [r3, #5]
10005ea8:	021b      	lsls	r3, r3, #8
10005eaa:	4303      	orrs	r3, r0
10005eac:	817b      	strh	r3, [r7, #10]
			return vring_need_event(event_idx, new_idx,
10005eae:	89ba      	ldrh	r2, [r7, #12]
10005eb0:	89f9      	ldrh	r1, [r7, #14]
10005eb2:	897b      	ldrh	r3, [r7, #10]
10005eb4:	4618      	mov	r0, r3
10005eb6:	f7ff fdbc 	bl	10005a32 <vring_need_event>
10005eba:	4603      	mov	r3, r0
						prev_idx) != 0;
10005ebc:	2b00      	cmp	r3, #0
10005ebe:	bf14      	ite	ne
10005ec0:	2301      	movne	r3, #1
10005ec2:	2300      	moveq	r3, #0
10005ec4:	b2db      	uxtb	r3, r3
10005ec6:	e011      	b.n	10005eec <vq_ring_must_notify+0x94>
			return (vq->vq_ring.used->flags &
				VRING_USED_F_NO_NOTIFY) == 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10005ec8:	687b      	ldr	r3, [r7, #4]
10005eca:	681b      	ldr	r3, [r3, #0]
10005ecc:	699b      	ldr	r3, [r3, #24]
10005ece:	2b01      	cmp	r3, #1
10005ed0:	d10b      	bne.n	10005eea <vq_ring_must_notify+0x92>
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
10005ed2:	687b      	ldr	r3, [r7, #4]
10005ed4:	69db      	ldr	r3, [r3, #28]
10005ed6:	881b      	ldrh	r3, [r3, #0]
10005ed8:	b29b      	uxth	r3, r3
10005eda:	f003 0301 	and.w	r3, r3, #1
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
10005ede:	2b00      	cmp	r3, #0
10005ee0:	bf0c      	ite	eq
10005ee2:	2301      	moveq	r3, #1
10005ee4:	2300      	movne	r3, #0
10005ee6:	b2db      	uxtb	r3, r3
10005ee8:	e000      	b.n	10005eec <vq_ring_must_notify+0x94>
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	return 0;
10005eea:	2300      	movs	r3, #0
}
10005eec:	4618      	mov	r0, r3
10005eee:	3710      	adds	r7, #16
10005ef0:	46bd      	mov	sp, r7
10005ef2:	bd80      	pop	{r7, pc}

10005ef4 <vq_ring_notify>:
 *
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
10005ef4:	b580      	push	{r7, lr}
10005ef6:	b082      	sub	sp, #8
10005ef8:	af00      	add	r7, sp, #0
10005efa:	6078      	str	r0, [r7, #4]
	if (vq->notify)
10005efc:	687b      	ldr	r3, [r7, #4]
10005efe:	691b      	ldr	r3, [r3, #16]
10005f00:	2b00      	cmp	r3, #0
10005f02:	d003      	beq.n	10005f0c <vq_ring_notify+0x18>
		vq->notify(vq);
10005f04:	687b      	ldr	r3, [r7, #4]
10005f06:	691b      	ldr	r3, [r3, #16]
10005f08:	6878      	ldr	r0, [r7, #4]
10005f0a:	4798      	blx	r3
}
10005f0c:	bf00      	nop
10005f0e:	3708      	adds	r7, #8
10005f10:	46bd      	mov	sp, r7
10005f12:	bd80      	pop	{r7, pc}

10005f14 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
10005f14:	b580      	push	{r7, lr}
10005f16:	b086      	sub	sp, #24
10005f18:	af02      	add	r7, sp, #8
10005f1a:	60f8      	str	r0, [r7, #12]
10005f1c:	60b9      	str	r1, [r7, #8]
10005f1e:	607a      	str	r2, [r7, #4]
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
10005f20:	68fb      	ldr	r3, [r7, #12]
10005f22:	6a59      	ldr	r1, [r3, #36]	; 0x24
10005f24:	68fb      	ldr	r3, [r7, #12]
10005f26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
10005f28:	2301      	movs	r3, #1
10005f2a:	9301      	str	r3, [sp, #4]
10005f2c:	687b      	ldr	r3, [r7, #4]
10005f2e:	9300      	str	r3, [sp, #0]
10005f30:	68bb      	ldr	r3, [r7, #8]
10005f32:	68f8      	ldr	r0, [r7, #12]
10005f34:	f7fe fe76 	bl	10004c24 <rpmsg_send_offchannel_raw>
10005f38:	4603      	mov	r3, r0
					 len, true);
}
10005f3a:	4618      	mov	r0, r3
10005f3c:	3710      	adds	r7, #16
10005f3e:	46bd      	mov	sp, r7
10005f40:	bd80      	pop	{r7, pc}

10005f42 <VIRT_UART_read_cb>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/

static int VIRT_UART_read_cb(struct rpmsg_endpoint *ept, void *data,
			    size_t len, uint32_t src, void *priv)
{
10005f42:	b580      	push	{r7, lr}
10005f44:	b086      	sub	sp, #24
10005f46:	af00      	add	r7, sp, #0
10005f48:	60f8      	str	r0, [r7, #12]
10005f4a:	60b9      	str	r1, [r7, #8]
10005f4c:	607a      	str	r2, [r7, #4]
10005f4e:	603b      	str	r3, [r7, #0]
  VIRT_UART_HandleTypeDef *huart = metal_container_of(ept, VIRT_UART_HandleTypeDef, ept);
10005f50:	68fb      	ldr	r3, [r7, #12]
10005f52:	617b      	str	r3, [r7, #20]
  (void)src;

  huart->pRxBuffPtr = data;
10005f54:	697b      	ldr	r3, [r7, #20]
10005f56:	68ba      	ldr	r2, [r7, #8]
10005f58:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxXferSize = len;
10005f5a:	687b      	ldr	r3, [r7, #4]
10005f5c:	b29a      	uxth	r2, r3
10005f5e:	697b      	ldr	r3, [r7, #20]
10005f60:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  if (huart->RxCpltCallback != NULL) {
10005f64:	697b      	ldr	r3, [r7, #20]
10005f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10005f68:	2b00      	cmp	r3, #0
10005f6a:	d003      	beq.n	10005f74 <VIRT_UART_read_cb+0x32>
    huart->RxCpltCallback(huart);
10005f6c:	697b      	ldr	r3, [r7, #20]
10005f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10005f70:	6978      	ldr	r0, [r7, #20]
10005f72:	4798      	blx	r3
  }

  return 0;
10005f74:	2300      	movs	r3, #0
}
10005f76:	4618      	mov	r0, r3
10005f78:	3718      	adds	r7, #24
10005f7a:	46bd      	mov	sp, r7
10005f7c:	bd80      	pop	{r7, pc}
	...

10005f80 <VIRT_UART_Init>:

VIRT_UART_StatusTypeDef VIRT_UART_Init(VIRT_UART_HandleTypeDef *huart)
{
10005f80:	b580      	push	{r7, lr}
10005f82:	b086      	sub	sp, #24
10005f84:	af02      	add	r7, sp, #8
10005f86:	6078      	str	r0, [r7, #4]

  int status;

  /* Create a endpoint for rmpsg communication */

  status = OPENAMP_create_endpoint(&huart->ept, RPMSG_SERVICE_NAME, RPMSG_ADDR_ANY,
10005f88:	6878      	ldr	r0, [r7, #4]
10005f8a:	2300      	movs	r3, #0
10005f8c:	9300      	str	r3, [sp, #0]
10005f8e:	4b08      	ldr	r3, [pc, #32]	; (10005fb0 <VIRT_UART_Init+0x30>)
10005f90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
10005f94:	4907      	ldr	r1, [pc, #28]	; (10005fb4 <VIRT_UART_Init+0x34>)
10005f96:	f7fa ff99 	bl	10000ecc <OPENAMP_create_endpoint>
10005f9a:	60f8      	str	r0, [r7, #12]
		  	  	  	  	  	  	   VIRT_UART_read_cb, NULL);

  if(status < 0) {
10005f9c:	68fb      	ldr	r3, [r7, #12]
10005f9e:	2b00      	cmp	r3, #0
10005fa0:	da01      	bge.n	10005fa6 <VIRT_UART_Init+0x26>
    return VIRT_UART_ERROR;
10005fa2:	2301      	movs	r3, #1
10005fa4:	e000      	b.n	10005fa8 <VIRT_UART_Init+0x28>
  }

  return VIRT_UART_OK;
10005fa6:	2300      	movs	r3, #0
}
10005fa8:	4618      	mov	r0, r3
10005faa:	3710      	adds	r7, #16
10005fac:	46bd      	mov	sp, r7
10005fae:	bd80      	pop	{r7, pc}
10005fb0:	10005f43 	.word	0x10005f43
10005fb4:	10007554 	.word	0x10007554

10005fb8 <VIRT_UART_RegisterCallback>:
}

VIRT_UART_StatusTypeDef VIRT_UART_RegisterCallback(VIRT_UART_HandleTypeDef *huart,
                                                   VIRT_UART_CallbackIDTypeDef CallbackID,
                                                   void (* pCallback)(VIRT_UART_HandleTypeDef *_huart))
{
10005fb8:	b480      	push	{r7}
10005fba:	b087      	sub	sp, #28
10005fbc:	af00      	add	r7, sp, #0
10005fbe:	60f8      	str	r0, [r7, #12]
10005fc0:	460b      	mov	r3, r1
10005fc2:	607a      	str	r2, [r7, #4]
10005fc4:	72fb      	strb	r3, [r7, #11]
  VIRT_UART_StatusTypeDef status = VIRT_UART_OK;
10005fc6:	2300      	movs	r3, #0
10005fc8:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
10005fca:	7afb      	ldrb	r3, [r7, #11]
10005fcc:	2b00      	cmp	r3, #0
10005fce:	d103      	bne.n	10005fd8 <VIRT_UART_RegisterCallback+0x20>
  {
  case VIRT_UART_RXCPLT_CB_ID :
    huart->RxCpltCallback = pCallback;
10005fd0:	68fb      	ldr	r3, [r7, #12]
10005fd2:	687a      	ldr	r2, [r7, #4]
10005fd4:	64da      	str	r2, [r3, #76]	; 0x4c
    break;
10005fd6:	e002      	b.n	10005fde <VIRT_UART_RegisterCallback+0x26>

  default :
   /* Return error status */
    status =  VIRT_UART_ERROR;
10005fd8:	2301      	movs	r3, #1
10005fda:	75fb      	strb	r3, [r7, #23]
    break;
10005fdc:	bf00      	nop
  }
  return status;
10005fde:	7dfb      	ldrb	r3, [r7, #23]
}
10005fe0:	4618      	mov	r0, r3
10005fe2:	371c      	adds	r7, #28
10005fe4:	46bd      	mov	sp, r7
10005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
10005fea:	4770      	bx	lr

10005fec <VIRT_UART_Transmit>:

VIRT_UART_StatusTypeDef VIRT_UART_Transmit(VIRT_UART_HandleTypeDef *huart, const void *pData, uint16_t Size)
{
10005fec:	b580      	push	{r7, lr}
10005fee:	b086      	sub	sp, #24
10005ff0:	af00      	add	r7, sp, #0
10005ff2:	60f8      	str	r0, [r7, #12]
10005ff4:	60b9      	str	r1, [r7, #8]
10005ff6:	4613      	mov	r3, r2
10005ff8:	80fb      	strh	r3, [r7, #6]
	int res;

	if (Size > (RPMSG_BUFFER_SIZE-16))
10005ffa:	88fb      	ldrh	r3, [r7, #6]
10005ffc:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
10006000:	d901      	bls.n	10006006 <VIRT_UART_Transmit+0x1a>
	  return VIRT_UART_ERROR;
10006002:	2301      	movs	r3, #1
10006004:	e00c      	b.n	10006020 <VIRT_UART_Transmit+0x34>

	res = OPENAMP_send(&huart->ept, pData, Size);
10006006:	68fb      	ldr	r3, [r7, #12]
10006008:	88fa      	ldrh	r2, [r7, #6]
1000600a:	68b9      	ldr	r1, [r7, #8]
1000600c:	4618      	mov	r0, r3
1000600e:	f7ff ff81 	bl	10005f14 <rpmsg_send>
10006012:	6178      	str	r0, [r7, #20]
	if (res <0) {
10006014:	697b      	ldr	r3, [r7, #20]
10006016:	2b00      	cmp	r3, #0
10006018:	da01      	bge.n	1000601e <VIRT_UART_Transmit+0x32>
		return VIRT_UART_ERROR;
1000601a:	2301      	movs	r3, #1
1000601c:	e000      	b.n	10006020 <VIRT_UART_Transmit+0x34>
	}

	return VIRT_UART_OK;
1000601e:	2300      	movs	r3, #0
}
10006020:	4618      	mov	r0, r3
10006022:	3718      	adds	r7, #24
10006024:	46bd      	mov	sp, r7
10006026:	bd80      	pop	{r7, pc}

10006028 <__assert_func>:
10006028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000602a:	4614      	mov	r4, r2
1000602c:	461a      	mov	r2, r3
1000602e:	4b09      	ldr	r3, [pc, #36]	; (10006054 <__assert_func+0x2c>)
10006030:	681b      	ldr	r3, [r3, #0]
10006032:	4605      	mov	r5, r0
10006034:	68d8      	ldr	r0, [r3, #12]
10006036:	b14c      	cbz	r4, 1000604c <__assert_func+0x24>
10006038:	4b07      	ldr	r3, [pc, #28]	; (10006058 <__assert_func+0x30>)
1000603a:	9100      	str	r1, [sp, #0]
1000603c:	e9cd 3401 	strd	r3, r4, [sp, #4]
10006040:	4906      	ldr	r1, [pc, #24]	; (1000605c <__assert_func+0x34>)
10006042:	462b      	mov	r3, r5
10006044:	f000 f95c 	bl	10006300 <fiprintf>
10006048:	f000 fa9c 	bl	10006584 <abort>
1000604c:	4b04      	ldr	r3, [pc, #16]	; (10006060 <__assert_func+0x38>)
1000604e:	461c      	mov	r4, r3
10006050:	e7f3      	b.n	1000603a <__assert_func+0x12>
10006052:	bf00      	nop
10006054:	1002012c 	.word	0x1002012c
10006058:	10007635 	.word	0x10007635
1000605c:	10007642 	.word	0x10007642
10006060:	10007670 	.word	0x10007670

10006064 <malloc>:
10006064:	4b02      	ldr	r3, [pc, #8]	; (10006070 <malloc+0xc>)
10006066:	4601      	mov	r1, r0
10006068:	6818      	ldr	r0, [r3, #0]
1000606a:	f000 b82b 	b.w	100060c4 <_malloc_r>
1000606e:	bf00      	nop
10006070:	1002012c 	.word	0x1002012c

10006074 <free>:
10006074:	4b02      	ldr	r3, [pc, #8]	; (10006080 <free+0xc>)
10006076:	4601      	mov	r1, r0
10006078:	6818      	ldr	r0, [r3, #0]
1000607a:	f000 ba8b 	b.w	10006594 <_free_r>
1000607e:	bf00      	nop
10006080:	1002012c 	.word	0x1002012c

10006084 <sbrk_aligned>:
10006084:	b570      	push	{r4, r5, r6, lr}
10006086:	4e0e      	ldr	r6, [pc, #56]	; (100060c0 <sbrk_aligned+0x3c>)
10006088:	460c      	mov	r4, r1
1000608a:	6831      	ldr	r1, [r6, #0]
1000608c:	4605      	mov	r5, r0
1000608e:	b911      	cbnz	r1, 10006096 <sbrk_aligned+0x12>
10006090:	f000 fa1c 	bl	100064cc <_sbrk_r>
10006094:	6030      	str	r0, [r6, #0]
10006096:	4621      	mov	r1, r4
10006098:	4628      	mov	r0, r5
1000609a:	f000 fa17 	bl	100064cc <_sbrk_r>
1000609e:	1c43      	adds	r3, r0, #1
100060a0:	d00a      	beq.n	100060b8 <sbrk_aligned+0x34>
100060a2:	1cc4      	adds	r4, r0, #3
100060a4:	f024 0403 	bic.w	r4, r4, #3
100060a8:	42a0      	cmp	r0, r4
100060aa:	d007      	beq.n	100060bc <sbrk_aligned+0x38>
100060ac:	1a21      	subs	r1, r4, r0
100060ae:	4628      	mov	r0, r5
100060b0:	f000 fa0c 	bl	100064cc <_sbrk_r>
100060b4:	3001      	adds	r0, #1
100060b6:	d101      	bne.n	100060bc <sbrk_aligned+0x38>
100060b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
100060bc:	4620      	mov	r0, r4
100060be:	bd70      	pop	{r4, r5, r6, pc}
100060c0:	10020d48 	.word	0x10020d48

100060c4 <_malloc_r>:
100060c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
100060c8:	1ccd      	adds	r5, r1, #3
100060ca:	f025 0503 	bic.w	r5, r5, #3
100060ce:	3508      	adds	r5, #8
100060d0:	2d0c      	cmp	r5, #12
100060d2:	bf38      	it	cc
100060d4:	250c      	movcc	r5, #12
100060d6:	2d00      	cmp	r5, #0
100060d8:	4607      	mov	r7, r0
100060da:	db01      	blt.n	100060e0 <_malloc_r+0x1c>
100060dc:	42a9      	cmp	r1, r5
100060de:	d905      	bls.n	100060ec <_malloc_r+0x28>
100060e0:	230c      	movs	r3, #12
100060e2:	603b      	str	r3, [r7, #0]
100060e4:	2600      	movs	r6, #0
100060e6:	4630      	mov	r0, r6
100060e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
100060ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 100061c0 <_malloc_r+0xfc>
100060f0:	f000 f868 	bl	100061c4 <__malloc_lock>
100060f4:	f8d8 3000 	ldr.w	r3, [r8]
100060f8:	461c      	mov	r4, r3
100060fa:	bb5c      	cbnz	r4, 10006154 <_malloc_r+0x90>
100060fc:	4629      	mov	r1, r5
100060fe:	4638      	mov	r0, r7
10006100:	f7ff ffc0 	bl	10006084 <sbrk_aligned>
10006104:	1c43      	adds	r3, r0, #1
10006106:	4604      	mov	r4, r0
10006108:	d155      	bne.n	100061b6 <_malloc_r+0xf2>
1000610a:	f8d8 4000 	ldr.w	r4, [r8]
1000610e:	4626      	mov	r6, r4
10006110:	2e00      	cmp	r6, #0
10006112:	d145      	bne.n	100061a0 <_malloc_r+0xdc>
10006114:	2c00      	cmp	r4, #0
10006116:	d048      	beq.n	100061aa <_malloc_r+0xe6>
10006118:	6823      	ldr	r3, [r4, #0]
1000611a:	4631      	mov	r1, r6
1000611c:	4638      	mov	r0, r7
1000611e:	eb04 0903 	add.w	r9, r4, r3
10006122:	f000 f9d3 	bl	100064cc <_sbrk_r>
10006126:	4581      	cmp	r9, r0
10006128:	d13f      	bne.n	100061aa <_malloc_r+0xe6>
1000612a:	6821      	ldr	r1, [r4, #0]
1000612c:	1a6d      	subs	r5, r5, r1
1000612e:	4629      	mov	r1, r5
10006130:	4638      	mov	r0, r7
10006132:	f7ff ffa7 	bl	10006084 <sbrk_aligned>
10006136:	3001      	adds	r0, #1
10006138:	d037      	beq.n	100061aa <_malloc_r+0xe6>
1000613a:	6823      	ldr	r3, [r4, #0]
1000613c:	442b      	add	r3, r5
1000613e:	6023      	str	r3, [r4, #0]
10006140:	f8d8 3000 	ldr.w	r3, [r8]
10006144:	2b00      	cmp	r3, #0
10006146:	d038      	beq.n	100061ba <_malloc_r+0xf6>
10006148:	685a      	ldr	r2, [r3, #4]
1000614a:	42a2      	cmp	r2, r4
1000614c:	d12b      	bne.n	100061a6 <_malloc_r+0xe2>
1000614e:	2200      	movs	r2, #0
10006150:	605a      	str	r2, [r3, #4]
10006152:	e00f      	b.n	10006174 <_malloc_r+0xb0>
10006154:	6822      	ldr	r2, [r4, #0]
10006156:	1b52      	subs	r2, r2, r5
10006158:	d41f      	bmi.n	1000619a <_malloc_r+0xd6>
1000615a:	2a0b      	cmp	r2, #11
1000615c:	d917      	bls.n	1000618e <_malloc_r+0xca>
1000615e:	1961      	adds	r1, r4, r5
10006160:	42a3      	cmp	r3, r4
10006162:	6025      	str	r5, [r4, #0]
10006164:	bf18      	it	ne
10006166:	6059      	strne	r1, [r3, #4]
10006168:	6863      	ldr	r3, [r4, #4]
1000616a:	bf08      	it	eq
1000616c:	f8c8 1000 	streq.w	r1, [r8]
10006170:	5162      	str	r2, [r4, r5]
10006172:	604b      	str	r3, [r1, #4]
10006174:	4638      	mov	r0, r7
10006176:	f104 060b 	add.w	r6, r4, #11
1000617a:	f000 f829 	bl	100061d0 <__malloc_unlock>
1000617e:	f026 0607 	bic.w	r6, r6, #7
10006182:	1d23      	adds	r3, r4, #4
10006184:	1af2      	subs	r2, r6, r3
10006186:	d0ae      	beq.n	100060e6 <_malloc_r+0x22>
10006188:	1b9b      	subs	r3, r3, r6
1000618a:	50a3      	str	r3, [r4, r2]
1000618c:	e7ab      	b.n	100060e6 <_malloc_r+0x22>
1000618e:	42a3      	cmp	r3, r4
10006190:	6862      	ldr	r2, [r4, #4]
10006192:	d1dd      	bne.n	10006150 <_malloc_r+0x8c>
10006194:	f8c8 2000 	str.w	r2, [r8]
10006198:	e7ec      	b.n	10006174 <_malloc_r+0xb0>
1000619a:	4623      	mov	r3, r4
1000619c:	6864      	ldr	r4, [r4, #4]
1000619e:	e7ac      	b.n	100060fa <_malloc_r+0x36>
100061a0:	4634      	mov	r4, r6
100061a2:	6876      	ldr	r6, [r6, #4]
100061a4:	e7b4      	b.n	10006110 <_malloc_r+0x4c>
100061a6:	4613      	mov	r3, r2
100061a8:	e7cc      	b.n	10006144 <_malloc_r+0x80>
100061aa:	230c      	movs	r3, #12
100061ac:	603b      	str	r3, [r7, #0]
100061ae:	4638      	mov	r0, r7
100061b0:	f000 f80e 	bl	100061d0 <__malloc_unlock>
100061b4:	e797      	b.n	100060e6 <_malloc_r+0x22>
100061b6:	6025      	str	r5, [r4, #0]
100061b8:	e7dc      	b.n	10006174 <_malloc_r+0xb0>
100061ba:	605b      	str	r3, [r3, #4]
100061bc:	deff      	udf	#255	; 0xff
100061be:	bf00      	nop
100061c0:	10020d44 	.word	0x10020d44

100061c4 <__malloc_lock>:
100061c4:	4801      	ldr	r0, [pc, #4]	; (100061cc <__malloc_lock+0x8>)
100061c6:	f000 b9cd 	b.w	10006564 <__retarget_lock_acquire_recursive>
100061ca:	bf00      	nop
100061cc:	10020e8c 	.word	0x10020e8c

100061d0 <__malloc_unlock>:
100061d0:	4801      	ldr	r0, [pc, #4]	; (100061d8 <__malloc_unlock+0x8>)
100061d2:	f000 b9c8 	b.w	10006566 <__retarget_lock_release_recursive>
100061d6:	bf00      	nop
100061d8:	10020e8c 	.word	0x10020e8c

100061dc <std>:
100061dc:	2300      	movs	r3, #0
100061de:	b510      	push	{r4, lr}
100061e0:	4604      	mov	r4, r0
100061e2:	e9c0 3300 	strd	r3, r3, [r0]
100061e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
100061ea:	6083      	str	r3, [r0, #8]
100061ec:	8181      	strh	r1, [r0, #12]
100061ee:	6643      	str	r3, [r0, #100]	; 0x64
100061f0:	81c2      	strh	r2, [r0, #14]
100061f2:	6183      	str	r3, [r0, #24]
100061f4:	4619      	mov	r1, r3
100061f6:	2208      	movs	r2, #8
100061f8:	305c      	adds	r0, #92	; 0x5c
100061fa:	f000 f906 	bl	1000640a <memset>
100061fe:	4b05      	ldr	r3, [pc, #20]	; (10006214 <std+0x38>)
10006200:	6263      	str	r3, [r4, #36]	; 0x24
10006202:	4b05      	ldr	r3, [pc, #20]	; (10006218 <std+0x3c>)
10006204:	62a3      	str	r3, [r4, #40]	; 0x28
10006206:	4b05      	ldr	r3, [pc, #20]	; (1000621c <std+0x40>)
10006208:	62e3      	str	r3, [r4, #44]	; 0x2c
1000620a:	4b05      	ldr	r3, [pc, #20]	; (10006220 <std+0x44>)
1000620c:	6224      	str	r4, [r4, #32]
1000620e:	6323      	str	r3, [r4, #48]	; 0x30
10006210:	bd10      	pop	{r4, pc}
10006212:	bf00      	nop
10006214:	10006385 	.word	0x10006385
10006218:	100063a7 	.word	0x100063a7
1000621c:	100063df 	.word	0x100063df
10006220:	10006403 	.word	0x10006403

10006224 <stdio_exit_handler>:
10006224:	4a02      	ldr	r2, [pc, #8]	; (10006230 <stdio_exit_handler+0xc>)
10006226:	4903      	ldr	r1, [pc, #12]	; (10006234 <stdio_exit_handler+0x10>)
10006228:	4803      	ldr	r0, [pc, #12]	; (10006238 <stdio_exit_handler+0x14>)
1000622a:	f000 b87b 	b.w	10006324 <_fwalk_sglue>
1000622e:	bf00      	nop
10006230:	100200d4 	.word	0x100200d4
10006234:	10006ce1 	.word	0x10006ce1
10006238:	100200e0 	.word	0x100200e0

1000623c <cleanup_stdio>:
1000623c:	6841      	ldr	r1, [r0, #4]
1000623e:	4b0c      	ldr	r3, [pc, #48]	; (10006270 <cleanup_stdio+0x34>)
10006240:	4299      	cmp	r1, r3
10006242:	b510      	push	{r4, lr}
10006244:	4604      	mov	r4, r0
10006246:	d001      	beq.n	1000624c <cleanup_stdio+0x10>
10006248:	f000 fd4a 	bl	10006ce0 <_fflush_r>
1000624c:	68a1      	ldr	r1, [r4, #8]
1000624e:	4b09      	ldr	r3, [pc, #36]	; (10006274 <cleanup_stdio+0x38>)
10006250:	4299      	cmp	r1, r3
10006252:	d002      	beq.n	1000625a <cleanup_stdio+0x1e>
10006254:	4620      	mov	r0, r4
10006256:	f000 fd43 	bl	10006ce0 <_fflush_r>
1000625a:	68e1      	ldr	r1, [r4, #12]
1000625c:	4b06      	ldr	r3, [pc, #24]	; (10006278 <cleanup_stdio+0x3c>)
1000625e:	4299      	cmp	r1, r3
10006260:	d004      	beq.n	1000626c <cleanup_stdio+0x30>
10006262:	4620      	mov	r0, r4
10006264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10006268:	f000 bd3a 	b.w	10006ce0 <_fflush_r>
1000626c:	bd10      	pop	{r4, pc}
1000626e:	bf00      	nop
10006270:	10020d4c 	.word	0x10020d4c
10006274:	10020db4 	.word	0x10020db4
10006278:	10020e1c 	.word	0x10020e1c

1000627c <global_stdio_init.part.0>:
1000627c:	b510      	push	{r4, lr}
1000627e:	4b0b      	ldr	r3, [pc, #44]	; (100062ac <global_stdio_init.part.0+0x30>)
10006280:	4c0b      	ldr	r4, [pc, #44]	; (100062b0 <global_stdio_init.part.0+0x34>)
10006282:	4a0c      	ldr	r2, [pc, #48]	; (100062b4 <global_stdio_init.part.0+0x38>)
10006284:	601a      	str	r2, [r3, #0]
10006286:	4620      	mov	r0, r4
10006288:	2200      	movs	r2, #0
1000628a:	2104      	movs	r1, #4
1000628c:	f7ff ffa6 	bl	100061dc <std>
10006290:	f104 0068 	add.w	r0, r4, #104	; 0x68
10006294:	2201      	movs	r2, #1
10006296:	2109      	movs	r1, #9
10006298:	f7ff ffa0 	bl	100061dc <std>
1000629c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
100062a0:	2202      	movs	r2, #2
100062a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100062a6:	2112      	movs	r1, #18
100062a8:	f7ff bf98 	b.w	100061dc <std>
100062ac:	10020e84 	.word	0x10020e84
100062b0:	10020d4c 	.word	0x10020d4c
100062b4:	10006225 	.word	0x10006225

100062b8 <__sfp_lock_acquire>:
100062b8:	4801      	ldr	r0, [pc, #4]	; (100062c0 <__sfp_lock_acquire+0x8>)
100062ba:	f000 b953 	b.w	10006564 <__retarget_lock_acquire_recursive>
100062be:	bf00      	nop
100062c0:	10020e8d 	.word	0x10020e8d

100062c4 <__sfp_lock_release>:
100062c4:	4801      	ldr	r0, [pc, #4]	; (100062cc <__sfp_lock_release+0x8>)
100062c6:	f000 b94e 	b.w	10006566 <__retarget_lock_release_recursive>
100062ca:	bf00      	nop
100062cc:	10020e8d 	.word	0x10020e8d

100062d0 <__sinit>:
100062d0:	b510      	push	{r4, lr}
100062d2:	4604      	mov	r4, r0
100062d4:	f7ff fff0 	bl	100062b8 <__sfp_lock_acquire>
100062d8:	6a23      	ldr	r3, [r4, #32]
100062da:	b11b      	cbz	r3, 100062e4 <__sinit+0x14>
100062dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100062e0:	f7ff bff0 	b.w	100062c4 <__sfp_lock_release>
100062e4:	4b04      	ldr	r3, [pc, #16]	; (100062f8 <__sinit+0x28>)
100062e6:	6223      	str	r3, [r4, #32]
100062e8:	4b04      	ldr	r3, [pc, #16]	; (100062fc <__sinit+0x2c>)
100062ea:	681b      	ldr	r3, [r3, #0]
100062ec:	2b00      	cmp	r3, #0
100062ee:	d1f5      	bne.n	100062dc <__sinit+0xc>
100062f0:	f7ff ffc4 	bl	1000627c <global_stdio_init.part.0>
100062f4:	e7f2      	b.n	100062dc <__sinit+0xc>
100062f6:	bf00      	nop
100062f8:	1000623d 	.word	0x1000623d
100062fc:	10020e84 	.word	0x10020e84

10006300 <fiprintf>:
10006300:	b40e      	push	{r1, r2, r3}
10006302:	b503      	push	{r0, r1, lr}
10006304:	4601      	mov	r1, r0
10006306:	ab03      	add	r3, sp, #12
10006308:	4805      	ldr	r0, [pc, #20]	; (10006320 <fiprintf+0x20>)
1000630a:	f853 2b04 	ldr.w	r2, [r3], #4
1000630e:	6800      	ldr	r0, [r0, #0]
10006310:	9301      	str	r3, [sp, #4]
10006312:	f000 f9b5 	bl	10006680 <_vfiprintf_r>
10006316:	b002      	add	sp, #8
10006318:	f85d eb04 	ldr.w	lr, [sp], #4
1000631c:	b003      	add	sp, #12
1000631e:	4770      	bx	lr
10006320:	1002012c 	.word	0x1002012c

10006324 <_fwalk_sglue>:
10006324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10006328:	4607      	mov	r7, r0
1000632a:	4688      	mov	r8, r1
1000632c:	4614      	mov	r4, r2
1000632e:	2600      	movs	r6, #0
10006330:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
10006334:	f1b9 0901 	subs.w	r9, r9, #1
10006338:	d505      	bpl.n	10006346 <_fwalk_sglue+0x22>
1000633a:	6824      	ldr	r4, [r4, #0]
1000633c:	2c00      	cmp	r4, #0
1000633e:	d1f7      	bne.n	10006330 <_fwalk_sglue+0xc>
10006340:	4630      	mov	r0, r6
10006342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
10006346:	89ab      	ldrh	r3, [r5, #12]
10006348:	2b01      	cmp	r3, #1
1000634a:	d907      	bls.n	1000635c <_fwalk_sglue+0x38>
1000634c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
10006350:	3301      	adds	r3, #1
10006352:	d003      	beq.n	1000635c <_fwalk_sglue+0x38>
10006354:	4629      	mov	r1, r5
10006356:	4638      	mov	r0, r7
10006358:	47c0      	blx	r8
1000635a:	4306      	orrs	r6, r0
1000635c:	3568      	adds	r5, #104	; 0x68
1000635e:	e7e9      	b.n	10006334 <_fwalk_sglue+0x10>

10006360 <iprintf>:
10006360:	b40f      	push	{r0, r1, r2, r3}
10006362:	b507      	push	{r0, r1, r2, lr}
10006364:	4906      	ldr	r1, [pc, #24]	; (10006380 <iprintf+0x20>)
10006366:	ab04      	add	r3, sp, #16
10006368:	6808      	ldr	r0, [r1, #0]
1000636a:	f853 2b04 	ldr.w	r2, [r3], #4
1000636e:	6881      	ldr	r1, [r0, #8]
10006370:	9301      	str	r3, [sp, #4]
10006372:	f000 f985 	bl	10006680 <_vfiprintf_r>
10006376:	b003      	add	sp, #12
10006378:	f85d eb04 	ldr.w	lr, [sp], #4
1000637c:	b004      	add	sp, #16
1000637e:	4770      	bx	lr
10006380:	1002012c 	.word	0x1002012c

10006384 <__sread>:
10006384:	b510      	push	{r4, lr}
10006386:	460c      	mov	r4, r1
10006388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000638c:	f000 f88c 	bl	100064a8 <_read_r>
10006390:	2800      	cmp	r0, #0
10006392:	bfab      	itete	ge
10006394:	6d63      	ldrge	r3, [r4, #84]	; 0x54
10006396:	89a3      	ldrhlt	r3, [r4, #12]
10006398:	181b      	addge	r3, r3, r0
1000639a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1000639e:	bfac      	ite	ge
100063a0:	6563      	strge	r3, [r4, #84]	; 0x54
100063a2:	81a3      	strhlt	r3, [r4, #12]
100063a4:	bd10      	pop	{r4, pc}

100063a6 <__swrite>:
100063a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
100063aa:	461f      	mov	r7, r3
100063ac:	898b      	ldrh	r3, [r1, #12]
100063ae:	05db      	lsls	r3, r3, #23
100063b0:	4605      	mov	r5, r0
100063b2:	460c      	mov	r4, r1
100063b4:	4616      	mov	r6, r2
100063b6:	d505      	bpl.n	100063c4 <__swrite+0x1e>
100063b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
100063bc:	2302      	movs	r3, #2
100063be:	2200      	movs	r2, #0
100063c0:	f000 f860 	bl	10006484 <_lseek_r>
100063c4:	89a3      	ldrh	r3, [r4, #12]
100063c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
100063ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
100063ce:	81a3      	strh	r3, [r4, #12]
100063d0:	4632      	mov	r2, r6
100063d2:	463b      	mov	r3, r7
100063d4:	4628      	mov	r0, r5
100063d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
100063da:	f000 b887 	b.w	100064ec <_write_r>

100063de <__sseek>:
100063de:	b510      	push	{r4, lr}
100063e0:	460c      	mov	r4, r1
100063e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
100063e6:	f000 f84d 	bl	10006484 <_lseek_r>
100063ea:	1c43      	adds	r3, r0, #1
100063ec:	89a3      	ldrh	r3, [r4, #12]
100063ee:	bf15      	itete	ne
100063f0:	6560      	strne	r0, [r4, #84]	; 0x54
100063f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
100063f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
100063fa:	81a3      	strheq	r3, [r4, #12]
100063fc:	bf18      	it	ne
100063fe:	81a3      	strhne	r3, [r4, #12]
10006400:	bd10      	pop	{r4, pc}

10006402 <__sclose>:
10006402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10006406:	f000 b82d 	b.w	10006464 <_close_r>

1000640a <memset>:
1000640a:	4402      	add	r2, r0
1000640c:	4603      	mov	r3, r0
1000640e:	4293      	cmp	r3, r2
10006410:	d100      	bne.n	10006414 <memset+0xa>
10006412:	4770      	bx	lr
10006414:	f803 1b01 	strb.w	r1, [r3], #1
10006418:	e7f9      	b.n	1000640e <memset+0x4>

1000641a <strncmp>:
1000641a:	b510      	push	{r4, lr}
1000641c:	b16a      	cbz	r2, 1000643a <strncmp+0x20>
1000641e:	3901      	subs	r1, #1
10006420:	1884      	adds	r4, r0, r2
10006422:	f810 2b01 	ldrb.w	r2, [r0], #1
10006426:	f811 3f01 	ldrb.w	r3, [r1, #1]!
1000642a:	429a      	cmp	r2, r3
1000642c:	d103      	bne.n	10006436 <strncmp+0x1c>
1000642e:	42a0      	cmp	r0, r4
10006430:	d001      	beq.n	10006436 <strncmp+0x1c>
10006432:	2a00      	cmp	r2, #0
10006434:	d1f5      	bne.n	10006422 <strncmp+0x8>
10006436:	1ad0      	subs	r0, r2, r3
10006438:	bd10      	pop	{r4, pc}
1000643a:	4610      	mov	r0, r2
1000643c:	e7fc      	b.n	10006438 <strncmp+0x1e>

1000643e <strncpy>:
1000643e:	b510      	push	{r4, lr}
10006440:	3901      	subs	r1, #1
10006442:	4603      	mov	r3, r0
10006444:	b132      	cbz	r2, 10006454 <strncpy+0x16>
10006446:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1000644a:	f803 4b01 	strb.w	r4, [r3], #1
1000644e:	3a01      	subs	r2, #1
10006450:	2c00      	cmp	r4, #0
10006452:	d1f7      	bne.n	10006444 <strncpy+0x6>
10006454:	441a      	add	r2, r3
10006456:	2100      	movs	r1, #0
10006458:	4293      	cmp	r3, r2
1000645a:	d100      	bne.n	1000645e <strncpy+0x20>
1000645c:	bd10      	pop	{r4, pc}
1000645e:	f803 1b01 	strb.w	r1, [r3], #1
10006462:	e7f9      	b.n	10006458 <strncpy+0x1a>

10006464 <_close_r>:
10006464:	b538      	push	{r3, r4, r5, lr}
10006466:	4d06      	ldr	r5, [pc, #24]	; (10006480 <_close_r+0x1c>)
10006468:	2300      	movs	r3, #0
1000646a:	4604      	mov	r4, r0
1000646c:	4608      	mov	r0, r1
1000646e:	602b      	str	r3, [r5, #0]
10006470:	f7fa fe55 	bl	1000111e <_close>
10006474:	1c43      	adds	r3, r0, #1
10006476:	d102      	bne.n	1000647e <_close_r+0x1a>
10006478:	682b      	ldr	r3, [r5, #0]
1000647a:	b103      	cbz	r3, 1000647e <_close_r+0x1a>
1000647c:	6023      	str	r3, [r4, #0]
1000647e:	bd38      	pop	{r3, r4, r5, pc}
10006480:	10020e88 	.word	0x10020e88

10006484 <_lseek_r>:
10006484:	b538      	push	{r3, r4, r5, lr}
10006486:	4d07      	ldr	r5, [pc, #28]	; (100064a4 <_lseek_r+0x20>)
10006488:	4604      	mov	r4, r0
1000648a:	4608      	mov	r0, r1
1000648c:	4611      	mov	r1, r2
1000648e:	2200      	movs	r2, #0
10006490:	602a      	str	r2, [r5, #0]
10006492:	461a      	mov	r2, r3
10006494:	f7fa fe6a 	bl	1000116c <_lseek>
10006498:	1c43      	adds	r3, r0, #1
1000649a:	d102      	bne.n	100064a2 <_lseek_r+0x1e>
1000649c:	682b      	ldr	r3, [r5, #0]
1000649e:	b103      	cbz	r3, 100064a2 <_lseek_r+0x1e>
100064a0:	6023      	str	r3, [r4, #0]
100064a2:	bd38      	pop	{r3, r4, r5, pc}
100064a4:	10020e88 	.word	0x10020e88

100064a8 <_read_r>:
100064a8:	b538      	push	{r3, r4, r5, lr}
100064aa:	4d07      	ldr	r5, [pc, #28]	; (100064c8 <_read_r+0x20>)
100064ac:	4604      	mov	r4, r0
100064ae:	4608      	mov	r0, r1
100064b0:	4611      	mov	r1, r2
100064b2:	2200      	movs	r2, #0
100064b4:	602a      	str	r2, [r5, #0]
100064b6:	461a      	mov	r2, r3
100064b8:	f7fa fdf8 	bl	100010ac <_read>
100064bc:	1c43      	adds	r3, r0, #1
100064be:	d102      	bne.n	100064c6 <_read_r+0x1e>
100064c0:	682b      	ldr	r3, [r5, #0]
100064c2:	b103      	cbz	r3, 100064c6 <_read_r+0x1e>
100064c4:	6023      	str	r3, [r4, #0]
100064c6:	bd38      	pop	{r3, r4, r5, pc}
100064c8:	10020e88 	.word	0x10020e88

100064cc <_sbrk_r>:
100064cc:	b538      	push	{r3, r4, r5, lr}
100064ce:	4d06      	ldr	r5, [pc, #24]	; (100064e8 <_sbrk_r+0x1c>)
100064d0:	2300      	movs	r3, #0
100064d2:	4604      	mov	r4, r0
100064d4:	4608      	mov	r0, r1
100064d6:	602b      	str	r3, [r5, #0]
100064d8:	f000 fd88 	bl	10006fec <_sbrk>
100064dc:	1c43      	adds	r3, r0, #1
100064de:	d102      	bne.n	100064e6 <_sbrk_r+0x1a>
100064e0:	682b      	ldr	r3, [r5, #0]
100064e2:	b103      	cbz	r3, 100064e6 <_sbrk_r+0x1a>
100064e4:	6023      	str	r3, [r4, #0]
100064e6:	bd38      	pop	{r3, r4, r5, pc}
100064e8:	10020e88 	.word	0x10020e88

100064ec <_write_r>:
100064ec:	b538      	push	{r3, r4, r5, lr}
100064ee:	4d07      	ldr	r5, [pc, #28]	; (1000650c <_write_r+0x20>)
100064f0:	4604      	mov	r4, r0
100064f2:	4608      	mov	r0, r1
100064f4:	4611      	mov	r1, r2
100064f6:	2200      	movs	r2, #0
100064f8:	602a      	str	r2, [r5, #0]
100064fa:	461a      	mov	r2, r3
100064fc:	f7fa fdf3 	bl	100010e6 <_write>
10006500:	1c43      	adds	r3, r0, #1
10006502:	d102      	bne.n	1000650a <_write_r+0x1e>
10006504:	682b      	ldr	r3, [r5, #0]
10006506:	b103      	cbz	r3, 1000650a <_write_r+0x1e>
10006508:	6023      	str	r3, [r4, #0]
1000650a:	bd38      	pop	{r3, r4, r5, pc}
1000650c:	10020e88 	.word	0x10020e88

10006510 <__errno>:
10006510:	4b01      	ldr	r3, [pc, #4]	; (10006518 <__errno+0x8>)
10006512:	6818      	ldr	r0, [r3, #0]
10006514:	4770      	bx	lr
10006516:	bf00      	nop
10006518:	1002012c 	.word	0x1002012c

1000651c <__libc_init_array>:
1000651c:	b570      	push	{r4, r5, r6, lr}
1000651e:	4d0d      	ldr	r5, [pc, #52]	; (10006554 <__libc_init_array+0x38>)
10006520:	4c0d      	ldr	r4, [pc, #52]	; (10006558 <__libc_init_array+0x3c>)
10006522:	1b64      	subs	r4, r4, r5
10006524:	10a4      	asrs	r4, r4, #2
10006526:	2600      	movs	r6, #0
10006528:	42a6      	cmp	r6, r4
1000652a:	d109      	bne.n	10006540 <__libc_init_array+0x24>
1000652c:	4d0b      	ldr	r5, [pc, #44]	; (1000655c <__libc_init_array+0x40>)
1000652e:	4c0c      	ldr	r4, [pc, #48]	; (10006560 <__libc_init_array+0x44>)
10006530:	f000 fd6a 	bl	10007008 <_init>
10006534:	1b64      	subs	r4, r4, r5
10006536:	10a4      	asrs	r4, r4, #2
10006538:	2600      	movs	r6, #0
1000653a:	42a6      	cmp	r6, r4
1000653c:	d105      	bne.n	1000654a <__libc_init_array+0x2e>
1000653e:	bd70      	pop	{r4, r5, r6, pc}
10006540:	f855 3b04 	ldr.w	r3, [r5], #4
10006544:	4798      	blx	r3
10006546:	3601      	adds	r6, #1
10006548:	e7ee      	b.n	10006528 <__libc_init_array+0xc>
1000654a:	f855 3b04 	ldr.w	r3, [r5], #4
1000654e:	4798      	blx	r3
10006550:	3601      	adds	r6, #1
10006552:	e7f2      	b.n	1000653a <__libc_init_array+0x1e>
10006554:	100076a4 	.word	0x100076a4
10006558:	100076a4 	.word	0x100076a4
1000655c:	100076a4 	.word	0x100076a4
10006560:	100076a8 	.word	0x100076a8

10006564 <__retarget_lock_acquire_recursive>:
10006564:	4770      	bx	lr

10006566 <__retarget_lock_release_recursive>:
10006566:	4770      	bx	lr

10006568 <memcpy>:
10006568:	440a      	add	r2, r1
1000656a:	4291      	cmp	r1, r2
1000656c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
10006570:	d100      	bne.n	10006574 <memcpy+0xc>
10006572:	4770      	bx	lr
10006574:	b510      	push	{r4, lr}
10006576:	f811 4b01 	ldrb.w	r4, [r1], #1
1000657a:	f803 4f01 	strb.w	r4, [r3, #1]!
1000657e:	4291      	cmp	r1, r2
10006580:	d1f9      	bne.n	10006576 <memcpy+0xe>
10006582:	bd10      	pop	{r4, pc}

10006584 <abort>:
10006584:	b508      	push	{r3, lr}
10006586:	2006      	movs	r0, #6
10006588:	f000 fc90 	bl	10006eac <raise>
1000658c:	2001      	movs	r0, #1
1000658e:	f7fa fd83 	bl	10001098 <_exit>
	...

10006594 <_free_r>:
10006594:	b537      	push	{r0, r1, r2, r4, r5, lr}
10006596:	2900      	cmp	r1, #0
10006598:	d044      	beq.n	10006624 <_free_r+0x90>
1000659a:	f851 3c04 	ldr.w	r3, [r1, #-4]
1000659e:	9001      	str	r0, [sp, #4]
100065a0:	2b00      	cmp	r3, #0
100065a2:	f1a1 0404 	sub.w	r4, r1, #4
100065a6:	bfb8      	it	lt
100065a8:	18e4      	addlt	r4, r4, r3
100065aa:	f7ff fe0b 	bl	100061c4 <__malloc_lock>
100065ae:	4a1e      	ldr	r2, [pc, #120]	; (10006628 <_free_r+0x94>)
100065b0:	9801      	ldr	r0, [sp, #4]
100065b2:	6813      	ldr	r3, [r2, #0]
100065b4:	b933      	cbnz	r3, 100065c4 <_free_r+0x30>
100065b6:	6063      	str	r3, [r4, #4]
100065b8:	6014      	str	r4, [r2, #0]
100065ba:	b003      	add	sp, #12
100065bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
100065c0:	f7ff be06 	b.w	100061d0 <__malloc_unlock>
100065c4:	42a3      	cmp	r3, r4
100065c6:	d908      	bls.n	100065da <_free_r+0x46>
100065c8:	6825      	ldr	r5, [r4, #0]
100065ca:	1961      	adds	r1, r4, r5
100065cc:	428b      	cmp	r3, r1
100065ce:	bf01      	itttt	eq
100065d0:	6819      	ldreq	r1, [r3, #0]
100065d2:	685b      	ldreq	r3, [r3, #4]
100065d4:	1949      	addeq	r1, r1, r5
100065d6:	6021      	streq	r1, [r4, #0]
100065d8:	e7ed      	b.n	100065b6 <_free_r+0x22>
100065da:	461a      	mov	r2, r3
100065dc:	685b      	ldr	r3, [r3, #4]
100065de:	b10b      	cbz	r3, 100065e4 <_free_r+0x50>
100065e0:	42a3      	cmp	r3, r4
100065e2:	d9fa      	bls.n	100065da <_free_r+0x46>
100065e4:	6811      	ldr	r1, [r2, #0]
100065e6:	1855      	adds	r5, r2, r1
100065e8:	42a5      	cmp	r5, r4
100065ea:	d10b      	bne.n	10006604 <_free_r+0x70>
100065ec:	6824      	ldr	r4, [r4, #0]
100065ee:	4421      	add	r1, r4
100065f0:	1854      	adds	r4, r2, r1
100065f2:	42a3      	cmp	r3, r4
100065f4:	6011      	str	r1, [r2, #0]
100065f6:	d1e0      	bne.n	100065ba <_free_r+0x26>
100065f8:	681c      	ldr	r4, [r3, #0]
100065fa:	685b      	ldr	r3, [r3, #4]
100065fc:	6053      	str	r3, [r2, #4]
100065fe:	440c      	add	r4, r1
10006600:	6014      	str	r4, [r2, #0]
10006602:	e7da      	b.n	100065ba <_free_r+0x26>
10006604:	d902      	bls.n	1000660c <_free_r+0x78>
10006606:	230c      	movs	r3, #12
10006608:	6003      	str	r3, [r0, #0]
1000660a:	e7d6      	b.n	100065ba <_free_r+0x26>
1000660c:	6825      	ldr	r5, [r4, #0]
1000660e:	1961      	adds	r1, r4, r5
10006610:	428b      	cmp	r3, r1
10006612:	bf04      	itt	eq
10006614:	6819      	ldreq	r1, [r3, #0]
10006616:	685b      	ldreq	r3, [r3, #4]
10006618:	6063      	str	r3, [r4, #4]
1000661a:	bf04      	itt	eq
1000661c:	1949      	addeq	r1, r1, r5
1000661e:	6021      	streq	r1, [r4, #0]
10006620:	6054      	str	r4, [r2, #4]
10006622:	e7ca      	b.n	100065ba <_free_r+0x26>
10006624:	b003      	add	sp, #12
10006626:	bd30      	pop	{r4, r5, pc}
10006628:	10020d44 	.word	0x10020d44

1000662c <__sfputc_r>:
1000662c:	6893      	ldr	r3, [r2, #8]
1000662e:	3b01      	subs	r3, #1
10006630:	2b00      	cmp	r3, #0
10006632:	b410      	push	{r4}
10006634:	6093      	str	r3, [r2, #8]
10006636:	da08      	bge.n	1000664a <__sfputc_r+0x1e>
10006638:	6994      	ldr	r4, [r2, #24]
1000663a:	42a3      	cmp	r3, r4
1000663c:	db01      	blt.n	10006642 <__sfputc_r+0x16>
1000663e:	290a      	cmp	r1, #10
10006640:	d103      	bne.n	1000664a <__sfputc_r+0x1e>
10006642:	f85d 4b04 	ldr.w	r4, [sp], #4
10006646:	f000 bb73 	b.w	10006d30 <__swbuf_r>
1000664a:	6813      	ldr	r3, [r2, #0]
1000664c:	1c58      	adds	r0, r3, #1
1000664e:	6010      	str	r0, [r2, #0]
10006650:	7019      	strb	r1, [r3, #0]
10006652:	4608      	mov	r0, r1
10006654:	f85d 4b04 	ldr.w	r4, [sp], #4
10006658:	4770      	bx	lr

1000665a <__sfputs_r>:
1000665a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000665c:	4606      	mov	r6, r0
1000665e:	460f      	mov	r7, r1
10006660:	4614      	mov	r4, r2
10006662:	18d5      	adds	r5, r2, r3
10006664:	42ac      	cmp	r4, r5
10006666:	d101      	bne.n	1000666c <__sfputs_r+0x12>
10006668:	2000      	movs	r0, #0
1000666a:	e007      	b.n	1000667c <__sfputs_r+0x22>
1000666c:	f814 1b01 	ldrb.w	r1, [r4], #1
10006670:	463a      	mov	r2, r7
10006672:	4630      	mov	r0, r6
10006674:	f7ff ffda 	bl	1000662c <__sfputc_r>
10006678:	1c43      	adds	r3, r0, #1
1000667a:	d1f3      	bne.n	10006664 <__sfputs_r+0xa>
1000667c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10006680 <_vfiprintf_r>:
10006680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10006684:	460d      	mov	r5, r1
10006686:	b09d      	sub	sp, #116	; 0x74
10006688:	4614      	mov	r4, r2
1000668a:	4698      	mov	r8, r3
1000668c:	4606      	mov	r6, r0
1000668e:	b118      	cbz	r0, 10006698 <_vfiprintf_r+0x18>
10006690:	6a03      	ldr	r3, [r0, #32]
10006692:	b90b      	cbnz	r3, 10006698 <_vfiprintf_r+0x18>
10006694:	f7ff fe1c 	bl	100062d0 <__sinit>
10006698:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1000669a:	07d9      	lsls	r1, r3, #31
1000669c:	d405      	bmi.n	100066aa <_vfiprintf_r+0x2a>
1000669e:	89ab      	ldrh	r3, [r5, #12]
100066a0:	059a      	lsls	r2, r3, #22
100066a2:	d402      	bmi.n	100066aa <_vfiprintf_r+0x2a>
100066a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
100066a6:	f7ff ff5d 	bl	10006564 <__retarget_lock_acquire_recursive>
100066aa:	89ab      	ldrh	r3, [r5, #12]
100066ac:	071b      	lsls	r3, r3, #28
100066ae:	d501      	bpl.n	100066b4 <_vfiprintf_r+0x34>
100066b0:	692b      	ldr	r3, [r5, #16]
100066b2:	b99b      	cbnz	r3, 100066dc <_vfiprintf_r+0x5c>
100066b4:	4629      	mov	r1, r5
100066b6:	4630      	mov	r0, r6
100066b8:	f000 fb78 	bl	10006dac <__swsetup_r>
100066bc:	b170      	cbz	r0, 100066dc <_vfiprintf_r+0x5c>
100066be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
100066c0:	07dc      	lsls	r4, r3, #31
100066c2:	d504      	bpl.n	100066ce <_vfiprintf_r+0x4e>
100066c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
100066c8:	b01d      	add	sp, #116	; 0x74
100066ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
100066ce:	89ab      	ldrh	r3, [r5, #12]
100066d0:	0598      	lsls	r0, r3, #22
100066d2:	d4f7      	bmi.n	100066c4 <_vfiprintf_r+0x44>
100066d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
100066d6:	f7ff ff46 	bl	10006566 <__retarget_lock_release_recursive>
100066da:	e7f3      	b.n	100066c4 <_vfiprintf_r+0x44>
100066dc:	2300      	movs	r3, #0
100066de:	9309      	str	r3, [sp, #36]	; 0x24
100066e0:	2320      	movs	r3, #32
100066e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
100066e6:	f8cd 800c 	str.w	r8, [sp, #12]
100066ea:	2330      	movs	r3, #48	; 0x30
100066ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 100068a0 <_vfiprintf_r+0x220>
100066f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
100066f4:	f04f 0901 	mov.w	r9, #1
100066f8:	4623      	mov	r3, r4
100066fa:	469a      	mov	sl, r3
100066fc:	f813 2b01 	ldrb.w	r2, [r3], #1
10006700:	b10a      	cbz	r2, 10006706 <_vfiprintf_r+0x86>
10006702:	2a25      	cmp	r2, #37	; 0x25
10006704:	d1f9      	bne.n	100066fa <_vfiprintf_r+0x7a>
10006706:	ebba 0b04 	subs.w	fp, sl, r4
1000670a:	d00b      	beq.n	10006724 <_vfiprintf_r+0xa4>
1000670c:	465b      	mov	r3, fp
1000670e:	4622      	mov	r2, r4
10006710:	4629      	mov	r1, r5
10006712:	4630      	mov	r0, r6
10006714:	f7ff ffa1 	bl	1000665a <__sfputs_r>
10006718:	3001      	adds	r0, #1
1000671a:	f000 80a9 	beq.w	10006870 <_vfiprintf_r+0x1f0>
1000671e:	9a09      	ldr	r2, [sp, #36]	; 0x24
10006720:	445a      	add	r2, fp
10006722:	9209      	str	r2, [sp, #36]	; 0x24
10006724:	f89a 3000 	ldrb.w	r3, [sl]
10006728:	2b00      	cmp	r3, #0
1000672a:	f000 80a1 	beq.w	10006870 <_vfiprintf_r+0x1f0>
1000672e:	2300      	movs	r3, #0
10006730:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
10006734:	e9cd 2305 	strd	r2, r3, [sp, #20]
10006738:	f10a 0a01 	add.w	sl, sl, #1
1000673c:	9304      	str	r3, [sp, #16]
1000673e:	9307      	str	r3, [sp, #28]
10006740:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
10006744:	931a      	str	r3, [sp, #104]	; 0x68
10006746:	4654      	mov	r4, sl
10006748:	2205      	movs	r2, #5
1000674a:	f814 1b01 	ldrb.w	r1, [r4], #1
1000674e:	4854      	ldr	r0, [pc, #336]	; (100068a0 <_vfiprintf_r+0x220>)
10006750:	f7f9 fc8e 	bl	10000070 <memchr>
10006754:	9a04      	ldr	r2, [sp, #16]
10006756:	b9d8      	cbnz	r0, 10006790 <_vfiprintf_r+0x110>
10006758:	06d1      	lsls	r1, r2, #27
1000675a:	bf44      	itt	mi
1000675c:	2320      	movmi	r3, #32
1000675e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
10006762:	0713      	lsls	r3, r2, #28
10006764:	bf44      	itt	mi
10006766:	232b      	movmi	r3, #43	; 0x2b
10006768:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
1000676c:	f89a 3000 	ldrb.w	r3, [sl]
10006770:	2b2a      	cmp	r3, #42	; 0x2a
10006772:	d015      	beq.n	100067a0 <_vfiprintf_r+0x120>
10006774:	9a07      	ldr	r2, [sp, #28]
10006776:	4654      	mov	r4, sl
10006778:	2000      	movs	r0, #0
1000677a:	f04f 0c0a 	mov.w	ip, #10
1000677e:	4621      	mov	r1, r4
10006780:	f811 3b01 	ldrb.w	r3, [r1], #1
10006784:	3b30      	subs	r3, #48	; 0x30
10006786:	2b09      	cmp	r3, #9
10006788:	d94d      	bls.n	10006826 <_vfiprintf_r+0x1a6>
1000678a:	b1b0      	cbz	r0, 100067ba <_vfiprintf_r+0x13a>
1000678c:	9207      	str	r2, [sp, #28]
1000678e:	e014      	b.n	100067ba <_vfiprintf_r+0x13a>
10006790:	eba0 0308 	sub.w	r3, r0, r8
10006794:	fa09 f303 	lsl.w	r3, r9, r3
10006798:	4313      	orrs	r3, r2
1000679a:	9304      	str	r3, [sp, #16]
1000679c:	46a2      	mov	sl, r4
1000679e:	e7d2      	b.n	10006746 <_vfiprintf_r+0xc6>
100067a0:	9b03      	ldr	r3, [sp, #12]
100067a2:	1d19      	adds	r1, r3, #4
100067a4:	681b      	ldr	r3, [r3, #0]
100067a6:	9103      	str	r1, [sp, #12]
100067a8:	2b00      	cmp	r3, #0
100067aa:	bfbb      	ittet	lt
100067ac:	425b      	neglt	r3, r3
100067ae:	f042 0202 	orrlt.w	r2, r2, #2
100067b2:	9307      	strge	r3, [sp, #28]
100067b4:	9307      	strlt	r3, [sp, #28]
100067b6:	bfb8      	it	lt
100067b8:	9204      	strlt	r2, [sp, #16]
100067ba:	7823      	ldrb	r3, [r4, #0]
100067bc:	2b2e      	cmp	r3, #46	; 0x2e
100067be:	d10c      	bne.n	100067da <_vfiprintf_r+0x15a>
100067c0:	7863      	ldrb	r3, [r4, #1]
100067c2:	2b2a      	cmp	r3, #42	; 0x2a
100067c4:	d134      	bne.n	10006830 <_vfiprintf_r+0x1b0>
100067c6:	9b03      	ldr	r3, [sp, #12]
100067c8:	1d1a      	adds	r2, r3, #4
100067ca:	681b      	ldr	r3, [r3, #0]
100067cc:	9203      	str	r2, [sp, #12]
100067ce:	2b00      	cmp	r3, #0
100067d0:	bfb8      	it	lt
100067d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
100067d6:	3402      	adds	r4, #2
100067d8:	9305      	str	r3, [sp, #20]
100067da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 100068b0 <_vfiprintf_r+0x230>
100067de:	7821      	ldrb	r1, [r4, #0]
100067e0:	2203      	movs	r2, #3
100067e2:	4650      	mov	r0, sl
100067e4:	f7f9 fc44 	bl	10000070 <memchr>
100067e8:	b138      	cbz	r0, 100067fa <_vfiprintf_r+0x17a>
100067ea:	9b04      	ldr	r3, [sp, #16]
100067ec:	eba0 000a 	sub.w	r0, r0, sl
100067f0:	2240      	movs	r2, #64	; 0x40
100067f2:	4082      	lsls	r2, r0
100067f4:	4313      	orrs	r3, r2
100067f6:	3401      	adds	r4, #1
100067f8:	9304      	str	r3, [sp, #16]
100067fa:	f814 1b01 	ldrb.w	r1, [r4], #1
100067fe:	4829      	ldr	r0, [pc, #164]	; (100068a4 <_vfiprintf_r+0x224>)
10006800:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
10006804:	2206      	movs	r2, #6
10006806:	f7f9 fc33 	bl	10000070 <memchr>
1000680a:	2800      	cmp	r0, #0
1000680c:	d03f      	beq.n	1000688e <_vfiprintf_r+0x20e>
1000680e:	4b26      	ldr	r3, [pc, #152]	; (100068a8 <_vfiprintf_r+0x228>)
10006810:	bb1b      	cbnz	r3, 1000685a <_vfiprintf_r+0x1da>
10006812:	9b03      	ldr	r3, [sp, #12]
10006814:	3307      	adds	r3, #7
10006816:	f023 0307 	bic.w	r3, r3, #7
1000681a:	3308      	adds	r3, #8
1000681c:	9303      	str	r3, [sp, #12]
1000681e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10006820:	443b      	add	r3, r7
10006822:	9309      	str	r3, [sp, #36]	; 0x24
10006824:	e768      	b.n	100066f8 <_vfiprintf_r+0x78>
10006826:	fb0c 3202 	mla	r2, ip, r2, r3
1000682a:	460c      	mov	r4, r1
1000682c:	2001      	movs	r0, #1
1000682e:	e7a6      	b.n	1000677e <_vfiprintf_r+0xfe>
10006830:	2300      	movs	r3, #0
10006832:	3401      	adds	r4, #1
10006834:	9305      	str	r3, [sp, #20]
10006836:	4619      	mov	r1, r3
10006838:	f04f 0c0a 	mov.w	ip, #10
1000683c:	4620      	mov	r0, r4
1000683e:	f810 2b01 	ldrb.w	r2, [r0], #1
10006842:	3a30      	subs	r2, #48	; 0x30
10006844:	2a09      	cmp	r2, #9
10006846:	d903      	bls.n	10006850 <_vfiprintf_r+0x1d0>
10006848:	2b00      	cmp	r3, #0
1000684a:	d0c6      	beq.n	100067da <_vfiprintf_r+0x15a>
1000684c:	9105      	str	r1, [sp, #20]
1000684e:	e7c4      	b.n	100067da <_vfiprintf_r+0x15a>
10006850:	fb0c 2101 	mla	r1, ip, r1, r2
10006854:	4604      	mov	r4, r0
10006856:	2301      	movs	r3, #1
10006858:	e7f0      	b.n	1000683c <_vfiprintf_r+0x1bc>
1000685a:	ab03      	add	r3, sp, #12
1000685c:	9300      	str	r3, [sp, #0]
1000685e:	462a      	mov	r2, r5
10006860:	4b12      	ldr	r3, [pc, #72]	; (100068ac <_vfiprintf_r+0x22c>)
10006862:	a904      	add	r1, sp, #16
10006864:	4630      	mov	r0, r6
10006866:	f3af 8000 	nop.w
1000686a:	4607      	mov	r7, r0
1000686c:	1c78      	adds	r0, r7, #1
1000686e:	d1d6      	bne.n	1000681e <_vfiprintf_r+0x19e>
10006870:	6e6b      	ldr	r3, [r5, #100]	; 0x64
10006872:	07d9      	lsls	r1, r3, #31
10006874:	d405      	bmi.n	10006882 <_vfiprintf_r+0x202>
10006876:	89ab      	ldrh	r3, [r5, #12]
10006878:	059a      	lsls	r2, r3, #22
1000687a:	d402      	bmi.n	10006882 <_vfiprintf_r+0x202>
1000687c:	6da8      	ldr	r0, [r5, #88]	; 0x58
1000687e:	f7ff fe72 	bl	10006566 <__retarget_lock_release_recursive>
10006882:	89ab      	ldrh	r3, [r5, #12]
10006884:	065b      	lsls	r3, r3, #25
10006886:	f53f af1d 	bmi.w	100066c4 <_vfiprintf_r+0x44>
1000688a:	9809      	ldr	r0, [sp, #36]	; 0x24
1000688c:	e71c      	b.n	100066c8 <_vfiprintf_r+0x48>
1000688e:	ab03      	add	r3, sp, #12
10006890:	9300      	str	r3, [sp, #0]
10006892:	462a      	mov	r2, r5
10006894:	4b05      	ldr	r3, [pc, #20]	; (100068ac <_vfiprintf_r+0x22c>)
10006896:	a904      	add	r1, sp, #16
10006898:	4630      	mov	r0, r6
1000689a:	f000 f879 	bl	10006990 <_printf_i>
1000689e:	e7e4      	b.n	1000686a <_vfiprintf_r+0x1ea>
100068a0:	10007671 	.word	0x10007671
100068a4:	1000767b 	.word	0x1000767b
100068a8:	00000000 	.word	0x00000000
100068ac:	1000665b 	.word	0x1000665b
100068b0:	10007677 	.word	0x10007677

100068b4 <_printf_common>:
100068b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
100068b8:	4616      	mov	r6, r2
100068ba:	4699      	mov	r9, r3
100068bc:	688a      	ldr	r2, [r1, #8]
100068be:	690b      	ldr	r3, [r1, #16]
100068c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
100068c4:	4293      	cmp	r3, r2
100068c6:	bfb8      	it	lt
100068c8:	4613      	movlt	r3, r2
100068ca:	6033      	str	r3, [r6, #0]
100068cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
100068d0:	4607      	mov	r7, r0
100068d2:	460c      	mov	r4, r1
100068d4:	b10a      	cbz	r2, 100068da <_printf_common+0x26>
100068d6:	3301      	adds	r3, #1
100068d8:	6033      	str	r3, [r6, #0]
100068da:	6823      	ldr	r3, [r4, #0]
100068dc:	0699      	lsls	r1, r3, #26
100068de:	bf42      	ittt	mi
100068e0:	6833      	ldrmi	r3, [r6, #0]
100068e2:	3302      	addmi	r3, #2
100068e4:	6033      	strmi	r3, [r6, #0]
100068e6:	6825      	ldr	r5, [r4, #0]
100068e8:	f015 0506 	ands.w	r5, r5, #6
100068ec:	d106      	bne.n	100068fc <_printf_common+0x48>
100068ee:	f104 0a19 	add.w	sl, r4, #25
100068f2:	68e3      	ldr	r3, [r4, #12]
100068f4:	6832      	ldr	r2, [r6, #0]
100068f6:	1a9b      	subs	r3, r3, r2
100068f8:	42ab      	cmp	r3, r5
100068fa:	dc26      	bgt.n	1000694a <_printf_common+0x96>
100068fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
10006900:	1e13      	subs	r3, r2, #0
10006902:	6822      	ldr	r2, [r4, #0]
10006904:	bf18      	it	ne
10006906:	2301      	movne	r3, #1
10006908:	0692      	lsls	r2, r2, #26
1000690a:	d42b      	bmi.n	10006964 <_printf_common+0xb0>
1000690c:	f104 0243 	add.w	r2, r4, #67	; 0x43
10006910:	4649      	mov	r1, r9
10006912:	4638      	mov	r0, r7
10006914:	47c0      	blx	r8
10006916:	3001      	adds	r0, #1
10006918:	d01e      	beq.n	10006958 <_printf_common+0xa4>
1000691a:	6823      	ldr	r3, [r4, #0]
1000691c:	6922      	ldr	r2, [r4, #16]
1000691e:	f003 0306 	and.w	r3, r3, #6
10006922:	2b04      	cmp	r3, #4
10006924:	bf02      	ittt	eq
10006926:	68e5      	ldreq	r5, [r4, #12]
10006928:	6833      	ldreq	r3, [r6, #0]
1000692a:	1aed      	subeq	r5, r5, r3
1000692c:	68a3      	ldr	r3, [r4, #8]
1000692e:	bf0c      	ite	eq
10006930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
10006934:	2500      	movne	r5, #0
10006936:	4293      	cmp	r3, r2
10006938:	bfc4      	itt	gt
1000693a:	1a9b      	subgt	r3, r3, r2
1000693c:	18ed      	addgt	r5, r5, r3
1000693e:	2600      	movs	r6, #0
10006940:	341a      	adds	r4, #26
10006942:	42b5      	cmp	r5, r6
10006944:	d11a      	bne.n	1000697c <_printf_common+0xc8>
10006946:	2000      	movs	r0, #0
10006948:	e008      	b.n	1000695c <_printf_common+0xa8>
1000694a:	2301      	movs	r3, #1
1000694c:	4652      	mov	r2, sl
1000694e:	4649      	mov	r1, r9
10006950:	4638      	mov	r0, r7
10006952:	47c0      	blx	r8
10006954:	3001      	adds	r0, #1
10006956:	d103      	bne.n	10006960 <_printf_common+0xac>
10006958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1000695c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10006960:	3501      	adds	r5, #1
10006962:	e7c6      	b.n	100068f2 <_printf_common+0x3e>
10006964:	18e1      	adds	r1, r4, r3
10006966:	1c5a      	adds	r2, r3, #1
10006968:	2030      	movs	r0, #48	; 0x30
1000696a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1000696e:	4422      	add	r2, r4
10006970:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
10006974:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
10006978:	3302      	adds	r3, #2
1000697a:	e7c7      	b.n	1000690c <_printf_common+0x58>
1000697c:	2301      	movs	r3, #1
1000697e:	4622      	mov	r2, r4
10006980:	4649      	mov	r1, r9
10006982:	4638      	mov	r0, r7
10006984:	47c0      	blx	r8
10006986:	3001      	adds	r0, #1
10006988:	d0e6      	beq.n	10006958 <_printf_common+0xa4>
1000698a:	3601      	adds	r6, #1
1000698c:	e7d9      	b.n	10006942 <_printf_common+0x8e>
	...

10006990 <_printf_i>:
10006990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
10006994:	7e0f      	ldrb	r7, [r1, #24]
10006996:	9d0c      	ldr	r5, [sp, #48]	; 0x30
10006998:	2f78      	cmp	r7, #120	; 0x78
1000699a:	4691      	mov	r9, r2
1000699c:	4680      	mov	r8, r0
1000699e:	460c      	mov	r4, r1
100069a0:	469a      	mov	sl, r3
100069a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
100069a6:	d807      	bhi.n	100069b8 <_printf_i+0x28>
100069a8:	2f62      	cmp	r7, #98	; 0x62
100069aa:	d80a      	bhi.n	100069c2 <_printf_i+0x32>
100069ac:	2f00      	cmp	r7, #0
100069ae:	f000 80d4 	beq.w	10006b5a <_printf_i+0x1ca>
100069b2:	2f58      	cmp	r7, #88	; 0x58
100069b4:	f000 80c0 	beq.w	10006b38 <_printf_i+0x1a8>
100069b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
100069bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
100069c0:	e03a      	b.n	10006a38 <_printf_i+0xa8>
100069c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
100069c6:	2b15      	cmp	r3, #21
100069c8:	d8f6      	bhi.n	100069b8 <_printf_i+0x28>
100069ca:	a101      	add	r1, pc, #4	; (adr r1, 100069d0 <_printf_i+0x40>)
100069cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
100069d0:	10006a29 	.word	0x10006a29
100069d4:	10006a3d 	.word	0x10006a3d
100069d8:	100069b9 	.word	0x100069b9
100069dc:	100069b9 	.word	0x100069b9
100069e0:	100069b9 	.word	0x100069b9
100069e4:	100069b9 	.word	0x100069b9
100069e8:	10006a3d 	.word	0x10006a3d
100069ec:	100069b9 	.word	0x100069b9
100069f0:	100069b9 	.word	0x100069b9
100069f4:	100069b9 	.word	0x100069b9
100069f8:	100069b9 	.word	0x100069b9
100069fc:	10006b41 	.word	0x10006b41
10006a00:	10006a69 	.word	0x10006a69
10006a04:	10006afb 	.word	0x10006afb
10006a08:	100069b9 	.word	0x100069b9
10006a0c:	100069b9 	.word	0x100069b9
10006a10:	10006b63 	.word	0x10006b63
10006a14:	100069b9 	.word	0x100069b9
10006a18:	10006a69 	.word	0x10006a69
10006a1c:	100069b9 	.word	0x100069b9
10006a20:	100069b9 	.word	0x100069b9
10006a24:	10006b03 	.word	0x10006b03
10006a28:	682b      	ldr	r3, [r5, #0]
10006a2a:	1d1a      	adds	r2, r3, #4
10006a2c:	681b      	ldr	r3, [r3, #0]
10006a2e:	602a      	str	r2, [r5, #0]
10006a30:	f104 0542 	add.w	r5, r4, #66	; 0x42
10006a34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
10006a38:	2301      	movs	r3, #1
10006a3a:	e09f      	b.n	10006b7c <_printf_i+0x1ec>
10006a3c:	6820      	ldr	r0, [r4, #0]
10006a3e:	682b      	ldr	r3, [r5, #0]
10006a40:	0607      	lsls	r7, r0, #24
10006a42:	f103 0104 	add.w	r1, r3, #4
10006a46:	6029      	str	r1, [r5, #0]
10006a48:	d501      	bpl.n	10006a4e <_printf_i+0xbe>
10006a4a:	681e      	ldr	r6, [r3, #0]
10006a4c:	e003      	b.n	10006a56 <_printf_i+0xc6>
10006a4e:	0646      	lsls	r6, r0, #25
10006a50:	d5fb      	bpl.n	10006a4a <_printf_i+0xba>
10006a52:	f9b3 6000 	ldrsh.w	r6, [r3]
10006a56:	2e00      	cmp	r6, #0
10006a58:	da03      	bge.n	10006a62 <_printf_i+0xd2>
10006a5a:	232d      	movs	r3, #45	; 0x2d
10006a5c:	4276      	negs	r6, r6
10006a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
10006a62:	485a      	ldr	r0, [pc, #360]	; (10006bcc <_printf_i+0x23c>)
10006a64:	230a      	movs	r3, #10
10006a66:	e012      	b.n	10006a8e <_printf_i+0xfe>
10006a68:	682b      	ldr	r3, [r5, #0]
10006a6a:	6820      	ldr	r0, [r4, #0]
10006a6c:	1d19      	adds	r1, r3, #4
10006a6e:	6029      	str	r1, [r5, #0]
10006a70:	0605      	lsls	r5, r0, #24
10006a72:	d501      	bpl.n	10006a78 <_printf_i+0xe8>
10006a74:	681e      	ldr	r6, [r3, #0]
10006a76:	e002      	b.n	10006a7e <_printf_i+0xee>
10006a78:	0641      	lsls	r1, r0, #25
10006a7a:	d5fb      	bpl.n	10006a74 <_printf_i+0xe4>
10006a7c:	881e      	ldrh	r6, [r3, #0]
10006a7e:	4853      	ldr	r0, [pc, #332]	; (10006bcc <_printf_i+0x23c>)
10006a80:	2f6f      	cmp	r7, #111	; 0x6f
10006a82:	bf0c      	ite	eq
10006a84:	2308      	moveq	r3, #8
10006a86:	230a      	movne	r3, #10
10006a88:	2100      	movs	r1, #0
10006a8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
10006a8e:	6865      	ldr	r5, [r4, #4]
10006a90:	60a5      	str	r5, [r4, #8]
10006a92:	2d00      	cmp	r5, #0
10006a94:	bfa2      	ittt	ge
10006a96:	6821      	ldrge	r1, [r4, #0]
10006a98:	f021 0104 	bicge.w	r1, r1, #4
10006a9c:	6021      	strge	r1, [r4, #0]
10006a9e:	b90e      	cbnz	r6, 10006aa4 <_printf_i+0x114>
10006aa0:	2d00      	cmp	r5, #0
10006aa2:	d04b      	beq.n	10006b3c <_printf_i+0x1ac>
10006aa4:	4615      	mov	r5, r2
10006aa6:	fbb6 f1f3 	udiv	r1, r6, r3
10006aaa:	fb03 6711 	mls	r7, r3, r1, r6
10006aae:	5dc7      	ldrb	r7, [r0, r7]
10006ab0:	f805 7d01 	strb.w	r7, [r5, #-1]!
10006ab4:	4637      	mov	r7, r6
10006ab6:	42bb      	cmp	r3, r7
10006ab8:	460e      	mov	r6, r1
10006aba:	d9f4      	bls.n	10006aa6 <_printf_i+0x116>
10006abc:	2b08      	cmp	r3, #8
10006abe:	d10b      	bne.n	10006ad8 <_printf_i+0x148>
10006ac0:	6823      	ldr	r3, [r4, #0]
10006ac2:	07de      	lsls	r6, r3, #31
10006ac4:	d508      	bpl.n	10006ad8 <_printf_i+0x148>
10006ac6:	6923      	ldr	r3, [r4, #16]
10006ac8:	6861      	ldr	r1, [r4, #4]
10006aca:	4299      	cmp	r1, r3
10006acc:	bfde      	ittt	le
10006ace:	2330      	movle	r3, #48	; 0x30
10006ad0:	f805 3c01 	strble.w	r3, [r5, #-1]
10006ad4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
10006ad8:	1b52      	subs	r2, r2, r5
10006ada:	6122      	str	r2, [r4, #16]
10006adc:	f8cd a000 	str.w	sl, [sp]
10006ae0:	464b      	mov	r3, r9
10006ae2:	aa03      	add	r2, sp, #12
10006ae4:	4621      	mov	r1, r4
10006ae6:	4640      	mov	r0, r8
10006ae8:	f7ff fee4 	bl	100068b4 <_printf_common>
10006aec:	3001      	adds	r0, #1
10006aee:	d14a      	bne.n	10006b86 <_printf_i+0x1f6>
10006af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
10006af4:	b004      	add	sp, #16
10006af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10006afa:	6823      	ldr	r3, [r4, #0]
10006afc:	f043 0320 	orr.w	r3, r3, #32
10006b00:	6023      	str	r3, [r4, #0]
10006b02:	4833      	ldr	r0, [pc, #204]	; (10006bd0 <_printf_i+0x240>)
10006b04:	2778      	movs	r7, #120	; 0x78
10006b06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
10006b0a:	6823      	ldr	r3, [r4, #0]
10006b0c:	6829      	ldr	r1, [r5, #0]
10006b0e:	061f      	lsls	r7, r3, #24
10006b10:	f851 6b04 	ldr.w	r6, [r1], #4
10006b14:	d402      	bmi.n	10006b1c <_printf_i+0x18c>
10006b16:	065f      	lsls	r7, r3, #25
10006b18:	bf48      	it	mi
10006b1a:	b2b6      	uxthmi	r6, r6
10006b1c:	07df      	lsls	r7, r3, #31
10006b1e:	bf48      	it	mi
10006b20:	f043 0320 	orrmi.w	r3, r3, #32
10006b24:	6029      	str	r1, [r5, #0]
10006b26:	bf48      	it	mi
10006b28:	6023      	strmi	r3, [r4, #0]
10006b2a:	b91e      	cbnz	r6, 10006b34 <_printf_i+0x1a4>
10006b2c:	6823      	ldr	r3, [r4, #0]
10006b2e:	f023 0320 	bic.w	r3, r3, #32
10006b32:	6023      	str	r3, [r4, #0]
10006b34:	2310      	movs	r3, #16
10006b36:	e7a7      	b.n	10006a88 <_printf_i+0xf8>
10006b38:	4824      	ldr	r0, [pc, #144]	; (10006bcc <_printf_i+0x23c>)
10006b3a:	e7e4      	b.n	10006b06 <_printf_i+0x176>
10006b3c:	4615      	mov	r5, r2
10006b3e:	e7bd      	b.n	10006abc <_printf_i+0x12c>
10006b40:	682b      	ldr	r3, [r5, #0]
10006b42:	6826      	ldr	r6, [r4, #0]
10006b44:	6961      	ldr	r1, [r4, #20]
10006b46:	1d18      	adds	r0, r3, #4
10006b48:	6028      	str	r0, [r5, #0]
10006b4a:	0635      	lsls	r5, r6, #24
10006b4c:	681b      	ldr	r3, [r3, #0]
10006b4e:	d501      	bpl.n	10006b54 <_printf_i+0x1c4>
10006b50:	6019      	str	r1, [r3, #0]
10006b52:	e002      	b.n	10006b5a <_printf_i+0x1ca>
10006b54:	0670      	lsls	r0, r6, #25
10006b56:	d5fb      	bpl.n	10006b50 <_printf_i+0x1c0>
10006b58:	8019      	strh	r1, [r3, #0]
10006b5a:	2300      	movs	r3, #0
10006b5c:	6123      	str	r3, [r4, #16]
10006b5e:	4615      	mov	r5, r2
10006b60:	e7bc      	b.n	10006adc <_printf_i+0x14c>
10006b62:	682b      	ldr	r3, [r5, #0]
10006b64:	1d1a      	adds	r2, r3, #4
10006b66:	602a      	str	r2, [r5, #0]
10006b68:	681d      	ldr	r5, [r3, #0]
10006b6a:	6862      	ldr	r2, [r4, #4]
10006b6c:	2100      	movs	r1, #0
10006b6e:	4628      	mov	r0, r5
10006b70:	f7f9 fa7e 	bl	10000070 <memchr>
10006b74:	b108      	cbz	r0, 10006b7a <_printf_i+0x1ea>
10006b76:	1b40      	subs	r0, r0, r5
10006b78:	6060      	str	r0, [r4, #4]
10006b7a:	6863      	ldr	r3, [r4, #4]
10006b7c:	6123      	str	r3, [r4, #16]
10006b7e:	2300      	movs	r3, #0
10006b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
10006b84:	e7aa      	b.n	10006adc <_printf_i+0x14c>
10006b86:	6923      	ldr	r3, [r4, #16]
10006b88:	462a      	mov	r2, r5
10006b8a:	4649      	mov	r1, r9
10006b8c:	4640      	mov	r0, r8
10006b8e:	47d0      	blx	sl
10006b90:	3001      	adds	r0, #1
10006b92:	d0ad      	beq.n	10006af0 <_printf_i+0x160>
10006b94:	6823      	ldr	r3, [r4, #0]
10006b96:	079b      	lsls	r3, r3, #30
10006b98:	d413      	bmi.n	10006bc2 <_printf_i+0x232>
10006b9a:	68e0      	ldr	r0, [r4, #12]
10006b9c:	9b03      	ldr	r3, [sp, #12]
10006b9e:	4298      	cmp	r0, r3
10006ba0:	bfb8      	it	lt
10006ba2:	4618      	movlt	r0, r3
10006ba4:	e7a6      	b.n	10006af4 <_printf_i+0x164>
10006ba6:	2301      	movs	r3, #1
10006ba8:	4632      	mov	r2, r6
10006baa:	4649      	mov	r1, r9
10006bac:	4640      	mov	r0, r8
10006bae:	47d0      	blx	sl
10006bb0:	3001      	adds	r0, #1
10006bb2:	d09d      	beq.n	10006af0 <_printf_i+0x160>
10006bb4:	3501      	adds	r5, #1
10006bb6:	68e3      	ldr	r3, [r4, #12]
10006bb8:	9903      	ldr	r1, [sp, #12]
10006bba:	1a5b      	subs	r3, r3, r1
10006bbc:	42ab      	cmp	r3, r5
10006bbe:	dcf2      	bgt.n	10006ba6 <_printf_i+0x216>
10006bc0:	e7eb      	b.n	10006b9a <_printf_i+0x20a>
10006bc2:	2500      	movs	r5, #0
10006bc4:	f104 0619 	add.w	r6, r4, #25
10006bc8:	e7f5      	b.n	10006bb6 <_printf_i+0x226>
10006bca:	bf00      	nop
10006bcc:	10007682 	.word	0x10007682
10006bd0:	10007693 	.word	0x10007693

10006bd4 <__sflush_r>:
10006bd4:	898a      	ldrh	r2, [r1, #12]
10006bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10006bda:	4605      	mov	r5, r0
10006bdc:	0710      	lsls	r0, r2, #28
10006bde:	460c      	mov	r4, r1
10006be0:	d458      	bmi.n	10006c94 <__sflush_r+0xc0>
10006be2:	684b      	ldr	r3, [r1, #4]
10006be4:	2b00      	cmp	r3, #0
10006be6:	dc05      	bgt.n	10006bf4 <__sflush_r+0x20>
10006be8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10006bea:	2b00      	cmp	r3, #0
10006bec:	dc02      	bgt.n	10006bf4 <__sflush_r+0x20>
10006bee:	2000      	movs	r0, #0
10006bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10006bf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
10006bf6:	2e00      	cmp	r6, #0
10006bf8:	d0f9      	beq.n	10006bee <__sflush_r+0x1a>
10006bfa:	2300      	movs	r3, #0
10006bfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
10006c00:	682f      	ldr	r7, [r5, #0]
10006c02:	6a21      	ldr	r1, [r4, #32]
10006c04:	602b      	str	r3, [r5, #0]
10006c06:	d032      	beq.n	10006c6e <__sflush_r+0x9a>
10006c08:	6d60      	ldr	r0, [r4, #84]	; 0x54
10006c0a:	89a3      	ldrh	r3, [r4, #12]
10006c0c:	075a      	lsls	r2, r3, #29
10006c0e:	d505      	bpl.n	10006c1c <__sflush_r+0x48>
10006c10:	6863      	ldr	r3, [r4, #4]
10006c12:	1ac0      	subs	r0, r0, r3
10006c14:	6b63      	ldr	r3, [r4, #52]	; 0x34
10006c16:	b10b      	cbz	r3, 10006c1c <__sflush_r+0x48>
10006c18:	6c23      	ldr	r3, [r4, #64]	; 0x40
10006c1a:	1ac0      	subs	r0, r0, r3
10006c1c:	2300      	movs	r3, #0
10006c1e:	4602      	mov	r2, r0
10006c20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
10006c22:	6a21      	ldr	r1, [r4, #32]
10006c24:	4628      	mov	r0, r5
10006c26:	47b0      	blx	r6
10006c28:	1c43      	adds	r3, r0, #1
10006c2a:	89a3      	ldrh	r3, [r4, #12]
10006c2c:	d106      	bne.n	10006c3c <__sflush_r+0x68>
10006c2e:	6829      	ldr	r1, [r5, #0]
10006c30:	291d      	cmp	r1, #29
10006c32:	d82b      	bhi.n	10006c8c <__sflush_r+0xb8>
10006c34:	4a29      	ldr	r2, [pc, #164]	; (10006cdc <__sflush_r+0x108>)
10006c36:	410a      	asrs	r2, r1
10006c38:	07d6      	lsls	r6, r2, #31
10006c3a:	d427      	bmi.n	10006c8c <__sflush_r+0xb8>
10006c3c:	2200      	movs	r2, #0
10006c3e:	6062      	str	r2, [r4, #4]
10006c40:	04d9      	lsls	r1, r3, #19
10006c42:	6922      	ldr	r2, [r4, #16]
10006c44:	6022      	str	r2, [r4, #0]
10006c46:	d504      	bpl.n	10006c52 <__sflush_r+0x7e>
10006c48:	1c42      	adds	r2, r0, #1
10006c4a:	d101      	bne.n	10006c50 <__sflush_r+0x7c>
10006c4c:	682b      	ldr	r3, [r5, #0]
10006c4e:	b903      	cbnz	r3, 10006c52 <__sflush_r+0x7e>
10006c50:	6560      	str	r0, [r4, #84]	; 0x54
10006c52:	6b61      	ldr	r1, [r4, #52]	; 0x34
10006c54:	602f      	str	r7, [r5, #0]
10006c56:	2900      	cmp	r1, #0
10006c58:	d0c9      	beq.n	10006bee <__sflush_r+0x1a>
10006c5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
10006c5e:	4299      	cmp	r1, r3
10006c60:	d002      	beq.n	10006c68 <__sflush_r+0x94>
10006c62:	4628      	mov	r0, r5
10006c64:	f7ff fc96 	bl	10006594 <_free_r>
10006c68:	2000      	movs	r0, #0
10006c6a:	6360      	str	r0, [r4, #52]	; 0x34
10006c6c:	e7c0      	b.n	10006bf0 <__sflush_r+0x1c>
10006c6e:	2301      	movs	r3, #1
10006c70:	4628      	mov	r0, r5
10006c72:	47b0      	blx	r6
10006c74:	1c41      	adds	r1, r0, #1
10006c76:	d1c8      	bne.n	10006c0a <__sflush_r+0x36>
10006c78:	682b      	ldr	r3, [r5, #0]
10006c7a:	2b00      	cmp	r3, #0
10006c7c:	d0c5      	beq.n	10006c0a <__sflush_r+0x36>
10006c7e:	2b1d      	cmp	r3, #29
10006c80:	d001      	beq.n	10006c86 <__sflush_r+0xb2>
10006c82:	2b16      	cmp	r3, #22
10006c84:	d101      	bne.n	10006c8a <__sflush_r+0xb6>
10006c86:	602f      	str	r7, [r5, #0]
10006c88:	e7b1      	b.n	10006bee <__sflush_r+0x1a>
10006c8a:	89a3      	ldrh	r3, [r4, #12]
10006c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006c90:	81a3      	strh	r3, [r4, #12]
10006c92:	e7ad      	b.n	10006bf0 <__sflush_r+0x1c>
10006c94:	690f      	ldr	r7, [r1, #16]
10006c96:	2f00      	cmp	r7, #0
10006c98:	d0a9      	beq.n	10006bee <__sflush_r+0x1a>
10006c9a:	0793      	lsls	r3, r2, #30
10006c9c:	680e      	ldr	r6, [r1, #0]
10006c9e:	bf08      	it	eq
10006ca0:	694b      	ldreq	r3, [r1, #20]
10006ca2:	600f      	str	r7, [r1, #0]
10006ca4:	bf18      	it	ne
10006ca6:	2300      	movne	r3, #0
10006ca8:	eba6 0807 	sub.w	r8, r6, r7
10006cac:	608b      	str	r3, [r1, #8]
10006cae:	f1b8 0f00 	cmp.w	r8, #0
10006cb2:	dd9c      	ble.n	10006bee <__sflush_r+0x1a>
10006cb4:	6a21      	ldr	r1, [r4, #32]
10006cb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10006cb8:	4643      	mov	r3, r8
10006cba:	463a      	mov	r2, r7
10006cbc:	4628      	mov	r0, r5
10006cbe:	47b0      	blx	r6
10006cc0:	2800      	cmp	r0, #0
10006cc2:	dc06      	bgt.n	10006cd2 <__sflush_r+0xfe>
10006cc4:	89a3      	ldrh	r3, [r4, #12]
10006cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006cca:	81a3      	strh	r3, [r4, #12]
10006ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
10006cd0:	e78e      	b.n	10006bf0 <__sflush_r+0x1c>
10006cd2:	4407      	add	r7, r0
10006cd4:	eba8 0800 	sub.w	r8, r8, r0
10006cd8:	e7e9      	b.n	10006cae <__sflush_r+0xda>
10006cda:	bf00      	nop
10006cdc:	dfbffffe 	.word	0xdfbffffe

10006ce0 <_fflush_r>:
10006ce0:	b538      	push	{r3, r4, r5, lr}
10006ce2:	690b      	ldr	r3, [r1, #16]
10006ce4:	4605      	mov	r5, r0
10006ce6:	460c      	mov	r4, r1
10006ce8:	b913      	cbnz	r3, 10006cf0 <_fflush_r+0x10>
10006cea:	2500      	movs	r5, #0
10006cec:	4628      	mov	r0, r5
10006cee:	bd38      	pop	{r3, r4, r5, pc}
10006cf0:	b118      	cbz	r0, 10006cfa <_fflush_r+0x1a>
10006cf2:	6a03      	ldr	r3, [r0, #32]
10006cf4:	b90b      	cbnz	r3, 10006cfa <_fflush_r+0x1a>
10006cf6:	f7ff faeb 	bl	100062d0 <__sinit>
10006cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10006cfe:	2b00      	cmp	r3, #0
10006d00:	d0f3      	beq.n	10006cea <_fflush_r+0xa>
10006d02:	6e62      	ldr	r2, [r4, #100]	; 0x64
10006d04:	07d0      	lsls	r0, r2, #31
10006d06:	d404      	bmi.n	10006d12 <_fflush_r+0x32>
10006d08:	0599      	lsls	r1, r3, #22
10006d0a:	d402      	bmi.n	10006d12 <_fflush_r+0x32>
10006d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
10006d0e:	f7ff fc29 	bl	10006564 <__retarget_lock_acquire_recursive>
10006d12:	4628      	mov	r0, r5
10006d14:	4621      	mov	r1, r4
10006d16:	f7ff ff5d 	bl	10006bd4 <__sflush_r>
10006d1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
10006d1c:	07da      	lsls	r2, r3, #31
10006d1e:	4605      	mov	r5, r0
10006d20:	d4e4      	bmi.n	10006cec <_fflush_r+0xc>
10006d22:	89a3      	ldrh	r3, [r4, #12]
10006d24:	059b      	lsls	r3, r3, #22
10006d26:	d4e1      	bmi.n	10006cec <_fflush_r+0xc>
10006d28:	6da0      	ldr	r0, [r4, #88]	; 0x58
10006d2a:	f7ff fc1c 	bl	10006566 <__retarget_lock_release_recursive>
10006d2e:	e7dd      	b.n	10006cec <_fflush_r+0xc>

10006d30 <__swbuf_r>:
10006d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006d32:	460e      	mov	r6, r1
10006d34:	4614      	mov	r4, r2
10006d36:	4605      	mov	r5, r0
10006d38:	b118      	cbz	r0, 10006d42 <__swbuf_r+0x12>
10006d3a:	6a03      	ldr	r3, [r0, #32]
10006d3c:	b90b      	cbnz	r3, 10006d42 <__swbuf_r+0x12>
10006d3e:	f7ff fac7 	bl	100062d0 <__sinit>
10006d42:	69a3      	ldr	r3, [r4, #24]
10006d44:	60a3      	str	r3, [r4, #8]
10006d46:	89a3      	ldrh	r3, [r4, #12]
10006d48:	071a      	lsls	r2, r3, #28
10006d4a:	d525      	bpl.n	10006d98 <__swbuf_r+0x68>
10006d4c:	6923      	ldr	r3, [r4, #16]
10006d4e:	b31b      	cbz	r3, 10006d98 <__swbuf_r+0x68>
10006d50:	6823      	ldr	r3, [r4, #0]
10006d52:	6922      	ldr	r2, [r4, #16]
10006d54:	1a98      	subs	r0, r3, r2
10006d56:	6963      	ldr	r3, [r4, #20]
10006d58:	b2f6      	uxtb	r6, r6
10006d5a:	4283      	cmp	r3, r0
10006d5c:	4637      	mov	r7, r6
10006d5e:	dc04      	bgt.n	10006d6a <__swbuf_r+0x3a>
10006d60:	4621      	mov	r1, r4
10006d62:	4628      	mov	r0, r5
10006d64:	f7ff ffbc 	bl	10006ce0 <_fflush_r>
10006d68:	b9e0      	cbnz	r0, 10006da4 <__swbuf_r+0x74>
10006d6a:	68a3      	ldr	r3, [r4, #8]
10006d6c:	3b01      	subs	r3, #1
10006d6e:	60a3      	str	r3, [r4, #8]
10006d70:	6823      	ldr	r3, [r4, #0]
10006d72:	1c5a      	adds	r2, r3, #1
10006d74:	6022      	str	r2, [r4, #0]
10006d76:	701e      	strb	r6, [r3, #0]
10006d78:	6962      	ldr	r2, [r4, #20]
10006d7a:	1c43      	adds	r3, r0, #1
10006d7c:	429a      	cmp	r2, r3
10006d7e:	d004      	beq.n	10006d8a <__swbuf_r+0x5a>
10006d80:	89a3      	ldrh	r3, [r4, #12]
10006d82:	07db      	lsls	r3, r3, #31
10006d84:	d506      	bpl.n	10006d94 <__swbuf_r+0x64>
10006d86:	2e0a      	cmp	r6, #10
10006d88:	d104      	bne.n	10006d94 <__swbuf_r+0x64>
10006d8a:	4621      	mov	r1, r4
10006d8c:	4628      	mov	r0, r5
10006d8e:	f7ff ffa7 	bl	10006ce0 <_fflush_r>
10006d92:	b938      	cbnz	r0, 10006da4 <__swbuf_r+0x74>
10006d94:	4638      	mov	r0, r7
10006d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10006d98:	4621      	mov	r1, r4
10006d9a:	4628      	mov	r0, r5
10006d9c:	f000 f806 	bl	10006dac <__swsetup_r>
10006da0:	2800      	cmp	r0, #0
10006da2:	d0d5      	beq.n	10006d50 <__swbuf_r+0x20>
10006da4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
10006da8:	e7f4      	b.n	10006d94 <__swbuf_r+0x64>
	...

10006dac <__swsetup_r>:
10006dac:	b538      	push	{r3, r4, r5, lr}
10006dae:	4b2a      	ldr	r3, [pc, #168]	; (10006e58 <__swsetup_r+0xac>)
10006db0:	4605      	mov	r5, r0
10006db2:	6818      	ldr	r0, [r3, #0]
10006db4:	460c      	mov	r4, r1
10006db6:	b118      	cbz	r0, 10006dc0 <__swsetup_r+0x14>
10006db8:	6a03      	ldr	r3, [r0, #32]
10006dba:	b90b      	cbnz	r3, 10006dc0 <__swsetup_r+0x14>
10006dbc:	f7ff fa88 	bl	100062d0 <__sinit>
10006dc0:	89a3      	ldrh	r3, [r4, #12]
10006dc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
10006dc6:	0718      	lsls	r0, r3, #28
10006dc8:	d422      	bmi.n	10006e10 <__swsetup_r+0x64>
10006dca:	06d9      	lsls	r1, r3, #27
10006dcc:	d407      	bmi.n	10006dde <__swsetup_r+0x32>
10006dce:	2309      	movs	r3, #9
10006dd0:	602b      	str	r3, [r5, #0]
10006dd2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
10006dd6:	81a3      	strh	r3, [r4, #12]
10006dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
10006ddc:	e034      	b.n	10006e48 <__swsetup_r+0x9c>
10006dde:	0758      	lsls	r0, r3, #29
10006de0:	d512      	bpl.n	10006e08 <__swsetup_r+0x5c>
10006de2:	6b61      	ldr	r1, [r4, #52]	; 0x34
10006de4:	b141      	cbz	r1, 10006df8 <__swsetup_r+0x4c>
10006de6:	f104 0344 	add.w	r3, r4, #68	; 0x44
10006dea:	4299      	cmp	r1, r3
10006dec:	d002      	beq.n	10006df4 <__swsetup_r+0x48>
10006dee:	4628      	mov	r0, r5
10006df0:	f7ff fbd0 	bl	10006594 <_free_r>
10006df4:	2300      	movs	r3, #0
10006df6:	6363      	str	r3, [r4, #52]	; 0x34
10006df8:	89a3      	ldrh	r3, [r4, #12]
10006dfa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
10006dfe:	81a3      	strh	r3, [r4, #12]
10006e00:	2300      	movs	r3, #0
10006e02:	6063      	str	r3, [r4, #4]
10006e04:	6923      	ldr	r3, [r4, #16]
10006e06:	6023      	str	r3, [r4, #0]
10006e08:	89a3      	ldrh	r3, [r4, #12]
10006e0a:	f043 0308 	orr.w	r3, r3, #8
10006e0e:	81a3      	strh	r3, [r4, #12]
10006e10:	6923      	ldr	r3, [r4, #16]
10006e12:	b94b      	cbnz	r3, 10006e28 <__swsetup_r+0x7c>
10006e14:	89a3      	ldrh	r3, [r4, #12]
10006e16:	f403 7320 	and.w	r3, r3, #640	; 0x280
10006e1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
10006e1e:	d003      	beq.n	10006e28 <__swsetup_r+0x7c>
10006e20:	4621      	mov	r1, r4
10006e22:	4628      	mov	r0, r5
10006e24:	f000 f884 	bl	10006f30 <__smakebuf_r>
10006e28:	89a0      	ldrh	r0, [r4, #12]
10006e2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
10006e2e:	f010 0301 	ands.w	r3, r0, #1
10006e32:	d00a      	beq.n	10006e4a <__swsetup_r+0x9e>
10006e34:	2300      	movs	r3, #0
10006e36:	60a3      	str	r3, [r4, #8]
10006e38:	6963      	ldr	r3, [r4, #20]
10006e3a:	425b      	negs	r3, r3
10006e3c:	61a3      	str	r3, [r4, #24]
10006e3e:	6923      	ldr	r3, [r4, #16]
10006e40:	b943      	cbnz	r3, 10006e54 <__swsetup_r+0xa8>
10006e42:	f010 0080 	ands.w	r0, r0, #128	; 0x80
10006e46:	d1c4      	bne.n	10006dd2 <__swsetup_r+0x26>
10006e48:	bd38      	pop	{r3, r4, r5, pc}
10006e4a:	0781      	lsls	r1, r0, #30
10006e4c:	bf58      	it	pl
10006e4e:	6963      	ldrpl	r3, [r4, #20]
10006e50:	60a3      	str	r3, [r4, #8]
10006e52:	e7f4      	b.n	10006e3e <__swsetup_r+0x92>
10006e54:	2000      	movs	r0, #0
10006e56:	e7f7      	b.n	10006e48 <__swsetup_r+0x9c>
10006e58:	1002012c 	.word	0x1002012c

10006e5c <_raise_r>:
10006e5c:	291f      	cmp	r1, #31
10006e5e:	b538      	push	{r3, r4, r5, lr}
10006e60:	4604      	mov	r4, r0
10006e62:	460d      	mov	r5, r1
10006e64:	d904      	bls.n	10006e70 <_raise_r+0x14>
10006e66:	2316      	movs	r3, #22
10006e68:	6003      	str	r3, [r0, #0]
10006e6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
10006e6e:	bd38      	pop	{r3, r4, r5, pc}
10006e70:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
10006e72:	b112      	cbz	r2, 10006e7a <_raise_r+0x1e>
10006e74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
10006e78:	b94b      	cbnz	r3, 10006e8e <_raise_r+0x32>
10006e7a:	4620      	mov	r0, r4
10006e7c:	f000 f830 	bl	10006ee0 <_getpid_r>
10006e80:	462a      	mov	r2, r5
10006e82:	4601      	mov	r1, r0
10006e84:	4620      	mov	r0, r4
10006e86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10006e8a:	f000 b817 	b.w	10006ebc <_kill_r>
10006e8e:	2b01      	cmp	r3, #1
10006e90:	d00a      	beq.n	10006ea8 <_raise_r+0x4c>
10006e92:	1c59      	adds	r1, r3, #1
10006e94:	d103      	bne.n	10006e9e <_raise_r+0x42>
10006e96:	2316      	movs	r3, #22
10006e98:	6003      	str	r3, [r0, #0]
10006e9a:	2001      	movs	r0, #1
10006e9c:	e7e7      	b.n	10006e6e <_raise_r+0x12>
10006e9e:	2400      	movs	r4, #0
10006ea0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
10006ea4:	4628      	mov	r0, r5
10006ea6:	4798      	blx	r3
10006ea8:	2000      	movs	r0, #0
10006eaa:	e7e0      	b.n	10006e6e <_raise_r+0x12>

10006eac <raise>:
10006eac:	4b02      	ldr	r3, [pc, #8]	; (10006eb8 <raise+0xc>)
10006eae:	4601      	mov	r1, r0
10006eb0:	6818      	ldr	r0, [r3, #0]
10006eb2:	f7ff bfd3 	b.w	10006e5c <_raise_r>
10006eb6:	bf00      	nop
10006eb8:	1002012c 	.word	0x1002012c

10006ebc <_kill_r>:
10006ebc:	b538      	push	{r3, r4, r5, lr}
10006ebe:	4d07      	ldr	r5, [pc, #28]	; (10006edc <_kill_r+0x20>)
10006ec0:	2300      	movs	r3, #0
10006ec2:	4604      	mov	r4, r0
10006ec4:	4608      	mov	r0, r1
10006ec6:	4611      	mov	r1, r2
10006ec8:	602b      	str	r3, [r5, #0]
10006eca:	f7fa f8d5 	bl	10001078 <_kill>
10006ece:	1c43      	adds	r3, r0, #1
10006ed0:	d102      	bne.n	10006ed8 <_kill_r+0x1c>
10006ed2:	682b      	ldr	r3, [r5, #0]
10006ed4:	b103      	cbz	r3, 10006ed8 <_kill_r+0x1c>
10006ed6:	6023      	str	r3, [r4, #0]
10006ed8:	bd38      	pop	{r3, r4, r5, pc}
10006eda:	bf00      	nop
10006edc:	10020e88 	.word	0x10020e88

10006ee0 <_getpid_r>:
10006ee0:	f7fa b8c2 	b.w	10001068 <_getpid>

10006ee4 <__swhatbuf_r>:
10006ee4:	b570      	push	{r4, r5, r6, lr}
10006ee6:	460c      	mov	r4, r1
10006ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10006eec:	2900      	cmp	r1, #0
10006eee:	b096      	sub	sp, #88	; 0x58
10006ef0:	4615      	mov	r5, r2
10006ef2:	461e      	mov	r6, r3
10006ef4:	da0d      	bge.n	10006f12 <__swhatbuf_r+0x2e>
10006ef6:	89a3      	ldrh	r3, [r4, #12]
10006ef8:	f013 0f80 	tst.w	r3, #128	; 0x80
10006efc:	f04f 0100 	mov.w	r1, #0
10006f00:	bf0c      	ite	eq
10006f02:	f44f 6380 	moveq.w	r3, #1024	; 0x400
10006f06:	2340      	movne	r3, #64	; 0x40
10006f08:	2000      	movs	r0, #0
10006f0a:	6031      	str	r1, [r6, #0]
10006f0c:	602b      	str	r3, [r5, #0]
10006f0e:	b016      	add	sp, #88	; 0x58
10006f10:	bd70      	pop	{r4, r5, r6, pc}
10006f12:	466a      	mov	r2, sp
10006f14:	f000 f848 	bl	10006fa8 <_fstat_r>
10006f18:	2800      	cmp	r0, #0
10006f1a:	dbec      	blt.n	10006ef6 <__swhatbuf_r+0x12>
10006f1c:	9901      	ldr	r1, [sp, #4]
10006f1e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
10006f22:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
10006f26:	4259      	negs	r1, r3
10006f28:	4159      	adcs	r1, r3
10006f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
10006f2e:	e7eb      	b.n	10006f08 <__swhatbuf_r+0x24>

10006f30 <__smakebuf_r>:
10006f30:	898b      	ldrh	r3, [r1, #12]
10006f32:	b573      	push	{r0, r1, r4, r5, r6, lr}
10006f34:	079d      	lsls	r5, r3, #30
10006f36:	4606      	mov	r6, r0
10006f38:	460c      	mov	r4, r1
10006f3a:	d507      	bpl.n	10006f4c <__smakebuf_r+0x1c>
10006f3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
10006f40:	6023      	str	r3, [r4, #0]
10006f42:	6123      	str	r3, [r4, #16]
10006f44:	2301      	movs	r3, #1
10006f46:	6163      	str	r3, [r4, #20]
10006f48:	b002      	add	sp, #8
10006f4a:	bd70      	pop	{r4, r5, r6, pc}
10006f4c:	ab01      	add	r3, sp, #4
10006f4e:	466a      	mov	r2, sp
10006f50:	f7ff ffc8 	bl	10006ee4 <__swhatbuf_r>
10006f54:	9900      	ldr	r1, [sp, #0]
10006f56:	4605      	mov	r5, r0
10006f58:	4630      	mov	r0, r6
10006f5a:	f7ff f8b3 	bl	100060c4 <_malloc_r>
10006f5e:	b948      	cbnz	r0, 10006f74 <__smakebuf_r+0x44>
10006f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10006f64:	059a      	lsls	r2, r3, #22
10006f66:	d4ef      	bmi.n	10006f48 <__smakebuf_r+0x18>
10006f68:	f023 0303 	bic.w	r3, r3, #3
10006f6c:	f043 0302 	orr.w	r3, r3, #2
10006f70:	81a3      	strh	r3, [r4, #12]
10006f72:	e7e3      	b.n	10006f3c <__smakebuf_r+0xc>
10006f74:	89a3      	ldrh	r3, [r4, #12]
10006f76:	6020      	str	r0, [r4, #0]
10006f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
10006f7c:	81a3      	strh	r3, [r4, #12]
10006f7e:	9b00      	ldr	r3, [sp, #0]
10006f80:	6163      	str	r3, [r4, #20]
10006f82:	9b01      	ldr	r3, [sp, #4]
10006f84:	6120      	str	r0, [r4, #16]
10006f86:	b15b      	cbz	r3, 10006fa0 <__smakebuf_r+0x70>
10006f88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
10006f8c:	4630      	mov	r0, r6
10006f8e:	f000 f81d 	bl	10006fcc <_isatty_r>
10006f92:	b128      	cbz	r0, 10006fa0 <__smakebuf_r+0x70>
10006f94:	89a3      	ldrh	r3, [r4, #12]
10006f96:	f023 0303 	bic.w	r3, r3, #3
10006f9a:	f043 0301 	orr.w	r3, r3, #1
10006f9e:	81a3      	strh	r3, [r4, #12]
10006fa0:	89a3      	ldrh	r3, [r4, #12]
10006fa2:	431d      	orrs	r5, r3
10006fa4:	81a5      	strh	r5, [r4, #12]
10006fa6:	e7cf      	b.n	10006f48 <__smakebuf_r+0x18>

10006fa8 <_fstat_r>:
10006fa8:	b538      	push	{r3, r4, r5, lr}
10006faa:	4d07      	ldr	r5, [pc, #28]	; (10006fc8 <_fstat_r+0x20>)
10006fac:	2300      	movs	r3, #0
10006fae:	4604      	mov	r4, r0
10006fb0:	4608      	mov	r0, r1
10006fb2:	4611      	mov	r1, r2
10006fb4:	602b      	str	r3, [r5, #0]
10006fb6:	f7fa f8be 	bl	10001136 <_fstat>
10006fba:	1c43      	adds	r3, r0, #1
10006fbc:	d102      	bne.n	10006fc4 <_fstat_r+0x1c>
10006fbe:	682b      	ldr	r3, [r5, #0]
10006fc0:	b103      	cbz	r3, 10006fc4 <_fstat_r+0x1c>
10006fc2:	6023      	str	r3, [r4, #0]
10006fc4:	bd38      	pop	{r3, r4, r5, pc}
10006fc6:	bf00      	nop
10006fc8:	10020e88 	.word	0x10020e88

10006fcc <_isatty_r>:
10006fcc:	b538      	push	{r3, r4, r5, lr}
10006fce:	4d06      	ldr	r5, [pc, #24]	; (10006fe8 <_isatty_r+0x1c>)
10006fd0:	2300      	movs	r3, #0
10006fd2:	4604      	mov	r4, r0
10006fd4:	4608      	mov	r0, r1
10006fd6:	602b      	str	r3, [r5, #0]
10006fd8:	f7fa f8bd 	bl	10001156 <_isatty>
10006fdc:	1c43      	adds	r3, r0, #1
10006fde:	d102      	bne.n	10006fe6 <_isatty_r+0x1a>
10006fe0:	682b      	ldr	r3, [r5, #0]
10006fe2:	b103      	cbz	r3, 10006fe6 <_isatty_r+0x1a>
10006fe4:	6023      	str	r3, [r4, #0]
10006fe6:	bd38      	pop	{r3, r4, r5, pc}
10006fe8:	10020e88 	.word	0x10020e88

10006fec <_sbrk>:
10006fec:	4a04      	ldr	r2, [pc, #16]	; (10007000 <_sbrk+0x14>)
10006fee:	6811      	ldr	r1, [r2, #0]
10006ff0:	4603      	mov	r3, r0
10006ff2:	b909      	cbnz	r1, 10006ff8 <_sbrk+0xc>
10006ff4:	4903      	ldr	r1, [pc, #12]	; (10007004 <_sbrk+0x18>)
10006ff6:	6011      	str	r1, [r2, #0]
10006ff8:	6810      	ldr	r0, [r2, #0]
10006ffa:	4403      	add	r3, r0
10006ffc:	6013      	str	r3, [r2, #0]
10006ffe:	4770      	bx	lr
10007000:	10020e90 	.word	0x10020e90
10007004:	10020e98 	.word	0x10020e98

10007008 <_init>:
10007008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000700a:	bf00      	nop
1000700c:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000700e:	bc08      	pop	{r3}
10007010:	469e      	mov	lr, r3
10007012:	4770      	bx	lr

10007014 <_fini>:
10007014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10007016:	bf00      	nop
10007018:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000701a:	bc08      	pop	{r3}
1000701c:	469e      	mov	lr, r3
1000701e:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

10007020 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
10007020:	f8df d034 	ldr.w	sp, [pc, #52]	; 10007058 <LoopForever+0x2>
  movs  r1, #0
10007024:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10007026:	e003      	b.n	10007030 <LoopCopyDataInit>

10007028 <CopyDataInit>:
  ldr  r3, =_sidata
10007028:	4b0c      	ldr	r3, [pc, #48]	; (1000705c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
1000702a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
1000702c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
1000702e:	3104      	adds	r1, #4

10007030 <LoopCopyDataInit>:
  ldr  r0, =_sdata
10007030:	480b      	ldr	r0, [pc, #44]	; (10007060 <LoopForever+0xa>)
  ldr  r3, =_edata
10007032:	4b0c      	ldr	r3, [pc, #48]	; (10007064 <LoopForever+0xe>)
  adds  r2, r0, r1
10007034:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10007036:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10007038:	d3f6      	bcc.n	10007028 <CopyDataInit>
  ldr  r2, =_sbss
1000703a:	4a0b      	ldr	r2, [pc, #44]	; (10007068 <LoopForever+0x12>)
  b  LoopFillZerobss
1000703c:	e002      	b.n	10007044 <LoopFillZerobss>

1000703e <FillZerobss>:
  movs  r3, #0
1000703e:	2300      	movs	r3, #0
  str  r3, [r2], #4
10007040:	f842 3b04 	str.w	r3, [r2], #4

10007044 <LoopFillZerobss>:
  ldr  r3, = _ebss
10007044:	4b09      	ldr	r3, [pc, #36]	; (1000706c <LoopForever+0x16>)
  cmp  r2, r3
10007046:	429a      	cmp	r2, r3
  bcc  FillZerobss
10007048:	d3f9      	bcc.n	1000703e <FillZerobss>
  bl  SystemInit
1000704a:	f7fa f987 	bl	1000135c <SystemInit>
 bl __libc_init_array
1000704e:	f7ff fa65 	bl	1000651c <__libc_init_array>
  bl main
10007052:	f7f9 f961 	bl	10000318 <main>

10007056 <LoopForever>:
    b LoopForever
10007056:	e7fe      	b.n	10007056 <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
10007058:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
1000705c:	100076ac 	.word	0x100076ac
  ldr  r0, =_sdata
10007060:	10020000 	.word	0x10020000
  ldr  r3, =_edata
10007064:	10020130 	.word	0x10020130
  ldr  r2, =_sbss
10007068:	100201bc 	.word	0x100201bc
  ldr  r3, = _ebss
1000706c:	10020e94 	.word	0x10020e94
