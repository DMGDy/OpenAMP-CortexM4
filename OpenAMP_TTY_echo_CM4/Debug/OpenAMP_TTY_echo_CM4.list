
OpenAMP_TTY_echo_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007070  10000000  10000000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  10007070  10007070  00027070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000064c  100070c0  100070c0  000270c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  1000770c  1000770c  000301bc  2**0
                  CONTENTS
  5 .ARM          00000000  1000770c  1000770c  000301bc  2**0
                  CONTENTS
  6 .preinit_array 00000000  1000770c  1000770c  000301bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  1000770c  1000770c  0002770c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  10007710  10007710  00027710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000130  10020000  10007714  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 0000008c  10020130  10007844  00030130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .bss          00000cd8  100201bc  100201bc  000301bc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  10020e94  10020e94  000301bc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301bc  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 15 .debug_line   0001a0b6  00000000  00000000  0003022f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 00000109  00000000  00000000  0004a2e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_info   0001a762  00000000  00000000  0004a3ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 000044de  00000000  00000000  00064b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00001040  00000000  00000000  00069030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001c81c5  00000000  00000000  0006a070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 00000be0  00000000  00000000  00232235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0004ae14  00000000  00000000  00232e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  000047ac  00000000  00000000  0027dc2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	; (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	; (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	; (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	100201bc 	.word	0x100201bc
1000001c:	00000000 	.word	0x00000000
10000020:	10007058 	.word	0x10007058

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	; (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	; (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	; (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	100201c0 	.word	0x100201c0
1000003c:	10007058 	.word	0x10007058

10000040 <strcmp>:
10000040:	f810 2b01 	ldrb.w	r2, [r0], #1
10000044:	f811 3b01 	ldrb.w	r3, [r1], #1
10000048:	2a01      	cmp	r2, #1
1000004a:	bf28      	it	cs
1000004c:	429a      	cmpcs	r2, r3
1000004e:	d0f7      	beq.n	10000040 <strcmp>
10000050:	1ad0      	subs	r0, r2, r3
10000052:	4770      	bx	lr

10000054 <strlen>:
10000054:	4603      	mov	r3, r0
10000056:	f813 2b01 	ldrb.w	r2, [r3], #1
1000005a:	2a00      	cmp	r2, #0
1000005c:	d1fb      	bne.n	10000056 <strlen+0x2>
1000005e:	1a18      	subs	r0, r3, r0
10000060:	3801      	subs	r0, #1
10000062:	4770      	bx	lr
	...

10000070 <memchr>:
10000070:	f001 01ff 	and.w	r1, r1, #255	; 0xff
10000074:	2a10      	cmp	r2, #16
10000076:	db2b      	blt.n	100000d0 <memchr+0x60>
10000078:	f010 0f07 	tst.w	r0, #7
1000007c:	d008      	beq.n	10000090 <memchr+0x20>
1000007e:	f810 3b01 	ldrb.w	r3, [r0], #1
10000082:	3a01      	subs	r2, #1
10000084:	428b      	cmp	r3, r1
10000086:	d02d      	beq.n	100000e4 <memchr+0x74>
10000088:	f010 0f07 	tst.w	r0, #7
1000008c:	b342      	cbz	r2, 100000e0 <memchr+0x70>
1000008e:	d1f6      	bne.n	1000007e <memchr+0xe>
10000090:	b4f0      	push	{r4, r5, r6, r7}
10000092:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
10000096:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1000009a:	f022 0407 	bic.w	r4, r2, #7
1000009e:	f07f 0700 	mvns.w	r7, #0
100000a2:	2300      	movs	r3, #0
100000a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
100000a8:	3c08      	subs	r4, #8
100000aa:	ea85 0501 	eor.w	r5, r5, r1
100000ae:	ea86 0601 	eor.w	r6, r6, r1
100000b2:	fa85 f547 	uadd8	r5, r5, r7
100000b6:	faa3 f587 	sel	r5, r3, r7
100000ba:	fa86 f647 	uadd8	r6, r6, r7
100000be:	faa5 f687 	sel	r6, r5, r7
100000c2:	b98e      	cbnz	r6, 100000e8 <memchr+0x78>
100000c4:	d1ee      	bne.n	100000a4 <memchr+0x34>
100000c6:	bcf0      	pop	{r4, r5, r6, r7}
100000c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
100000cc:	f002 0207 	and.w	r2, r2, #7
100000d0:	b132      	cbz	r2, 100000e0 <memchr+0x70>
100000d2:	f810 3b01 	ldrb.w	r3, [r0], #1
100000d6:	3a01      	subs	r2, #1
100000d8:	ea83 0301 	eor.w	r3, r3, r1
100000dc:	b113      	cbz	r3, 100000e4 <memchr+0x74>
100000de:	d1f8      	bne.n	100000d2 <memchr+0x62>
100000e0:	2000      	movs	r0, #0
100000e2:	4770      	bx	lr
100000e4:	3801      	subs	r0, #1
100000e6:	4770      	bx	lr
100000e8:	2d00      	cmp	r5, #0
100000ea:	bf06      	itte	eq
100000ec:	4635      	moveq	r5, r6
100000ee:	3803      	subeq	r0, #3
100000f0:	3807      	subne	r0, #7
100000f2:	f015 0f01 	tst.w	r5, #1
100000f6:	d107      	bne.n	10000108 <memchr+0x98>
100000f8:	3001      	adds	r0, #1
100000fa:	f415 7f80 	tst.w	r5, #256	; 0x100
100000fe:	bf02      	ittt	eq
10000100:	3001      	addeq	r0, #1
10000102:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
10000106:	3001      	addeq	r0, #1
10000108:	bcf0      	pop	{r4, r5, r6, r7}
1000010a:	3801      	subs	r0, #1
1000010c:	4770      	bx	lr
1000010e:	bf00      	nop

10000110 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
10000110:	e7fe      	b.n	10000110 <ADC1_IRQHandler>
	...

10000114 <Periph_Lock>:
  *                     Semaphore id deduced from this peripheral.
  *         Timeout: timeout value in msecs
  * @retval Return Status
  */
LockResource_Status_t Periph_Lock(void* Peripheral, uint32_t Timeout)
{
10000114:	b580      	push	{r7, lr}
10000116:	b084      	sub	sp, #16
10000118:	af00      	add	r7, sp, #0
1000011a:	6078      	str	r0, [r7, #4]
1000011c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
1000011e:	2300      	movs	r3, #0
10000120:	60bb      	str	r3, [r7, #8]
  LockResource_Status_t ret = LOCK_RESOURCE_STATUS_OK;
10000122:	2300      	movs	r3, #0
10000124:	73fb      	strb	r3, [r7, #15]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
10000126:	f001 f9cb 	bl	100014c0 <HAL_GetTick>
1000012a:	60b8      	str	r0, [r7, #8]

  /* Try to Take HSEM  assigned to the Peripheral */
  while (HAL_HSEM_FastTake(GET_HSEM_SEM_INDEX(Peripheral)) != HAL_OK)
1000012c:	e00e      	b.n	1000014c <Periph_Lock+0x38>
  {

    if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
1000012e:	683b      	ldr	r3, [r7, #0]
10000130:	2b00      	cmp	r3, #0
10000132:	d007      	beq.n	10000144 <Periph_Lock+0x30>
10000134:	f001 f9c4 	bl	100014c0 <HAL_GetTick>
10000138:	4602      	mov	r2, r0
1000013a:	68bb      	ldr	r3, [r7, #8]
1000013c:	1ad3      	subs	r3, r2, r3
1000013e:	683a      	ldr	r2, [r7, #0]
10000140:	429a      	cmp	r2, r3
10000142:	d203      	bcs.n	1000014c <Periph_Lock+0x38>
    {
       ret = LOCK_RESOURCE_STATUS_TIMEOUT;
10000144:	2302      	movs	r3, #2
10000146:	73fb      	strb	r3, [r7, #15]
       Error_Handler();
10000148:	f000 fc76 	bl	10000a38 <Error_Handler>
  while (HAL_HSEM_FastTake(GET_HSEM_SEM_INDEX(Peripheral)) != HAL_OK)
1000014c:	687b      	ldr	r3, [r7, #4]
1000014e:	4a2c      	ldr	r2, [pc, #176]	; (10000200 <Periph_Lock+0xec>)
10000150:	4293      	cmp	r3, r2
10000152:	d049      	beq.n	100001e8 <Periph_Lock+0xd4>
10000154:	687b      	ldr	r3, [r7, #4]
10000156:	4a2b      	ldr	r2, [pc, #172]	; (10000204 <Periph_Lock+0xf0>)
10000158:	4293      	cmp	r3, r2
1000015a:	d043      	beq.n	100001e4 <Periph_Lock+0xd0>
1000015c:	687b      	ldr	r3, [r7, #4]
1000015e:	4a2a      	ldr	r2, [pc, #168]	; (10000208 <Periph_Lock+0xf4>)
10000160:	4293      	cmp	r3, r2
10000162:	d03d      	beq.n	100001e0 <Periph_Lock+0xcc>
10000164:	687b      	ldr	r3, [r7, #4]
10000166:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
1000016a:	d037      	beq.n	100001dc <Periph_Lock+0xc8>
1000016c:	687b      	ldr	r3, [r7, #4]
1000016e:	4a27      	ldr	r2, [pc, #156]	; (1000020c <Periph_Lock+0xf8>)
10000170:	4293      	cmp	r3, r2
10000172:	d031      	beq.n	100001d8 <Periph_Lock+0xc4>
10000174:	687b      	ldr	r3, [r7, #4]
10000176:	4a26      	ldr	r2, [pc, #152]	; (10000210 <Periph_Lock+0xfc>)
10000178:	4293      	cmp	r3, r2
1000017a:	d02b      	beq.n	100001d4 <Periph_Lock+0xc0>
1000017c:	687b      	ldr	r3, [r7, #4]
1000017e:	4a25      	ldr	r2, [pc, #148]	; (10000214 <Periph_Lock+0x100>)
10000180:	4293      	cmp	r3, r2
10000182:	d025      	beq.n	100001d0 <Periph_Lock+0xbc>
10000184:	687b      	ldr	r3, [r7, #4]
10000186:	4a24      	ldr	r2, [pc, #144]	; (10000218 <Periph_Lock+0x104>)
10000188:	4293      	cmp	r3, r2
1000018a:	d01f      	beq.n	100001cc <Periph_Lock+0xb8>
1000018c:	687b      	ldr	r3, [r7, #4]
1000018e:	4a23      	ldr	r2, [pc, #140]	; (1000021c <Periph_Lock+0x108>)
10000190:	4293      	cmp	r3, r2
10000192:	d019      	beq.n	100001c8 <Periph_Lock+0xb4>
10000194:	687b      	ldr	r3, [r7, #4]
10000196:	4a22      	ldr	r2, [pc, #136]	; (10000220 <Periph_Lock+0x10c>)
10000198:	4293      	cmp	r3, r2
1000019a:	d013      	beq.n	100001c4 <Periph_Lock+0xb0>
1000019c:	687b      	ldr	r3, [r7, #4]
1000019e:	4a21      	ldr	r2, [pc, #132]	; (10000224 <Periph_Lock+0x110>)
100001a0:	4293      	cmp	r3, r2
100001a2:	d00d      	beq.n	100001c0 <Periph_Lock+0xac>
100001a4:	687b      	ldr	r3, [r7, #4]
100001a6:	4a20      	ldr	r2, [pc, #128]	; (10000228 <Periph_Lock+0x114>)
100001a8:	4293      	cmp	r3, r2
100001aa:	d007      	beq.n	100001bc <Periph_Lock+0xa8>
100001ac:	687b      	ldr	r3, [r7, #4]
100001ae:	4a1f      	ldr	r2, [pc, #124]	; (1000022c <Periph_Lock+0x118>)
100001b0:	4293      	cmp	r3, r2
100001b2:	d101      	bne.n	100001b8 <Periph_Lock+0xa4>
100001b4:	2301      	movs	r3, #1
100001b6:	e018      	b.n	100001ea <Periph_Lock+0xd6>
100001b8:	2320      	movs	r3, #32
100001ba:	e016      	b.n	100001ea <Periph_Lock+0xd6>
100001bc:	2300      	movs	r3, #0
100001be:	e014      	b.n	100001ea <Periph_Lock+0xd6>
100001c0:	2300      	movs	r3, #0
100001c2:	e012      	b.n	100001ea <Periph_Lock+0xd6>
100001c4:	2300      	movs	r3, #0
100001c6:	e010      	b.n	100001ea <Periph_Lock+0xd6>
100001c8:	2300      	movs	r3, #0
100001ca:	e00e      	b.n	100001ea <Periph_Lock+0xd6>
100001cc:	2300      	movs	r3, #0
100001ce:	e00c      	b.n	100001ea <Periph_Lock+0xd6>
100001d0:	2300      	movs	r3, #0
100001d2:	e00a      	b.n	100001ea <Periph_Lock+0xd6>
100001d4:	2300      	movs	r3, #0
100001d6:	e008      	b.n	100001ea <Periph_Lock+0xd6>
100001d8:	2300      	movs	r3, #0
100001da:	e006      	b.n	100001ea <Periph_Lock+0xd6>
100001dc:	2300      	movs	r3, #0
100001de:	e004      	b.n	100001ea <Periph_Lock+0xd6>
100001e0:	2300      	movs	r3, #0
100001e2:	e002      	b.n	100001ea <Periph_Lock+0xd6>
100001e4:	2300      	movs	r3, #0
100001e6:	e000      	b.n	100001ea <Periph_Lock+0xd6>
100001e8:	2300      	movs	r3, #0
100001ea:	4618      	mov	r0, r3
100001ec:	f001 fc6c 	bl	10001ac8 <HAL_HSEM_FastTake>
100001f0:	4603      	mov	r3, r0
100001f2:	2b00      	cmp	r3, #0
100001f4:	d19b      	bne.n	1000012e <Periph_Lock+0x1a>
    }
  }

  return ret;
100001f6:	7bfb      	ldrb	r3, [r7, #15]
}
100001f8:	4618      	mov	r0, r3
100001fa:	3710      	adds	r7, #16
100001fc:	46bd      	mov	sp, r7
100001fe:	bd80      	pop	{r7, pc}
10000200:	50002000 	.word	0x50002000
10000204:	50003000 	.word	0x50003000
10000208:	50004000 	.word	0x50004000
1000020c:	50006000 	.word	0x50006000
10000210:	50007000 	.word	0x50007000
10000214:	50008000 	.word	0x50008000
10000218:	50009000 	.word	0x50009000
1000021c:	5000a000 	.word	0x5000a000
10000220:	5000b000 	.word	0x5000b000
10000224:	5000c000 	.word	0x5000c000
10000228:	54004000 	.word	0x54004000
1000022c:	5000d000 	.word	0x5000d000

10000230 <Periph_Unlock>:
  * @brief  The Periph_Unlock released a previously-acquired semaphore which we want to unlock
  * @param  Peripheral: used to identify which peripheral and the related semaphore
  * @retval None
  */
void Periph_Unlock(void* Peripheral)
{
10000230:	b580      	push	{r7, lr}
10000232:	b082      	sub	sp, #8
10000234:	af00      	add	r7, sp, #0
10000236:	6078      	str	r0, [r7, #4]
  /* Release HSEM  */
  HAL_HSEM_Release(GET_HSEM_SEM_INDEX(Peripheral), 0);
10000238:	687b      	ldr	r3, [r7, #4]
1000023a:	4a2b      	ldr	r2, [pc, #172]	; (100002e8 <Periph_Unlock+0xb8>)
1000023c:	4293      	cmp	r3, r2
1000023e:	d049      	beq.n	100002d4 <Periph_Unlock+0xa4>
10000240:	687b      	ldr	r3, [r7, #4]
10000242:	4a2a      	ldr	r2, [pc, #168]	; (100002ec <Periph_Unlock+0xbc>)
10000244:	4293      	cmp	r3, r2
10000246:	d043      	beq.n	100002d0 <Periph_Unlock+0xa0>
10000248:	687b      	ldr	r3, [r7, #4]
1000024a:	4a29      	ldr	r2, [pc, #164]	; (100002f0 <Periph_Unlock+0xc0>)
1000024c:	4293      	cmp	r3, r2
1000024e:	d03d      	beq.n	100002cc <Periph_Unlock+0x9c>
10000250:	687b      	ldr	r3, [r7, #4]
10000252:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
10000256:	d037      	beq.n	100002c8 <Periph_Unlock+0x98>
10000258:	687b      	ldr	r3, [r7, #4]
1000025a:	4a26      	ldr	r2, [pc, #152]	; (100002f4 <Periph_Unlock+0xc4>)
1000025c:	4293      	cmp	r3, r2
1000025e:	d031      	beq.n	100002c4 <Periph_Unlock+0x94>
10000260:	687b      	ldr	r3, [r7, #4]
10000262:	4a25      	ldr	r2, [pc, #148]	; (100002f8 <Periph_Unlock+0xc8>)
10000264:	4293      	cmp	r3, r2
10000266:	d02b      	beq.n	100002c0 <Periph_Unlock+0x90>
10000268:	687b      	ldr	r3, [r7, #4]
1000026a:	4a24      	ldr	r2, [pc, #144]	; (100002fc <Periph_Unlock+0xcc>)
1000026c:	4293      	cmp	r3, r2
1000026e:	d025      	beq.n	100002bc <Periph_Unlock+0x8c>
10000270:	687b      	ldr	r3, [r7, #4]
10000272:	4a23      	ldr	r2, [pc, #140]	; (10000300 <Periph_Unlock+0xd0>)
10000274:	4293      	cmp	r3, r2
10000276:	d01f      	beq.n	100002b8 <Periph_Unlock+0x88>
10000278:	687b      	ldr	r3, [r7, #4]
1000027a:	4a22      	ldr	r2, [pc, #136]	; (10000304 <Periph_Unlock+0xd4>)
1000027c:	4293      	cmp	r3, r2
1000027e:	d019      	beq.n	100002b4 <Periph_Unlock+0x84>
10000280:	687b      	ldr	r3, [r7, #4]
10000282:	4a21      	ldr	r2, [pc, #132]	; (10000308 <Periph_Unlock+0xd8>)
10000284:	4293      	cmp	r3, r2
10000286:	d013      	beq.n	100002b0 <Periph_Unlock+0x80>
10000288:	687b      	ldr	r3, [r7, #4]
1000028a:	4a20      	ldr	r2, [pc, #128]	; (1000030c <Periph_Unlock+0xdc>)
1000028c:	4293      	cmp	r3, r2
1000028e:	d00d      	beq.n	100002ac <Periph_Unlock+0x7c>
10000290:	687b      	ldr	r3, [r7, #4]
10000292:	4a1f      	ldr	r2, [pc, #124]	; (10000310 <Periph_Unlock+0xe0>)
10000294:	4293      	cmp	r3, r2
10000296:	d007      	beq.n	100002a8 <Periph_Unlock+0x78>
10000298:	687b      	ldr	r3, [r7, #4]
1000029a:	4a1e      	ldr	r2, [pc, #120]	; (10000314 <Periph_Unlock+0xe4>)
1000029c:	4293      	cmp	r3, r2
1000029e:	d101      	bne.n	100002a4 <Periph_Unlock+0x74>
100002a0:	2301      	movs	r3, #1
100002a2:	e018      	b.n	100002d6 <Periph_Unlock+0xa6>
100002a4:	2320      	movs	r3, #32
100002a6:	e016      	b.n	100002d6 <Periph_Unlock+0xa6>
100002a8:	2300      	movs	r3, #0
100002aa:	e014      	b.n	100002d6 <Periph_Unlock+0xa6>
100002ac:	2300      	movs	r3, #0
100002ae:	e012      	b.n	100002d6 <Periph_Unlock+0xa6>
100002b0:	2300      	movs	r3, #0
100002b2:	e010      	b.n	100002d6 <Periph_Unlock+0xa6>
100002b4:	2300      	movs	r3, #0
100002b6:	e00e      	b.n	100002d6 <Periph_Unlock+0xa6>
100002b8:	2300      	movs	r3, #0
100002ba:	e00c      	b.n	100002d6 <Periph_Unlock+0xa6>
100002bc:	2300      	movs	r3, #0
100002be:	e00a      	b.n	100002d6 <Periph_Unlock+0xa6>
100002c0:	2300      	movs	r3, #0
100002c2:	e008      	b.n	100002d6 <Periph_Unlock+0xa6>
100002c4:	2300      	movs	r3, #0
100002c6:	e006      	b.n	100002d6 <Periph_Unlock+0xa6>
100002c8:	2300      	movs	r3, #0
100002ca:	e004      	b.n	100002d6 <Periph_Unlock+0xa6>
100002cc:	2300      	movs	r3, #0
100002ce:	e002      	b.n	100002d6 <Periph_Unlock+0xa6>
100002d0:	2300      	movs	r3, #0
100002d2:	e000      	b.n	100002d6 <Periph_Unlock+0xa6>
100002d4:	2300      	movs	r3, #0
100002d6:	2100      	movs	r1, #0
100002d8:	4618      	mov	r0, r3
100002da:	f001 fc0d 	bl	10001af8 <HAL_HSEM_Release>

}
100002de:	bf00      	nop
100002e0:	3708      	adds	r7, #8
100002e2:	46bd      	mov	sp, r7
100002e4:	bd80      	pop	{r7, pc}
100002e6:	bf00      	nop
100002e8:	50002000 	.word	0x50002000
100002ec:	50003000 	.word	0x50003000
100002f0:	50004000 	.word	0x50004000
100002f4:	50006000 	.word	0x50006000
100002f8:	50007000 	.word	0x50007000
100002fc:	50008000 	.word	0x50008000
10000300:	50009000 	.word	0x50009000
10000304:	5000a000 	.word	0x5000a000
10000308:	5000b000 	.word	0x5000b000
1000030c:	5000c000 	.word	0x5000c000
10000310:	54004000 	.word	0x54004000
10000314:	5000d000 	.word	0x5000d000

10000318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
10000318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000031c:	b084      	sub	sp, #16
1000031e:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  unsigned int counter = 0;
10000320:	2300      	movs	r3, #0
10000322:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initialize the Systick. */
  HAL_Init();
10000324:	f001 f868 	bl	100013f8 <HAL_Init>

  /* USER CODE BEGIN Init */
    if(IS_ENGINEERING_BOOT_MODE())
10000328:	4b51      	ldr	r3, [pc, #324]	; (10000470 <main+0x158>)
1000032a:	681b      	ldr	r3, [r3, #0]
1000032c:	f003 0307 	and.w	r3, r3, #7
10000330:	2b04      	cmp	r3, #4
10000332:	d101      	bne.n	10000338 <main+0x20>
  {
    /* Configure the system clock */
    SystemClock_Config();
10000334:	f000 f8b2 	bl	1000049c <SystemClock_Config>
  }

  log_info("Cortex-M4 boot successful with STM32Cube FW version: v%ld.%ld.%ld \r\n",
10000338:	f001 f8c2 	bl	100014c0 <HAL_GetTick>
1000033c:	4603      	mov	r3, r0
1000033e:	4a4d      	ldr	r2, [pc, #308]	; (10000474 <main+0x15c>)
10000340:	fba2 2303 	umull	r2, r3, r2, r3
10000344:	099e      	lsrs	r6, r3, #6
10000346:	f001 f8bb 	bl	100014c0 <HAL_GetTick>
1000034a:	4603      	mov	r3, r0
1000034c:	4a49      	ldr	r2, [pc, #292]	; (10000474 <main+0x15c>)
1000034e:	fba2 1203 	umull	r1, r2, r2, r3
10000352:	0994      	lsrs	r4, r2, #6
10000354:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
10000358:	fb04 f202 	mul.w	r2, r4, r2
1000035c:	1a9c      	subs	r4, r3, r2
1000035e:	f001 f8bb 	bl	100014d8 <HAL_GetHalVersion>
10000362:	4603      	mov	r3, r0
10000364:	0e1b      	lsrs	r3, r3, #24
10000366:	fa5f f883 	uxtb.w	r8, r3
1000036a:	f001 f8b5 	bl	100014d8 <HAL_GetHalVersion>
1000036e:	4603      	mov	r3, r0
10000370:	0c1b      	lsrs	r3, r3, #16
10000372:	b2dd      	uxtb	r5, r3
10000374:	f001 f8b0 	bl	100014d8 <HAL_GetHalVersion>
10000378:	4603      	mov	r3, r0
1000037a:	0a1b      	lsrs	r3, r3, #8
1000037c:	b2db      	uxtb	r3, r3
1000037e:	9301      	str	r3, [sp, #4]
10000380:	9500      	str	r5, [sp, #0]
10000382:	4643      	mov	r3, r8
10000384:	4622      	mov	r2, r4
10000386:	4631      	mov	r1, r6
10000388:	483b      	ldr	r0, [pc, #236]	; (10000478 <main+0x160>)
1000038a:	f006 f811 	bl	100063b0 <iprintf>
                                            ((HAL_GetHalVersion() >> 24) & 0x000000FF),
                                            ((HAL_GetHalVersion() >> 16) & 0x000000FF),
                                            ((HAL_GetHalVersion() >> 8) & 0x000000FF));
  BSP_LED_Init(LED7);
1000038e:	2002      	movs	r0, #2
10000390:	f000 ff22 	bl	100011d8 <BSP_LED_Init>
  BSP_LED_On(LED7);
10000394:	2002      	movs	r0, #2
10000396:	f000 ff7b 	bl	10001290 <BSP_LED_On>
  /* USER CODE END Init */

  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
1000039a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000039e:	f44f 6200 	mov.w	r2, #2048	; 0x800
100003a2:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
  /* IPCC initialisation */
   MX_IPCC_Init();
100003a6:	f000 fa6b 	bl	10000880 <MX_IPCC_Init>
  /* OpenAmp initialisation ---------------------------------*/
  MX_OPENAMP_Init(RPMSG_REMOTE, NULL);
100003aa:	2100      	movs	r1, #0
100003ac:	2001      	movs	r0, #1
100003ae:	f000 fd21 	bl	10000df4 <MX_OPENAMP_Init>
  /* USER CODE BEGIN 2 */
  /*
   * Create Virtual UART device
   * defined by a rpmsg channel attached to the remote device
   */
  log_info("Virtual UART0 OpenAMP-rpmsg channel creation\r\n");
100003b2:	f001 f885 	bl	100014c0 <HAL_GetTick>
100003b6:	4603      	mov	r3, r0
100003b8:	4a2e      	ldr	r2, [pc, #184]	; (10000474 <main+0x15c>)
100003ba:	fba2 2303 	umull	r2, r3, r2, r3
100003be:	099c      	lsrs	r4, r3, #6
100003c0:	f001 f87e 	bl	100014c0 <HAL_GetTick>
100003c4:	4602      	mov	r2, r0
100003c6:	4b2b      	ldr	r3, [pc, #172]	; (10000474 <main+0x15c>)
100003c8:	fba3 1302 	umull	r1, r3, r3, r2
100003cc:	099b      	lsrs	r3, r3, #6
100003ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
100003d2:	fb01 f303 	mul.w	r3, r1, r3
100003d6:	1ad3      	subs	r3, r2, r3
100003d8:	461a      	mov	r2, r3
100003da:	4621      	mov	r1, r4
100003dc:	4827      	ldr	r0, [pc, #156]	; (1000047c <main+0x164>)
100003de:	f005 ffe7 	bl	100063b0 <iprintf>
  if (VIRT_UART_Init(&huart0) != VIRT_UART_OK) {
100003e2:	4827      	ldr	r0, [pc, #156]	; (10000480 <main+0x168>)
100003e4:	f005 fdf4 	bl	10005fd0 <VIRT_UART_Init>
100003e8:	4603      	mov	r3, r0
100003ea:	2b00      	cmp	r3, #0
100003ec:	d019      	beq.n	10000422 <main+0x10a>
    log_err("VIRT_UART_Init UART0 failed.\r\n");
100003ee:	f001 f867 	bl	100014c0 <HAL_GetTick>
100003f2:	4603      	mov	r3, r0
100003f4:	4a1f      	ldr	r2, [pc, #124]	; (10000474 <main+0x15c>)
100003f6:	fba2 2303 	umull	r2, r3, r2, r3
100003fa:	099c      	lsrs	r4, r3, #6
100003fc:	f001 f860 	bl	100014c0 <HAL_GetTick>
10000400:	4602      	mov	r2, r0
10000402:	4b1c      	ldr	r3, [pc, #112]	; (10000474 <main+0x15c>)
10000404:	fba3 1302 	umull	r1, r3, r3, r2
10000408:	099b      	lsrs	r3, r3, #6
1000040a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1000040e:	fb01 f303 	mul.w	r3, r1, r3
10000412:	1ad3      	subs	r3, r2, r3
10000414:	461a      	mov	r2, r3
10000416:	4621      	mov	r1, r4
10000418:	481a      	ldr	r0, [pc, #104]	; (10000484 <main+0x16c>)
1000041a:	f005 ffc9 	bl	100063b0 <iprintf>
    Error_Handler();
1000041e:	f000 fb0b 	bl	10000a38 <Error_Handler>
  }

  /*Need to register callback for message reception by channels*/
  if(VIRT_UART_RegisterCallback(&huart0, VIRT_UART_RXCPLT_CB_ID, VIRT_UART0_RxCpltCallback) != VIRT_UART_OK)
10000422:	4a19      	ldr	r2, [pc, #100]	; (10000488 <main+0x170>)
10000424:	2100      	movs	r1, #0
10000426:	4816      	ldr	r0, [pc, #88]	; (10000480 <main+0x168>)
10000428:	f005 fdee 	bl	10006008 <VIRT_UART_RegisterCallback>
1000042c:	4603      	mov	r3, r0
1000042e:	2b00      	cmp	r3, #0
10000430:	d001      	beq.n	10000436 <main+0x11e>
  {
   Error_Handler();
10000432:	f000 fb01 	bl	10000a38 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    OPENAMP_check_for_message();
10000436:	f000 fd8f 	bl	10000f58 <OPENAMP_check_for_message>

    /* USER CODE END WHILE */
    if (VirtUart0RxMsg) {
1000043a:	4b14      	ldr	r3, [pc, #80]	; (1000048c <main+0x174>)
1000043c:	781b      	ldrb	r3, [r3, #0]
1000043e:	b2db      	uxtb	r3, r3
10000440:	2b00      	cmp	r3, #0
10000442:	d009      	beq.n	10000458 <main+0x140>
      VirtUart0RxMsg = RESET;
10000444:	4b11      	ldr	r3, [pc, #68]	; (1000048c <main+0x174>)
10000446:	2200      	movs	r2, #0
10000448:	701a      	strb	r2, [r3, #0]
      VIRT_UART_Transmit(&huart0, VirtUart0ChannelBuffRx, VirtUart0ChannelRxSize);
1000044a:	4b11      	ldr	r3, [pc, #68]	; (10000490 <main+0x178>)
1000044c:	881b      	ldrh	r3, [r3, #0]
1000044e:	461a      	mov	r2, r3
10000450:	4910      	ldr	r1, [pc, #64]	; (10000494 <main+0x17c>)
10000452:	480b      	ldr	r0, [pc, #44]	; (10000480 <main+0x168>)
10000454:	f005 fdf2 	bl	1000603c <VIRT_UART_Transmit>
    }

    if(counter++ == 500000) {
10000458:	687b      	ldr	r3, [r7, #4]
1000045a:	1c5a      	adds	r2, r3, #1
1000045c:	607a      	str	r2, [r7, #4]
1000045e:	4a0e      	ldr	r2, [pc, #56]	; (10000498 <main+0x180>)
10000460:	4293      	cmp	r3, r2
10000462:	d1e8      	bne.n	10000436 <main+0x11e>
        BSP_LED_Toggle(LED7);
10000464:	2002      	movs	r0, #2
10000466:	f000 ff83 	bl	10001370 <BSP_LED_Toggle>
        counter = 0;
1000046a:	2300      	movs	r3, #0
1000046c:	607b      	str	r3, [r7, #4]
    OPENAMP_check_for_message();
1000046e:	e7e2      	b.n	10000436 <main+0x11e>
10000470:	50020000 	.word	0x50020000
10000474:	10624dd3 	.word	0x10624dd3
10000478:	100070c0 	.word	0x100070c0
1000047c:	1000711c 	.word	0x1000711c
10000480:	10020214 	.word	0x10020214
10000484:	10007160 	.word	0x10007160
10000488:	100008a9 	.word	0x100008a9
1000048c:	10020264 	.word	0x10020264
10000490:	10020468 	.word	0x10020468
10000494:	10020268 	.word	0x10020268
10000498:	0007a120 	.word	0x0007a120

1000049c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
1000049c:	b580      	push	{r7, lr}
1000049e:	b0d2      	sub	sp, #328	; 0x148
100004a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
100004a2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100004a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100004aa:	4618      	mov	r0, r3
100004ac:	f44f 738a 	mov.w	r3, #276	; 0x114
100004b0:	461a      	mov	r2, r3
100004b2:	2100      	movs	r1, #0
100004b4:	f005 ffd1 	bl	1000645a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
100004b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100004bc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100004c0:	4618      	mov	r0, r3
100004c2:	2330      	movs	r3, #48	; 0x30
100004c4:	461a      	mov	r2, r3
100004c6:	2100      	movs	r1, #0
100004c8:	f005 ffc7 	bl	1000645a <memset>

  /**Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
100004cc:	f001 fcf0 	bl	10001eb0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
100004d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100004d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100004d8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
100004dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100004e0:	f043 0320 	orr.w	r3, r3, #32
100004e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
100004e8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100004ec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100004f0:	2207      	movs	r2, #7
100004f2:	601a      	str	r2, [r3, #0]
                |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIG;
100004f4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100004f8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100004fc:	f44f 62b0 	mov.w	r2, #1408	; 0x580
10000500:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
10000502:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000506:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000050a:	2201      	movs	r2, #1
1000050c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
1000050e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000512:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000516:	2201      	movs	r2, #1
10000518:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
1000051a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000051e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000522:	2210      	movs	r2, #16
10000524:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
10000526:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000052a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000052e:	2200      	movs	r2, #0
10000530:	615a      	str	r2, [r3, #20]

  /**PLL1 Config
  */
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
10000532:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000536:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000053a:	2202      	movs	r2, #2
1000053c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL12SOURCE_HSE;
1000053e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000542:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000546:	2201      	movs	r2, #1
10000548:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 3;
1000054a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000054e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000552:	2203      	movs	r2, #3
10000554:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 81;
10000556:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000055a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000055e:	2251      	movs	r2, #81	; 0x51
10000560:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = 1;
10000562:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000566:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000056a:	2201      	movs	r2, #1
1000056c:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 1;
1000056e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000572:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000576:	2201      	movs	r2, #1
10000578:	639a      	str	r2, [r3, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLR = 1;
1000057a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000057e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000582:	2201      	movs	r2, #1
10000584:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLFRACV = 0x800;
10000586:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000058a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000058e:	f44f 6200 	mov.w	r2, #2048	; 0x800
10000592:	645a      	str	r2, [r3, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMODE = RCC_PLL_FRACTIONAL;
10000594:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000598:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000059c:	2201      	movs	r2, #1
1000059e:	649a      	str	r2, [r3, #72]	; 0x48
  RCC_OscInitStruct.PLL.RPDFN_DIS = RCC_RPDFN_DIS_DISABLED;
100005a0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100005a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100005a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
100005ac:	651a      	str	r2, [r3, #80]	; 0x50
  RCC_OscInitStruct.PLL.TPDFN_DIS = RCC_TPDFN_DIS_DISABLED;
100005ae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100005b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100005b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
100005ba:	655a      	str	r2, [r3, #84]	; 0x54

    /**PLL2 Config
    */
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
100005bc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100005c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100005c4:	2202      	movs	r2, #2
100005c6:	661a      	str	r2, [r3, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLL12SOURCE_HSE;
100005c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100005cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100005d0:	2201      	movs	r2, #1
100005d2:	665a      	str	r2, [r3, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLLM = 3;
100005d4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100005d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100005dc:	2203      	movs	r2, #3
100005de:	669a      	str	r2, [r3, #104]	; 0x68
  RCC_OscInitStruct.PLL2.PLLN = 66;
100005e0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100005e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100005e8:	2242      	movs	r2, #66	; 0x42
100005ea:	66da      	str	r2, [r3, #108]	; 0x6c
  RCC_OscInitStruct.PLL2.PLLP = 2;
100005ec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100005f0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100005f4:	2202      	movs	r2, #2
100005f6:	671a      	str	r2, [r3, #112]	; 0x70
  RCC_OscInitStruct.PLL2.PLLQ = 1;
100005f8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100005fc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000600:	2201      	movs	r2, #1
10000602:	675a      	str	r2, [r3, #116]	; 0x74
  RCC_OscInitStruct.PLL2.PLLR = 1;
10000604:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000608:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000060c:	2201      	movs	r2, #1
1000060e:	679a      	str	r2, [r3, #120]	; 0x78
  RCC_OscInitStruct.PLL2.PLLFRACV = 0x1400;
10000610:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000614:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000618:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
1000061c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  RCC_OscInitStruct.PLL2.PLLMODE = RCC_PLL_FRACTIONAL;
10000620:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000624:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000628:	2201      	movs	r2, #1
1000062a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC_OscInitStruct.PLL2.RPDFN_DIS = RCC_RPDFN_DIS_DISABLED;
1000062e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000632:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000636:	f44f 4280 	mov.w	r2, #16384	; 0x4000
1000063a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  RCC_OscInitStruct.PLL2.TPDFN_DIS = RCC_TPDFN_DIS_DISABLED;
1000063e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000642:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000646:	f44f 5200 	mov.w	r2, #8192	; 0x2000
1000064a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /**PLL3 Config
    */
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
1000064e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000652:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000656:	2202      	movs	r2, #2
10000658:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLL3SOURCE_HSE;
1000065c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000660:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000664:	2201      	movs	r2, #1
10000666:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  RCC_OscInitStruct.PLL3.PLLM = 2;
1000066a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000066e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000672:	2202      	movs	r2, #2
10000674:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  RCC_OscInitStruct.PLL3.PLLN = 34;
10000678:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000067c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000680:	2222      	movs	r2, #34	; 0x22
10000682:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  RCC_OscInitStruct.PLL3.PLLP = 2;
10000686:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000068a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000068e:	2202      	movs	r2, #2
10000690:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  RCC_OscInitStruct.PLL3.PLLQ = 17;
10000694:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000698:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000069c:	2211      	movs	r2, #17
1000069e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  RCC_OscInitStruct.PLL3.PLLR = 37;
100006a2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100006a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100006aa:	2225      	movs	r2, #37	; 0x25
100006ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  RCC_OscInitStruct.PLL3.PLLRGE = RCC_PLL3IFRANGE_1;
100006b0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100006b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100006b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
100006bc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  RCC_OscInitStruct.PLL3.PLLFRACV = 0x1A04;
100006c0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100006c4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100006c8:	f641 2204 	movw	r2, #6660	; 0x1a04
100006cc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  RCC_OscInitStruct.PLL3.PLLMODE = RCC_PLL_FRACTIONAL;
100006d0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100006d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100006d8:	2201      	movs	r2, #1
100006da:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  RCC_OscInitStruct.PLL3.RPDFN_DIS = RCC_RPDFN_DIS_DISABLED;
100006de:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100006e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100006e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
100006ea:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  RCC_OscInitStruct.PLL3.TPDFN_DIS = RCC_TPDFN_DIS_DISABLED;
100006ee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100006f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100006f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
100006fa:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /**PLL4 Config
    */
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
100006fe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000702:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000706:	2202      	movs	r2, #2
10000708:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLL4SOURCE_HSE;
1000070c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000710:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000714:	2201      	movs	r2, #1
10000716:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  RCC_OscInitStruct.PLL4.PLLM = 4;
1000071a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000071e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000722:	2204      	movs	r2, #4
10000724:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  RCC_OscInitStruct.PLL4.PLLN = 99;
10000728:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000072c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000730:	2263      	movs	r2, #99	; 0x63
10000732:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  RCC_OscInitStruct.PLL4.PLLP = 6;
10000736:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000073a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000073e:	2206      	movs	r2, #6
10000740:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  RCC_OscInitStruct.PLL4.PLLQ = 8;
10000744:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000748:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000074c:	2208      	movs	r2, #8
1000074e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  RCC_OscInitStruct.PLL4.PLLR = 8;
10000752:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000756:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000075a:	2208      	movs	r2, #8
1000075c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  RCC_OscInitStruct.PLL4.PLLRGE = RCC_PLL4IFRANGE_0;
10000760:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000764:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000768:	2200      	movs	r2, #0
1000076a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  RCC_OscInitStruct.PLL4.PLLFRACV = 0;
1000076e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000772:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000776:	2200      	movs	r2, #0
10000778:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  RCC_OscInitStruct.PLL4.PLLMODE = RCC_PLL_INTEGER;
1000077c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000780:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000784:	2200      	movs	r2, #0
10000786:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  RCC_OscInitStruct.PLL4.RPDFN_DIS = RCC_RPDFN_DIS_DISABLED;
1000078a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000078e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000792:	f44f 4280 	mov.w	r2, #16384	; 0x4000
10000796:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  RCC_OscInitStruct.PLL4.TPDFN_DIS = RCC_TPDFN_DIS_DISABLED;
1000079a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000079e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100007a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
100007a6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
100007aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
100007ae:	4618      	mov	r0, r3
100007b0:	f001 fb8e 	bl	10001ed0 <HAL_RCC_OscConfig>
100007b4:	4603      	mov	r3, r0
100007b6:	2b00      	cmp	r3, #0
100007b8:	d001      	beq.n	100007be <SystemClock_Config+0x322>
  {
  Error_Handler();
100007ba:	f000 f93d 	bl	10000a38 <Error_Handler>
  }
  /**RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
100007be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100007c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100007c6:	22ff      	movs	r2, #255	; 0xff
100007c8:	601a      	str	r2, [r3, #0]
                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                |RCC_CLOCKTYPE_PCLK5|RCC_CLOCKTYPE_MPU;
  RCC_ClkInitStruct.MPUInit.MPU_Clock = RCC_MPUSOURCE_PLL1;
100007ca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100007ce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100007d2:	2202      	movs	r2, #2
100007d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.MPUInit.MPU_Div = RCC_MPU_DIV2;
100007d6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100007da:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100007de:	2201      	movs	r2, #1
100007e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_PLL2;
100007e2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100007e6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100007ea:	2202      	movs	r2, #2
100007ec:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
100007ee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100007f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100007f6:	2200      	movs	r2, #0
100007f8:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_PLL3;
100007fa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100007fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000802:	2203      	movs	r2, #3
10000804:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
10000806:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000080a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000080e:	2200      	movs	r2, #0
10000810:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV2;
10000812:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000816:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000081a:	2201      	movs	r2, #1
1000081c:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV4;
1000081e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000822:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000826:	2202      	movs	r2, #2
10000828:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV2;
1000082a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000082e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000832:	2201      	movs	r2, #1
10000834:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV2;
10000836:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000083a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000083e:	2201      	movs	r2, #1
10000840:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV2;
10000842:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000846:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000084a:	2201      	movs	r2, #1
1000084c:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
1000084e:	1d3b      	adds	r3, r7, #4
10000850:	4618      	mov	r0, r3
10000852:	f002 f8db 	bl	10002a0c <HAL_RCC_ClockConfig>
10000856:	4603      	mov	r3, r0
10000858:	2b00      	cmp	r3, #0
1000085a:	d001      	beq.n	10000860 <SystemClock_Config+0x3c4>
  {
  Error_Handler();
1000085c:	f000 f8ec 	bl	10000a38 <Error_Handler>
  }

  /**Set the HSE division factor for RTC clock
  */
  __HAL_RCC_RTC_HSEDIV(24);
10000860:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10000866:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
1000086a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000086e:	f043 0317 	orr.w	r3, r3, #23
10000872:	6453      	str	r3, [r2, #68]	; 0x44
}
10000874:	bf00      	nop
10000876:	f507 77a4 	add.w	r7, r7, #328	; 0x148
1000087a:	46bd      	mov	sp, r7
1000087c:	bd80      	pop	{r7, pc}
	...

10000880 <MX_IPCC_Init>:
  * @brief IPPC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
10000880:	b580      	push	{r7, lr}
10000882:	af00      	add	r7, sp, #0

  hipcc.Instance = IPCC;
10000884:	4b06      	ldr	r3, [pc, #24]	; (100008a0 <MX_IPCC_Init+0x20>)
10000886:	4a07      	ldr	r2, [pc, #28]	; (100008a4 <MX_IPCC_Init+0x24>)
10000888:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
1000088a:	4805      	ldr	r0, [pc, #20]	; (100008a0 <MX_IPCC_Init+0x20>)
1000088c:	f001 f948 	bl	10001b20 <HAL_IPCC_Init>
10000890:	4603      	mov	r3, r0
10000892:	2b00      	cmp	r3, #0
10000894:	d001      	beq.n	1000089a <MX_IPCC_Init+0x1a>
  {
     Error_Handler();
10000896:	f000 f8cf 	bl	10000a38 <Error_Handler>
  }
}
1000089a:	bf00      	nop
1000089c:	bd80      	pop	{r7, pc}
1000089e:	bf00      	nop
100008a0:	100201d8 	.word	0x100201d8
100008a4:	4c001000 	.word	0x4c001000

100008a8 <VIRT_UART0_RxCpltCallback>:
    memcpy(VirtUart1ChannelBuffRx, huart->pRxBuffPtr, VirtUart1ChannelRxSize);
    VirtUart1RxMsg = SET;
}

void VIRT_UART0_RxCpltCallback(VIRT_UART_HandleTypeDef *huart)
{
100008a8:	b590      	push	{r4, r7, lr}
100008aa:	b085      	sub	sp, #20
100008ac:	af00      	add	r7, sp, #0
100008ae:	6078      	str	r0, [r7, #4]
	char* strmsg = (char*)huart->pRxBuffPtr;
100008b0:	687b      	ldr	r3, [r7, #4]
100008b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
100008b4:	60bb      	str	r3, [r7, #8]
	char* msg = 0;
100008b6:	2300      	movs	r3, #0
100008b8:	60fb      	str	r3, [r7, #12]
	if(strncmp(strmsg,"hello",5) == 0)
100008ba:	2205      	movs	r2, #5
100008bc:	4950      	ldr	r1, [pc, #320]	; (10000a00 <VIRT_UART0_RxCpltCallback+0x158>)
100008be:	68b8      	ldr	r0, [r7, #8]
100008c0:	f005 fdd3 	bl	1000646a <strncmp>
100008c4:	4603      	mov	r3, r0
100008c6:	2b00      	cmp	r3, #0
100008c8:	d11a      	bne.n	10000900 <VIRT_UART0_RxCpltCallback+0x58>
	{
		msg  = "Greetings from Cortex-M4 Microcontroller!\n";
100008ca:	4b4e      	ldr	r3, [pc, #312]	; (10000a04 <VIRT_UART0_RxCpltCallback+0x15c>)
100008cc:	60fb      	str	r3, [r7, #12]
		log_info("1");
100008ce:	f000 fdf7 	bl	100014c0 <HAL_GetTick>
100008d2:	4603      	mov	r3, r0
100008d4:	4a4c      	ldr	r2, [pc, #304]	; (10000a08 <VIRT_UART0_RxCpltCallback+0x160>)
100008d6:	fba2 2303 	umull	r2, r3, r2, r3
100008da:	099c      	lsrs	r4, r3, #6
100008dc:	f000 fdf0 	bl	100014c0 <HAL_GetTick>
100008e0:	4602      	mov	r2, r0
100008e2:	4b49      	ldr	r3, [pc, #292]	; (10000a08 <VIRT_UART0_RxCpltCallback+0x160>)
100008e4:	fba3 1302 	umull	r1, r3, r3, r2
100008e8:	099b      	lsrs	r3, r3, #6
100008ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
100008ee:	fb01 f303 	mul.w	r3, r1, r3
100008f2:	1ad3      	subs	r3, r2, r3
100008f4:	461a      	mov	r2, r3
100008f6:	4621      	mov	r1, r4
100008f8:	4844      	ldr	r0, [pc, #272]	; (10000a0c <VIRT_UART0_RxCpltCallback+0x164>)
100008fa:	f005 fd59 	bl	100063b0 <iprintf>
100008fe:	e05f      	b.n	100009c0 <VIRT_UART0_RxCpltCallback+0x118>
	}
	else if(strncmp(strmsg,"no",2) == 0)
10000900:	2202      	movs	r2, #2
10000902:	4943      	ldr	r1, [pc, #268]	; (10000a10 <VIRT_UART0_RxCpltCallback+0x168>)
10000904:	68b8      	ldr	r0, [r7, #8]
10000906:	f005 fdb0 	bl	1000646a <strncmp>
1000090a:	4603      	mov	r3, r0
1000090c:	2b00      	cmp	r3, #0
1000090e:	d11a      	bne.n	10000946 <VIRT_UART0_RxCpltCallback+0x9e>
	{
		msg = "Testing with no string potentiometer\n";
10000910:	4b40      	ldr	r3, [pc, #256]	; (10000a14 <VIRT_UART0_RxCpltCallback+0x16c>)
10000912:	60fb      	str	r3, [r7, #12]
		log_info("0");
10000914:	f000 fdd4 	bl	100014c0 <HAL_GetTick>
10000918:	4603      	mov	r3, r0
1000091a:	4a3b      	ldr	r2, [pc, #236]	; (10000a08 <VIRT_UART0_RxCpltCallback+0x160>)
1000091c:	fba2 2303 	umull	r2, r3, r2, r3
10000920:	099c      	lsrs	r4, r3, #6
10000922:	f000 fdcd 	bl	100014c0 <HAL_GetTick>
10000926:	4602      	mov	r2, r0
10000928:	4b37      	ldr	r3, [pc, #220]	; (10000a08 <VIRT_UART0_RxCpltCallback+0x160>)
1000092a:	fba3 1302 	umull	r1, r3, r3, r2
1000092e:	099b      	lsrs	r3, r3, #6
10000930:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
10000934:	fb01 f303 	mul.w	r3, r1, r3
10000938:	1ad3      	subs	r3, r2, r3
1000093a:	461a      	mov	r2, r3
1000093c:	4621      	mov	r1, r4
1000093e:	4836      	ldr	r0, [pc, #216]	; (10000a18 <VIRT_UART0_RxCpltCallback+0x170>)
10000940:	f005 fd36 	bl	100063b0 <iprintf>
10000944:	e03c      	b.n	100009c0 <VIRT_UART0_RxCpltCallback+0x118>
	}
	else if(strncmp(strmsg,"yes",3) == 0)
10000946:	2203      	movs	r2, #3
10000948:	4934      	ldr	r1, [pc, #208]	; (10000a1c <VIRT_UART0_RxCpltCallback+0x174>)
1000094a:	68b8      	ldr	r0, [r7, #8]
1000094c:	f005 fd8d 	bl	1000646a <strncmp>
10000950:	4603      	mov	r3, r0
10000952:	2b00      	cmp	r3, #0
10000954:	d11a      	bne.n	1000098c <VIRT_UART0_RxCpltCallback+0xe4>
	{
		msg = "Testing with string potentiometer\n";
10000956:	4b32      	ldr	r3, [pc, #200]	; (10000a20 <VIRT_UART0_RxCpltCallback+0x178>)
10000958:	60fb      	str	r3, [r7, #12]
		log_info("1");
1000095a:	f000 fdb1 	bl	100014c0 <HAL_GetTick>
1000095e:	4603      	mov	r3, r0
10000960:	4a29      	ldr	r2, [pc, #164]	; (10000a08 <VIRT_UART0_RxCpltCallback+0x160>)
10000962:	fba2 2303 	umull	r2, r3, r2, r3
10000966:	099c      	lsrs	r4, r3, #6
10000968:	f000 fdaa 	bl	100014c0 <HAL_GetTick>
1000096c:	4602      	mov	r2, r0
1000096e:	4b26      	ldr	r3, [pc, #152]	; (10000a08 <VIRT_UART0_RxCpltCallback+0x160>)
10000970:	fba3 1302 	umull	r1, r3, r3, r2
10000974:	099b      	lsrs	r3, r3, #6
10000976:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1000097a:	fb01 f303 	mul.w	r3, r1, r3
1000097e:	1ad3      	subs	r3, r2, r3
10000980:	461a      	mov	r2, r3
10000982:	4621      	mov	r1, r4
10000984:	4821      	ldr	r0, [pc, #132]	; (10000a0c <VIRT_UART0_RxCpltCallback+0x164>)
10000986:	f005 fd13 	bl	100063b0 <iprintf>
1000098a:	e019      	b.n	100009c0 <VIRT_UART0_RxCpltCallback+0x118>
	}
	else
	{
		msg = "Error\n";
1000098c:	4b25      	ldr	r3, [pc, #148]	; (10000a24 <VIRT_UART0_RxCpltCallback+0x17c>)
1000098e:	60fb      	str	r3, [r7, #12]
		log_info("%s: not expected\n",strmsg);
10000990:	f000 fd96 	bl	100014c0 <HAL_GetTick>
10000994:	4603      	mov	r3, r0
10000996:	4a1c      	ldr	r2, [pc, #112]	; (10000a08 <VIRT_UART0_RxCpltCallback+0x160>)
10000998:	fba2 2303 	umull	r2, r3, r2, r3
1000099c:	099c      	lsrs	r4, r3, #6
1000099e:	f000 fd8f 	bl	100014c0 <HAL_GetTick>
100009a2:	4603      	mov	r3, r0
100009a4:	4a18      	ldr	r2, [pc, #96]	; (10000a08 <VIRT_UART0_RxCpltCallback+0x160>)
100009a6:	fba2 1203 	umull	r1, r2, r2, r3
100009aa:	0992      	lsrs	r2, r2, #6
100009ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
100009b0:	fb01 f202 	mul.w	r2, r1, r2
100009b4:	1a9a      	subs	r2, r3, r2
100009b6:	68bb      	ldr	r3, [r7, #8]
100009b8:	4621      	mov	r1, r4
100009ba:	481b      	ldr	r0, [pc, #108]	; (10000a28 <VIRT_UART0_RxCpltCallback+0x180>)
100009bc:	f005 fcf8 	bl	100063b0 <iprintf>
	}



    VirtUart0ChannelRxSize = strlen(msg) < MAX_BUFFER_SIZE? strlen(msg) : MAX_BUFFER_SIZE-1;
100009c0:	68f8      	ldr	r0, [r7, #12]
100009c2:	f7ff fb47 	bl	10000054 <strlen>
100009c6:	4603      	mov	r3, r0
100009c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
100009cc:	d205      	bcs.n	100009da <VIRT_UART0_RxCpltCallback+0x132>
100009ce:	68f8      	ldr	r0, [r7, #12]
100009d0:	f7ff fb40 	bl	10000054 <strlen>
100009d4:	4603      	mov	r3, r0
100009d6:	b29b      	uxth	r3, r3
100009d8:	e001      	b.n	100009de <VIRT_UART0_RxCpltCallback+0x136>
100009da:	f240 13ff 	movw	r3, #511	; 0x1ff
100009de:	4a13      	ldr	r2, [pc, #76]	; (10000a2c <VIRT_UART0_RxCpltCallback+0x184>)
100009e0:	8013      	strh	r3, [r2, #0]
    memcpy(VirtUart0ChannelBuffRx,msg, VirtUart0ChannelRxSize);
100009e2:	4b12      	ldr	r3, [pc, #72]	; (10000a2c <VIRT_UART0_RxCpltCallback+0x184>)
100009e4:	881b      	ldrh	r3, [r3, #0]
100009e6:	461a      	mov	r2, r3
100009e8:	68f9      	ldr	r1, [r7, #12]
100009ea:	4811      	ldr	r0, [pc, #68]	; (10000a30 <VIRT_UART0_RxCpltCallback+0x188>)
100009ec:	f005 fde4 	bl	100065b8 <memcpy>
    VirtUart0RxMsg = SET;
100009f0:	4b10      	ldr	r3, [pc, #64]	; (10000a34 <VIRT_UART0_RxCpltCallback+0x18c>)
100009f2:	2201      	movs	r2, #1
100009f4:	701a      	strb	r2, [r3, #0]
}
100009f6:	bf00      	nop
100009f8:	3714      	adds	r7, #20
100009fa:	46bd      	mov	sp, r7
100009fc:	bd90      	pop	{r4, r7, pc}
100009fe:	bf00      	nop
10000a00:	100071d8 	.word	0x100071d8
10000a04:	100071e0 	.word	0x100071e0
10000a08:	10624dd3 	.word	0x10624dd3
10000a0c:	1000720c 	.word	0x1000720c
10000a10:	10007224 	.word	0x10007224
10000a14:	10007228 	.word	0x10007228
10000a18:	10007250 	.word	0x10007250
10000a1c:	10007268 	.word	0x10007268
10000a20:	1000726c 	.word	0x1000726c
10000a24:	10007290 	.word	0x10007290
10000a28:	10007298 	.word	0x10007298
10000a2c:	10020468 	.word	0x10020468
10000a30:	10020268 	.word	0x10020268
10000a34:	10020264 	.word	0x10020264

10000a38 <Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void Error_Handler(void)
{
10000a38:	b598      	push	{r3, r4, r7, lr}
10000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  log_err("Error_Handler");
10000a3c:	f000 fd40 	bl	100014c0 <HAL_GetTick>
10000a40:	4603      	mov	r3, r0
10000a42:	4a0c      	ldr	r2, [pc, #48]	; (10000a74 <Error_Handler+0x3c>)
10000a44:	fba2 2303 	umull	r2, r3, r2, r3
10000a48:	099c      	lsrs	r4, r3, #6
10000a4a:	f000 fd39 	bl	100014c0 <HAL_GetTick>
10000a4e:	4602      	mov	r2, r0
10000a50:	4b08      	ldr	r3, [pc, #32]	; (10000a74 <Error_Handler+0x3c>)
10000a52:	fba3 1302 	umull	r1, r3, r3, r2
10000a56:	099b      	lsrs	r3, r3, #6
10000a58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
10000a5c:	fb01 f303 	mul.w	r3, r1, r3
10000a60:	1ad3      	subs	r3, r2, r3
10000a62:	461a      	mov	r2, r3
10000a64:	4621      	mov	r1, r4
10000a66:	4804      	ldr	r0, [pc, #16]	; (10000a78 <Error_Handler+0x40>)
10000a68:	f005 fca2 	bl	100063b0 <iprintf>
  BSP_LED_Off(LED7);
10000a6c:	2002      	movs	r0, #2
10000a6e:	f000 fc47 	bl	10001300 <BSP_LED_Off>
  while(1)
10000a72:	e7fe      	b.n	10000a72 <Error_Handler+0x3a>
10000a74:	10624dd3 	.word	0x10624dd3
10000a78:	100072c0 	.word	0x100072c0

10000a7c <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
10000a7c:	b598      	push	{r3, r4, r7, lr}
10000a7e:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN PRE_MAILBOX_INIT */

   /* USER CODE END  PRE_MAILBOX_INIT */

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_1, IPCC_CHANNEL_DIR_RX,
10000a80:	4b25      	ldr	r3, [pc, #148]	; (10000b18 <MAILBOX_Init+0x9c>)
10000a82:	2201      	movs	r2, #1
10000a84:	2100      	movs	r1, #0
10000a86:	4825      	ldr	r0, [pc, #148]	; (10000b1c <MAILBOX_Init+0xa0>)
10000a88:	f001 f87c 	bl	10001b84 <HAL_IPCC_ActivateNotification>
10000a8c:	4603      	mov	r3, r0
10000a8e:	2b00      	cmp	r3, #0
10000a90:	d01a      	beq.n	10000ac8 <MAILBOX_Init+0x4c>
          IPCC_channel1_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_1 RX fail\n", __func__);
10000a92:	f000 fd15 	bl	100014c0 <HAL_GetTick>
10000a96:	4603      	mov	r3, r0
10000a98:	4a21      	ldr	r2, [pc, #132]	; (10000b20 <MAILBOX_Init+0xa4>)
10000a9a:	fba2 2303 	umull	r2, r3, r2, r3
10000a9e:	099c      	lsrs	r4, r3, #6
10000aa0:	f000 fd0e 	bl	100014c0 <HAL_GetTick>
10000aa4:	4603      	mov	r3, r0
10000aa6:	4a1e      	ldr	r2, [pc, #120]	; (10000b20 <MAILBOX_Init+0xa4>)
10000aa8:	fba2 1203 	umull	r1, r2, r2, r3
10000aac:	0992      	lsrs	r2, r2, #6
10000aae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
10000ab2:	fb01 f202 	mul.w	r2, r1, r2
10000ab6:	1a9a      	subs	r2, r3, r2
10000ab8:	4b1a      	ldr	r3, [pc, #104]	; (10000b24 <MAILBOX_Init+0xa8>)
10000aba:	4621      	mov	r1, r4
10000abc:	481a      	ldr	r0, [pc, #104]	; (10000b28 <MAILBOX_Init+0xac>)
10000abe:	f005 fc77 	bl	100063b0 <iprintf>
    return -1;
10000ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10000ac6:	e024      	b.n	10000b12 <MAILBOX_Init+0x96>
  }

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_2, IPCC_CHANNEL_DIR_RX,
10000ac8:	4b18      	ldr	r3, [pc, #96]	; (10000b2c <MAILBOX_Init+0xb0>)
10000aca:	2201      	movs	r2, #1
10000acc:	2101      	movs	r1, #1
10000ace:	4813      	ldr	r0, [pc, #76]	; (10000b1c <MAILBOX_Init+0xa0>)
10000ad0:	f001 f858 	bl	10001b84 <HAL_IPCC_ActivateNotification>
10000ad4:	4603      	mov	r3, r0
10000ad6:	2b00      	cmp	r3, #0
10000ad8:	d01a      	beq.n	10000b10 <MAILBOX_Init+0x94>
          IPCC_channel2_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_2 RX fail\n", __func__);
10000ada:	f000 fcf1 	bl	100014c0 <HAL_GetTick>
10000ade:	4603      	mov	r3, r0
10000ae0:	4a0f      	ldr	r2, [pc, #60]	; (10000b20 <MAILBOX_Init+0xa4>)
10000ae2:	fba2 2303 	umull	r2, r3, r2, r3
10000ae6:	099c      	lsrs	r4, r3, #6
10000ae8:	f000 fcea 	bl	100014c0 <HAL_GetTick>
10000aec:	4603      	mov	r3, r0
10000aee:	4a0c      	ldr	r2, [pc, #48]	; (10000b20 <MAILBOX_Init+0xa4>)
10000af0:	fba2 1203 	umull	r1, r2, r2, r3
10000af4:	0992      	lsrs	r2, r2, #6
10000af6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
10000afa:	fb01 f202 	mul.w	r2, r1, r2
10000afe:	1a9a      	subs	r2, r3, r2
10000b00:	4b08      	ldr	r3, [pc, #32]	; (10000b24 <MAILBOX_Init+0xa8>)
10000b02:	4621      	mov	r1, r4
10000b04:	480a      	ldr	r0, [pc, #40]	; (10000b30 <MAILBOX_Init+0xb4>)
10000b06:	f005 fc53 	bl	100063b0 <iprintf>
    return -1;
10000b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10000b0e:	e000      	b.n	10000b12 <MAILBOX_Init+0x96>


  /* USER CODE BEGIN POST_MAILBOX_INIT */

  /* USER CODE END  POST_MAILBOX_INIT */
  return 0;
10000b10:	2300      	movs	r3, #0
}
10000b12:	4618      	mov	r0, r3
10000b14:	bd98      	pop	{r3, r4, r7, pc}
10000b16:	bf00      	nop
10000b18:	10000c25 	.word	0x10000c25
10000b1c:	100201d8 	.word	0x100201d8
10000b20:	10624dd3 	.word	0x10624dd3
10000b24:	100075c8 	.word	0x100075c8
10000b28:	100072e4 	.word	0x100072e4
10000b2c:	10000c51 	.word	0x10000c51
10000b30:	1000730c 	.word	0x1000730c

10000b34 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
10000b34:	b580      	push	{r7, lr}
10000b36:	b084      	sub	sp, #16
10000b38:	af00      	add	r7, sp, #0
10000b3a:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */
  int ret = -1;
10000b3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10000b40:	60fb      	str	r3, [r7, #12]

   /* USER CODE BEGIN PRE_MAILBOX_POLL */

   /* USER CODE END  PRE_MAILBOX_POLL */

   if (msg_received_ch1 == MBOX_BUF_FREE) {
10000b42:	4b0f      	ldr	r3, [pc, #60]	; (10000b80 <MAILBOX_Poll+0x4c>)
10000b44:	681b      	ldr	r3, [r3, #0]
10000b46:	2b02      	cmp	r3, #2
10000b48:	d108      	bne.n	10000b5c <MAILBOX_Poll+0x28>
   /* USER CODE BEGIN MSG_CHANNEL1 */

   /* USER CODE END  MSG_CHANNEL1 */

    OPENAMP_log_dbg("Running virt0 (ch_1 buf free)\r\n");
    rproc_virtio_notified(vdev, VRING0_ID);
10000b4a:	2100      	movs	r1, #0
10000b4c:	6878      	ldr	r0, [r7, #4]
10000b4e:	f003 fe80 	bl	10004852 <rproc_virtio_notified>
    ret = 0;
10000b52:	2300      	movs	r3, #0
10000b54:	60fb      	str	r3, [r7, #12]
    msg_received_ch1 = MBOX_NO_MSG;
10000b56:	4b0a      	ldr	r3, [pc, #40]	; (10000b80 <MAILBOX_Poll+0x4c>)
10000b58:	2200      	movs	r2, #0
10000b5a:	601a      	str	r2, [r3, #0]
  }

  if (msg_received_ch2 == MBOX_NEW_MSG) {
10000b5c:	4b09      	ldr	r3, [pc, #36]	; (10000b84 <MAILBOX_Poll+0x50>)
10000b5e:	681b      	ldr	r3, [r3, #0]
10000b60:	2b01      	cmp	r3, #1
10000b62:	d108      	bne.n	10000b76 <MAILBOX_Poll+0x42>
   /* USER CODE BEGIN MSG_CHANNEL2 */

   /* USER CODE END  MSG_CHANNEL2 */

    OPENAMP_log_dbg("Running virt1 (ch_2 new msg)\r\n");
    rproc_virtio_notified(vdev, VRING1_ID);
10000b64:	2101      	movs	r1, #1
10000b66:	6878      	ldr	r0, [r7, #4]
10000b68:	f003 fe73 	bl	10004852 <rproc_virtio_notified>
    msg_received_ch2 = MBOX_NO_MSG;
10000b6c:	4b05      	ldr	r3, [pc, #20]	; (10000b84 <MAILBOX_Poll+0x50>)
10000b6e:	2200      	movs	r2, #0
10000b70:	601a      	str	r2, [r3, #0]

    ret = 0;
10000b72:	2300      	movs	r3, #0
10000b74:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN POST_MAILBOX_POLL */

  /* USER CODE END  POST_MAILBOX_POLL */

  return ret;
10000b76:	68fb      	ldr	r3, [r7, #12]
}
10000b78:	4618      	mov	r0, r3
10000b7a:	3710      	adds	r7, #16
10000b7c:	46bd      	mov	sp, r7
10000b7e:	bd80      	pop	{r7, pc}
10000b80:	1002046c 	.word	0x1002046c
10000b84:	10020470 	.word	0x10020470

10000b88 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
10000b88:	b590      	push	{r4, r7, lr}
10000b8a:	b085      	sub	sp, #20
10000b8c:	af00      	add	r7, sp, #0
10000b8e:	6078      	str	r0, [r7, #4]
10000b90:	6039      	str	r1, [r7, #0]
   /* USER CODE BEGIN PRE_MAILBOX_NOTIFY */

   /* USER CODE END  PRE_MAILBOX_NOTIFY */

  /* Called after virtqueue processing: time to inform the remote */
  if (id == VRING0_ID) {
10000b92:	683b      	ldr	r3, [r7, #0]
10000b94:	2b00      	cmp	r3, #0
10000b96:	d102      	bne.n	10000b9e <MAILBOX_Notify+0x16>
    channel = IPCC_CHANNEL_1;
10000b98:	2300      	movs	r3, #0
10000b9a:	60fb      	str	r3, [r7, #12]
10000b9c:	e020      	b.n	10000be0 <MAILBOX_Notify+0x58>
    OPENAMP_log_dbg("Send msg on ch_1\r\n");
  }
  else if (id == VRING1_ID) {
10000b9e:	683b      	ldr	r3, [r7, #0]
10000ba0:	2b01      	cmp	r3, #1
10000ba2:	d102      	bne.n	10000baa <MAILBOX_Notify+0x22>
    /* Note: the OpenAMP framework never notifies this */
    channel = IPCC_CHANNEL_2;
10000ba4:	2301      	movs	r3, #1
10000ba6:	60fb      	str	r3, [r7, #12]
10000ba8:	e01a      	b.n	10000be0 <MAILBOX_Notify+0x58>
    OPENAMP_log_dbg("Send 'buff free' on ch_2\r\n");
  }
  else {
    OPENAMP_log_err("invalid vring (%d)\r\n", (int)id);
10000baa:	f000 fc89 	bl	100014c0 <HAL_GetTick>
10000bae:	4603      	mov	r3, r0
10000bb0:	4a19      	ldr	r2, [pc, #100]	; (10000c18 <MAILBOX_Notify+0x90>)
10000bb2:	fba2 2303 	umull	r2, r3, r2, r3
10000bb6:	099c      	lsrs	r4, r3, #6
10000bb8:	f000 fc82 	bl	100014c0 <HAL_GetTick>
10000bbc:	4603      	mov	r3, r0
10000bbe:	4a16      	ldr	r2, [pc, #88]	; (10000c18 <MAILBOX_Notify+0x90>)
10000bc0:	fba2 1203 	umull	r1, r2, r2, r3
10000bc4:	0992      	lsrs	r2, r2, #6
10000bc6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
10000bca:	fb01 f202 	mul.w	r2, r1, r2
10000bce:	1a9a      	subs	r2, r3, r2
10000bd0:	683b      	ldr	r3, [r7, #0]
10000bd2:	4621      	mov	r1, r4
10000bd4:	4811      	ldr	r0, [pc, #68]	; (10000c1c <MAILBOX_Notify+0x94>)
10000bd6:	f005 fbeb 	bl	100063b0 <iprintf>
    return -1;
10000bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10000bde:	e016      	b.n	10000c0e <MAILBOX_Notify+0x86>
  }

  /* Check that the channel is free (otherwise wait until it is) */
  if (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED) {
10000be0:	2200      	movs	r2, #0
10000be2:	68f9      	ldr	r1, [r7, #12]
10000be4:	480e      	ldr	r0, [pc, #56]	; (10000c20 <MAILBOX_Notify+0x98>)
10000be6:	f001 f81b 	bl	10001c20 <HAL_IPCC_GetChannelStatus>
10000bea:	4603      	mov	r3, r0
10000bec:	2b01      	cmp	r3, #1
10000bee:	d108      	bne.n	10000c02 <MAILBOX_Notify+0x7a>
    OPENAMP_log_dbg("Waiting for channel to be freed\r\n");
    while (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED)
10000bf0:	bf00      	nop
10000bf2:	2200      	movs	r2, #0
10000bf4:	68f9      	ldr	r1, [r7, #12]
10000bf6:	480a      	ldr	r0, [pc, #40]	; (10000c20 <MAILBOX_Notify+0x98>)
10000bf8:	f001 f812 	bl	10001c20 <HAL_IPCC_GetChannelStatus>
10000bfc:	4603      	mov	r3, r0
10000bfe:	2b01      	cmp	r3, #1
10000c00:	d0f7      	beq.n	10000bf2 <MAILBOX_Notify+0x6a>
      ;
  }

  /* Inform A7 (either new message, or buf free) */
  HAL_IPCC_NotifyCPU(&hipcc, channel, IPCC_CHANNEL_DIR_TX);
10000c02:	2200      	movs	r2, #0
10000c04:	68f9      	ldr	r1, [r7, #12]
10000c06:	4806      	ldr	r0, [pc, #24]	; (10000c20 <MAILBOX_Notify+0x98>)
10000c08:	f001 f83e 	bl	10001c88 <HAL_IPCC_NotifyCPU>

 /* USER CODE BEGIN POST_MAILBOX_NOTIFY */

 /* USER CODE END  POST_MAILBOX_NOTIFY */

  return 0;
10000c0c:	2300      	movs	r3, #0
}
10000c0e:	4618      	mov	r0, r3
10000c10:	3714      	adds	r7, #20
10000c12:	46bd      	mov	sp, r7
10000c14:	bd90      	pop	{r4, r7, pc}
10000c16:	bf00      	nop
10000c18:	10624dd3 	.word	0x10624dd3
10000c1c:	10007334 	.word	0x10007334
10000c20:	100201d8 	.word	0x100201d8

10000c24 <IPCC_channel1_callback>:

/* USER CODE END 0 */
/* Callback from IPCC Interrupt Handler: Master Processor informs that there are some free buffers */
void IPCC_channel1_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10000c24:	b580      	push	{r7, lr}
10000c26:	b084      	sub	sp, #16
10000c28:	af00      	add	r7, sp, #0
10000c2a:	60f8      	str	r0, [r7, #12]
10000c2c:	60b9      	str	r1, [r7, #8]
10000c2e:	4613      	mov	r3, r2
10000c30:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL1_CALLBACK */

  if (msg_received_ch1 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel1_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch1);

  msg_received_ch1 = MBOX_BUF_FREE;
10000c32:	4b06      	ldr	r3, [pc, #24]	; (10000c4c <IPCC_channel1_callback+0x28>)
10000c34:	2202      	movs	r2, #2
10000c36:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the 'buff free' msg */
  OPENAMP_log_dbg("Ack 'buff free' message on ch1\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
10000c38:	2201      	movs	r2, #1
10000c3a:	68b9      	ldr	r1, [r7, #8]
10000c3c:	68f8      	ldr	r0, [r7, #12]
10000c3e:	f001 f823 	bl	10001c88 <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL1_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL1_CALLBACK */
}
10000c42:	bf00      	nop
10000c44:	3710      	adds	r7, #16
10000c46:	46bd      	mov	sp, r7
10000c48:	bd80      	pop	{r7, pc}
10000c4a:	bf00      	nop
10000c4c:	1002046c 	.word	0x1002046c

10000c50 <IPCC_channel2_callback>:

/* Callback from IPCC Interrupt Handler: new message received from Master Processor */
void IPCC_channel2_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10000c50:	b580      	push	{r7, lr}
10000c52:	b084      	sub	sp, #16
10000c54:	af00      	add	r7, sp, #0
10000c56:	60f8      	str	r0, [r7, #12]
10000c58:	60b9      	str	r1, [r7, #8]
10000c5a:	4613      	mov	r3, r2
10000c5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL2_CALLBACK */

  if (msg_received_ch2 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel2_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch2);

  msg_received_ch2 = MBOX_NEW_MSG;
10000c5e:	4b06      	ldr	r3, [pc, #24]	; (10000c78 <IPCC_channel2_callback+0x28>)
10000c60:	2201      	movs	r2, #1
10000c62:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the new msg */
  OPENAMP_log_dbg("Ack new message on ch2\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
10000c64:	2201      	movs	r2, #1
10000c66:	68b9      	ldr	r1, [r7, #8]
10000c68:	68f8      	ldr	r0, [r7, #12]
10000c6a:	f001 f80d 	bl	10001c88 <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL2_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL2_CALLBACK */
}
10000c6e:	bf00      	nop
10000c70:	3710      	adds	r7, #16
10000c72:	46bd      	mov	sp, r7
10000c74:	bd80      	pop	{r7, pc}
10000c76:	bf00      	nop
10000c78:	10020470 	.word	0x10020470

10000c7c <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
10000c7c:	b480      	push	{r7}
10000c7e:	b083      	sub	sp, #12
10000c80:	af00      	add	r7, sp, #0
10000c82:	6078      	str	r0, [r7, #4]
10000c84:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
10000c86:	687b      	ldr	r3, [r7, #4]
10000c88:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
10000c8a:	683a      	ldr	r2, [r7, #0]
10000c8c:	429a      	cmp	r2, r3
10000c8e:	d209      	bcs.n	10000ca4 <metal_device_io_region+0x28>
10000c90:	683a      	ldr	r2, [r7, #0]
10000c92:	4613      	mov	r3, r2
10000c94:	00db      	lsls	r3, r3, #3
10000c96:	1a9b      	subs	r3, r3, r2
10000c98:	00db      	lsls	r3, r3, #3
10000c9a:	3308      	adds	r3, #8
10000c9c:	687a      	ldr	r2, [r7, #4]
10000c9e:	4413      	add	r3, r2
10000ca0:	3304      	adds	r3, #4
10000ca2:	e000      	b.n	10000ca6 <metal_device_io_region+0x2a>
10000ca4:	2300      	movs	r3, #0
}
10000ca6:	4618      	mov	r0, r3
10000ca8:	370c      	adds	r7, #12
10000caa:	46bd      	mov	sp, r7
10000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
10000cb0:	4770      	bx	lr
	...

10000cb4 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
10000cb4:	b590      	push	{r4, r7, lr}
10000cb6:	b08d      	sub	sp, #52	; 0x34
10000cb8:	af04      	add	r7, sp, #16
10000cba:	6078      	str	r0, [r7, #4]
  int status = 0;
10000cbc:	2300      	movs	r3, #0
10000cbe:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
10000cc0:	2300      	movs	r3, #0
10000cc2:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
10000cc4:	4a41      	ldr	r2, [pc, #260]	; (10000dcc <OPENAMP_shmem_init+0x118>)
10000cc6:	f107 0310 	add.w	r3, r7, #16
10000cca:	e892 0003 	ldmia.w	r2, {r0, r1}
10000cce:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
10000cd2:	2300      	movs	r3, #0
10000cd4:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
10000cd6:	2300      	movs	r3, #0
10000cd8:	60bb      	str	r3, [r7, #8]


  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
10000cda:	f107 0310 	add.w	r3, r7, #16
10000cde:	4618      	mov	r0, r3
10000ce0:	f003 f8f4 	bl	10003ecc <metal_init>

  status = metal_register_generic_device(&shm_device);
10000ce4:	483a      	ldr	r0, [pc, #232]	; (10000dd0 <OPENAMP_shmem_init+0x11c>)
10000ce6:	f003 f80f 	bl	10003d08 <metal_register_generic_device>
10000cea:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
10000cec:	69fb      	ldr	r3, [r7, #28]
10000cee:	2b00      	cmp	r3, #0
10000cf0:	d001      	beq.n	10000cf6 <OPENAMP_shmem_init+0x42>
    return status;
10000cf2:	69fb      	ldr	r3, [r7, #28]
10000cf4:	e066      	b.n	10000dc4 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
10000cf6:	f107 0318 	add.w	r3, r7, #24
10000cfa:	461a      	mov	r2, r3
10000cfc:	4935      	ldr	r1, [pc, #212]	; (10000dd4 <OPENAMP_shmem_init+0x120>)
10000cfe:	4836      	ldr	r0, [pc, #216]	; (10000dd8 <OPENAMP_shmem_init+0x124>)
10000d00:	f002 ffc4 	bl	10003c8c <metal_device_open>
10000d04:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
10000d06:	69fb      	ldr	r3, [r7, #28]
10000d08:	2b00      	cmp	r3, #0
10000d0a:	d001      	beq.n	10000d10 <OPENAMP_shmem_init+0x5c>
    return status;
10000d0c:	69fb      	ldr	r3, [r7, #28]
10000d0e:	e059      	b.n	10000dc4 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
10000d10:	4a32      	ldr	r2, [pc, #200]	; (10000ddc <OPENAMP_shmem_init+0x128>)
10000d12:	4b33      	ldr	r3, [pc, #204]	; (10000de0 <OPENAMP_shmem_init+0x12c>)
10000d14:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
10000d16:	69bb      	ldr	r3, [r7, #24]
10000d18:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, (unsigned int)-1, 0, NULL);
10000d1c:	4a31      	ldr	r2, [pc, #196]	; (10000de4 <OPENAMP_shmem_init+0x130>)
10000d1e:	4b2f      	ldr	r3, [pc, #188]	; (10000ddc <OPENAMP_shmem_init+0x128>)
10000d20:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
10000d22:	461a      	mov	r2, r3
10000d24:	2300      	movs	r3, #0
10000d26:	9302      	str	r3, [sp, #8]
10000d28:	2300      	movs	r3, #0
10000d2a:	9301      	str	r3, [sp, #4]
10000d2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10000d30:	9300      	str	r3, [sp, #0]
10000d32:	4613      	mov	r3, r2
10000d34:	4a2a      	ldr	r2, [pc, #168]	; (10000de0 <OPENAMP_shmem_init+0x12c>)
10000d36:	4929      	ldr	r1, [pc, #164]	; (10000ddc <OPENAMP_shmem_init+0x128>)
10000d38:	f003 f916 	bl	10003f68 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
10000d3c:	69bb      	ldr	r3, [r7, #24]
10000d3e:	2100      	movs	r1, #0
10000d40:	4618      	mov	r0, r3
10000d42:	f7ff ff9b 	bl	10000c7c <metal_device_io_region>
10000d46:	4603      	mov	r3, r0
10000d48:	4a27      	ldr	r2, [pc, #156]	; (10000de8 <OPENAMP_shmem_init+0x134>)
10000d4a:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
10000d4c:	4b26      	ldr	r3, [pc, #152]	; (10000de8 <OPENAMP_shmem_init+0x134>)
10000d4e:	681b      	ldr	r3, [r3, #0]
10000d50:	2b00      	cmp	r3, #0
10000d52:	d102      	bne.n	10000d5a <OPENAMP_shmem_init+0xa6>
    return -1;
10000d54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10000d58:	e034      	b.n	10000dc4 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
10000d5a:	f107 0208 	add.w	r2, r7, #8
10000d5e:	f107 030c 	add.w	r3, r7, #12
10000d62:	4619      	mov	r1, r3
10000d64:	6878      	ldr	r0, [r7, #4]
10000d66:	f000 f935 	bl	10000fd4 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
10000d6a:	68fb      	ldr	r3, [r7, #12]
10000d6c:	4a1f      	ldr	r2, [pc, #124]	; (10000dec <OPENAMP_shmem_init+0x138>)
10000d6e:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
10000d70:	4b1e      	ldr	r3, [pc, #120]	; (10000dec <OPENAMP_shmem_init+0x138>)
10000d72:	681b      	ldr	r3, [r3, #0]
10000d74:	2b00      	cmp	r3, #0
10000d76:	d102      	bne.n	10000d7e <OPENAMP_shmem_init+0xca>
  {
    return -1;
10000d78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10000d7c:	e022      	b.n	10000dc4 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
10000d7e:	69bb      	ldr	r3, [r7, #24]
10000d80:	f103 0044 	add.w	r0, r3, #68	; 0x44
10000d84:	4b19      	ldr	r3, [pc, #100]	; (10000dec <OPENAMP_shmem_init+0x138>)
10000d86:	6819      	ldr	r1, [r3, #0]
10000d88:	4b18      	ldr	r3, [pc, #96]	; (10000dec <OPENAMP_shmem_init+0x138>)
10000d8a:	681a      	ldr	r2, [r3, #0]
10000d8c:	68bb      	ldr	r3, [r7, #8]
10000d8e:	461c      	mov	r4, r3
10000d90:	2300      	movs	r3, #0
10000d92:	9302      	str	r3, [sp, #8]
10000d94:	2300      	movs	r3, #0
10000d96:	9301      	str	r3, [sp, #4]
10000d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10000d9c:	9300      	str	r3, [sp, #0]
10000d9e:	4623      	mov	r3, r4
10000da0:	f003 f8e2 	bl	10003f68 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
10000da4:	69bb      	ldr	r3, [r7, #24]
10000da6:	2101      	movs	r1, #1
10000da8:	4618      	mov	r0, r3
10000daa:	f7ff ff67 	bl	10000c7c <metal_device_io_region>
10000dae:	4603      	mov	r3, r0
10000db0:	4a0f      	ldr	r2, [pc, #60]	; (10000df0 <OPENAMP_shmem_init+0x13c>)
10000db2:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
10000db4:	4b0e      	ldr	r3, [pc, #56]	; (10000df0 <OPENAMP_shmem_init+0x13c>)
10000db6:	681b      	ldr	r3, [r3, #0]
10000db8:	2b00      	cmp	r3, #0
10000dba:	d102      	bne.n	10000dc2 <OPENAMP_shmem_init+0x10e>
    return -1;
10000dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10000dc0:	e000      	b.n	10000dc4 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
10000dc2:	2300      	movs	r3, #0
}
10000dc4:	4618      	mov	r0, r3
10000dc6:	3724      	adds	r7, #36	; 0x24
10000dc8:	46bd      	mov	sp, r7
10000dca:	bd90      	pop	{r4, r7, pc}
10000dcc:	10007374 	.word	0x10007374
10000dd0:	10020000 	.word	0x10020000
10000dd4:	10007360 	.word	0x10007360
10000dd8:	1000736c 	.word	0x1000736c
10000ddc:	10040000 	.word	0x10040000
10000de0:	10020518 	.word	0x10020518
10000de4:	10048000 	.word	0x10048000
10000de8:	10020474 	.word	0x10020474
10000dec:	1002047c 	.word	0x1002047c
10000df0:	10020478 	.word	0x10020478

10000df4 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
10000df4:	b590      	push	{r4, r7, lr}
10000df6:	b08b      	sub	sp, #44	; 0x2c
10000df8:	af04      	add	r7, sp, #16
10000dfa:	6078      	str	r0, [r7, #4]
10000dfc:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
10000dfe:	2300      	movs	r3, #0
10000e00:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
10000e02:	2300      	movs	r3, #0
10000e04:	613b      	str	r3, [r7, #16]
  int status = 0;
10000e06:	2300      	movs	r3, #0
10000e08:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
10000e0a:	f7ff fe37 	bl	10000a7c <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
10000e0e:	6878      	ldr	r0, [r7, #4]
10000e10:	f7ff ff50 	bl	10000cb4 <OPENAMP_shmem_init>
10000e14:	60f8      	str	r0, [r7, #12]
  if(status)
10000e16:	68fb      	ldr	r3, [r7, #12]
10000e18:	2b00      	cmp	r3, #0
10000e1a:	d001      	beq.n	10000e20 <MX_OPENAMP_Init+0x2c>
  {
    return status;
10000e1c:	68fb      	ldr	r3, [r7, #12]
10000e1e:	e068      	b.n	10000ef2 <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
10000e20:	6878      	ldr	r0, [r7, #4]
10000e22:	4b36      	ldr	r3, [pc, #216]	; (10000efc <MX_OPENAMP_Init+0x108>)
10000e24:	681b      	ldr	r3, [r3, #0]
10000e26:	f103 0218 	add.w	r2, r3, #24
10000e2a:	4b35      	ldr	r3, [pc, #212]	; (10000f00 <MX_OPENAMP_Init+0x10c>)
10000e2c:	681b      	ldr	r3, [r3, #0]
10000e2e:	2100      	movs	r1, #0
10000e30:	9102      	str	r1, [sp, #8]
10000e32:	4934      	ldr	r1, [pc, #208]	; (10000f04 <MX_OPENAMP_Init+0x110>)
10000e34:	9101      	str	r1, [sp, #4]
10000e36:	2100      	movs	r1, #0
10000e38:	9100      	str	r1, [sp, #0]
10000e3a:	21ff      	movs	r1, #255	; 0xff
10000e3c:	f003 fc2a 	bl	10004694 <rproc_virtio_create_vdev>
10000e40:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
10000e42:	693b      	ldr	r3, [r7, #16]
10000e44:	2b00      	cmp	r3, #0
10000e46:	d102      	bne.n	10000e4e <MX_OPENAMP_Init+0x5a>
  {
    return -1;
10000e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10000e4c:	e051      	b.n	10000ef2 <MX_OPENAMP_Init+0xfe>
  }


  rproc_virtio_wait_remote_ready(vdev);
10000e4e:	6938      	ldr	r0, [r7, #16]
10000e50:	f003 fd3b 	bl	100048ca <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
10000e54:	4b29      	ldr	r3, [pc, #164]	; (10000efc <MX_OPENAMP_Init+0x108>)
10000e56:	681b      	ldr	r3, [r3, #0]
10000e58:	3334      	adds	r3, #52	; 0x34
10000e5a:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
10000e5c:	697b      	ldr	r3, [r7, #20]
10000e5e:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
10000e60:	697b      	ldr	r3, [r7, #20]
10000e62:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
10000e64:	461c      	mov	r4, r3
10000e66:	4b28      	ldr	r3, [pc, #160]	; (10000f08 <MX_OPENAMP_Init+0x114>)
10000e68:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
10000e6a:	697a      	ldr	r2, [r7, #20]
10000e6c:	6892      	ldr	r2, [r2, #8]
10000e6e:	6979      	ldr	r1, [r7, #20]
10000e70:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
10000e72:	9102      	str	r1, [sp, #8]
10000e74:	9201      	str	r2, [sp, #4]
10000e76:	9300      	str	r3, [sp, #0]
10000e78:	4623      	mov	r3, r4
10000e7a:	4602      	mov	r2, r0
10000e7c:	2100      	movs	r1, #0
10000e7e:	6938      	ldr	r0, [r7, #16]
10000e80:	f003 fcb6 	bl	100047f0 <rproc_virtio_init_vring>
10000e84:	60f8      	str	r0, [r7, #12]
  if (status != 0)
10000e86:	68fb      	ldr	r3, [r7, #12]
10000e88:	2b00      	cmp	r3, #0
10000e8a:	d001      	beq.n	10000e90 <MX_OPENAMP_Init+0x9c>
  {
    return status;
10000e8c:	68fb      	ldr	r3, [r7, #12]
10000e8e:	e030      	b.n	10000ef2 <MX_OPENAMP_Init+0xfe>


  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
10000e90:	4b1a      	ldr	r3, [pc, #104]	; (10000efc <MX_OPENAMP_Init+0x108>)
10000e92:	681b      	ldr	r3, [r3, #0]
10000e94:	3348      	adds	r3, #72	; 0x48
10000e96:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10000e98:	697b      	ldr	r3, [r7, #20]
10000e9a:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
10000e9c:	697b      	ldr	r3, [r7, #20]
10000e9e:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10000ea0:	461c      	mov	r4, r3
10000ea2:	4b19      	ldr	r3, [pc, #100]	; (10000f08 <MX_OPENAMP_Init+0x114>)
10000ea4:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
10000ea6:	697a      	ldr	r2, [r7, #20]
10000ea8:	6892      	ldr	r2, [r2, #8]
10000eaa:	6979      	ldr	r1, [r7, #20]
10000eac:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10000eae:	9102      	str	r1, [sp, #8]
10000eb0:	9201      	str	r2, [sp, #4]
10000eb2:	9300      	str	r3, [sp, #0]
10000eb4:	4623      	mov	r3, r4
10000eb6:	4602      	mov	r2, r0
10000eb8:	2101      	movs	r1, #1
10000eba:	6938      	ldr	r0, [r7, #16]
10000ebc:	f003 fc98 	bl	100047f0 <rproc_virtio_init_vring>
10000ec0:	60f8      	str	r0, [r7, #12]
  if (status != 0)
10000ec2:	68fb      	ldr	r3, [r7, #12]
10000ec4:	2b00      	cmp	r3, #0
10000ec6:	d001      	beq.n	10000ecc <MX_OPENAMP_Init+0xd8>
  {
    return status;
10000ec8:	68fb      	ldr	r3, [r7, #12]
10000eca:	e012      	b.n	10000ef2 <MX_OPENAMP_Init+0xfe>
  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
                             (size_t)SHM_SIZE);
10000ecc:	4a0f      	ldr	r2, [pc, #60]	; (10000f0c <MX_OPENAMP_Init+0x118>)
10000ece:	4b10      	ldr	r3, [pc, #64]	; (10000f10 <MX_OPENAMP_Init+0x11c>)
10000ed0:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
10000ed2:	461a      	mov	r2, r3
10000ed4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
10000ed8:	480e      	ldr	r0, [pc, #56]	; (10000f14 <MX_OPENAMP_Init+0x120>)
10000eda:	f004 f98e 	bl	100051fa <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
10000ede:	4b0a      	ldr	r3, [pc, #40]	; (10000f08 <MX_OPENAMP_Init+0x114>)
10000ee0:	681b      	ldr	r3, [r3, #0]
10000ee2:	4a0c      	ldr	r2, [pc, #48]	; (10000f14 <MX_OPENAMP_Init+0x120>)
10000ee4:	9200      	str	r2, [sp, #0]
10000ee6:	683a      	ldr	r2, [r7, #0]
10000ee8:	6939      	ldr	r1, [r7, #16]
10000eea:	480b      	ldr	r0, [pc, #44]	; (10000f18 <MX_OPENAMP_Init+0x124>)
10000eec:	f004 fc82 	bl	100057f4 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
10000ef0:	2300      	movs	r3, #0
}
10000ef2:	4618      	mov	r0, r3
10000ef4:	371c      	adds	r7, #28
10000ef6:	46bd      	mov	sp, r7
10000ef8:	bd90      	pop	{r4, r7, pc}
10000efa:	bf00      	nop
10000efc:	1002047c 	.word	0x1002047c
10000f00:	10020478 	.word	0x10020478
10000f04:	10000b89 	.word	0x10000b89
10000f08:	10020474 	.word	0x10020474
10000f0c:	10048000 	.word	0x10048000
10000f10:	10040000 	.word	0x10040000
10000f14:	10020480 	.word	0x10020480
10000f18:	1002048c 	.word	0x1002048c

10000f1c <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
10000f1c:	b580      	push	{r7, lr}
10000f1e:	b08a      	sub	sp, #40	; 0x28
10000f20:	af04      	add	r7, sp, #16
10000f22:	60f8      	str	r0, [r7, #12]
10000f24:	60b9      	str	r1, [r7, #8]
10000f26:	607a      	str	r2, [r7, #4]
10000f28:	603b      	str	r3, [r7, #0]
  int ret = 0;
10000f2a:	2300      	movs	r3, #0
10000f2c:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
10000f2e:	6a3b      	ldr	r3, [r7, #32]
10000f30:	9302      	str	r3, [sp, #8]
10000f32:	683b      	ldr	r3, [r7, #0]
10000f34:	9301      	str	r3, [sp, #4]
10000f36:	687b      	ldr	r3, [r7, #4]
10000f38:	9300      	str	r3, [sp, #0]
10000f3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10000f3e:	68ba      	ldr	r2, [r7, #8]
10000f40:	4904      	ldr	r1, [pc, #16]	; (10000f54 <OPENAMP_create_endpoint+0x38>)
10000f42:	68f8      	ldr	r0, [r7, #12]
10000f44:	f003 ff8e 	bl	10004e64 <rpmsg_create_ept>
10000f48:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
10000f4a:	697b      	ldr	r3, [r7, #20]
}
10000f4c:	4618      	mov	r0, r3
10000f4e:	3718      	adds	r7, #24
10000f50:	46bd      	mov	sp, r7
10000f52:	bd80      	pop	{r7, pc}
10000f54:	1002048c 	.word	0x1002048c

10000f58 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
10000f58:	b580      	push	{r7, lr}
10000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
10000f5c:	4b03      	ldr	r3, [pc, #12]	; (10000f6c <OPENAMP_check_for_message+0x14>)
10000f5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
10000f60:	4618      	mov	r0, r3
10000f62:	f7ff fde7 	bl	10000b34 <MAILBOX_Poll>
}
10000f66:	bf00      	nop
10000f68:	bd80      	pop	{r7, pc}
10000f6a:	bf00      	nop
10000f6c:	1002048c 	.word	0x1002048c

10000f70 <log_buff>:

#if defined (__LOG_TRACE_IO_)
char system_log_buf[SYSTEM_TRACE_BUF_SZ];

__weak void log_buff(int ch)
{
10000f70:	b480      	push	{r7}
10000f72:	b083      	sub	sp, #12
10000f74:	af00      	add	r7, sp, #0
10000f76:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
 static int offset = 0;

	if (offset + 1 >= SYSTEM_TRACE_BUF_SZ)
10000f78:	4b0e      	ldr	r3, [pc, #56]	; (10000fb4 <log_buff+0x44>)
10000f7a:	681b      	ldr	r3, [r3, #0]
10000f7c:	f240 72fe 	movw	r2, #2046	; 0x7fe
10000f80:	4293      	cmp	r3, r2
10000f82:	dd02      	ble.n	10000f8a <log_buff+0x1a>
		offset = 0;
10000f84:	4b0b      	ldr	r3, [pc, #44]	; (10000fb4 <log_buff+0x44>)
10000f86:	2200      	movs	r2, #0
10000f88:	601a      	str	r2, [r3, #0]

	system_log_buf[offset] = ch;
10000f8a:	4b0a      	ldr	r3, [pc, #40]	; (10000fb4 <log_buff+0x44>)
10000f8c:	681b      	ldr	r3, [r3, #0]
10000f8e:	687a      	ldr	r2, [r7, #4]
10000f90:	b2d1      	uxtb	r1, r2
10000f92:	4a09      	ldr	r2, [pc, #36]	; (10000fb8 <log_buff+0x48>)
10000f94:	54d1      	strb	r1, [r2, r3]
	system_log_buf[offset++ + 1] = '\0';
10000f96:	4b07      	ldr	r3, [pc, #28]	; (10000fb4 <log_buff+0x44>)
10000f98:	681b      	ldr	r3, [r3, #0]
10000f9a:	1c5a      	adds	r2, r3, #1
10000f9c:	4905      	ldr	r1, [pc, #20]	; (10000fb4 <log_buff+0x44>)
10000f9e:	600a      	str	r2, [r1, #0]
10000fa0:	3301      	adds	r3, #1
10000fa2:	4a05      	ldr	r2, [pc, #20]	; (10000fb8 <log_buff+0x48>)
10000fa4:	2100      	movs	r1, #0
10000fa6:	54d1      	strb	r1, [r2, r3]
}
10000fa8:	bf00      	nop
10000faa:	370c      	adds	r7, #12
10000fac:	46bd      	mov	sp, r7
10000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
10000fb2:	4770      	bx	lr
10000fb4:	10020d1c 	.word	0x10020d1c
10000fb8:	1002051c 	.word	0x1002051c

10000fbc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __attribute__(( weak )) fputc(int ch, FILE *f)
#endif /* __GNUC__ */

#if defined (__LOG_UART_IO_) || defined (__LOG_TRACE_IO_)
PUTCHAR_PROTOTYPE
{
10000fbc:	b580      	push	{r7, lr}
10000fbe:	b082      	sub	sp, #8
10000fc0:	af00      	add	r7, sp, #0
10000fc2:	6078      	str	r0, [r7, #4]
#if defined (__LOG_UART_IO_)
extern UART_HandleTypeDef huart;
  HAL_UART_Transmit(&huart, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
#endif
#if defined (__LOG_TRACE_IO_)
	log_buff(ch);
10000fc4:	6878      	ldr	r0, [r7, #4]
10000fc6:	f7ff ffd3 	bl	10000f70 <log_buff>
#endif
	return ch;
10000fca:	687b      	ldr	r3, [r7, #4]
}
10000fcc:	4618      	mov	r0, r3
10000fce:	3708      	adds	r7, #8
10000fd0:	46bd      	mov	sp, r7
10000fd2:	bd80      	pop	{r7, pc}

10000fd4 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
10000fd4:	b480      	push	{r7}
10000fd6:	b085      	sub	sp, #20
10000fd8:	af00      	add	r7, sp, #0
10000fda:	60f8      	str	r0, [r7, #12]
10000fdc:	60b9      	str	r1, [r7, #8]
10000fde:	607a      	str	r2, [r7, #4]
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
10000fe0:	687b      	ldr	r3, [r7, #4]
10000fe2:	228c      	movs	r2, #140	; 0x8c
10000fe4:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
10000fe6:	68bb      	ldr	r3, [r7, #8]
10000fe8:	4a03      	ldr	r2, [pc, #12]	; (10000ff8 <resource_table_init+0x24>)
10000fea:	601a      	str	r2, [r3, #0]
}
10000fec:	bf00      	nop
10000fee:	3714      	adds	r7, #20
10000ff0:	46bd      	mov	sp, r7
10000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
10000ff6:	4770      	bx	lr
10000ff8:	10020130 	.word	0x10020130

10000ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10000ffc:	b480      	push	{r7}
10000ffe:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
10001000:	bf00      	nop
10001002:	46bd      	mov	sp, r7
10001004:	f85d 7b04 	ldr.w	r7, [sp], #4
10001008:	4770      	bx	lr
	...

1000100c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
1000100c:	b580      	push	{r7, lr}
1000100e:	b082      	sub	sp, #8
10001010:	af00      	add	r7, sp, #0
10001012:	6078      	str	r0, [r7, #4]

  if(hipcc->Instance==IPCC)
10001014:	687b      	ldr	r3, [r7, #4]
10001016:	681b      	ldr	r3, [r3, #0]
10001018:	4a0a      	ldr	r2, [pc, #40]	; (10001044 <HAL_IPCC_MspInit+0x38>)
1000101a:	4293      	cmp	r3, r2
1000101c:	d10d      	bne.n	1000103a <HAL_IPCC_MspInit+0x2e>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
1000101e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001022:	f44f 5280 	mov.w	r2, #4096	; 0x1000
10001026:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
  /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_RX1_IRQn, DEFAULT_IRQ_PRIO, 0);
1000102a:	2200      	movs	r2, #0
1000102c:	2101      	movs	r1, #1
1000102e:	2067      	movs	r0, #103	; 0x67
10001030:	f000 fb37 	bl	100016a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_RX1_IRQn);
10001034:	2067      	movs	r0, #103	; 0x67
10001036:	f000 fb50 	bl	100016da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
}

}
1000103a:	bf00      	nop
1000103c:	3708      	adds	r7, #8
1000103e:	46bd      	mov	sp, r7
10001040:	bd80      	pop	{r7, pc}
10001042:	bf00      	nop
10001044:	4c001000 	.word	0x4c001000

10001048 <NMI_Handler>:
/******************************************************************************/
/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
10001048:	b480      	push	{r7}
1000104a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
1000104c:	bf00      	nop
1000104e:	46bd      	mov	sp, r7
10001050:	f85d 7b04 	ldr.w	r7, [sp], #4
10001054:	4770      	bx	lr

10001056 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
10001056:	b480      	push	{r7}
10001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
1000105a:	e7fe      	b.n	1000105a <HardFault_Handler+0x4>

1000105c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
1000105c:	b480      	push	{r7}
1000105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
10001060:	e7fe      	b.n	10001060 <MemManage_Handler+0x4>

10001062 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
10001062:	b480      	push	{r7}
10001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
10001066:	e7fe      	b.n	10001066 <BusFault_Handler+0x4>

10001068 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
10001068:	b480      	push	{r7}
1000106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
1000106c:	e7fe      	b.n	1000106c <UsageFault_Handler+0x4>

1000106e <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
1000106e:	b480      	push	{r7}
10001070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10001072:	bf00      	nop
10001074:	46bd      	mov	sp, r7
10001076:	f85d 7b04 	ldr.w	r7, [sp], #4
1000107a:	4770      	bx	lr

1000107c <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
1000107c:	b480      	push	{r7}
1000107e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
10001080:	bf00      	nop
10001082:	46bd      	mov	sp, r7
10001084:	f85d 7b04 	ldr.w	r7, [sp], #4
10001088:	4770      	bx	lr

1000108a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
1000108a:	b480      	push	{r7}
1000108c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
1000108e:	bf00      	nop
10001090:	46bd      	mov	sp, r7
10001092:	f85d 7b04 	ldr.w	r7, [sp], #4
10001096:	4770      	bx	lr

10001098 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
10001098:	b580      	push	{r7, lr}
1000109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
1000109c:	f000 f9fc 	bl	10001498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
100010a0:	bf00      	nop
100010a2:	bd80      	pop	{r7, pc}

100010a4 <IPCC_RX1_IRQHandler>:

/**
  * @brief This function handles IPCC RX1 occupied interrupt.
  */
void IPCC_RX1_IRQHandler(void)
{
100010a4:	b580      	push	{r7, lr}
100010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_RX1_IRQn 0 */
  log_dbg("%s: IT RX1\r\n", __func__);
  /* USER CODE END IPCC_RX1_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
100010a8:	4802      	ldr	r0, [pc, #8]	; (100010b4 <IPCC_RX1_IRQHandler+0x10>)
100010aa:	f000 fe33 	bl	10001d14 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_RX1_IRQn 1 */

  /* USER CODE END IPCC_RX1_IRQn 1 */
}
100010ae:	bf00      	nop
100010b0:	bd80      	pop	{r7, pc}
100010b2:	bf00      	nop
100010b4:	100201d8 	.word	0x100201d8

100010b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
100010b8:	b480      	push	{r7}
100010ba:	af00      	add	r7, sp, #0
	return 1;
100010bc:	2301      	movs	r3, #1
}
100010be:	4618      	mov	r0, r3
100010c0:	46bd      	mov	sp, r7
100010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
100010c6:	4770      	bx	lr

100010c8 <_kill>:

int _kill(int pid, int sig)
{
100010c8:	b580      	push	{r7, lr}
100010ca:	b082      	sub	sp, #8
100010cc:	af00      	add	r7, sp, #0
100010ce:	6078      	str	r0, [r7, #4]
100010d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
100010d2:	f005 fa45 	bl	10006560 <__errno>
100010d6:	4603      	mov	r3, r0
100010d8:	2216      	movs	r2, #22
100010da:	601a      	str	r2, [r3, #0]
	return -1;
100010dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
100010e0:	4618      	mov	r0, r3
100010e2:	3708      	adds	r7, #8
100010e4:	46bd      	mov	sp, r7
100010e6:	bd80      	pop	{r7, pc}

100010e8 <_exit>:

void _exit (int status)
{
100010e8:	b580      	push	{r7, lr}
100010ea:	b082      	sub	sp, #8
100010ec:	af00      	add	r7, sp, #0
100010ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
100010f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
100010f4:	6878      	ldr	r0, [r7, #4]
100010f6:	f7ff ffe7 	bl	100010c8 <_kill>
	while (1) {}		/* Make sure we hang here */
100010fa:	e7fe      	b.n	100010fa <_exit+0x12>

100010fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
100010fc:	b580      	push	{r7, lr}
100010fe:	b086      	sub	sp, #24
10001100:	af00      	add	r7, sp, #0
10001102:	60f8      	str	r0, [r7, #12]
10001104:	60b9      	str	r1, [r7, #8]
10001106:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
10001108:	2300      	movs	r3, #0
1000110a:	617b      	str	r3, [r7, #20]
1000110c:	e00a      	b.n	10001124 <_read+0x28>
	{
		*ptr++ = __io_getchar();
1000110e:	f3af 8000 	nop.w
10001112:	4601      	mov	r1, r0
10001114:	68bb      	ldr	r3, [r7, #8]
10001116:	1c5a      	adds	r2, r3, #1
10001118:	60ba      	str	r2, [r7, #8]
1000111a:	b2ca      	uxtb	r2, r1
1000111c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
1000111e:	697b      	ldr	r3, [r7, #20]
10001120:	3301      	adds	r3, #1
10001122:	617b      	str	r3, [r7, #20]
10001124:	697a      	ldr	r2, [r7, #20]
10001126:	687b      	ldr	r3, [r7, #4]
10001128:	429a      	cmp	r2, r3
1000112a:	dbf0      	blt.n	1000110e <_read+0x12>
	}

return len;
1000112c:	687b      	ldr	r3, [r7, #4]
}
1000112e:	4618      	mov	r0, r3
10001130:	3718      	adds	r7, #24
10001132:	46bd      	mov	sp, r7
10001134:	bd80      	pop	{r7, pc}

10001136 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
10001136:	b580      	push	{r7, lr}
10001138:	b086      	sub	sp, #24
1000113a:	af00      	add	r7, sp, #0
1000113c:	60f8      	str	r0, [r7, #12]
1000113e:	60b9      	str	r1, [r7, #8]
10001140:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
10001142:	2300      	movs	r3, #0
10001144:	617b      	str	r3, [r7, #20]
10001146:	e009      	b.n	1000115c <_write+0x26>
	{
		__io_putchar(*ptr++);
10001148:	68bb      	ldr	r3, [r7, #8]
1000114a:	1c5a      	adds	r2, r3, #1
1000114c:	60ba      	str	r2, [r7, #8]
1000114e:	781b      	ldrb	r3, [r3, #0]
10001150:	4618      	mov	r0, r3
10001152:	f7ff ff33 	bl	10000fbc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
10001156:	697b      	ldr	r3, [r7, #20]
10001158:	3301      	adds	r3, #1
1000115a:	617b      	str	r3, [r7, #20]
1000115c:	697a      	ldr	r2, [r7, #20]
1000115e:	687b      	ldr	r3, [r7, #4]
10001160:	429a      	cmp	r2, r3
10001162:	dbf1      	blt.n	10001148 <_write+0x12>
	}
	return len;
10001164:	687b      	ldr	r3, [r7, #4]
}
10001166:	4618      	mov	r0, r3
10001168:	3718      	adds	r7, #24
1000116a:	46bd      	mov	sp, r7
1000116c:	bd80      	pop	{r7, pc}

1000116e <_close>:

int _close(int file)
{
1000116e:	b480      	push	{r7}
10001170:	b083      	sub	sp, #12
10001172:	af00      	add	r7, sp, #0
10001174:	6078      	str	r0, [r7, #4]
	return -1;
10001176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
1000117a:	4618      	mov	r0, r3
1000117c:	370c      	adds	r7, #12
1000117e:	46bd      	mov	sp, r7
10001180:	f85d 7b04 	ldr.w	r7, [sp], #4
10001184:	4770      	bx	lr

10001186 <_fstat>:


int _fstat(int file, struct stat *st)
{
10001186:	b480      	push	{r7}
10001188:	b083      	sub	sp, #12
1000118a:	af00      	add	r7, sp, #0
1000118c:	6078      	str	r0, [r7, #4]
1000118e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
10001190:	683b      	ldr	r3, [r7, #0]
10001192:	f44f 5200 	mov.w	r2, #8192	; 0x2000
10001196:	605a      	str	r2, [r3, #4]
	return 0;
10001198:	2300      	movs	r3, #0
}
1000119a:	4618      	mov	r0, r3
1000119c:	370c      	adds	r7, #12
1000119e:	46bd      	mov	sp, r7
100011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
100011a4:	4770      	bx	lr

100011a6 <_isatty>:

int _isatty(int file)
{
100011a6:	b480      	push	{r7}
100011a8:	b083      	sub	sp, #12
100011aa:	af00      	add	r7, sp, #0
100011ac:	6078      	str	r0, [r7, #4]
	return 1;
100011ae:	2301      	movs	r3, #1
}
100011b0:	4618      	mov	r0, r3
100011b2:	370c      	adds	r7, #12
100011b4:	46bd      	mov	sp, r7
100011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
100011ba:	4770      	bx	lr

100011bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
100011bc:	b480      	push	{r7}
100011be:	b085      	sub	sp, #20
100011c0:	af00      	add	r7, sp, #0
100011c2:	60f8      	str	r0, [r7, #12]
100011c4:	60b9      	str	r1, [r7, #8]
100011c6:	607a      	str	r2, [r7, #4]
	return 0;
100011c8:	2300      	movs	r3, #0
}
100011ca:	4618      	mov	r0, r3
100011cc:	3714      	adds	r7, #20
100011ce:	46bd      	mov	sp, r7
100011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
100011d4:	4770      	bx	lr
	...

100011d8 <BSP_LED_Init>:
  *            @arg  LED6
  *            @arg  LED7
  *            @arg  LED8
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
100011d8:	b580      	push	{r7, lr}
100011da:	b088      	sub	sp, #32
100011dc:	af00      	add	r7, sp, #0
100011de:	4603      	mov	r3, r0
100011e0:	71fb      	strb	r3, [r7, #7]
int32_t  status = BSP_ERROR_NONE;
100011e2:	2300      	movs	r3, #0
100011e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if(Led == LED6)
100011e6:	79fb      	ldrb	r3, [r7, #7]
100011e8:	2b00      	cmp	r3, #0
100011ea:	d105      	bne.n	100011f8 <BSP_LED_Init+0x20>
  {
    LED6_GPIO_CLK_ENABLE();
100011ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011f0:	2201      	movs	r2, #1
100011f2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
100011f6:	e019      	b.n	1000122c <BSP_LED_Init+0x54>
  }
  else if (Led == LED5)
100011f8:	79fb      	ldrb	r3, [r7, #7]
100011fa:	2b01      	cmp	r3, #1
100011fc:	d105      	bne.n	1000120a <BSP_LED_Init+0x32>
  {
    LED5_GPIO_CLK_ENABLE();
100011fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001202:	2201      	movs	r2, #1
10001204:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
10001208:	e010      	b.n	1000122c <BSP_LED_Init+0x54>
  }
  else if (Led == LED7)
1000120a:	79fb      	ldrb	r3, [r7, #7]
1000120c:	2b02      	cmp	r3, #2
1000120e:	d105      	bne.n	1000121c <BSP_LED_Init+0x44>
  {
    LED7_GPIO_CLK_ENABLE();
10001210:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001214:	2280      	movs	r2, #128	; 0x80
10001216:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
1000121a:	e007      	b.n	1000122c <BSP_LED_Init+0x54>
  }
  else if (Led == LED8)
1000121c:	79fb      	ldrb	r3, [r7, #7]
1000121e:	2b03      	cmp	r3, #3
10001220:	d104      	bne.n	1000122c <BSP_LED_Init+0x54>
  {
    LED8_GPIO_CLK_ENABLE();
10001222:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001226:	2208      	movs	r2, #8
10001228:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  }

    /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
1000122c:	79fb      	ldrb	r3, [r7, #7]
1000122e:	4a16      	ldr	r2, [pc, #88]	; (10001288 <BSP_LED_Init+0xb0>)
10001230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10001234:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
10001236:	2301      	movs	r3, #1
10001238:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
1000123a:	2301      	movs	r3, #1
1000123c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
1000123e:	2303      	movs	r3, #3
10001240:	617b      	str	r3, [r7, #20]
  BSP_ENTER_CRITICAL_SECTION(LED_PORT[Led]);
10001242:	79fb      	ldrb	r3, [r7, #7]
10001244:	4a11      	ldr	r2, [pc, #68]	; (1000128c <BSP_LED_Init+0xb4>)
10001246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1000124a:	2164      	movs	r1, #100	; 0x64
1000124c:	4618      	mov	r0, r3
1000124e:	f7fe ff61 	bl	10000114 <Periph_Lock>
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
10001252:	79fb      	ldrb	r3, [r7, #7]
10001254:	4a0d      	ldr	r2, [pc, #52]	; (1000128c <BSP_LED_Init+0xb4>)
10001256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1000125a:	f107 0208 	add.w	r2, r7, #8
1000125e:	4611      	mov	r1, r2
10001260:	4618      	mov	r0, r3
10001262:	f000 fa55 	bl	10001710 <HAL_GPIO_Init>
  BSP_EXIT_CRITICAL_SECTION(LED_PORT[Led]);
10001266:	79fb      	ldrb	r3, [r7, #7]
10001268:	4a08      	ldr	r2, [pc, #32]	; (1000128c <BSP_LED_Init+0xb4>)
1000126a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1000126e:	4618      	mov	r0, r3
10001270:	f7fe ffde 	bl	10000230 <Periph_Unlock>
  
  /* By default, turn off LED */
  BSP_LED_Off(Led);
10001274:	79fb      	ldrb	r3, [r7, #7]
10001276:	4618      	mov	r0, r3
10001278:	f000 f842 	bl	10001300 <BSP_LED_Off>

return status;
1000127c:	69fb      	ldr	r3, [r7, #28]
}
1000127e:	4618      	mov	r0, r3
10001280:	3720      	adds	r7, #32
10001282:	46bd      	mov	sp, r7
10001284:	bd80      	pop	{r7, pc}
10001286:	bf00      	nop
10001288:	100075d8 	.word	0x100075d8
1000128c:	1002008c 	.word	0x1002008c

10001290 <BSP_LED_On>:
  *            @arg  LED6
  *            @arg  LED7
  *            @arg  LED8
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
10001290:	b580      	push	{r7, lr}
10001292:	b084      	sub	sp, #16
10001294:	af00      	add	r7, sp, #0
10001296:	4603      	mov	r3, r0
10001298:	71fb      	strb	r3, [r7, #7]
  int32_t  status = BSP_ERROR_NONE;
1000129a:	2300      	movs	r3, #0
1000129c:	60fb      	str	r3, [r7, #12]
  if((Led == LED5) || (Led == LED6))
1000129e:	79fb      	ldrb	r3, [r7, #7]
100012a0:	2b01      	cmp	r3, #1
100012a2:	d002      	beq.n	100012aa <BSP_LED_On+0x1a>
100012a4:	79fb      	ldrb	r3, [r7, #7]
100012a6:	2b00      	cmp	r3, #0
100012a8:	d10d      	bne.n	100012c6 <BSP_LED_On+0x36>
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
100012aa:	79fb      	ldrb	r3, [r7, #7]
100012ac:	4a12      	ldr	r2, [pc, #72]	; (100012f8 <BSP_LED_On+0x68>)
100012ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
100012b2:	79fb      	ldrb	r3, [r7, #7]
100012b4:	4a11      	ldr	r2, [pc, #68]	; (100012fc <BSP_LED_On+0x6c>)
100012b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
100012ba:	b29b      	uxth	r3, r3
100012bc:	2200      	movs	r2, #0
100012be:	4619      	mov	r1, r3
100012c0:	f000 fbd0 	bl	10001a64 <HAL_GPIO_WritePin>
100012c4:	e012      	b.n	100012ec <BSP_LED_On+0x5c>
  }
  else if ((Led == LED7) || (Led == LED8))
100012c6:	79fb      	ldrb	r3, [r7, #7]
100012c8:	2b02      	cmp	r3, #2
100012ca:	d002      	beq.n	100012d2 <BSP_LED_On+0x42>
100012cc:	79fb      	ldrb	r3, [r7, #7]
100012ce:	2b03      	cmp	r3, #3
100012d0:	d10c      	bne.n	100012ec <BSP_LED_On+0x5c>
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
100012d2:	79fb      	ldrb	r3, [r7, #7]
100012d4:	4a08      	ldr	r2, [pc, #32]	; (100012f8 <BSP_LED_On+0x68>)
100012d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
100012da:	79fb      	ldrb	r3, [r7, #7]
100012dc:	4a07      	ldr	r2, [pc, #28]	; (100012fc <BSP_LED_On+0x6c>)
100012de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
100012e2:	b29b      	uxth	r3, r3
100012e4:	2201      	movs	r2, #1
100012e6:	4619      	mov	r1, r3
100012e8:	f000 fbbc 	bl	10001a64 <HAL_GPIO_WritePin>
  }
  return status;
100012ec:	68fb      	ldr	r3, [r7, #12]
}
100012ee:	4618      	mov	r0, r3
100012f0:	3710      	adds	r7, #16
100012f2:	46bd      	mov	sp, r7
100012f4:	bd80      	pop	{r7, pc}
100012f6:	bf00      	nop
100012f8:	1002008c 	.word	0x1002008c
100012fc:	100075d8 	.word	0x100075d8

10001300 <BSP_LED_Off>:
  *            @arg  LED6
  *            @arg  LED7
  *            @arg  LED8
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
10001300:	b580      	push	{r7, lr}
10001302:	b084      	sub	sp, #16
10001304:	af00      	add	r7, sp, #0
10001306:	4603      	mov	r3, r0
10001308:	71fb      	strb	r3, [r7, #7]
  int32_t  status = BSP_ERROR_NONE;
1000130a:	2300      	movs	r3, #0
1000130c:	60fb      	str	r3, [r7, #12]
  if((Led == LED5) || (Led == LED6))
1000130e:	79fb      	ldrb	r3, [r7, #7]
10001310:	2b01      	cmp	r3, #1
10001312:	d002      	beq.n	1000131a <BSP_LED_Off+0x1a>
10001314:	79fb      	ldrb	r3, [r7, #7]
10001316:	2b00      	cmp	r3, #0
10001318:	d10d      	bne.n	10001336 <BSP_LED_Off+0x36>
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
1000131a:	79fb      	ldrb	r3, [r7, #7]
1000131c:	4a12      	ldr	r2, [pc, #72]	; (10001368 <BSP_LED_Off+0x68>)
1000131e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
10001322:	79fb      	ldrb	r3, [r7, #7]
10001324:	4a11      	ldr	r2, [pc, #68]	; (1000136c <BSP_LED_Off+0x6c>)
10001326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1000132a:	b29b      	uxth	r3, r3
1000132c:	2201      	movs	r2, #1
1000132e:	4619      	mov	r1, r3
10001330:	f000 fb98 	bl	10001a64 <HAL_GPIO_WritePin>
10001334:	e012      	b.n	1000135c <BSP_LED_Off+0x5c>
  }
  else if ((Led == LED7) || (Led == LED8))
10001336:	79fb      	ldrb	r3, [r7, #7]
10001338:	2b02      	cmp	r3, #2
1000133a:	d002      	beq.n	10001342 <BSP_LED_Off+0x42>
1000133c:	79fb      	ldrb	r3, [r7, #7]
1000133e:	2b03      	cmp	r3, #3
10001340:	d10c      	bne.n	1000135c <BSP_LED_Off+0x5c>
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
10001342:	79fb      	ldrb	r3, [r7, #7]
10001344:	4a08      	ldr	r2, [pc, #32]	; (10001368 <BSP_LED_Off+0x68>)
10001346:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
1000134a:	79fb      	ldrb	r3, [r7, #7]
1000134c:	4a07      	ldr	r2, [pc, #28]	; (1000136c <BSP_LED_Off+0x6c>)
1000134e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10001352:	b29b      	uxth	r3, r3
10001354:	2200      	movs	r2, #0
10001356:	4619      	mov	r1, r3
10001358:	f000 fb84 	bl	10001a64 <HAL_GPIO_WritePin>
  }

  return status;
1000135c:	68fb      	ldr	r3, [r7, #12]
}
1000135e:	4618      	mov	r0, r3
10001360:	3710      	adds	r7, #16
10001362:	46bd      	mov	sp, r7
10001364:	bd80      	pop	{r7, pc}
10001366:	bf00      	nop
10001368:	1002008c 	.word	0x1002008c
1000136c:	100075d8 	.word	0x100075d8

10001370 <BSP_LED_Toggle>:
  *            @arg  LED6
  *            @arg  LED7
  *            @arg  LED8
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
10001370:	b580      	push	{r7, lr}
10001372:	b084      	sub	sp, #16
10001374:	af00      	add	r7, sp, #0
10001376:	4603      	mov	r3, r0
10001378:	71fb      	strb	r3, [r7, #7]
  int32_t  status = BSP_ERROR_NONE;
1000137a:	2300      	movs	r3, #0
1000137c:	60fb      	str	r3, [r7, #12]
  /* Toggle GPIO Led Pin */
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
1000137e:	79fb      	ldrb	r3, [r7, #7]
10001380:	4a08      	ldr	r2, [pc, #32]	; (100013a4 <BSP_LED_Toggle+0x34>)
10001382:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
10001386:	79fb      	ldrb	r3, [r7, #7]
10001388:	4907      	ldr	r1, [pc, #28]	; (100013a8 <BSP_LED_Toggle+0x38>)
1000138a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
1000138e:	b29b      	uxth	r3, r3
10001390:	4619      	mov	r1, r3
10001392:	4610      	mov	r0, r2
10001394:	f000 fb7f 	bl	10001a96 <HAL_GPIO_TogglePin>
  return status;
10001398:	68fb      	ldr	r3, [r7, #12]
}
1000139a:	4618      	mov	r0, r3
1000139c:	3710      	adds	r7, #16
1000139e:	46bd      	mov	sp, r7
100013a0:	bd80      	pop	{r7, pc}
100013a2:	bf00      	nop
100013a4:	1002008c 	.word	0x1002008c
100013a8:	100075d8 	.word	0x100075d8

100013ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
100013ac:	b480      	push	{r7}
100013ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
100013b0:	4b0f      	ldr	r3, [pc, #60]	; (100013f0 <SystemInit+0x44>)
100013b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
100013b6:	4a0e      	ldr	r2, [pc, #56]	; (100013f0 <SystemInit+0x44>)
100013b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
100013bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
100013c0:	4b0c      	ldr	r3, [pc, #48]	; (100013f4 <SystemInit+0x48>)
100013c2:	2200      	movs	r2, #0
100013c4:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
100013c6:	4b0b      	ldr	r3, [pc, #44]	; (100013f4 <SystemInit+0x48>)
100013c8:	2200      	movs	r2, #0
100013ca:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
100013cc:	4b09      	ldr	r3, [pc, #36]	; (100013f4 <SystemInit+0x48>)
100013ce:	2200      	movs	r2, #0
100013d0:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
100013d2:	4b08      	ldr	r3, [pc, #32]	; (100013f4 <SystemInit+0x48>)
100013d4:	2200      	movs	r2, #0
100013d6:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
100013d8:	4b06      	ldr	r3, [pc, #24]	; (100013f4 <SystemInit+0x48>)
100013da:	2200      	movs	r2, #0
100013dc:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
100013de:	4b05      	ldr	r3, [pc, #20]	; (100013f4 <SystemInit+0x48>)
100013e0:	2200      	movs	r2, #0
100013e2:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
100013e4:	bf00      	nop
100013e6:	46bd      	mov	sp, r7
100013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
100013ec:	4770      	bx	lr
100013ee:	bf00      	nop
100013f0:	e000ed00 	.word	0xe000ed00
100013f4:	5000d0c0 	.word	0x5000d0c0

100013f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
100013f8:	b580      	push	{r7, lr}
100013fa:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
100013fc:	2003      	movs	r0, #3
100013fe:	f000 f945 	bl	1000168c <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001402:	f001 fee0 	bl	100031c6 <HAL_RCC_GetSystemCoreClockFreq>
10001406:	4603      	mov	r3, r0
10001408:	4a07      	ldr	r2, [pc, #28]	; (10001428 <HAL_Init+0x30>)
1000140a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
1000140c:	200f      	movs	r0, #15
1000140e:	f000 f80d 	bl	1000142c <HAL_InitTick>
10001412:	4603      	mov	r3, r0
10001414:	2b00      	cmp	r3, #0
10001416:	d001      	beq.n	1000141c <HAL_Init+0x24>
  {
    return HAL_ERROR;
10001418:	2301      	movs	r3, #1
1000141a:	e002      	b.n	10001422 <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
1000141c:	f7ff fdee 	bl	10000ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
10001420:	2300      	movs	r3, #0
}
10001422:	4618      	mov	r0, r3
10001424:	bd80      	pop	{r7, pc}
10001426:	bf00      	nop
10001428:	1002009c 	.word	0x1002009c

1000142c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
1000142c:	b580      	push	{r7, lr}
1000142e:	b082      	sub	sp, #8
10001430:	af00      	add	r7, sp, #0
10001432:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
10001434:	4b15      	ldr	r3, [pc, #84]	; (1000148c <HAL_InitTick+0x60>)
10001436:	781b      	ldrb	r3, [r3, #0]
10001438:	2b00      	cmp	r3, #0
1000143a:	d101      	bne.n	10001440 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
1000143c:	2301      	movs	r3, #1
1000143e:	e021      	b.n	10001484 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
10001440:	4b13      	ldr	r3, [pc, #76]	; (10001490 <HAL_InitTick+0x64>)
10001442:	681a      	ldr	r2, [r3, #0]
10001444:	4b11      	ldr	r3, [pc, #68]	; (1000148c <HAL_InitTick+0x60>)
10001446:	781b      	ldrb	r3, [r3, #0]
10001448:	4619      	mov	r1, r3
1000144a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1000144e:	fbb3 f3f1 	udiv	r3, r3, r1
10001452:	fbb2 f3f3 	udiv	r3, r2, r3
10001456:	4618      	mov	r0, r3
10001458:	f000 f94d 	bl	100016f6 <HAL_SYSTICK_Config>
1000145c:	4603      	mov	r3, r0
1000145e:	2b00      	cmp	r3, #0
10001460:	d001      	beq.n	10001466 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
10001462:	2301      	movs	r3, #1
10001464:	e00e      	b.n	10001484 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10001466:	687b      	ldr	r3, [r7, #4]
10001468:	2b0f      	cmp	r3, #15
1000146a:	d80a      	bhi.n	10001482 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
1000146c:	2200      	movs	r2, #0
1000146e:	6879      	ldr	r1, [r7, #4]
10001470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
10001474:	f000 f915 	bl	100016a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
10001478:	4a06      	ldr	r2, [pc, #24]	; (10001494 <HAL_InitTick+0x68>)
1000147a:	687b      	ldr	r3, [r7, #4]
1000147c:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
1000147e:	2300      	movs	r3, #0
10001480:	e000      	b.n	10001484 <HAL_InitTick+0x58>
    return HAL_ERROR;
10001482:	2301      	movs	r3, #1
}
10001484:	4618      	mov	r0, r3
10001486:	3708      	adds	r7, #8
10001488:	46bd      	mov	sp, r7
1000148a:	bd80      	pop	{r7, pc}
1000148c:	100200a4 	.word	0x100200a4
10001490:	1002009c 	.word	0x1002009c
10001494:	100200a0 	.word	0x100200a0

10001498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10001498:	b480      	push	{r7}
1000149a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
1000149c:	4b06      	ldr	r3, [pc, #24]	; (100014b8 <HAL_IncTick+0x20>)
1000149e:	781b      	ldrb	r3, [r3, #0]
100014a0:	461a      	mov	r2, r3
100014a2:	4b06      	ldr	r3, [pc, #24]	; (100014bc <HAL_IncTick+0x24>)
100014a4:	681b      	ldr	r3, [r3, #0]
100014a6:	4413      	add	r3, r2
100014a8:	4a04      	ldr	r2, [pc, #16]	; (100014bc <HAL_IncTick+0x24>)
100014aa:	6013      	str	r3, [r2, #0]
}
100014ac:	bf00      	nop
100014ae:	46bd      	mov	sp, r7
100014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
100014b4:	4770      	bx	lr
100014b6:	bf00      	nop
100014b8:	100200a4 	.word	0x100200a4
100014bc:	10020d20 	.word	0x10020d20

100014c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
100014c0:	b480      	push	{r7}
100014c2:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
100014c4:	4b03      	ldr	r3, [pc, #12]	; (100014d4 <HAL_GetTick+0x14>)
100014c6:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
100014c8:	4618      	mov	r0, r3
100014ca:	46bd      	mov	sp, r7
100014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
100014d0:	4770      	bx	lr
100014d2:	bf00      	nop
100014d4:	10020d20 	.word	0x10020d20

100014d8 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
100014d8:	b480      	push	{r7}
100014da:	af00      	add	r7, sp, #0
 return __STM32MP1xx_HAL_VERSION;
100014dc:	f04f 7383 	mov.w	r3, #17170432	; 0x1060000
}
100014e0:	4618      	mov	r0, r3
100014e2:	46bd      	mov	sp, r7
100014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
100014e8:	4770      	bx	lr
	...

100014ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
100014ec:	b480      	push	{r7}
100014ee:	b085      	sub	sp, #20
100014f0:	af00      	add	r7, sp, #0
100014f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
100014f4:	687b      	ldr	r3, [r7, #4]
100014f6:	f003 0307 	and.w	r3, r3, #7
100014fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
100014fc:	4b0c      	ldr	r3, [pc, #48]	; (10001530 <__NVIC_SetPriorityGrouping+0x44>)
100014fe:	68db      	ldr	r3, [r3, #12]
10001500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
10001502:	68ba      	ldr	r2, [r7, #8]
10001504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
10001508:	4013      	ands	r3, r2
1000150a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
1000150c:	68fb      	ldr	r3, [r7, #12]
1000150e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10001510:	68bb      	ldr	r3, [r7, #8]
10001512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
10001514:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
10001518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
1000151c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
1000151e:	4a04      	ldr	r2, [pc, #16]	; (10001530 <__NVIC_SetPriorityGrouping+0x44>)
10001520:	68bb      	ldr	r3, [r7, #8]
10001522:	60d3      	str	r3, [r2, #12]
}
10001524:	bf00      	nop
10001526:	3714      	adds	r7, #20
10001528:	46bd      	mov	sp, r7
1000152a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000152e:	4770      	bx	lr
10001530:	e000ed00 	.word	0xe000ed00

10001534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
10001534:	b480      	push	{r7}
10001536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
10001538:	4b04      	ldr	r3, [pc, #16]	; (1000154c <__NVIC_GetPriorityGrouping+0x18>)
1000153a:	68db      	ldr	r3, [r3, #12]
1000153c:	0a1b      	lsrs	r3, r3, #8
1000153e:	f003 0307 	and.w	r3, r3, #7
}
10001542:	4618      	mov	r0, r3
10001544:	46bd      	mov	sp, r7
10001546:	f85d 7b04 	ldr.w	r7, [sp], #4
1000154a:	4770      	bx	lr
1000154c:	e000ed00 	.word	0xe000ed00

10001550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10001550:	b480      	push	{r7}
10001552:	b083      	sub	sp, #12
10001554:	af00      	add	r7, sp, #0
10001556:	4603      	mov	r3, r0
10001558:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
1000155a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000155e:	2b00      	cmp	r3, #0
10001560:	db0b      	blt.n	1000157a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10001562:	88fb      	ldrh	r3, [r7, #6]
10001564:	f003 021f 	and.w	r2, r3, #31
10001568:	4907      	ldr	r1, [pc, #28]	; (10001588 <__NVIC_EnableIRQ+0x38>)
1000156a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000156e:	095b      	lsrs	r3, r3, #5
10001570:	2001      	movs	r0, #1
10001572:	fa00 f202 	lsl.w	r2, r0, r2
10001576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
1000157a:	bf00      	nop
1000157c:	370c      	adds	r7, #12
1000157e:	46bd      	mov	sp, r7
10001580:	f85d 7b04 	ldr.w	r7, [sp], #4
10001584:	4770      	bx	lr
10001586:	bf00      	nop
10001588:	e000e100 	.word	0xe000e100

1000158c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
1000158c:	b480      	push	{r7}
1000158e:	b083      	sub	sp, #12
10001590:	af00      	add	r7, sp, #0
10001592:	4603      	mov	r3, r0
10001594:	6039      	str	r1, [r7, #0]
10001596:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10001598:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000159c:	2b00      	cmp	r3, #0
1000159e:	db0a      	blt.n	100015b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
100015a0:	683b      	ldr	r3, [r7, #0]
100015a2:	b2da      	uxtb	r2, r3
100015a4:	490c      	ldr	r1, [pc, #48]	; (100015d8 <__NVIC_SetPriority+0x4c>)
100015a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100015aa:	0112      	lsls	r2, r2, #4
100015ac:	b2d2      	uxtb	r2, r2
100015ae:	440b      	add	r3, r1
100015b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
100015b4:	e00a      	b.n	100015cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
100015b6:	683b      	ldr	r3, [r7, #0]
100015b8:	b2da      	uxtb	r2, r3
100015ba:	4908      	ldr	r1, [pc, #32]	; (100015dc <__NVIC_SetPriority+0x50>)
100015bc:	88fb      	ldrh	r3, [r7, #6]
100015be:	f003 030f 	and.w	r3, r3, #15
100015c2:	3b04      	subs	r3, #4
100015c4:	0112      	lsls	r2, r2, #4
100015c6:	b2d2      	uxtb	r2, r2
100015c8:	440b      	add	r3, r1
100015ca:	761a      	strb	r2, [r3, #24]
}
100015cc:	bf00      	nop
100015ce:	370c      	adds	r7, #12
100015d0:	46bd      	mov	sp, r7
100015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
100015d6:	4770      	bx	lr
100015d8:	e000e100 	.word	0xe000e100
100015dc:	e000ed00 	.word	0xe000ed00

100015e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
100015e0:	b480      	push	{r7}
100015e2:	b089      	sub	sp, #36	; 0x24
100015e4:	af00      	add	r7, sp, #0
100015e6:	60f8      	str	r0, [r7, #12]
100015e8:	60b9      	str	r1, [r7, #8]
100015ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
100015ec:	68fb      	ldr	r3, [r7, #12]
100015ee:	f003 0307 	and.w	r3, r3, #7
100015f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
100015f4:	69fb      	ldr	r3, [r7, #28]
100015f6:	f1c3 0307 	rsb	r3, r3, #7
100015fa:	2b04      	cmp	r3, #4
100015fc:	bf28      	it	cs
100015fe:	2304      	movcs	r3, #4
10001600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
10001602:	69fb      	ldr	r3, [r7, #28]
10001604:	3304      	adds	r3, #4
10001606:	2b06      	cmp	r3, #6
10001608:	d902      	bls.n	10001610 <NVIC_EncodePriority+0x30>
1000160a:	69fb      	ldr	r3, [r7, #28]
1000160c:	3b03      	subs	r3, #3
1000160e:	e000      	b.n	10001612 <NVIC_EncodePriority+0x32>
10001610:	2300      	movs	r3, #0
10001612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10001614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
10001618:	69bb      	ldr	r3, [r7, #24]
1000161a:	fa02 f303 	lsl.w	r3, r2, r3
1000161e:	43da      	mvns	r2, r3
10001620:	68bb      	ldr	r3, [r7, #8]
10001622:	401a      	ands	r2, r3
10001624:	697b      	ldr	r3, [r7, #20]
10001626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
10001628:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1000162c:	697b      	ldr	r3, [r7, #20]
1000162e:	fa01 f303 	lsl.w	r3, r1, r3
10001632:	43d9      	mvns	r1, r3
10001634:	687b      	ldr	r3, [r7, #4]
10001636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10001638:	4313      	orrs	r3, r2
         );
}
1000163a:	4618      	mov	r0, r3
1000163c:	3724      	adds	r7, #36	; 0x24
1000163e:	46bd      	mov	sp, r7
10001640:	f85d 7b04 	ldr.w	r7, [sp], #4
10001644:	4770      	bx	lr
	...

10001648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10001648:	b580      	push	{r7, lr}
1000164a:	b082      	sub	sp, #8
1000164c:	af00      	add	r7, sp, #0
1000164e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10001650:	687b      	ldr	r3, [r7, #4]
10001652:	3b01      	subs	r3, #1
10001654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
10001658:	d301      	bcc.n	1000165e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
1000165a:	2301      	movs	r3, #1
1000165c:	e00f      	b.n	1000167e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1000165e:	4a0a      	ldr	r2, [pc, #40]	; (10001688 <SysTick_Config+0x40>)
10001660:	687b      	ldr	r3, [r7, #4]
10001662:	3b01      	subs	r3, #1
10001664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10001666:	210f      	movs	r1, #15
10001668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1000166c:	f7ff ff8e 	bl	1000158c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10001670:	4b05      	ldr	r3, [pc, #20]	; (10001688 <SysTick_Config+0x40>)
10001672:	2200      	movs	r2, #0
10001674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10001676:	4b04      	ldr	r3, [pc, #16]	; (10001688 <SysTick_Config+0x40>)
10001678:	2207      	movs	r2, #7
1000167a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
1000167c:	2300      	movs	r3, #0
}
1000167e:	4618      	mov	r0, r3
10001680:	3708      	adds	r7, #8
10001682:	46bd      	mov	sp, r7
10001684:	bd80      	pop	{r7, pc}
10001686:	bf00      	nop
10001688:	e000e010 	.word	0xe000e010

1000168c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
1000168c:	b580      	push	{r7, lr}
1000168e:	b082      	sub	sp, #8
10001690:	af00      	add	r7, sp, #0
10001692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
10001694:	6878      	ldr	r0, [r7, #4]
10001696:	f7ff ff29 	bl	100014ec <__NVIC_SetPriorityGrouping>
}
1000169a:	bf00      	nop
1000169c:	3708      	adds	r7, #8
1000169e:	46bd      	mov	sp, r7
100016a0:	bd80      	pop	{r7, pc}

100016a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
100016a2:	b580      	push	{r7, lr}
100016a4:	b086      	sub	sp, #24
100016a6:	af00      	add	r7, sp, #0
100016a8:	4603      	mov	r3, r0
100016aa:	60b9      	str	r1, [r7, #8]
100016ac:	607a      	str	r2, [r7, #4]
100016ae:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
100016b0:	2300      	movs	r3, #0
100016b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
100016b4:	f7ff ff3e 	bl	10001534 <__NVIC_GetPriorityGrouping>
100016b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
100016ba:	687a      	ldr	r2, [r7, #4]
100016bc:	68b9      	ldr	r1, [r7, #8]
100016be:	6978      	ldr	r0, [r7, #20]
100016c0:	f7ff ff8e 	bl	100015e0 <NVIC_EncodePriority>
100016c4:	4602      	mov	r2, r0
100016c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
100016ca:	4611      	mov	r1, r2
100016cc:	4618      	mov	r0, r3
100016ce:	f7ff ff5d 	bl	1000158c <__NVIC_SetPriority>
}
100016d2:	bf00      	nop
100016d4:	3718      	adds	r7, #24
100016d6:	46bd      	mov	sp, r7
100016d8:	bd80      	pop	{r7, pc}

100016da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
100016da:	b580      	push	{r7, lr}
100016dc:	b082      	sub	sp, #8
100016de:	af00      	add	r7, sp, #0
100016e0:	4603      	mov	r3, r0
100016e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
100016e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100016e8:	4618      	mov	r0, r3
100016ea:	f7ff ff31 	bl	10001550 <__NVIC_EnableIRQ>
}
100016ee:	bf00      	nop
100016f0:	3708      	adds	r7, #8
100016f2:	46bd      	mov	sp, r7
100016f4:	bd80      	pop	{r7, pc}

100016f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
100016f6:	b580      	push	{r7, lr}
100016f8:	b082      	sub	sp, #8
100016fa:	af00      	add	r7, sp, #0
100016fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
100016fe:	6878      	ldr	r0, [r7, #4]
10001700:	f7ff ffa2 	bl	10001648 <SysTick_Config>
10001704:	4603      	mov	r3, r0
}
10001706:	4618      	mov	r0, r3
10001708:	3708      	adds	r7, #8
1000170a:	46bd      	mov	sp, r7
1000170c:	bd80      	pop	{r7, pc}
	...

10001710 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10001710:	b480      	push	{r7}
10001712:	b089      	sub	sp, #36	; 0x24
10001714:	af00      	add	r7, sp, #0
10001716:	6078      	str	r0, [r7, #4]
10001718:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
1000171a:	4b8a      	ldr	r3, [pc, #552]	; (10001944 <HAL_GPIO_Init+0x234>)
1000171c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
1000171e:	2300      	movs	r3, #0
10001720:	61fb      	str	r3, [r7, #28]
10001722:	e191      	b.n	10001a48 <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
10001724:	2201      	movs	r2, #1
10001726:	69fb      	ldr	r3, [r7, #28]
10001728:	fa02 f303 	lsl.w	r3, r2, r3
1000172c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
1000172e:	683b      	ldr	r3, [r7, #0]
10001730:	681b      	ldr	r3, [r3, #0]
10001732:	693a      	ldr	r2, [r7, #16]
10001734:	4013      	ands	r3, r2
10001736:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
10001738:	68fa      	ldr	r2, [r7, #12]
1000173a:	693b      	ldr	r3, [r7, #16]
1000173c:	429a      	cmp	r2, r3
1000173e:	f040 8180 	bne.w	10001a42 <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10001742:	683b      	ldr	r3, [r7, #0]
10001744:	685b      	ldr	r3, [r3, #4]
10001746:	2b02      	cmp	r3, #2
10001748:	d003      	beq.n	10001752 <HAL_GPIO_Init+0x42>
1000174a:	683b      	ldr	r3, [r7, #0]
1000174c:	685b      	ldr	r3, [r3, #4]
1000174e:	2b12      	cmp	r3, #18
10001750:	d123      	bne.n	1000179a <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
10001752:	69fb      	ldr	r3, [r7, #28]
10001754:	08da      	lsrs	r2, r3, #3
10001756:	687b      	ldr	r3, [r7, #4]
10001758:	3208      	adds	r2, #8
1000175a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1000175e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
10001760:	69fb      	ldr	r3, [r7, #28]
10001762:	f003 0307 	and.w	r3, r3, #7
10001766:	009b      	lsls	r3, r3, #2
10001768:	220f      	movs	r2, #15
1000176a:	fa02 f303 	lsl.w	r3, r2, r3
1000176e:	43db      	mvns	r3, r3
10001770:	69ba      	ldr	r2, [r7, #24]
10001772:	4013      	ands	r3, r2
10001774:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
10001776:	683b      	ldr	r3, [r7, #0]
10001778:	691a      	ldr	r2, [r3, #16]
1000177a:	69fb      	ldr	r3, [r7, #28]
1000177c:	f003 0307 	and.w	r3, r3, #7
10001780:	009b      	lsls	r3, r3, #2
10001782:	fa02 f303 	lsl.w	r3, r2, r3
10001786:	69ba      	ldr	r2, [r7, #24]
10001788:	4313      	orrs	r3, r2
1000178a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
1000178c:	69fb      	ldr	r3, [r7, #28]
1000178e:	08da      	lsrs	r2, r3, #3
10001790:	687b      	ldr	r3, [r7, #4]
10001792:	3208      	adds	r2, #8
10001794:	69b9      	ldr	r1, [r7, #24]
10001796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
1000179a:	687b      	ldr	r3, [r7, #4]
1000179c:	681b      	ldr	r3, [r3, #0]
1000179e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
100017a0:	69fb      	ldr	r3, [r7, #28]
100017a2:	005b      	lsls	r3, r3, #1
100017a4:	2203      	movs	r2, #3
100017a6:	fa02 f303 	lsl.w	r3, r2, r3
100017aa:	43db      	mvns	r3, r3
100017ac:	69ba      	ldr	r2, [r7, #24]
100017ae:	4013      	ands	r3, r2
100017b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
100017b2:	683b      	ldr	r3, [r7, #0]
100017b4:	685b      	ldr	r3, [r3, #4]
100017b6:	f003 0203 	and.w	r2, r3, #3
100017ba:	69fb      	ldr	r3, [r7, #28]
100017bc:	005b      	lsls	r3, r3, #1
100017be:	fa02 f303 	lsl.w	r3, r2, r3
100017c2:	69ba      	ldr	r2, [r7, #24]
100017c4:	4313      	orrs	r3, r2
100017c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
100017c8:	687b      	ldr	r3, [r7, #4]
100017ca:	69ba      	ldr	r2, [r7, #24]
100017cc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
100017ce:	683b      	ldr	r3, [r7, #0]
100017d0:	685b      	ldr	r3, [r3, #4]
100017d2:	2b01      	cmp	r3, #1
100017d4:	d00b      	beq.n	100017ee <HAL_GPIO_Init+0xde>
100017d6:	683b      	ldr	r3, [r7, #0]
100017d8:	685b      	ldr	r3, [r3, #4]
100017da:	2b02      	cmp	r3, #2
100017dc:	d007      	beq.n	100017ee <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
100017de:	683b      	ldr	r3, [r7, #0]
100017e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
100017e2:	2b11      	cmp	r3, #17
100017e4:	d003      	beq.n	100017ee <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
100017e6:	683b      	ldr	r3, [r7, #0]
100017e8:	685b      	ldr	r3, [r3, #4]
100017ea:	2b12      	cmp	r3, #18
100017ec:	d130      	bne.n	10001850 <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
100017ee:	687b      	ldr	r3, [r7, #4]
100017f0:	689b      	ldr	r3, [r3, #8]
100017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
100017f4:	69fb      	ldr	r3, [r7, #28]
100017f6:	005b      	lsls	r3, r3, #1
100017f8:	2203      	movs	r2, #3
100017fa:	fa02 f303 	lsl.w	r3, r2, r3
100017fe:	43db      	mvns	r3, r3
10001800:	69ba      	ldr	r2, [r7, #24]
10001802:	4013      	ands	r3, r2
10001804:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
10001806:	683b      	ldr	r3, [r7, #0]
10001808:	68da      	ldr	r2, [r3, #12]
1000180a:	69fb      	ldr	r3, [r7, #28]
1000180c:	005b      	lsls	r3, r3, #1
1000180e:	fa02 f303 	lsl.w	r3, r2, r3
10001812:	69ba      	ldr	r2, [r7, #24]
10001814:	4313      	orrs	r3, r2
10001816:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
10001818:	687b      	ldr	r3, [r7, #4]
1000181a:	69ba      	ldr	r2, [r7, #24]
1000181c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
1000181e:	687b      	ldr	r3, [r7, #4]
10001820:	685b      	ldr	r3, [r3, #4]
10001822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10001824:	2201      	movs	r2, #1
10001826:	69fb      	ldr	r3, [r7, #28]
10001828:	fa02 f303 	lsl.w	r3, r2, r3
1000182c:	43db      	mvns	r3, r3
1000182e:	69ba      	ldr	r2, [r7, #24]
10001830:	4013      	ands	r3, r2
10001832:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
10001834:	683b      	ldr	r3, [r7, #0]
10001836:	685b      	ldr	r3, [r3, #4]
10001838:	091b      	lsrs	r3, r3, #4
1000183a:	f003 0201 	and.w	r2, r3, #1
1000183e:	69fb      	ldr	r3, [r7, #28]
10001840:	fa02 f303 	lsl.w	r3, r2, r3
10001844:	69ba      	ldr	r2, [r7, #24]
10001846:	4313      	orrs	r3, r2
10001848:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
1000184a:	687b      	ldr	r3, [r7, #4]
1000184c:	69ba      	ldr	r2, [r7, #24]
1000184e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
10001850:	687b      	ldr	r3, [r7, #4]
10001852:	68db      	ldr	r3, [r3, #12]
10001854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
10001856:	69fb      	ldr	r3, [r7, #28]
10001858:	005b      	lsls	r3, r3, #1
1000185a:	2203      	movs	r2, #3
1000185c:	fa02 f303 	lsl.w	r3, r2, r3
10001860:	43db      	mvns	r3, r3
10001862:	69ba      	ldr	r2, [r7, #24]
10001864:	4013      	ands	r3, r2
10001866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
10001868:	683b      	ldr	r3, [r7, #0]
1000186a:	689a      	ldr	r2, [r3, #8]
1000186c:	69fb      	ldr	r3, [r7, #28]
1000186e:	005b      	lsls	r3, r3, #1
10001870:	fa02 f303 	lsl.w	r3, r2, r3
10001874:	69ba      	ldr	r2, [r7, #24]
10001876:	4313      	orrs	r3, r2
10001878:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
1000187a:	687b      	ldr	r3, [r7, #4]
1000187c:	69ba      	ldr	r2, [r7, #24]
1000187e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
10001880:	683b      	ldr	r3, [r7, #0]
10001882:	685b      	ldr	r3, [r3, #4]
10001884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
10001888:	2b00      	cmp	r3, #0
1000188a:	f000 80da 	beq.w	10001a42 <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
1000188e:	4a2e      	ldr	r2, [pc, #184]	; (10001948 <HAL_GPIO_Init+0x238>)
10001890:	69fb      	ldr	r3, [r7, #28]
10001892:	089b      	lsrs	r3, r3, #2
10001894:	3318      	adds	r3, #24
10001896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1000189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
1000189c:	69fb      	ldr	r3, [r7, #28]
1000189e:	f003 0303 	and.w	r3, r3, #3
100018a2:	00db      	lsls	r3, r3, #3
100018a4:	22ff      	movs	r2, #255	; 0xff
100018a6:	fa02 f303 	lsl.w	r3, r2, r3
100018aa:	43db      	mvns	r3, r3
100018ac:	69ba      	ldr	r2, [r7, #24]
100018ae:	4013      	ands	r3, r2
100018b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
100018b2:	687b      	ldr	r3, [r7, #4]
100018b4:	4a25      	ldr	r2, [pc, #148]	; (1000194c <HAL_GPIO_Init+0x23c>)
100018b6:	4293      	cmp	r3, r2
100018b8:	d05e      	beq.n	10001978 <HAL_GPIO_Init+0x268>
100018ba:	687b      	ldr	r3, [r7, #4]
100018bc:	4a24      	ldr	r2, [pc, #144]	; (10001950 <HAL_GPIO_Init+0x240>)
100018be:	4293      	cmp	r3, r2
100018c0:	d03d      	beq.n	1000193e <HAL_GPIO_Init+0x22e>
100018c2:	687b      	ldr	r3, [r7, #4]
100018c4:	4a23      	ldr	r2, [pc, #140]	; (10001954 <HAL_GPIO_Init+0x244>)
100018c6:	4293      	cmp	r3, r2
100018c8:	d037      	beq.n	1000193a <HAL_GPIO_Init+0x22a>
100018ca:	687b      	ldr	r3, [r7, #4]
100018cc:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
100018d0:	d031      	beq.n	10001936 <HAL_GPIO_Init+0x226>
100018d2:	687b      	ldr	r3, [r7, #4]
100018d4:	4a20      	ldr	r2, [pc, #128]	; (10001958 <HAL_GPIO_Init+0x248>)
100018d6:	4293      	cmp	r3, r2
100018d8:	d02b      	beq.n	10001932 <HAL_GPIO_Init+0x222>
100018da:	687b      	ldr	r3, [r7, #4]
100018dc:	4a1f      	ldr	r2, [pc, #124]	; (1000195c <HAL_GPIO_Init+0x24c>)
100018de:	4293      	cmp	r3, r2
100018e0:	d025      	beq.n	1000192e <HAL_GPIO_Init+0x21e>
100018e2:	687b      	ldr	r3, [r7, #4]
100018e4:	4a1e      	ldr	r2, [pc, #120]	; (10001960 <HAL_GPIO_Init+0x250>)
100018e6:	4293      	cmp	r3, r2
100018e8:	d01f      	beq.n	1000192a <HAL_GPIO_Init+0x21a>
100018ea:	687b      	ldr	r3, [r7, #4]
100018ec:	4a1d      	ldr	r2, [pc, #116]	; (10001964 <HAL_GPIO_Init+0x254>)
100018ee:	4293      	cmp	r3, r2
100018f0:	d019      	beq.n	10001926 <HAL_GPIO_Init+0x216>
100018f2:	687b      	ldr	r3, [r7, #4]
100018f4:	4a1c      	ldr	r2, [pc, #112]	; (10001968 <HAL_GPIO_Init+0x258>)
100018f6:	4293      	cmp	r3, r2
100018f8:	d013      	beq.n	10001922 <HAL_GPIO_Init+0x212>
100018fa:	687b      	ldr	r3, [r7, #4]
100018fc:	4a1b      	ldr	r2, [pc, #108]	; (1000196c <HAL_GPIO_Init+0x25c>)
100018fe:	4293      	cmp	r3, r2
10001900:	d00d      	beq.n	1000191e <HAL_GPIO_Init+0x20e>
10001902:	687b      	ldr	r3, [r7, #4]
10001904:	4a1a      	ldr	r2, [pc, #104]	; (10001970 <HAL_GPIO_Init+0x260>)
10001906:	4293      	cmp	r3, r2
10001908:	d007      	beq.n	1000191a <HAL_GPIO_Init+0x20a>
1000190a:	687b      	ldr	r3, [r7, #4]
1000190c:	4a19      	ldr	r2, [pc, #100]	; (10001974 <HAL_GPIO_Init+0x264>)
1000190e:	4293      	cmp	r3, r2
10001910:	d101      	bne.n	10001916 <HAL_GPIO_Init+0x206>
10001912:	230b      	movs	r3, #11
10001914:	e031      	b.n	1000197a <HAL_GPIO_Init+0x26a>
10001916:	2319      	movs	r3, #25
10001918:	e02f      	b.n	1000197a <HAL_GPIO_Init+0x26a>
1000191a:	230a      	movs	r3, #10
1000191c:	e02d      	b.n	1000197a <HAL_GPIO_Init+0x26a>
1000191e:	2309      	movs	r3, #9
10001920:	e02b      	b.n	1000197a <HAL_GPIO_Init+0x26a>
10001922:	2308      	movs	r3, #8
10001924:	e029      	b.n	1000197a <HAL_GPIO_Init+0x26a>
10001926:	2307      	movs	r3, #7
10001928:	e027      	b.n	1000197a <HAL_GPIO_Init+0x26a>
1000192a:	2306      	movs	r3, #6
1000192c:	e025      	b.n	1000197a <HAL_GPIO_Init+0x26a>
1000192e:	2305      	movs	r3, #5
10001930:	e023      	b.n	1000197a <HAL_GPIO_Init+0x26a>
10001932:	2304      	movs	r3, #4
10001934:	e021      	b.n	1000197a <HAL_GPIO_Init+0x26a>
10001936:	2303      	movs	r3, #3
10001938:	e01f      	b.n	1000197a <HAL_GPIO_Init+0x26a>
1000193a:	2302      	movs	r3, #2
1000193c:	e01d      	b.n	1000197a <HAL_GPIO_Init+0x26a>
1000193e:	2301      	movs	r3, #1
10001940:	e01b      	b.n	1000197a <HAL_GPIO_Init+0x26a>
10001942:	bf00      	nop
10001944:	5000d0c0 	.word	0x5000d0c0
10001948:	5000d000 	.word	0x5000d000
1000194c:	50002000 	.word	0x50002000
10001950:	50003000 	.word	0x50003000
10001954:	50004000 	.word	0x50004000
10001958:	50006000 	.word	0x50006000
1000195c:	50007000 	.word	0x50007000
10001960:	50008000 	.word	0x50008000
10001964:	50009000 	.word	0x50009000
10001968:	5000a000 	.word	0x5000a000
1000196c:	5000b000 	.word	0x5000b000
10001970:	5000c000 	.word	0x5000c000
10001974:	54004000 	.word	0x54004000
10001978:	2300      	movs	r3, #0
1000197a:	69fa      	ldr	r2, [r7, #28]
1000197c:	f002 0203 	and.w	r2, r2, #3
10001980:	00d2      	lsls	r2, r2, #3
10001982:	4093      	lsls	r3, r2
10001984:	461a      	mov	r2, r3
10001986:	69bb      	ldr	r3, [r7, #24]
10001988:	4313      	orrs	r3, r2
1000198a:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
1000198c:	4934      	ldr	r1, [pc, #208]	; (10001a60 <HAL_GPIO_Init+0x350>)
1000198e:	69fb      	ldr	r3, [r7, #28]
10001990:	089b      	lsrs	r3, r3, #2
10001992:	3318      	adds	r3, #24
10001994:	69ba      	ldr	r2, [r7, #24]
10001996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
1000199a:	697b      	ldr	r3, [r7, #20]
1000199c:	681b      	ldr	r3, [r3, #0]
1000199e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
100019a0:	68fb      	ldr	r3, [r7, #12]
100019a2:	43db      	mvns	r3, r3
100019a4:	69ba      	ldr	r2, [r7, #24]
100019a6:	4013      	ands	r3, r2
100019a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
100019aa:	683b      	ldr	r3, [r7, #0]
100019ac:	685b      	ldr	r3, [r3, #4]
100019ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
100019b2:	2b00      	cmp	r3, #0
100019b4:	d003      	beq.n	100019be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
100019b6:	69ba      	ldr	r2, [r7, #24]
100019b8:	68fb      	ldr	r3, [r7, #12]
100019ba:	4313      	orrs	r3, r2
100019bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
100019be:	697b      	ldr	r3, [r7, #20]
100019c0:	69ba      	ldr	r2, [r7, #24]
100019c2:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
100019c4:	697b      	ldr	r3, [r7, #20]
100019c6:	685b      	ldr	r3, [r3, #4]
100019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
100019ca:	68fb      	ldr	r3, [r7, #12]
100019cc:	43db      	mvns	r3, r3
100019ce:	69ba      	ldr	r2, [r7, #24]
100019d0:	4013      	ands	r3, r2
100019d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
100019d4:	683b      	ldr	r3, [r7, #0]
100019d6:	685b      	ldr	r3, [r3, #4]
100019d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
100019dc:	2b00      	cmp	r3, #0
100019de:	d003      	beq.n	100019e8 <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
100019e0:	69ba      	ldr	r2, [r7, #24]
100019e2:	68fb      	ldr	r3, [r7, #12]
100019e4:	4313      	orrs	r3, r2
100019e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
100019e8:	697b      	ldr	r3, [r7, #20]
100019ea:	69ba      	ldr	r2, [r7, #24]
100019ec:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
100019ee:	4b1c      	ldr	r3, [pc, #112]	; (10001a60 <HAL_GPIO_Init+0x350>)
100019f0:	681b      	ldr	r3, [r3, #0]
100019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
100019f4:	68fb      	ldr	r3, [r7, #12]
100019f6:	43db      	mvns	r3, r3
100019f8:	69ba      	ldr	r2, [r7, #24]
100019fa:	4013      	ands	r3, r2
100019fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
100019fe:	683b      	ldr	r3, [r7, #0]
10001a00:	685b      	ldr	r3, [r3, #4]
10001a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10001a06:	2b00      	cmp	r3, #0
10001a08:	d003      	beq.n	10001a12 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
10001a0a:	69ba      	ldr	r2, [r7, #24]
10001a0c:	68fb      	ldr	r3, [r7, #12]
10001a0e:	4313      	orrs	r3, r2
10001a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
10001a12:	4a13      	ldr	r2, [pc, #76]	; (10001a60 <HAL_GPIO_Init+0x350>)
10001a14:	69bb      	ldr	r3, [r7, #24]
10001a16:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
10001a18:	4b11      	ldr	r3, [pc, #68]	; (10001a60 <HAL_GPIO_Init+0x350>)
10001a1a:	685b      	ldr	r3, [r3, #4]
10001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10001a1e:	68fb      	ldr	r3, [r7, #12]
10001a20:	43db      	mvns	r3, r3
10001a22:	69ba      	ldr	r2, [r7, #24]
10001a24:	4013      	ands	r3, r2
10001a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
10001a28:	683b      	ldr	r3, [r7, #0]
10001a2a:	685b      	ldr	r3, [r3, #4]
10001a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
10001a30:	2b00      	cmp	r3, #0
10001a32:	d003      	beq.n	10001a3c <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
10001a34:	69ba      	ldr	r2, [r7, #24]
10001a36:	68fb      	ldr	r3, [r7, #12]
10001a38:	4313      	orrs	r3, r2
10001a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
10001a3c:	4a08      	ldr	r2, [pc, #32]	; (10001a60 <HAL_GPIO_Init+0x350>)
10001a3e:	69bb      	ldr	r3, [r7, #24]
10001a40:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
10001a42:	69fb      	ldr	r3, [r7, #28]
10001a44:	3301      	adds	r3, #1
10001a46:	61fb      	str	r3, [r7, #28]
10001a48:	69fb      	ldr	r3, [r7, #28]
10001a4a:	2b0f      	cmp	r3, #15
10001a4c:	f67f ae6a 	bls.w	10001724 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
10001a50:	bf00      	nop
10001a52:	bf00      	nop
10001a54:	3724      	adds	r7, #36	; 0x24
10001a56:	46bd      	mov	sp, r7
10001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a5c:	4770      	bx	lr
10001a5e:	bf00      	nop
10001a60:	5000d000 	.word	0x5000d000

10001a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
10001a64:	b480      	push	{r7}
10001a66:	b083      	sub	sp, #12
10001a68:	af00      	add	r7, sp, #0
10001a6a:	6078      	str	r0, [r7, #4]
10001a6c:	460b      	mov	r3, r1
10001a6e:	807b      	strh	r3, [r7, #2]
10001a70:	4613      	mov	r3, r2
10001a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10001a74:	787b      	ldrb	r3, [r7, #1]
10001a76:	2b00      	cmp	r3, #0
10001a78:	d003      	beq.n	10001a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
10001a7a:	887a      	ldrh	r2, [r7, #2]
10001a7c:	687b      	ldr	r3, [r7, #4]
10001a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
10001a80:	e003      	b.n	10001a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
10001a82:	887b      	ldrh	r3, [r7, #2]
10001a84:	041a      	lsls	r2, r3, #16
10001a86:	687b      	ldr	r3, [r7, #4]
10001a88:	619a      	str	r2, [r3, #24]
}
10001a8a:	bf00      	nop
10001a8c:	370c      	adds	r7, #12
10001a8e:	46bd      	mov	sp, r7
10001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a94:	4770      	bx	lr

10001a96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
10001a96:	b480      	push	{r7}
10001a98:	b083      	sub	sp, #12
10001a9a:	af00      	add	r7, sp, #0
10001a9c:	6078      	str	r0, [r7, #4]
10001a9e:	460b      	mov	r3, r1
10001aa0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
10001aa2:	687b      	ldr	r3, [r7, #4]
10001aa4:	695a      	ldr	r2, [r3, #20]
10001aa6:	887b      	ldrh	r3, [r7, #2]
10001aa8:	4013      	ands	r3, r2
10001aaa:	2b00      	cmp	r3, #0
10001aac:	d003      	beq.n	10001ab6 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
10001aae:	887a      	ldrh	r2, [r7, #2]
10001ab0:	687b      	ldr	r3, [r7, #4]
10001ab2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
10001ab4:	e002      	b.n	10001abc <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
10001ab6:	887a      	ldrh	r2, [r7, #2]
10001ab8:	687b      	ldr	r3, [r7, #4]
10001aba:	619a      	str	r2, [r3, #24]
}
10001abc:	bf00      	nop
10001abe:	370c      	adds	r7, #12
10001ac0:	46bd      	mov	sp, r7
10001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
10001ac6:	4770      	bx	lr

10001ac8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
10001ac8:	b480      	push	{r7}
10001aca:	b083      	sub	sp, #12
10001acc:	af00      	add	r7, sp, #0
10001ace:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
10001ad0:	f04f 4298 	mov.w	r2, #1275068416	; 0x4c000000
10001ad4:	687b      	ldr	r3, [r7, #4]
10001ad6:	3320      	adds	r3, #32
10001ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10001adc:	4a05      	ldr	r2, [pc, #20]	; (10001af4 <HAL_HSEM_FastTake+0x2c>)
10001ade:	4293      	cmp	r3, r2
10001ae0:	d101      	bne.n	10001ae6 <HAL_HSEM_FastTake+0x1e>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
10001ae2:	2300      	movs	r3, #0
10001ae4:	e000      	b.n	10001ae8 <HAL_HSEM_FastTake+0x20>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
10001ae6:	2301      	movs	r3, #1
}
10001ae8:	4618      	mov	r0, r3
10001aea:	370c      	adds	r7, #12
10001aec:	46bd      	mov	sp, r7
10001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
10001af2:	4770      	bx	lr
10001af4:	80000200 	.word	0x80000200

10001af8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
10001af8:	b480      	push	{r7}
10001afa:	b083      	sub	sp, #12
10001afc:	af00      	add	r7, sp, #0
10001afe:	6078      	str	r0, [r7, #4]
10001b00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HSEM_SEMID(SemID));
  assert_param(IS_HSEM_PROCESSID(ProcessID));

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
10001b02:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
10001b06:	683b      	ldr	r3, [r7, #0]
10001b08:	f443 7200 	orr.w	r2, r3, #512	; 0x200
10001b0c:	687b      	ldr	r3, [r7, #4]
10001b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

}
10001b12:	bf00      	nop
10001b14:	370c      	adds	r7, #12
10001b16:	46bd      	mov	sp, r7
10001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b1c:	4770      	bx	lr
	...

10001b20 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
10001b20:	b580      	push	{r7, lr}
10001b22:	b084      	sub	sp, #16
10001b24:	af00      	add	r7, sp, #0
10001b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
10001b28:	2300      	movs	r3, #0
10001b2a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
10001b2c:	687b      	ldr	r3, [r7, #4]
10001b2e:	2b00      	cmp	r3, #0
10001b30:	d01e      	beq.n	10001b70 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

#if defined(CORE_CM4)
    IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10001b32:	4b13      	ldr	r3, [pc, #76]	; (10001b80 <HAL_IPCC_Init+0x60>)
10001b34:	60bb      	str	r3, [r7, #8]
#else
    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

    if (hipcc->State == HAL_IPCC_STATE_RESET)
10001b36:	687b      	ldr	r3, [r7, #4]
10001b38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
10001b3c:	b2db      	uxtb	r3, r3
10001b3e:	2b00      	cmp	r3, #0
10001b40:	d102      	bne.n	10001b48 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
10001b42:	6878      	ldr	r0, [r7, #4]
10001b44:	f7ff fa62 	bl	1000100c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
10001b48:	68b8      	ldr	r0, [r7, #8]
10001b4a:	f000 f99d 	bl	10001e88 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
10001b4e:	68bb      	ldr	r3, [r7, #8]
10001b50:	681b      	ldr	r3, [r3, #0]
10001b52:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
10001b56:	68bb      	ldr	r3, [r7, #8]
10001b58:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
10001b5a:	6878      	ldr	r0, [r7, #4]
10001b5c:	f000 f96e 	bl	10001e3c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
10001b60:	687b      	ldr	r3, [r7, #4]
10001b62:	2200      	movs	r2, #0
10001b64:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
10001b66:	687b      	ldr	r3, [r7, #4]
10001b68:	2201      	movs	r2, #1
10001b6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
10001b6e:	e001      	b.n	10001b74 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
10001b70:	2301      	movs	r3, #1
10001b72:	73fb      	strb	r3, [r7, #15]
  }

  return err;
10001b74:	7bfb      	ldrb	r3, [r7, #15]
}
10001b76:	4618      	mov	r0, r3
10001b78:	3710      	adds	r7, #16
10001b7a:	46bd      	mov	sp, r7
10001b7c:	bd80      	pop	{r7, pc}
10001b7e:	bf00      	nop
10001b80:	4c001010 	.word	0x4c001010

10001b84 <HAL_IPCC_ActivateNotification>:
  * @param  ChannelDir Channel direction
  * @param  cb Interrupt callback
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_ActivateNotification(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir, ChannelCb cb)
{
10001b84:	b580      	push	{r7, lr}
10001b86:	b086      	sub	sp, #24
10001b88:	af00      	add	r7, sp, #0
10001b8a:	60f8      	str	r0, [r7, #12]
10001b8c:	60b9      	str	r1, [r7, #8]
10001b8e:	603b      	str	r3, [r7, #0]
10001b90:	4613      	mov	r3, r2
10001b92:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
10001b94:	2300      	movs	r3, #0
10001b96:	75fb      	strb	r3, [r7, #23]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
10001b98:	68fb      	ldr	r3, [r7, #12]
10001b9a:	2b00      	cmp	r3, #0
10001b9c:	d039      	beq.n	10001c12 <HAL_IPCC_ActivateNotification+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    /* Check IPCC state */
    if (hipcc->State == HAL_IPCC_STATE_READY)
10001b9e:	68fb      	ldr	r3, [r7, #12]
10001ba0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
10001ba4:	b2db      	uxtb	r3, r3
10001ba6:	2b01      	cmp	r3, #1
10001ba8:	d130      	bne.n	10001c0c <HAL_IPCC_ActivateNotification+0x88>
    {
      /* Set callback and register masking information */
      if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10001baa:	79fb      	ldrb	r3, [r7, #7]
10001bac:	2b00      	cmp	r3, #0
10001bae:	d113      	bne.n	10001bd8 <HAL_IPCC_ActivateNotification+0x54>
      {
        hipcc->ChannelCallbackTx[ChannelIndex] = cb;
10001bb0:	68fa      	ldr	r2, [r7, #12]
10001bb2:	68bb      	ldr	r3, [r7, #8]
10001bb4:	3306      	adds	r3, #6
10001bb6:	009b      	lsls	r3, r3, #2
10001bb8:	4413      	add	r3, r2
10001bba:	683a      	ldr	r2, [r7, #0]
10001bbc:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10001bbe:	68fb      	ldr	r3, [r7, #12]
10001bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10001bc2:	68bb      	ldr	r3, [r7, #8]
10001bc4:	f003 030f 	and.w	r3, r3, #15
10001bc8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
10001bcc:	fa01 f303 	lsl.w	r3, r1, r3
10001bd0:	431a      	orrs	r2, r3
10001bd2:	68fb      	ldr	r3, [r7, #12]
10001bd4:	635a      	str	r2, [r3, #52]	; 0x34
10001bd6:	e010      	b.n	10001bfa <HAL_IPCC_ActivateNotification+0x76>
      }
      else
      {
        hipcc->ChannelCallbackRx[ChannelIndex] = cb;
10001bd8:	68fa      	ldr	r2, [r7, #12]
10001bda:	68bb      	ldr	r3, [r7, #8]
10001bdc:	009b      	lsls	r3, r3, #2
10001bde:	4413      	add	r3, r2
10001be0:	683a      	ldr	r2, [r7, #0]
10001be2:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10001be4:	68fb      	ldr	r3, [r7, #12]
10001be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10001be8:	68bb      	ldr	r3, [r7, #8]
10001bea:	f003 030f 	and.w	r3, r3, #15
10001bee:	2101      	movs	r1, #1
10001bf0:	fa01 f303 	lsl.w	r3, r1, r3
10001bf4:	431a      	orrs	r2, r3
10001bf6:	68fb      	ldr	r3, [r7, #12]
10001bf8:	635a      	str	r2, [r3, #52]	; 0x34
      }

      /* Unmask only the channels in reception (Transmission channel mask/unmask is done in HAL_IPCC_NotifyCPU) */
      if (ChannelDir == IPCC_CHANNEL_DIR_RX)
10001bfa:	79fb      	ldrb	r3, [r7, #7]
10001bfc:	2b01      	cmp	r3, #1
10001bfe:	d10a      	bne.n	10001c16 <HAL_IPCC_ActivateNotification+0x92>
      {
        IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
10001c00:	79fb      	ldrb	r3, [r7, #7]
10001c02:	4619      	mov	r1, r3
10001c04:	68b8      	ldr	r0, [r7, #8]
10001c06:	f000 f8eb 	bl	10001de0 <IPCC_UnmaskInterrupt>
10001c0a:	e004      	b.n	10001c16 <HAL_IPCC_ActivateNotification+0x92>
      }
    }
    else
    {
      err = HAL_ERROR;
10001c0c:	2301      	movs	r3, #1
10001c0e:	75fb      	strb	r3, [r7, #23]
10001c10:	e001      	b.n	10001c16 <HAL_IPCC_ActivateNotification+0x92>
    }
  }
  else
  {
    err = HAL_ERROR;
10001c12:	2301      	movs	r3, #1
10001c14:	75fb      	strb	r3, [r7, #23]
  }
  return err;
10001c16:	7dfb      	ldrb	r3, [r7, #23]
}
10001c18:	4618      	mov	r0, r3
10001c1a:	3718      	adds	r7, #24
10001c1c:	46bd      	mov	sp, r7
10001c1e:	bd80      	pop	{r7, pc}

10001c20 <HAL_IPCC_GetChannelStatus>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval Channel status
  */
IPCC_CHANNELStatusTypeDef HAL_IPCC_GetChannelStatus(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10001c20:	b480      	push	{r7}
10001c22:	b089      	sub	sp, #36	; 0x24
10001c24:	af00      	add	r7, sp, #0
10001c26:	60f8      	str	r0, [r7, #12]
10001c28:	60b9      	str	r1, [r7, #8]
10001c2a:	4613      	mov	r3, r2
10001c2c:	71fb      	strb	r3, [r7, #7]
  uint32_t channel_state;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10001c2e:	4b14      	ldr	r3, [pc, #80]	; (10001c80 <HAL_IPCC_GetChannelStatus+0x60>)
10001c30:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
10001c32:	4b14      	ldr	r3, [pc, #80]	; (10001c84 <HAL_IPCC_GetChannelStatus+0x64>)
10001c34:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Read corresponding channel depending of the MCU and the direction */
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10001c36:	79fb      	ldrb	r3, [r7, #7]
10001c38:	2b00      	cmp	r3, #0
10001c3a:	d10a      	bne.n	10001c52 <HAL_IPCC_GetChannelStatus+0x32>
  {
    channel_state = (currentInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10001c3c:	69bb      	ldr	r3, [r7, #24]
10001c3e:	68da      	ldr	r2, [r3, #12]
10001c40:	68bb      	ldr	r3, [r7, #8]
10001c42:	f003 030f 	and.w	r3, r3, #15
10001c46:	2101      	movs	r1, #1
10001c48:	fa01 f303 	lsl.w	r3, r1, r3
10001c4c:	4013      	ands	r3, r2
10001c4e:	61fb      	str	r3, [r7, #28]
10001c50:	e009      	b.n	10001c66 <HAL_IPCC_GetChannelStatus+0x46>
  }
  else
  {
    channel_state = (otherInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10001c52:	697b      	ldr	r3, [r7, #20]
10001c54:	68da      	ldr	r2, [r3, #12]
10001c56:	68bb      	ldr	r3, [r7, #8]
10001c58:	f003 030f 	and.w	r3, r3, #15
10001c5c:	2101      	movs	r1, #1
10001c5e:	fa01 f303 	lsl.w	r3, r1, r3
10001c62:	4013      	ands	r3, r2
10001c64:	61fb      	str	r3, [r7, #28]
  }

  return (channel_state == 0UL) ? IPCC_CHANNEL_STATUS_FREE : IPCC_CHANNEL_STATUS_OCCUPIED ;
10001c66:	69fb      	ldr	r3, [r7, #28]
10001c68:	2b00      	cmp	r3, #0
10001c6a:	bf14      	ite	ne
10001c6c:	2301      	movne	r3, #1
10001c6e:	2300      	moveq	r3, #0
10001c70:	b2db      	uxtb	r3, r3
}
10001c72:	4618      	mov	r0, r3
10001c74:	3724      	adds	r7, #36	; 0x24
10001c76:	46bd      	mov	sp, r7
10001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c7c:	4770      	bx	lr
10001c7e:	bf00      	nop
10001c80:	4c001010 	.word	0x4c001010
10001c84:	4c001000 	.word	0x4c001000

10001c88 <HAL_IPCC_NotifyCPU>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_NotifyCPU(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10001c88:	b580      	push	{r7, lr}
10001c8a:	b088      	sub	sp, #32
10001c8c:	af00      	add	r7, sp, #0
10001c8e:	60f8      	str	r0, [r7, #12]
10001c90:	60b9      	str	r1, [r7, #8]
10001c92:	4613      	mov	r3, r2
10001c94:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
10001c96:	2300      	movs	r3, #0
10001c98:	77fb      	strb	r3, [r7, #31]
  uint32_t mask;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10001c9a:	4b1d      	ldr	r3, [pc, #116]	; (10001d10 <HAL_IPCC_NotifyCPU+0x88>)
10001c9c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Check if IPCC is initiliased */
  if (hipcc->State == HAL_IPCC_STATE_READY)
10001c9e:	68fb      	ldr	r3, [r7, #12]
10001ca0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
10001ca4:	b2db      	uxtb	r3, r3
10001ca6:	2b01      	cmp	r3, #1
10001ca8:	d12a      	bne.n	10001d00 <HAL_IPCC_NotifyCPU+0x78>
  {
    /* For IPCC_CHANNEL_DIR_TX, set the status. For IPCC_CHANNEL_DIR_RX, clear the status */
    currentInstance->SCR |= ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_SCR_CH1S : IPCC_SCR_CH1C) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
10001caa:	69bb      	ldr	r3, [r7, #24]
10001cac:	689a      	ldr	r2, [r3, #8]
10001cae:	79fb      	ldrb	r3, [r7, #7]
10001cb0:	2b00      	cmp	r3, #0
10001cb2:	d102      	bne.n	10001cba <HAL_IPCC_NotifyCPU+0x32>
10001cb4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
10001cb8:	e000      	b.n	10001cbc <HAL_IPCC_NotifyCPU+0x34>
10001cba:	2101      	movs	r1, #1
10001cbc:	68bb      	ldr	r3, [r7, #8]
10001cbe:	f003 030f 	and.w	r3, r3, #15
10001cc2:	fa01 f303 	lsl.w	r3, r1, r3
10001cc6:	431a      	orrs	r2, r3
10001cc8:	69bb      	ldr	r3, [r7, #24]
10001cca:	609a      	str	r2, [r3, #8]

    /* Unmask interrupt if the callback is requested */
    mask = ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_MR_CH1FM_Msk : IPCC_MR_CH1OM_Msk) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
10001ccc:	79fb      	ldrb	r3, [r7, #7]
10001cce:	2b00      	cmp	r3, #0
10001cd0:	d102      	bne.n	10001cd8 <HAL_IPCC_NotifyCPU+0x50>
10001cd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
10001cd6:	e000      	b.n	10001cda <HAL_IPCC_NotifyCPU+0x52>
10001cd8:	2201      	movs	r2, #1
10001cda:	68bb      	ldr	r3, [r7, #8]
10001cdc:	f003 030f 	and.w	r3, r3, #15
10001ce0:	fa02 f303 	lsl.w	r3, r2, r3
10001ce4:	617b      	str	r3, [r7, #20]
    if ((hipcc->callbackRequest & mask) == mask)
10001ce6:	68fb      	ldr	r3, [r7, #12]
10001ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10001cea:	697b      	ldr	r3, [r7, #20]
10001cec:	4013      	ands	r3, r2
10001cee:	697a      	ldr	r2, [r7, #20]
10001cf0:	429a      	cmp	r2, r3
10001cf2:	d107      	bne.n	10001d04 <HAL_IPCC_NotifyCPU+0x7c>
    {
      IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
10001cf4:	79fb      	ldrb	r3, [r7, #7]
10001cf6:	4619      	mov	r1, r3
10001cf8:	68b8      	ldr	r0, [r7, #8]
10001cfa:	f000 f871 	bl	10001de0 <IPCC_UnmaskInterrupt>
10001cfe:	e001      	b.n	10001d04 <HAL_IPCC_NotifyCPU+0x7c>
    }
  }
  else
  {
    err = HAL_ERROR;
10001d00:	2301      	movs	r3, #1
10001d02:	77fb      	strb	r3, [r7, #31]
  }

  return err;
10001d04:	7ffb      	ldrb	r3, [r7, #31]
}
10001d06:	4618      	mov	r0, r3
10001d08:	3720      	adds	r7, #32
10001d0a:	46bd      	mov	sp, r7
10001d0c:	bd80      	pop	{r7, pc}
10001d0e:	bf00      	nop
10001d10:	4c001010 	.word	0x4c001010

10001d14 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
10001d14:	b580      	push	{r7, lr}
10001d16:	b088      	sub	sp, #32
10001d18:	af00      	add	r7, sp, #0
10001d1a:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
10001d1c:	2300      	movs	r3, #0
10001d1e:	61bb      	str	r3, [r7, #24]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10001d20:	4b20      	ldr	r3, [pc, #128]	; (10001da4 <HAL_IPCC_RX_IRQHandler+0x90>)
10001d22:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
10001d24:	4b20      	ldr	r3, [pc, #128]	; (10001da8 <HAL_IPCC_RX_IRQHandler+0x94>)
10001d26:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
#endif

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
10001d28:	697b      	ldr	r3, [r7, #20]
10001d2a:	685b      	ldr	r3, [r3, #4]
10001d2c:	43db      	mvns	r3, r3
10001d2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10001d32:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
10001d34:	693b      	ldr	r3, [r7, #16]
10001d36:	68db      	ldr	r3, [r3, #12]
10001d38:	69fa      	ldr	r2, [r7, #28]
10001d3a:	4013      	ands	r3, r2
10001d3c:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10001d3e:	e029      	b.n	10001d94 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
10001d40:	69bb      	ldr	r3, [r7, #24]
10001d42:	f003 030f 	and.w	r3, r3, #15
10001d46:	2201      	movs	r2, #1
10001d48:	fa02 f303 	lsl.w	r3, r2, r3
10001d4c:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
10001d4e:	69fa      	ldr	r2, [r7, #28]
10001d50:	68fb      	ldr	r3, [r7, #12]
10001d52:	4013      	ands	r3, r2
10001d54:	2b00      	cmp	r3, #0
10001d56:	d01a      	beq.n	10001d8e <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
10001d58:	697b      	ldr	r3, [r7, #20]
10001d5a:	685a      	ldr	r2, [r3, #4]
10001d5c:	68fb      	ldr	r3, [r7, #12]
10001d5e:	431a      	orrs	r2, r3
10001d60:	697b      	ldr	r3, [r7, #20]
10001d62:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
10001d64:	687a      	ldr	r2, [r7, #4]
10001d66:	69bb      	ldr	r3, [r7, #24]
10001d68:	009b      	lsls	r3, r3, #2
10001d6a:	4413      	add	r3, r2
10001d6c:	685b      	ldr	r3, [r3, #4]
10001d6e:	2b00      	cmp	r3, #0
10001d70:	d008      	beq.n	10001d84 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
10001d72:	687a      	ldr	r2, [r7, #4]
10001d74:	69bb      	ldr	r3, [r7, #24]
10001d76:	009b      	lsls	r3, r3, #2
10001d78:	4413      	add	r3, r2
10001d7a:	685b      	ldr	r3, [r3, #4]
10001d7c:	2201      	movs	r2, #1
10001d7e:	69b9      	ldr	r1, [r7, #24]
10001d80:	6878      	ldr	r0, [r7, #4]
10001d82:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
10001d84:	68fb      	ldr	r3, [r7, #12]
10001d86:	43db      	mvns	r3, r3
10001d88:	69fa      	ldr	r2, [r7, #28]
10001d8a:	4013      	ands	r3, r2
10001d8c:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
10001d8e:	69bb      	ldr	r3, [r7, #24]
10001d90:	3301      	adds	r3, #1
10001d92:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10001d94:	69fb      	ldr	r3, [r7, #28]
10001d96:	2b00      	cmp	r3, #0
10001d98:	d1d2      	bne.n	10001d40 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
10001d9a:	bf00      	nop
10001d9c:	bf00      	nop
10001d9e:	3720      	adds	r7, #32
10001da0:	46bd      	mov	sp, r7
10001da2:	bd80      	pop	{r7, pc}
10001da4:	4c001010 	.word	0x4c001010
10001da8:	4c001000 	.word	0x4c001000

10001dac <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10001dac:	b480      	push	{r7}
10001dae:	b085      	sub	sp, #20
10001db0:	af00      	add	r7, sp, #0
10001db2:	60f8      	str	r0, [r7, #12]
10001db4:	60b9      	str	r1, [r7, #8]
10001db6:	4613      	mov	r3, r2
10001db8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
10001dba:	bf00      	nop
10001dbc:	3714      	adds	r7, #20
10001dbe:	46bd      	mov	sp, r7
10001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
10001dc4:	4770      	bx	lr

10001dc6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10001dc6:	b480      	push	{r7}
10001dc8:	b085      	sub	sp, #20
10001dca:	af00      	add	r7, sp, #0
10001dcc:	60f8      	str	r0, [r7, #12]
10001dce:	60b9      	str	r1, [r7, #8]
10001dd0:	4613      	mov	r3, r2
10001dd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
10001dd4:	bf00      	nop
10001dd6:	3714      	adds	r7, #20
10001dd8:	46bd      	mov	sp, r7
10001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
10001dde:	4770      	bx	lr

10001de0 <IPCC_UnmaskInterrupt>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  */
void IPCC_UnmaskInterrupt(uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10001de0:	b480      	push	{r7}
10001de2:	b085      	sub	sp, #20
10001de4:	af00      	add	r7, sp, #0
10001de6:	6078      	str	r0, [r7, #4]
10001de8:	460b      	mov	r3, r1
10001dea:	70fb      	strb	r3, [r7, #3]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10001dec:	4b12      	ldr	r3, [pc, #72]	; (10001e38 <IPCC_UnmaskInterrupt+0x58>)
10001dee:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10001df0:	78fb      	ldrb	r3, [r7, #3]
10001df2:	2b00      	cmp	r3, #0
10001df4:	d10d      	bne.n	10001e12 <IPCC_UnmaskInterrupt+0x32>
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10001df6:	68fb      	ldr	r3, [r7, #12]
10001df8:	685a      	ldr	r2, [r3, #4]
10001dfa:	687b      	ldr	r3, [r7, #4]
10001dfc:	f003 030f 	and.w	r3, r3, #15
10001e00:	f44f 3180 	mov.w	r1, #65536	; 0x10000
10001e04:	fa01 f303 	lsl.w	r3, r1, r3
10001e08:	43db      	mvns	r3, r3
10001e0a:	401a      	ands	r2, r3
10001e0c:	68fb      	ldr	r3, [r7, #12]
10001e0e:	605a      	str	r2, [r3, #4]
  else
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
  }
}
10001e10:	e00b      	b.n	10001e2a <IPCC_UnmaskInterrupt+0x4a>
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10001e12:	68fb      	ldr	r3, [r7, #12]
10001e14:	685a      	ldr	r2, [r3, #4]
10001e16:	687b      	ldr	r3, [r7, #4]
10001e18:	f003 030f 	and.w	r3, r3, #15
10001e1c:	2101      	movs	r1, #1
10001e1e:	fa01 f303 	lsl.w	r3, r1, r3
10001e22:	43db      	mvns	r3, r3
10001e24:	401a      	ands	r2, r3
10001e26:	68fb      	ldr	r3, [r7, #12]
10001e28:	605a      	str	r2, [r3, #4]
}
10001e2a:	bf00      	nop
10001e2c:	3714      	adds	r7, #20
10001e2e:	46bd      	mov	sp, r7
10001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
10001e34:	4770      	bx	lr
10001e36:	bf00      	nop
10001e38:	4c001010 	.word	0x4c001010

10001e3c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
10001e3c:	b480      	push	{r7}
10001e3e:	b085      	sub	sp, #20
10001e40:	af00      	add	r7, sp, #0
10001e42:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10001e44:	2300      	movs	r3, #0
10001e46:	60fb      	str	r3, [r7, #12]
10001e48:	e00f      	b.n	10001e6a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
10001e4a:	687a      	ldr	r2, [r7, #4]
10001e4c:	68fb      	ldr	r3, [r7, #12]
10001e4e:	009b      	lsls	r3, r3, #2
10001e50:	4413      	add	r3, r2
10001e52:	4a0b      	ldr	r2, [pc, #44]	; (10001e80 <IPCC_SetDefaultCallbacks+0x44>)
10001e54:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
10001e56:	687a      	ldr	r2, [r7, #4]
10001e58:	68fb      	ldr	r3, [r7, #12]
10001e5a:	3306      	adds	r3, #6
10001e5c:	009b      	lsls	r3, r3, #2
10001e5e:	4413      	add	r3, r2
10001e60:	4a08      	ldr	r2, [pc, #32]	; (10001e84 <IPCC_SetDefaultCallbacks+0x48>)
10001e62:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10001e64:	68fb      	ldr	r3, [r7, #12]
10001e66:	3301      	adds	r3, #1
10001e68:	60fb      	str	r3, [r7, #12]
10001e6a:	68fb      	ldr	r3, [r7, #12]
10001e6c:	2b05      	cmp	r3, #5
10001e6e:	d9ec      	bls.n	10001e4a <IPCC_SetDefaultCallbacks+0xe>
  }
}
10001e70:	bf00      	nop
10001e72:	bf00      	nop
10001e74:	3714      	adds	r7, #20
10001e76:	46bd      	mov	sp, r7
10001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
10001e7c:	4770      	bx	lr
10001e7e:	bf00      	nop
10001e80:	10001dad 	.word	0x10001dad
10001e84:	10001dc7 	.word	0x10001dc7

10001e88 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
10001e88:	b480      	push	{r7}
10001e8a:	b083      	sub	sp, #12
10001e8c:	af00      	add	r7, sp, #0
10001e8e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
10001e90:	687b      	ldr	r3, [r7, #4]
10001e92:	2200      	movs	r2, #0
10001e94:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
10001e96:	687b      	ldr	r3, [r7, #4]
10001e98:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
10001e9c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
10001e9e:	687b      	ldr	r3, [r7, #4]
10001ea0:	223f      	movs	r2, #63	; 0x3f
10001ea2:	609a      	str	r2, [r3, #8]
}
10001ea4:	bf00      	nop
10001ea6:	370c      	adds	r7, #12
10001ea8:	46bd      	mov	sp, r7
10001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
10001eae:	4770      	bx	lr

10001eb0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
10001eb0:	b480      	push	{r7}
10001eb2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
10001eb4:	4b05      	ldr	r3, [pc, #20]	; (10001ecc <HAL_PWR_EnableBkUpAccess+0x1c>)
10001eb6:	681b      	ldr	r3, [r3, #0]
10001eb8:	4a04      	ldr	r2, [pc, #16]	; (10001ecc <HAL_PWR_EnableBkUpAccess+0x1c>)
10001eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10001ebe:	6013      	str	r3, [r2, #0]
}
10001ec0:	bf00      	nop
10001ec2:	46bd      	mov	sp, r7
10001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
10001ec8:	4770      	bx	lr
10001eca:	bf00      	nop
10001ecc:	50001000 	.word	0x50001000

10001ed0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10001ed0:	b580      	push	{r7, lr}
10001ed2:	b084      	sub	sp, #16
10001ed4:	af00      	add	r7, sp, #0
10001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
10001ed8:	2300      	movs	r3, #0
10001eda:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10001edc:	687b      	ldr	r3, [r7, #4]
10001ede:	2b00      	cmp	r3, #0
10001ee0:	d101      	bne.n	10001ee6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
10001ee2:	2301      	movs	r3, #1
10001ee4:	e320      	b.n	10002528 <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10001ee6:	687b      	ldr	r3, [r7, #4]
10001ee8:	681b      	ldr	r3, [r3, #0]
10001eea:	f003 0301 	and.w	r3, r3, #1
10001eee:	2b00      	cmp	r3, #0
10001ef0:	f000 8081 	beq.w	10001ff6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
10001ef4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ef8:	6a1b      	ldr	r3, [r3, #32]
10001efa:	f003 0303 	and.w	r3, r3, #3
10001efe:	2b01      	cmp	r3, #1
10001f00:	d107      	bne.n	10001f12 <HAL_RCC_OscConfig+0x42>
10001f02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f06:	6a1b      	ldr	r3, [r3, #32]
10001f08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001f10:	d054      	beq.n	10001fbc <HAL_RCC_OscConfig+0xec>
10001f12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001f18:	f003 0307 	and.w	r3, r3, #7
10001f1c:	2b01      	cmp	r3, #1
10001f1e:	d107      	bne.n	10001f30 <HAL_RCC_OscConfig+0x60>
10001f20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001f26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001f2e:	d045      	beq.n	10001fbc <HAL_RCC_OscConfig+0xec>
10001f30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001f36:	f003 0303 	and.w	r3, r3, #3
10001f3a:	2b01      	cmp	r3, #1
10001f3c:	d107      	bne.n	10001f4e <HAL_RCC_OscConfig+0x7e>
10001f3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001f44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001f48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001f4c:	d036      	beq.n	10001fbc <HAL_RCC_OscConfig+0xec>
10001f4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001f54:	f003 0303 	and.w	r3, r3, #3
10001f58:	2b01      	cmp	r3, #1
10001f5a:	d10f      	bne.n	10001f7c <HAL_RCC_OscConfig+0xac>
10001f5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001f64:	f003 0302 	and.w	r3, r3, #2
10001f68:	2b02      	cmp	r3, #2
10001f6a:	d027      	beq.n	10001fbc <HAL_RCC_OscConfig+0xec>
10001f6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001f74:	f003 0302 	and.w	r3, r3, #2
10001f78:	2b02      	cmp	r3, #2
10001f7a:	d01f      	beq.n	10001fbc <HAL_RCC_OscConfig+0xec>
10001f7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f80:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10001f84:	f003 0303 	and.w	r3, r3, #3
10001f88:	2b01      	cmp	r3, #1
10001f8a:	d107      	bne.n	10001f9c <HAL_RCC_OscConfig+0xcc>
10001f8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f90:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001f94:	f003 0302 	and.w	r3, r3, #2
10001f98:	2b02      	cmp	r3, #2
10001f9a:	d00f      	beq.n	10001fbc <HAL_RCC_OscConfig+0xec>
10001f9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fa0:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10001fa4:	f003 0303 	and.w	r3, r3, #3
10001fa8:	2b01      	cmp	r3, #1
10001faa:	d117      	bne.n	10001fdc <HAL_RCC_OscConfig+0x10c>
10001fac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fb0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10001fb4:	f003 0302 	and.w	r3, r3, #2
10001fb8:	2b02      	cmp	r3, #2
10001fba:	d10f      	bne.n	10001fdc <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10001fbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fc0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001fcc:	d112      	bne.n	10001ff4 <HAL_RCC_OscConfig+0x124>
10001fce:	687b      	ldr	r3, [r7, #4]
10001fd0:	685b      	ldr	r3, [r3, #4]
10001fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001fd6:	d00d      	beq.n	10001ff4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
10001fd8:	2301      	movs	r3, #1
10001fda:	e2a5      	b.n	10002528 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
10001fdc:	687b      	ldr	r3, [r7, #4]
10001fde:	685b      	ldr	r3, [r3, #4]
10001fe0:	4618      	mov	r0, r3
10001fe2:	f000 faa7 	bl	10002534 <HAL_RCC_HSEConfig>
10001fe6:	4603      	mov	r3, r0
10001fe8:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
10001fea:	7bfb      	ldrb	r3, [r7, #15]
10001fec:	2b00      	cmp	r3, #0
10001fee:	d002      	beq.n	10001ff6 <HAL_RCC_OscConfig+0x126>
      {
        return result;
10001ff0:	7bfb      	ldrb	r3, [r7, #15]
10001ff2:	e299      	b.n	10002528 <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10001ff4:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10001ff6:	687b      	ldr	r3, [r7, #4]
10001ff8:	681b      	ldr	r3, [r3, #0]
10001ffa:	f003 0302 	and.w	r3, r3, #2
10001ffe:	2b00      	cmp	r3, #0
10002000:	f000 814e 	beq.w	100022a0 <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
10002004:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002008:	6a1b      	ldr	r3, [r3, #32]
1000200a:	f003 0303 	and.w	r3, r3, #3
1000200e:	2b00      	cmp	r3, #0
10002010:	d107      	bne.n	10002022 <HAL_RCC_OscConfig+0x152>
10002012:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002016:	6a1b      	ldr	r3, [r3, #32]
10002018:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000201c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002020:	d055      	beq.n	100020ce <HAL_RCC_OscConfig+0x1fe>
10002022:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002028:	f003 0307 	and.w	r3, r3, #7
1000202c:	2b00      	cmp	r3, #0
1000202e:	d107      	bne.n	10002040 <HAL_RCC_OscConfig+0x170>
10002030:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002036:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000203a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000203e:	d046      	beq.n	100020ce <HAL_RCC_OscConfig+0x1fe>
10002040:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002046:	f003 0303 	and.w	r3, r3, #3
1000204a:	2b00      	cmp	r3, #0
1000204c:	d107      	bne.n	1000205e <HAL_RCC_OscConfig+0x18e>
1000204e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002054:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002058:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000205c:	d037      	beq.n	100020ce <HAL_RCC_OscConfig+0x1fe>
1000205e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002064:	f003 0303 	and.w	r3, r3, #3
10002068:	2b00      	cmp	r3, #0
1000206a:	d10f      	bne.n	1000208c <HAL_RCC_OscConfig+0x1bc>
1000206c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002074:	f003 0302 	and.w	r3, r3, #2
10002078:	2b02      	cmp	r3, #2
1000207a:	d028      	beq.n	100020ce <HAL_RCC_OscConfig+0x1fe>
1000207c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002084:	f003 0302 	and.w	r3, r3, #2
10002088:	2b02      	cmp	r3, #2
1000208a:	d020      	beq.n	100020ce <HAL_RCC_OscConfig+0x1fe>
1000208c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002090:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10002094:	f003 0303 	and.w	r3, r3, #3
10002098:	2b00      	cmp	r3, #0
1000209a:	d107      	bne.n	100020ac <HAL_RCC_OscConfig+0x1dc>
1000209c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020a0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100020a4:	f003 0302 	and.w	r3, r3, #2
100020a8:	2b02      	cmp	r3, #2
100020aa:	d010      	beq.n	100020ce <HAL_RCC_OscConfig+0x1fe>
100020ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020b0:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
100020b4:	f003 0303 	and.w	r3, r3, #3
100020b8:	2b00      	cmp	r3, #0
100020ba:	f040 8088 	bne.w	100021ce <HAL_RCC_OscConfig+0x2fe>
100020be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020c2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100020c6:	f003 0302 	and.w	r3, r3, #2
100020ca:	2b02      	cmp	r3, #2
100020cc:	d17f      	bne.n	100021ce <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
100020ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020d2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100020d6:	f003 0301 	and.w	r3, r3, #1
100020da:	2b01      	cmp	r3, #1
100020dc:	d105      	bne.n	100020ea <HAL_RCC_OscConfig+0x21a>
100020de:	687b      	ldr	r3, [r7, #4]
100020e0:	68db      	ldr	r3, [r3, #12]
100020e2:	2b01      	cmp	r3, #1
100020e4:	d001      	beq.n	100020ea <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
100020e6:	2301      	movs	r3, #1
100020e8:	e21e      	b.n	10002528 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
100020ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020ee:	699b      	ldr	r3, [r3, #24]
100020f0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
100020f4:	687b      	ldr	r3, [r7, #4]
100020f6:	691b      	ldr	r3, [r3, #16]
100020f8:	021b      	lsls	r3, r3, #8
100020fa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100020fe:	4313      	orrs	r3, r2
10002100:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10002102:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002108:	f003 0303 	and.w	r3, r3, #3
1000210c:	2b00      	cmp	r3, #0
1000210e:	d10f      	bne.n	10002130 <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10002110:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002118:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
1000211c:	2b02      	cmp	r3, #2
1000211e:	d047      	beq.n	100021b0 <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10002120:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002124:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002128:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
1000212c:	2b02      	cmp	r3, #2
1000212e:	d03f      	beq.n	100021b0 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10002130:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002134:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10002138:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
1000213c:	2b00      	cmp	r3, #0
1000213e:	d107      	bne.n	10002150 <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10002140:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002144:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002148:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
1000214c:	2b02      	cmp	r3, #2
1000214e:	d02f      	beq.n	100021b0 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10002150:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002154:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10002158:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
1000215c:	2b00      	cmp	r3, #0
1000215e:	d107      	bne.n	10002170 <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
10002160:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002164:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002168:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
1000216c:	2b02      	cmp	r3, #2
1000216e:	d01f      	beq.n	100021b0 <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10002170:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002174:	699b      	ldr	r3, [r3, #24]
10002176:	f023 0203 	bic.w	r2, r3, #3
1000217a:	687b      	ldr	r3, [r7, #4]
1000217c:	695b      	ldr	r3, [r3, #20]
1000217e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002182:	4313      	orrs	r3, r2
10002184:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
10002186:	f7ff f99b 	bl	100014c0 <HAL_GetTick>
1000218a:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
1000218c:	e008      	b.n	100021a0 <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000218e:	f7ff f997 	bl	100014c0 <HAL_GetTick>
10002192:	4602      	mov	r2, r0
10002194:	68bb      	ldr	r3, [r7, #8]
10002196:	1ad3      	subs	r3, r2, r3
10002198:	2b64      	cmp	r3, #100	; 0x64
1000219a:	d901      	bls.n	100021a0 <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
1000219c:	2303      	movs	r3, #3
1000219e:	e1c3      	b.n	10002528 <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
100021a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021a4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100021a8:	f003 0304 	and.w	r3, r3, #4
100021ac:	2b04      	cmp	r3, #4
100021ae:	d1ee      	bne.n	1000218e <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
100021b0:	f001 f809 	bl	100031c6 <HAL_RCC_GetSystemCoreClockFreq>
100021b4:	4603      	mov	r3, r0
100021b6:	4ab3      	ldr	r2, [pc, #716]	; (10002484 <HAL_RCC_OscConfig+0x5b4>)
100021b8:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
100021ba:	4bb3      	ldr	r3, [pc, #716]	; (10002488 <HAL_RCC_OscConfig+0x5b8>)
100021bc:	681b      	ldr	r3, [r3, #0]
100021be:	4618      	mov	r0, r3
100021c0:	f7ff f934 	bl	1000142c <HAL_InitTick>
100021c4:	4603      	mov	r3, r0
100021c6:	2b00      	cmp	r3, #0
100021c8:	d069      	beq.n	1000229e <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
100021ca:	2301      	movs	r3, #1
100021cc:	e1ac      	b.n	10002528 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
100021ce:	687b      	ldr	r3, [r7, #4]
100021d0:	68db      	ldr	r3, [r3, #12]
100021d2:	2b00      	cmp	r3, #0
100021d4:	d049      	beq.n	1000226a <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
100021d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021da:	68db      	ldr	r3, [r3, #12]
100021dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100021e0:	f043 0301 	orr.w	r3, r3, #1
100021e4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100021e6:	f7ff f96b 	bl	100014c0 <HAL_GetTick>
100021ea:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100021ec:	e008      	b.n	10002200 <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100021ee:	f7ff f967 	bl	100014c0 <HAL_GetTick>
100021f2:	4602      	mov	r2, r0
100021f4:	68bb      	ldr	r3, [r7, #8]
100021f6:	1ad3      	subs	r3, r2, r3
100021f8:	2b64      	cmp	r3, #100	; 0x64
100021fa:	d901      	bls.n	10002200 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
100021fc:	2303      	movs	r3, #3
100021fe:	e193      	b.n	10002528 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10002200:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002204:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002208:	f003 0301 	and.w	r3, r3, #1
1000220c:	2b01      	cmp	r3, #1
1000220e:	d1ee      	bne.n	100021ee <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10002210:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002214:	699b      	ldr	r3, [r3, #24]
10002216:	f023 0203 	bic.w	r2, r3, #3
1000221a:	687b      	ldr	r3, [r7, #4]
1000221c:	695b      	ldr	r3, [r3, #20]
1000221e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002222:	4313      	orrs	r3, r2
10002224:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002226:	f7ff f94b 	bl	100014c0 <HAL_GetTick>
1000222a:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
1000222c:	e008      	b.n	10002240 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000222e:	f7ff f947 	bl	100014c0 <HAL_GetTick>
10002232:	4602      	mov	r2, r0
10002234:	68bb      	ldr	r3, [r7, #8]
10002236:	1ad3      	subs	r3, r2, r3
10002238:	2b64      	cmp	r3, #100	; 0x64
1000223a:	d901      	bls.n	10002240 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
1000223c:	2303      	movs	r3, #3
1000223e:	e173      	b.n	10002528 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10002240:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002244:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002248:	f003 0304 	and.w	r3, r3, #4
1000224c:	2b04      	cmp	r3, #4
1000224e:	d1ee      	bne.n	1000222e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10002250:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002254:	699b      	ldr	r3, [r3, #24]
10002256:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
1000225a:	687b      	ldr	r3, [r7, #4]
1000225c:	691b      	ldr	r3, [r3, #16]
1000225e:	021b      	lsls	r3, r3, #8
10002260:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002264:	4313      	orrs	r3, r2
10002266:	618b      	str	r3, [r1, #24]
10002268:	e01a      	b.n	100022a0 <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
1000226a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000226e:	2201      	movs	r2, #1
10002270:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002272:	f7ff f925 	bl	100014c0 <HAL_GetTick>
10002276:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10002278:	e008      	b.n	1000228c <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000227a:	f7ff f921 	bl	100014c0 <HAL_GetTick>
1000227e:	4602      	mov	r2, r0
10002280:	68bb      	ldr	r3, [r7, #8]
10002282:	1ad3      	subs	r3, r2, r3
10002284:	2b64      	cmp	r3, #100	; 0x64
10002286:	d901      	bls.n	1000228c <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
10002288:	2303      	movs	r3, #3
1000228a:	e14d      	b.n	10002528 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
1000228c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002290:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002294:	f003 0301 	and.w	r3, r3, #1
10002298:	2b01      	cmp	r3, #1
1000229a:	d0ee      	beq.n	1000227a <HAL_RCC_OscConfig+0x3aa>
1000229c:	e000      	b.n	100022a0 <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
1000229e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
100022a0:	687b      	ldr	r3, [r7, #4]
100022a2:	681b      	ldr	r3, [r3, #0]
100022a4:	f003 0310 	and.w	r3, r3, #16
100022a8:	2b00      	cmp	r3, #0
100022aa:	f000 8091 	beq.w	100023d0 <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
100022ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022b2:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
100022b6:	f003 0303 	and.w	r3, r3, #3
100022ba:	2b02      	cmp	r3, #2
100022bc:	d107      	bne.n	100022ce <HAL_RCC_OscConfig+0x3fe>
100022be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022c2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100022c6:	f003 0302 	and.w	r3, r3, #2
100022ca:	2b02      	cmp	r3, #2
100022cc:	d01e      	beq.n	1000230c <HAL_RCC_OscConfig+0x43c>
100022ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100022d4:	f003 0303 	and.w	r3, r3, #3
100022d8:	2b02      	cmp	r3, #2
100022da:	d107      	bne.n	100022ec <HAL_RCC_OscConfig+0x41c>
100022dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100022e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100022e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100022ea:	d00f      	beq.n	1000230c <HAL_RCC_OscConfig+0x43c>
100022ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022f0:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
100022f4:	f003 0303 	and.w	r3, r3, #3
100022f8:	2b02      	cmp	r3, #2
100022fa:	d122      	bne.n	10002342 <HAL_RCC_OscConfig+0x472>
100022fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002300:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002304:	f003 0302 	and.w	r3, r3, #2
10002308:	2b02      	cmp	r3, #2
1000230a:	d11a      	bne.n	10002342 <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
1000230c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002310:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002314:	f003 0310 	and.w	r3, r3, #16
10002318:	2b10      	cmp	r3, #16
1000231a:	d105      	bne.n	10002328 <HAL_RCC_OscConfig+0x458>
1000231c:	687b      	ldr	r3, [r7, #4]
1000231e:	69db      	ldr	r3, [r3, #28]
10002320:	2b10      	cmp	r3, #16
10002322:	d001      	beq.n	10002328 <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10002324:	2301      	movs	r3, #1
10002326:	e0ff      	b.n	10002528 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10002328:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000232c:	69db      	ldr	r3, [r3, #28]
1000232e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10002332:	687b      	ldr	r3, [r7, #4]
10002334:	6a1b      	ldr	r3, [r3, #32]
10002336:	021b      	lsls	r3, r3, #8
10002338:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000233c:	4313      	orrs	r3, r2
1000233e:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10002340:	e046      	b.n	100023d0 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
10002342:	687b      	ldr	r3, [r7, #4]
10002344:	69db      	ldr	r3, [r3, #28]
10002346:	2b00      	cmp	r3, #0
10002348:	d029      	beq.n	1000239e <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
1000234a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000234e:	68db      	ldr	r3, [r3, #12]
10002350:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002354:	f043 0310 	orr.w	r3, r3, #16
10002358:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000235a:	f7ff f8b1 	bl	100014c0 <HAL_GetTick>
1000235e:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10002360:	e008      	b.n	10002374 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10002362:	f7ff f8ad 	bl	100014c0 <HAL_GetTick>
10002366:	4602      	mov	r2, r0
10002368:	68bb      	ldr	r3, [r7, #8]
1000236a:	1ad3      	subs	r3, r2, r3
1000236c:	2b64      	cmp	r3, #100	; 0x64
1000236e:	d901      	bls.n	10002374 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
10002370:	2303      	movs	r3, #3
10002372:	e0d9      	b.n	10002528 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10002374:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002378:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000237c:	f003 0310 	and.w	r3, r3, #16
10002380:	2b10      	cmp	r3, #16
10002382:	d1ee      	bne.n	10002362 <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10002384:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002388:	69db      	ldr	r3, [r3, #28]
1000238a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
1000238e:	687b      	ldr	r3, [r7, #4]
10002390:	6a1b      	ldr	r3, [r3, #32]
10002392:	021b      	lsls	r3, r3, #8
10002394:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002398:	4313      	orrs	r3, r2
1000239a:	61cb      	str	r3, [r1, #28]
1000239c:	e018      	b.n	100023d0 <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
1000239e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023a2:	2210      	movs	r2, #16
100023a4:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100023a6:	f7ff f88b 	bl	100014c0 <HAL_GetTick>
100023aa:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
100023ac:	e008      	b.n	100023c0 <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
100023ae:	f7ff f887 	bl	100014c0 <HAL_GetTick>
100023b2:	4602      	mov	r2, r0
100023b4:	68bb      	ldr	r3, [r7, #8]
100023b6:	1ad3      	subs	r3, r2, r3
100023b8:	2b64      	cmp	r3, #100	; 0x64
100023ba:	d901      	bls.n	100023c0 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
100023bc:	2303      	movs	r3, #3
100023be:	e0b3      	b.n	10002528 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
100023c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023c4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100023c8:	f003 0310 	and.w	r3, r3, #16
100023cc:	2b10      	cmp	r3, #16
100023ce:	d0ee      	beq.n	100023ae <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
100023d0:	687b      	ldr	r3, [r7, #4]
100023d2:	681b      	ldr	r3, [r3, #0]
100023d4:	f003 0308 	and.w	r3, r3, #8
100023d8:	2b00      	cmp	r3, #0
100023da:	d042      	beq.n	10002462 <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
100023dc:	687b      	ldr	r3, [r7, #4]
100023de:	699b      	ldr	r3, [r3, #24]
100023e0:	2b00      	cmp	r3, #0
100023e2:	d01f      	beq.n	10002424 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
100023e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023e8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
100023ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100023f0:	f043 0301 	orr.w	r3, r3, #1
100023f4:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100023f8:	f7ff f862 	bl	100014c0 <HAL_GetTick>
100023fc:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
100023fe:	e008      	b.n	10002412 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10002400:	f7ff f85e 	bl	100014c0 <HAL_GetTick>
10002404:	4602      	mov	r2, r0
10002406:	68bb      	ldr	r3, [r7, #8]
10002408:	1ad3      	subs	r3, r2, r3
1000240a:	2b64      	cmp	r3, #100	; 0x64
1000240c:	d901      	bls.n	10002412 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
1000240e:	2303      	movs	r3, #3
10002410:	e08a      	b.n	10002528 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10002412:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002416:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
1000241a:	f003 0302 	and.w	r3, r3, #2
1000241e:	2b02      	cmp	r3, #2
10002420:	d1ee      	bne.n	10002400 <HAL_RCC_OscConfig+0x530>
10002422:	e01e      	b.n	10002462 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10002424:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002428:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
1000242c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002430:	f023 0301 	bic.w	r3, r3, #1
10002434:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002438:	f7ff f842 	bl	100014c0 <HAL_GetTick>
1000243c:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
1000243e:	e008      	b.n	10002452 <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10002440:	f7ff f83e 	bl	100014c0 <HAL_GetTick>
10002444:	4602      	mov	r2, r0
10002446:	68bb      	ldr	r3, [r7, #8]
10002448:	1ad3      	subs	r3, r2, r3
1000244a:	2b64      	cmp	r3, #100	; 0x64
1000244c:	d901      	bls.n	10002452 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
1000244e:	2303      	movs	r3, #3
10002450:	e06a      	b.n	10002528 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10002452:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002456:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
1000245a:	f003 0302 	and.w	r3, r3, #2
1000245e:	2b02      	cmp	r3, #2
10002460:	d0ee      	beq.n	10002440 <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10002462:	687b      	ldr	r3, [r7, #4]
10002464:	681b      	ldr	r3, [r3, #0]
10002466:	f003 0304 	and.w	r3, r3, #4
1000246a:	2b00      	cmp	r3, #0
1000246c:	d02b      	beq.n	100024c6 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
1000246e:	4b07      	ldr	r3, [pc, #28]	; (1000248c <HAL_RCC_OscConfig+0x5bc>)
10002470:	681b      	ldr	r3, [r3, #0]
10002472:	4a06      	ldr	r2, [pc, #24]	; (1000248c <HAL_RCC_OscConfig+0x5bc>)
10002474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10002478:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
1000247a:	f7ff f821 	bl	100014c0 <HAL_GetTick>
1000247e:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10002480:	e00f      	b.n	100024a2 <HAL_RCC_OscConfig+0x5d2>
10002482:	bf00      	nop
10002484:	1002009c 	.word	0x1002009c
10002488:	100200a0 	.word	0x100200a0
1000248c:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10002490:	f7ff f816 	bl	100014c0 <HAL_GetTick>
10002494:	4602      	mov	r2, r0
10002496:	68bb      	ldr	r3, [r7, #8]
10002498:	1ad3      	subs	r3, r2, r3
1000249a:	2b64      	cmp	r3, #100	; 0x64
1000249c:	d901      	bls.n	100024a2 <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
1000249e:	2303      	movs	r3, #3
100024a0:	e042      	b.n	10002528 <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100024a2:	4b23      	ldr	r3, [pc, #140]	; (10002530 <HAL_RCC_OscConfig+0x660>)
100024a4:	681b      	ldr	r3, [r3, #0]
100024a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
100024aa:	2b00      	cmp	r3, #0
100024ac:	d0f0      	beq.n	10002490 <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
100024ae:	687b      	ldr	r3, [r7, #4]
100024b0:	689b      	ldr	r3, [r3, #8]
100024b2:	4618      	mov	r0, r3
100024b4:	f000 f8a9 	bl	1000260a <HAL_RCC_LSEConfig>
100024b8:	4603      	mov	r3, r0
100024ba:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
100024bc:	7bfb      	ldrb	r3, [r7, #15]
100024be:	2b00      	cmp	r3, #0
100024c0:	d001      	beq.n	100024c6 <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
100024c2:	7bfb      	ldrb	r3, [r7, #15]
100024c4:	e030      	b.n	10002528 <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
100024c6:	687b      	ldr	r3, [r7, #4]
100024c8:	3324      	adds	r3, #36	; 0x24
100024ca:	4618      	mov	r0, r3
100024cc:	f000 f91a 	bl	10002704 <RCC_PLL1_Config>
100024d0:	4603      	mov	r3, r0
100024d2:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
100024d4:	7bfb      	ldrb	r3, [r7, #15]
100024d6:	2b00      	cmp	r3, #0
100024d8:	d001      	beq.n	100024de <HAL_RCC_OscConfig+0x60e>
  {
    return result;
100024da:	7bfb      	ldrb	r3, [r7, #15]
100024dc:	e024      	b.n	10002528 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
100024de:	687b      	ldr	r3, [r7, #4]
100024e0:	3360      	adds	r3, #96	; 0x60
100024e2:	4618      	mov	r0, r3
100024e4:	f000 feb0 	bl	10003248 <RCCEx_PLL2_Config>
100024e8:	4603      	mov	r3, r0
100024ea:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
100024ec:	7bfb      	ldrb	r3, [r7, #15]
100024ee:	2b00      	cmp	r3, #0
100024f0:	d001      	beq.n	100024f6 <HAL_RCC_OscConfig+0x626>
  {
    return result;
100024f2:	7bfb      	ldrb	r3, [r7, #15]
100024f4:	e018      	b.n	10002528 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
100024f6:	687b      	ldr	r3, [r7, #4]
100024f8:	339c      	adds	r3, #156	; 0x9c
100024fa:	4618      	mov	r0, r3
100024fc:	f001 f826 	bl	1000354c <RCCEx_PLL3_Config>
10002500:	4603      	mov	r3, r0
10002502:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10002504:	7bfb      	ldrb	r3, [r7, #15]
10002506:	2b00      	cmp	r3, #0
10002508:	d001      	beq.n	1000250e <HAL_RCC_OscConfig+0x63e>
  {
    return result;
1000250a:	7bfb      	ldrb	r3, [r7, #15]
1000250c:	e00c      	b.n	10002528 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
1000250e:	687b      	ldr	r3, [r7, #4]
10002510:	33d8      	adds	r3, #216	; 0xd8
10002512:	4618      	mov	r0, r3
10002514:	f001 f984 	bl	10003820 <RCCEx_PLL4_Config>
10002518:	4603      	mov	r3, r0
1000251a:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
1000251c:	7bfb      	ldrb	r3, [r7, #15]
1000251e:	2b00      	cmp	r3, #0
10002520:	d001      	beq.n	10002526 <HAL_RCC_OscConfig+0x656>
  {
    return result;
10002522:	7bfb      	ldrb	r3, [r7, #15]
10002524:	e000      	b.n	10002528 <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
10002526:	2300      	movs	r3, #0
}
10002528:	4618      	mov	r0, r3
1000252a:	3710      	adds	r7, #16
1000252c:	46bd      	mov	sp, r7
1000252e:	bd80      	pop	{r7, pc}
10002530:	50001000 	.word	0x50001000

10002534 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
10002534:	b580      	push	{r7, lr}
10002536:	b084      	sub	sp, #16
10002538:	af00      	add	r7, sp, #0
1000253a:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
1000253c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002540:	f44f 7280 	mov.w	r2, #256	; 0x100
10002544:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002546:	f7fe ffbb 	bl	100014c0 <HAL_GetTick>
1000254a:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
1000254c:	e008      	b.n	10002560 <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1000254e:	f7fe ffb7 	bl	100014c0 <HAL_GetTick>
10002552:	4602      	mov	r2, r0
10002554:	68fb      	ldr	r3, [r7, #12]
10002556:	1ad3      	subs	r3, r2, r3
10002558:	2b64      	cmp	r3, #100	; 0x64
1000255a:	d901      	bls.n	10002560 <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
1000255c:	2303      	movs	r3, #3
1000255e:	e050      	b.n	10002602 <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10002560:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002564:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002568:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000256c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10002570:	d0ed      	beq.n	1000254e <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
10002572:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002576:	f44f 6290 	mov.w	r2, #1152	; 0x480
1000257a:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
1000257c:	687b      	ldr	r3, [r7, #4]
1000257e:	2b00      	cmp	r3, #0
10002580:	d03e      	beq.n	10002600 <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
10002582:	687b      	ldr	r3, [r7, #4]
10002584:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
10002588:	d108      	bne.n	1000259c <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
1000258a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000258e:	68db      	ldr	r3, [r3, #12]
10002590:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002594:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
10002598:	60d3      	str	r3, [r2, #12]
1000259a:	e013      	b.n	100025c4 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
1000259c:	687b      	ldr	r3, [r7, #4]
1000259e:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
100025a2:	d10f      	bne.n	100025c4 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
100025a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025a8:	68db      	ldr	r3, [r3, #12]
100025aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100025ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
100025b2:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
100025b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025b8:	68db      	ldr	r3, [r3, #12]
100025ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100025be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
100025c2:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
100025c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025c8:	68db      	ldr	r3, [r3, #12]
100025ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100025ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
100025d2:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100025d4:	f7fe ff74 	bl	100014c0 <HAL_GetTick>
100025d8:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100025da:	e008      	b.n	100025ee <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100025dc:	f7fe ff70 	bl	100014c0 <HAL_GetTick>
100025e0:	4602      	mov	r2, r0
100025e2:	68fb      	ldr	r3, [r7, #12]
100025e4:	1ad3      	subs	r3, r2, r3
100025e6:	2b64      	cmp	r3, #100	; 0x64
100025e8:	d901      	bls.n	100025ee <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
100025ea:	2303      	movs	r3, #3
100025ec:	e009      	b.n	10002602 <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100025ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025f2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
100025fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100025fe:	d1ed      	bne.n	100025dc <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
10002600:	2300      	movs	r3, #0
}
10002602:	4618      	mov	r0, r3
10002604:	3710      	adds	r7, #16
10002606:	46bd      	mov	sp, r7
10002608:	bd80      	pop	{r7, pc}

1000260a <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
1000260a:	b580      	push	{r7, lr}
1000260c:	b084      	sub	sp, #16
1000260e:	af00      	add	r7, sp, #0
10002610:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10002612:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002616:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000261a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000261e:	f023 0301 	bic.w	r3, r3, #1
10002622:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002626:	f7fe ff4b 	bl	100014c0 <HAL_GetTick>
1000262a:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
1000262c:	e00a      	b.n	10002644 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
1000262e:	f7fe ff47 	bl	100014c0 <HAL_GetTick>
10002632:	4602      	mov	r2, r0
10002634:	68fb      	ldr	r3, [r7, #12]
10002636:	1ad3      	subs	r3, r2, r3
10002638:	f241 3288 	movw	r2, #5000	; 0x1388
1000263c:	4293      	cmp	r3, r2
1000263e:	d901      	bls.n	10002644 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
10002640:	2303      	movs	r3, #3
10002642:	e05b      	b.n	100026fc <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10002644:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002648:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000264c:	f003 0304 	and.w	r3, r3, #4
10002650:	2b04      	cmp	r3, #4
10002652:	d0ec      	beq.n	1000262e <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
10002654:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002658:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000265c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002660:	f023 030a 	bic.w	r3, r3, #10
10002664:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
10002668:	687b      	ldr	r3, [r7, #4]
1000266a:	2b00      	cmp	r3, #0
1000266c:	d045      	beq.n	100026fa <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
1000266e:	687b      	ldr	r3, [r7, #4]
10002670:	2b03      	cmp	r3, #3
10002672:	d10a      	bne.n	1000268a <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10002674:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002678:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000267c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002680:	f043 0302 	orr.w	r3, r3, #2
10002684:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
10002688:	e016      	b.n	100026b8 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
1000268a:	687b      	ldr	r3, [r7, #4]
1000268c:	2b0b      	cmp	r3, #11
1000268e:	d113      	bne.n	100026b8 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
10002690:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002694:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10002698:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000269c:	f043 0308 	orr.w	r3, r3, #8
100026a0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
100026a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100026ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100026b0:	f043 0302 	orr.w	r3, r3, #2
100026b4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
100026b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100026c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100026c4:	f043 0301 	orr.w	r3, r3, #1
100026c8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100026cc:	f7fe fef8 	bl	100014c0 <HAL_GetTick>
100026d0:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
100026d2:	e00a      	b.n	100026ea <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
100026d4:	f7fe fef4 	bl	100014c0 <HAL_GetTick>
100026d8:	4602      	mov	r2, r0
100026da:	68fb      	ldr	r3, [r7, #12]
100026dc:	1ad3      	subs	r3, r2, r3
100026de:	f241 3288 	movw	r2, #5000	; 0x1388
100026e2:	4293      	cmp	r3, r2
100026e4:	d901      	bls.n	100026ea <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
100026e6:	2303      	movs	r3, #3
100026e8:	e008      	b.n	100026fc <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
100026ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100026f2:	f003 0304 	and.w	r3, r3, #4
100026f6:	2b04      	cmp	r3, #4
100026f8:	d1ec      	bne.n	100026d4 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
100026fa:	2300      	movs	r3, #0
}
100026fc:	4618      	mov	r0, r3
100026fe:	3710      	adds	r7, #16
10002700:	46bd      	mov	sp, r7
10002702:	bd80      	pop	{r7, pc}

10002704 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
10002704:	b580      	push	{r7, lr}
10002706:	b084      	sub	sp, #16
10002708:	af00      	add	r7, sp, #0
1000270a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
1000270c:	687b      	ldr	r3, [r7, #4]
1000270e:	681b      	ldr	r3, [r3, #0]
10002710:	2b00      	cmp	r3, #0
10002712:	f000 8174 	beq.w	100029fe <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
10002716:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000271a:	6a1b      	ldr	r3, [r3, #32]
1000271c:	f003 0303 	and.w	r3, r3, #3
10002720:	2b02      	cmp	r3, #2
10002722:	d108      	bne.n	10002736 <RCC_PLL1_Config+0x32>
10002724:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002728:	6a1b      	ldr	r3, [r3, #32]
1000272a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000272e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002732:	f000 8162 	beq.w	100029fa <RCC_PLL1_Config+0x2f6>
10002736:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000273a:	6a1b      	ldr	r3, [r3, #32]
1000273c:	f003 0303 	and.w	r3, r3, #3
10002740:	2b03      	cmp	r3, #3
10002742:	d108      	bne.n	10002756 <RCC_PLL1_Config+0x52>
10002744:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002748:	6a1b      	ldr	r3, [r3, #32]
1000274a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000274e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002752:	f000 8152 	beq.w	100029fa <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
10002756:	687b      	ldr	r3, [r7, #4]
10002758:	681b      	ldr	r3, [r3, #0]
1000275a:	2b02      	cmp	r3, #2
1000275c:	f040 8123 	bne.w	100029a6 <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10002760:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002768:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000276c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002770:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
10002774:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000277c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002780:	f023 0301 	bic.w	r3, r3, #1
10002784:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002788:	f7fe fe9a 	bl	100014c0 <HAL_GetTick>
1000278c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
1000278e:	e008      	b.n	100027a2 <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002790:	f7fe fe96 	bl	100014c0 <HAL_GetTick>
10002794:	4602      	mov	r2, r0
10002796:	68fb      	ldr	r3, [r7, #12]
10002798:	1ad3      	subs	r3, r2, r3
1000279a:	2b64      	cmp	r3, #100	; 0x64
1000279c:	d901      	bls.n	100027a2 <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
1000279e:	2303      	movs	r3, #3
100027a0:	e12e      	b.n	10002a00 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100027a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100027aa:	f003 0302 	and.w	r3, r3, #2
100027ae:	2b02      	cmp	r3, #2
100027b0:	d0ee      	beq.n	10002790 <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
100027b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100027b8:	f003 0307 	and.w	r3, r3, #7
100027bc:	2b02      	cmp	r3, #2
100027be:	d112      	bne.n	100027e6 <RCC_PLL1_Config+0xe2>
100027c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100027c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100027ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100027ce:	d10a      	bne.n	100027e6 <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
100027d0:	687b      	ldr	r3, [r7, #4]
100027d2:	685a      	ldr	r2, [r3, #4]
100027d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100027da:	f003 0303 	and.w	r3, r3, #3
100027de:	429a      	cmp	r2, r3
100027e0:	d00c      	beq.n	100027fc <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
100027e2:	2301      	movs	r3, #1
100027e4:	e10c      	b.n	10002a00 <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
100027e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100027ec:	f023 0203 	bic.w	r2, r3, #3
100027f0:	687b      	ldr	r3, [r7, #4]
100027f2:	685b      	ldr	r3, [r3, #4]
100027f4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100027f8:	4313      	orrs	r3, r2
100027fa:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
100027fc:	e008      	b.n	10002810 <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100027fe:	f7fe fe5f 	bl	100014c0 <HAL_GetTick>
10002802:	4602      	mov	r2, r0
10002804:	68fb      	ldr	r3, [r7, #12]
10002806:	1ad3      	subs	r3, r2, r3
10002808:	2b64      	cmp	r3, #100	; 0x64
1000280a:	d901      	bls.n	10002810 <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
1000280c:	2303      	movs	r3, #3
1000280e:	e0f7      	b.n	10002a00 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10002810:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002816:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000281a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000281e:	d1ee      	bne.n	100027fe <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10002820:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002824:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
10002828:	4b77      	ldr	r3, [pc, #476]	; (10002a08 <RCC_PLL1_Config+0x304>)
1000282a:	4013      	ands	r3, r2
1000282c:	687a      	ldr	r2, [r7, #4]
1000282e:	68d2      	ldr	r2, [r2, #12]
10002830:	1e51      	subs	r1, r2, #1
10002832:	687a      	ldr	r2, [r7, #4]
10002834:	6892      	ldr	r2, [r2, #8]
10002836:	3a01      	subs	r2, #1
10002838:	0412      	lsls	r2, r2, #16
1000283a:	430a      	orrs	r2, r1
1000283c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002840:	4313      	orrs	r3, r2
10002842:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
10002846:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
1000284e:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10002852:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10002856:	687a      	ldr	r2, [r7, #4]
10002858:	6912      	ldr	r2, [r2, #16]
1000285a:	1e51      	subs	r1, r2, #1
1000285c:	687a      	ldr	r2, [r7, #4]
1000285e:	6952      	ldr	r2, [r2, #20]
10002860:	3a01      	subs	r2, #1
10002862:	0212      	lsls	r2, r2, #8
10002864:	4311      	orrs	r1, r2
10002866:	687a      	ldr	r2, [r7, #4]
10002868:	6992      	ldr	r2, [r2, #24]
1000286a:	3a01      	subs	r2, #1
1000286c:	0412      	lsls	r2, r2, #16
1000286e:	430a      	orrs	r2, r1
10002870:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002874:	4313      	orrs	r3, r2
10002876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
1000287a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000287e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10002882:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1000288a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
1000288e:	687b      	ldr	r3, [r7, #4]
10002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002892:	2b02      	cmp	r3, #2
10002894:	d003      	beq.n	1000289e <RCC_PLL1_Config+0x19a>
10002896:	687b      	ldr	r3, [r7, #4]
10002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000289a:	2b00      	cmp	r3, #0
1000289c:	d10c      	bne.n	100028b8 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
1000289e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100028a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100028a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100028aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100028ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100028b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
100028b6:	e00f      	b.n	100028d8 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
100028b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100028bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100028c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100028c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100028c8:	687a      	ldr	r2, [r7, #4]
100028ca:	6a12      	ldr	r2, [r2, #32]
100028cc:	00d2      	lsls	r2, r2, #3
100028ce:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100028d2:	4313      	orrs	r3, r2
100028d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
100028d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100028dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100028e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100028e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
100028e8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100028ec:	687b      	ldr	r3, [r7, #4]
100028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100028f0:	2b02      	cmp	r3, #2
100028f2:	d124      	bne.n	1000293e <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
100028f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100028f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
100028fc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10002900:	687b      	ldr	r3, [r7, #4]
10002902:	6a99      	ldr	r1, [r3, #40]	; 0x28
10002904:	687b      	ldr	r3, [r7, #4]
10002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002908:	4319      	orrs	r1, r3
1000290a:	687b      	ldr	r3, [r7, #4]
1000290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000290e:	4319      	orrs	r1, r3
10002910:	687b      	ldr	r3, [r7, #4]
10002912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10002914:	4319      	orrs	r1, r3
10002916:	687b      	ldr	r3, [r7, #4]
10002918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000291a:	041b      	lsls	r3, r3, #16
1000291c:	430b      	orrs	r3, r1
1000291e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002922:	4313      	orrs	r3, r2
10002924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
10002928:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000292c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002930:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002934:	f043 0304 	orr.w	r3, r3, #4
10002938:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
1000293c:	e009      	b.n	10002952 <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
1000293e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002942:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002946:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000294a:	f023 0304 	bic.w	r3, r3, #4
1000294e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
10002952:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000295a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000295e:	f043 0301 	orr.w	r3, r3, #1
10002962:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002966:	f7fe fdab 	bl	100014c0 <HAL_GetTick>
1000296a:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
1000296c:	e008      	b.n	10002980 <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000296e:	f7fe fda7 	bl	100014c0 <HAL_GetTick>
10002972:	4602      	mov	r2, r0
10002974:	68fb      	ldr	r3, [r7, #12]
10002976:	1ad3      	subs	r3, r2, r3
10002978:	2b64      	cmp	r3, #100	; 0x64
1000297a:	d901      	bls.n	10002980 <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
1000297c:	2303      	movs	r3, #3
1000297e:	e03f      	b.n	10002a00 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10002980:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002984:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002988:	f003 0302 	and.w	r3, r3, #2
1000298c:	2b02      	cmp	r3, #2
1000298e:	d1ee      	bne.n	1000296e <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10002990:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002998:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000299c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
100029a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
100029a4:	e02b      	b.n	100029fe <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100029a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100029aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100029ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100029b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100029b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
100029ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100029be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100029c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100029c6:	f023 0301 	bic.w	r3, r3, #1
100029ca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100029ce:	f7fe fd77 	bl	100014c0 <HAL_GetTick>
100029d2:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100029d4:	e008      	b.n	100029e8 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100029d6:	f7fe fd73 	bl	100014c0 <HAL_GetTick>
100029da:	4602      	mov	r2, r0
100029dc:	68fb      	ldr	r3, [r7, #12]
100029de:	1ad3      	subs	r3, r2, r3
100029e0:	2b64      	cmp	r3, #100	; 0x64
100029e2:	d901      	bls.n	100029e8 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
100029e4:	2303      	movs	r3, #3
100029e6:	e00b      	b.n	10002a00 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100029e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100029ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100029f0:	f003 0302 	and.w	r3, r3, #2
100029f4:	2b02      	cmp	r3, #2
100029f6:	d0ee      	beq.n	100029d6 <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
100029f8:	e001      	b.n	100029fe <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100029fa:	2301      	movs	r3, #1
100029fc:	e000      	b.n	10002a00 <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
100029fe:	2300      	movs	r3, #0

}
10002a00:	4618      	mov	r0, r3
10002a02:	3710      	adds	r7, #16
10002a04:	46bd      	mov	sp, r7
10002a06:	bd80      	pop	{r7, pc}
10002a08:	ffc0fe00 	.word	0xffc0fe00

10002a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
10002a0c:	b580      	push	{r7, lr}
10002a0e:	b084      	sub	sp, #16
10002a10:	af00      	add	r7, sp, #0
10002a12:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
10002a14:	2300      	movs	r3, #0
10002a16:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10002a18:	687b      	ldr	r3, [r7, #4]
10002a1a:	2b00      	cmp	r3, #0
10002a1c:	d101      	bne.n	10002a22 <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
10002a1e:	2301      	movs	r3, #1
10002a20:	e102      	b.n	10002c28 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
10002a22:	687b      	ldr	r3, [r7, #4]
10002a24:	681b      	ldr	r3, [r3, #0]
10002a26:	f003 0301 	and.w	r3, r3, #1
10002a2a:	2b00      	cmp	r3, #0
10002a2c:	d00b      	beq.n	10002a46 <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
10002a2e:	687b      	ldr	r3, [r7, #4]
10002a30:	3304      	adds	r3, #4
10002a32:	4618      	mov	r0, r3
10002a34:	f000 f8fc 	bl	10002c30 <RCC_MPUConfig>
10002a38:	4603      	mov	r3, r0
10002a3a:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10002a3c:	7bfb      	ldrb	r3, [r7, #15]
10002a3e:	2b00      	cmp	r3, #0
10002a40:	d001      	beq.n	10002a46 <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
10002a42:	7bfb      	ldrb	r3, [r7, #15]
10002a44:	e0f0      	b.n	10002c28 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
10002a46:	687b      	ldr	r3, [r7, #4]
10002a48:	681b      	ldr	r3, [r3, #0]
10002a4a:	f003 0302 	and.w	r3, r3, #2
10002a4e:	2b00      	cmp	r3, #0
10002a50:	d00b      	beq.n	10002a6a <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
10002a52:	687b      	ldr	r3, [r7, #4]
10002a54:	330c      	adds	r3, #12
10002a56:	4618      	mov	r0, r3
10002a58:	f000 f960 	bl	10002d1c <RCC_AXISSConfig>
10002a5c:	4603      	mov	r3, r0
10002a5e:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10002a60:	7bfb      	ldrb	r3, [r7, #15]
10002a62:	2b00      	cmp	r3, #0
10002a64:	d001      	beq.n	10002a6a <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
10002a66:	7bfb      	ldrb	r3, [r7, #15]
10002a68:	e0de      	b.n	10002c28 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
10002a6a:	687b      	ldr	r3, [r7, #4]
10002a6c:	681b      	ldr	r3, [r3, #0]
10002a6e:	f003 0304 	and.w	r3, r3, #4
10002a72:	2b00      	cmp	r3, #0
10002a74:	d00b      	beq.n	10002a8e <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
10002a76:	687b      	ldr	r3, [r7, #4]
10002a78:	3314      	adds	r3, #20
10002a7a:	4618      	mov	r0, r3
10002a7c:	f000 f9e6 	bl	10002e4c <RCC_MCUConfig>
10002a80:	4603      	mov	r3, r0
10002a82:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10002a84:	7bfb      	ldrb	r3, [r7, #15]
10002a86:	2b00      	cmp	r3, #0
10002a88:	d001      	beq.n	10002a8e <HAL_RCC_ClockConfig+0x82>
    {
      return status;
10002a8a:	7bfb      	ldrb	r3, [r7, #15]
10002a8c:	e0cc      	b.n	10002c28 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
10002a8e:	687b      	ldr	r3, [r7, #4]
10002a90:	681b      	ldr	r3, [r3, #0]
10002a92:	f003 0308 	and.w	r3, r3, #8
10002a96:	2b00      	cmp	r3, #0
10002a98:	d020      	beq.n	10002adc <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
10002a9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10002aa0:	f023 0207 	bic.w	r2, r3, #7
10002aa4:	687b      	ldr	r3, [r7, #4]
10002aa6:	69db      	ldr	r3, [r3, #28]
10002aa8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002aac:	4313      	orrs	r3, r2
10002aae:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002ab0:	f7fe fd06 	bl	100014c0 <HAL_GetTick>
10002ab4:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10002ab6:	e009      	b.n	10002acc <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002ab8:	f7fe fd02 	bl	100014c0 <HAL_GetTick>
10002abc:	4602      	mov	r2, r0
10002abe:	68bb      	ldr	r3, [r7, #8]
10002ac0:	1ad3      	subs	r3, r2, r3
10002ac2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002ac6:	d901      	bls.n	10002acc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
10002ac8:	2303      	movs	r3, #3
10002aca:	e0ad      	b.n	10002c28 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10002acc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10002ad2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002ada:	d1ed      	bne.n	10002ab8 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
10002adc:	687b      	ldr	r3, [r7, #4]
10002ade:	681b      	ldr	r3, [r3, #0]
10002ae0:	f003 0310 	and.w	r3, r3, #16
10002ae4:	2b00      	cmp	r3, #0
10002ae6:	d020      	beq.n	10002b2a <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
10002ae8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10002aee:	f023 0207 	bic.w	r2, r3, #7
10002af2:	687b      	ldr	r3, [r7, #4]
10002af4:	6a1b      	ldr	r3, [r3, #32]
10002af6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002afa:	4313      	orrs	r3, r2
10002afc:	640b      	str	r3, [r1, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002afe:	f7fe fcdf 	bl	100014c0 <HAL_GetTick>
10002b02:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10002b04:	e009      	b.n	10002b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002b06:	f7fe fcdb 	bl	100014c0 <HAL_GetTick>
10002b0a:	4602      	mov	r2, r0
10002b0c:	68bb      	ldr	r3, [r7, #8]
10002b0e:	1ad3      	subs	r3, r2, r3
10002b10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002b14:	d901      	bls.n	10002b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
10002b16:	2303      	movs	r3, #3
10002b18:	e086      	b.n	10002c28 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10002b1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10002b20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002b24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002b28:	d1ed      	bne.n	10002b06 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
10002b2a:	687b      	ldr	r3, [r7, #4]
10002b2c:	681b      	ldr	r3, [r3, #0]
10002b2e:	f003 0320 	and.w	r3, r3, #32
10002b32:	2b00      	cmp	r3, #0
10002b34:	d023      	beq.n	10002b7e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
10002b36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b3a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10002b3e:	f023 0207 	bic.w	r2, r3, #7
10002b42:	687b      	ldr	r3, [r7, #4]
10002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002b46:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002b4a:	4313      	orrs	r3, r2
10002b4c:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002b50:	f7fe fcb6 	bl	100014c0 <HAL_GetTick>
10002b54:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10002b56:	e009      	b.n	10002b6c <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002b58:	f7fe fcb2 	bl	100014c0 <HAL_GetTick>
10002b5c:	4602      	mov	r2, r0
10002b5e:	68bb      	ldr	r3, [r7, #8]
10002b60:	1ad3      	subs	r3, r2, r3
10002b62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002b66:	d901      	bls.n	10002b6c <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
10002b68:	2303      	movs	r3, #3
10002b6a:	e05d      	b.n	10002c28 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10002b6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b70:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10002b74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002b78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002b7c:	d1ec      	bne.n	10002b58 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
10002b7e:	687b      	ldr	r3, [r7, #4]
10002b80:	681b      	ldr	r3, [r3, #0]
10002b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
10002b86:	2b00      	cmp	r3, #0
10002b88:	d023      	beq.n	10002bd2 <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
10002b8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b8e:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10002b92:	f023 0207 	bic.w	r2, r3, #7
10002b96:	687b      	ldr	r3, [r7, #4]
10002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002b9a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002b9e:	4313      	orrs	r3, r2
10002ba0:	f8c1 3838 	str.w	r3, [r1, #2104]	; 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002ba4:	f7fe fc8c 	bl	100014c0 <HAL_GetTick>
10002ba8:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10002baa:	e009      	b.n	10002bc0 <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002bac:	f7fe fc88 	bl	100014c0 <HAL_GetTick>
10002bb0:	4602      	mov	r2, r0
10002bb2:	68bb      	ldr	r3, [r7, #8]
10002bb4:	1ad3      	subs	r3, r2, r3
10002bb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002bba:	d901      	bls.n	10002bc0 <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
10002bbc:	2303      	movs	r3, #3
10002bbe:	e033      	b.n	10002c28 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10002bc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002bc4:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10002bc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002bd0:	d1ec      	bne.n	10002bac <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
10002bd2:	687b      	ldr	r3, [r7, #4]
10002bd4:	681b      	ldr	r3, [r3, #0]
10002bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
10002bda:	2b00      	cmp	r3, #0
10002bdc:	d023      	beq.n	10002c26 <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
10002bde:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002be2:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10002be6:	f023 0207 	bic.w	r2, r3, #7
10002bea:	687b      	ldr	r3, [r7, #4]
10002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10002bee:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002bf2:	4313      	orrs	r3, r2
10002bf4:	f8c1 383c 	str.w	r3, [r1, #2108]	; 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002bf8:	f7fe fc62 	bl	100014c0 <HAL_GetTick>
10002bfc:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10002bfe:	e009      	b.n	10002c14 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002c00:	f7fe fc5e 	bl	100014c0 <HAL_GetTick>
10002c04:	4602      	mov	r2, r0
10002c06:	68bb      	ldr	r3, [r7, #8]
10002c08:	1ad3      	subs	r3, r2, r3
10002c0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002c0e:	d901      	bls.n	10002c14 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
10002c10:	2303      	movs	r3, #3
10002c12:	e009      	b.n	10002c28 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10002c14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c18:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10002c1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002c20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002c24:	d1ec      	bne.n	10002c00 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
10002c26:	2300      	movs	r3, #0
}
10002c28:	4618      	mov	r0, r3
10002c2a:	3710      	adds	r7, #16
10002c2c:	46bd      	mov	sp, r7
10002c2e:	bd80      	pop	{r7, pc}

10002c30 <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
10002c30:	b580      	push	{r7, lr}
10002c32:	b084      	sub	sp, #16
10002c34:	af00      	add	r7, sp, #0
10002c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
10002c38:	687b      	ldr	r3, [r7, #4]
10002c3a:	681b      	ldr	r3, [r3, #0]
10002c3c:	2b03      	cmp	r3, #3
10002c3e:	d840      	bhi.n	10002cc2 <RCC_MPUConfig+0x92>
10002c40:	a201      	add	r2, pc, #4	; (adr r2, 10002c48 <RCC_MPUConfig+0x18>)
10002c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10002c46:	bf00      	nop
10002c48:	10002c59 	.word	0x10002c59
10002c4c:	10002c6d 	.word	0x10002c6d
10002c50:	10002c83 	.word	0x10002c83
10002c54:	10002c97 	.word	0x10002c97
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10002c58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c5c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002c60:	f003 0301 	and.w	r3, r3, #1
10002c64:	2b01      	cmp	r3, #1
10002c66:	d02e      	beq.n	10002cc6 <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
10002c68:	2301      	movs	r3, #1
10002c6a:	e053      	b.n	10002d14 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10002c6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c70:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
10002c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10002c7c:	d025      	beq.n	10002cca <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
10002c7e:	2301      	movs	r3, #1
10002c80:	e048      	b.n	10002d14 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10002c82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002c8a:	f003 0302 	and.w	r3, r3, #2
10002c8e:	2b02      	cmp	r3, #2
10002c90:	d01d      	beq.n	10002cce <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
10002c92:	2301      	movs	r3, #1
10002c94:	e03e      	b.n	10002d14 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10002c96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002c9e:	f003 0302 	and.w	r3, r3, #2
10002ca2:	2b02      	cmp	r3, #2
10002ca4:	d001      	beq.n	10002caa <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
10002ca6:	2301      	movs	r3, #1
10002ca8:	e034      	b.n	10002d14 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
10002caa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10002cb0:	f023 0207 	bic.w	r2, r3, #7
10002cb4:	687b      	ldr	r3, [r7, #4]
10002cb6:	685b      	ldr	r3, [r3, #4]
10002cb8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002cbc:	4313      	orrs	r3, r2
10002cbe:	62cb      	str	r3, [r1, #44]	; 0x2c

      break;
10002cc0:	e006      	b.n	10002cd0 <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
10002cc2:	2301      	movs	r3, #1
10002cc4:	e026      	b.n	10002d14 <RCC_MPUConfig+0xe4>
      break;
10002cc6:	bf00      	nop
10002cc8:	e002      	b.n	10002cd0 <RCC_MPUConfig+0xa0>
      break;
10002cca:	bf00      	nop
10002ccc:	e000      	b.n	10002cd0 <RCC_MPUConfig+0xa0>
      break;
10002cce:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
10002cd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002cd4:	6a1b      	ldr	r3, [r3, #32]
10002cd6:	f023 0203 	bic.w	r2, r3, #3
10002cda:	687b      	ldr	r3, [r7, #4]
10002cdc:	681b      	ldr	r3, [r3, #0]
10002cde:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002ce2:	4313      	orrs	r3, r2
10002ce4:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002ce6:	f7fe fbeb 	bl	100014c0 <HAL_GetTick>
10002cea:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10002cec:	e009      	b.n	10002d02 <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002cee:	f7fe fbe7 	bl	100014c0 <HAL_GetTick>
10002cf2:	4602      	mov	r2, r0
10002cf4:	68fb      	ldr	r3, [r7, #12]
10002cf6:	1ad3      	subs	r3, r2, r3
10002cf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002cfc:	d901      	bls.n	10002d02 <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
10002cfe:	2303      	movs	r3, #3
10002d00:	e008      	b.n	10002d14 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10002d02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d06:	6a1b      	ldr	r3, [r3, #32]
10002d08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002d10:	d1ed      	bne.n	10002cee <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
10002d12:	2300      	movs	r3, #0
}
10002d14:	4618      	mov	r0, r3
10002d16:	3710      	adds	r7, #16
10002d18:	46bd      	mov	sp, r7
10002d1a:	bd80      	pop	{r7, pc}

10002d1c <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
10002d1c:	b580      	push	{r7, lr}
10002d1e:	b084      	sub	sp, #16
10002d20:	af00      	add	r7, sp, #0
10002d22:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
10002d24:	687b      	ldr	r3, [r7, #4]
10002d26:	681b      	ldr	r3, [r3, #0]
10002d28:	2b02      	cmp	r3, #2
10002d2a:	d01b      	beq.n	10002d64 <RCC_AXISSConfig+0x48>
10002d2c:	2b02      	cmp	r3, #2
10002d2e:	d823      	bhi.n	10002d78 <RCC_AXISSConfig+0x5c>
10002d30:	2b00      	cmp	r3, #0
10002d32:	d002      	beq.n	10002d3a <RCC_AXISSConfig+0x1e>
10002d34:	2b01      	cmp	r3, #1
10002d36:	d00a      	beq.n	10002d4e <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
10002d38:	e01e      	b.n	10002d78 <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10002d3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d3e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002d42:	f003 0301 	and.w	r3, r3, #1
10002d46:	2b01      	cmp	r3, #1
10002d48:	d018      	beq.n	10002d7c <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
10002d4a:	2301      	movs	r3, #1
10002d4c:	e079      	b.n	10002e42 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10002d4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d52:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
10002d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10002d5e:	d00f      	beq.n	10002d80 <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
10002d60:	2301      	movs	r3, #1
10002d62:	e06e      	b.n	10002e42 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10002d64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002d6c:	f003 0302 	and.w	r3, r3, #2
10002d70:	2b02      	cmp	r3, #2
10002d72:	d007      	beq.n	10002d84 <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
10002d74:	2301      	movs	r3, #1
10002d76:	e064      	b.n	10002e42 <RCC_AXISSConfig+0x126>
      break;
10002d78:	bf00      	nop
10002d7a:	e004      	b.n	10002d86 <RCC_AXISSConfig+0x6a>
      break;
10002d7c:	bf00      	nop
10002d7e:	e002      	b.n	10002d86 <RCC_AXISSConfig+0x6a>
      break;
10002d80:	bf00      	nop
10002d82:	e000      	b.n	10002d86 <RCC_AXISSConfig+0x6a>
      break;
10002d84:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
10002d86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002d8c:	f023 0207 	bic.w	r2, r3, #7
10002d90:	687b      	ldr	r3, [r7, #4]
10002d92:	681b      	ldr	r3, [r3, #0]
10002d94:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002d98:	4313      	orrs	r3, r2
10002d9a:	624b      	str	r3, [r1, #36]	; 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
10002d9c:	687b      	ldr	r3, [r7, #4]
10002d9e:	681b      	ldr	r3, [r3, #0]
10002da0:	2b03      	cmp	r3, #3
10002da2:	d016      	beq.n	10002dd2 <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002da4:	f7fe fb8c 	bl	100014c0 <HAL_GetTick>
10002da8:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10002daa:	e009      	b.n	10002dc0 <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002dac:	f7fe fb88 	bl	100014c0 <HAL_GetTick>
10002db0:	4602      	mov	r2, r0
10002db2:	68fb      	ldr	r3, [r7, #12]
10002db4:	1ad3      	subs	r3, r2, r3
10002db6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002dba:	d901      	bls.n	10002dc0 <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
10002dbc:	2303      	movs	r3, #3
10002dbe:	e040      	b.n	10002e42 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10002dc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002dc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002dce:	d1ed      	bne.n	10002dac <RCC_AXISSConfig+0x90>
10002dd0:	e015      	b.n	10002dfe <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002dd2:	f7fe fb75 	bl	100014c0 <HAL_GetTick>
10002dd6:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10002dd8:	e009      	b.n	10002dee <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002dda:	f7fe fb71 	bl	100014c0 <HAL_GetTick>
10002dde:	4602      	mov	r2, r0
10002de0:	68fb      	ldr	r3, [r7, #12]
10002de2:	1ad3      	subs	r3, r2, r3
10002de4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002de8:	d901      	bls.n	10002dee <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
10002dea:	2303      	movs	r3, #3
10002dec:	e029      	b.n	10002e42 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10002dee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002df4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002df8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002dfc:	d0ed      	beq.n	10002dda <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
10002dfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002e04:	f023 0207 	bic.w	r2, r3, #7
10002e08:	687b      	ldr	r3, [r7, #4]
10002e0a:	685b      	ldr	r3, [r3, #4]
10002e0c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002e10:	4313      	orrs	r3, r2
10002e12:	630b      	str	r3, [r1, #48]	; 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002e14:	f7fe fb54 	bl	100014c0 <HAL_GetTick>
10002e18:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10002e1a:	e009      	b.n	10002e30 <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002e1c:	f7fe fb50 	bl	100014c0 <HAL_GetTick>
10002e20:	4602      	mov	r2, r0
10002e22:	68fb      	ldr	r3, [r7, #12]
10002e24:	1ad3      	subs	r3, r2, r3
10002e26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002e2a:	d901      	bls.n	10002e30 <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
10002e2c:	2303      	movs	r3, #3
10002e2e:	e008      	b.n	10002e42 <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10002e30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002e36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002e3e:	d1ed      	bne.n	10002e1c <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
10002e40:	2300      	movs	r3, #0
}
10002e42:	4618      	mov	r0, r3
10002e44:	3710      	adds	r7, #16
10002e46:	46bd      	mov	sp, r7
10002e48:	bd80      	pop	{r7, pc}
	...

10002e4c <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
10002e4c:	b580      	push	{r7, lr}
10002e4e:	b084      	sub	sp, #16
10002e50:	af00      	add	r7, sp, #0
10002e52:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
10002e54:	687b      	ldr	r3, [r7, #4]
10002e56:	681b      	ldr	r3, [r3, #0]
10002e58:	2b03      	cmp	r3, #3
10002e5a:	d834      	bhi.n	10002ec6 <RCC_MCUConfig+0x7a>
10002e5c:	a201      	add	r2, pc, #4	; (adr r2, 10002e64 <RCC_MCUConfig+0x18>)
10002e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10002e62:	bf00      	nop
10002e64:	10002e75 	.word	0x10002e75
10002e68:	10002e89 	.word	0x10002e89
10002e6c:	10002e9f 	.word	0x10002e9f
10002e70:	10002eb3 	.word	0x10002eb3
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10002e74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002e78:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002e7c:	f003 0301 	and.w	r3, r3, #1
10002e80:	2b01      	cmp	r3, #1
10002e82:	d022      	beq.n	10002eca <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10002e84:	2301      	movs	r3, #1
10002e86:	e081      	b.n	10002f8c <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10002e88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002e8c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
10002e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10002e98:	d019      	beq.n	10002ece <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
10002e9a:	2301      	movs	r3, #1
10002e9c:	e076      	b.n	10002f8c <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10002e9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002ea2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002ea6:	f003 0310 	and.w	r3, r3, #16
10002eaa:	2b10      	cmp	r3, #16
10002eac:	d011      	beq.n	10002ed2 <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
10002eae:	2301      	movs	r3, #1
10002eb0:	e06c      	b.n	10002f8c <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10002eb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002eb6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002eba:	f003 0302 	and.w	r3, r3, #2
10002ebe:	2b02      	cmp	r3, #2
10002ec0:	d009      	beq.n	10002ed6 <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
10002ec2:	2301      	movs	r3, #1
10002ec4:	e062      	b.n	10002f8c <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
10002ec6:	bf00      	nop
10002ec8:	e006      	b.n	10002ed8 <RCC_MCUConfig+0x8c>
      break;
10002eca:	bf00      	nop
10002ecc:	e004      	b.n	10002ed8 <RCC_MCUConfig+0x8c>
      break;
10002ece:	bf00      	nop
10002ed0:	e002      	b.n	10002ed8 <RCC_MCUConfig+0x8c>
      break;
10002ed2:	bf00      	nop
10002ed4:	e000      	b.n	10002ed8 <RCC_MCUConfig+0x8c>
      break;
10002ed6:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
10002ed8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002ede:	f023 0203 	bic.w	r2, r3, #3
10002ee2:	687b      	ldr	r3, [r7, #4]
10002ee4:	681b      	ldr	r3, [r3, #0]
10002ee6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002eea:	4313      	orrs	r3, r2
10002eec:	648b      	str	r3, [r1, #72]	; 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002eee:	f7fe fae7 	bl	100014c0 <HAL_GetTick>
10002ef2:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10002ef4:	e009      	b.n	10002f0a <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002ef6:	f7fe fae3 	bl	100014c0 <HAL_GetTick>
10002efa:	4602      	mov	r2, r0
10002efc:	68fb      	ldr	r3, [r7, #12]
10002efe:	1ad3      	subs	r3, r2, r3
10002f00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002f04:	d901      	bls.n	10002f0a <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
10002f06:	2303      	movs	r3, #3
10002f08:	e040      	b.n	10002f8c <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10002f0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002f10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002f14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002f18:	d1ed      	bne.n	10002ef6 <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10002f1a:	f000 f954 	bl	100031c6 <HAL_RCC_GetSystemCoreClockFreq>
10002f1e:	4603      	mov	r3, r0
10002f20:	4a1c      	ldr	r2, [pc, #112]	; (10002f94 <RCC_MCUConfig+0x148>)
10002f22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10002f24:	4b1c      	ldr	r3, [pc, #112]	; (10002f98 <RCC_MCUConfig+0x14c>)
10002f26:	681b      	ldr	r3, [r3, #0]
10002f28:	4618      	mov	r0, r3
10002f2a:	f7fe fa7f 	bl	1000142c <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
10002f2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002f32:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10002f36:	f023 020f 	bic.w	r2, r3, #15
10002f3a:	687b      	ldr	r3, [r7, #4]
10002f3c:	685b      	ldr	r3, [r3, #4]
10002f3e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002f42:	4313      	orrs	r3, r2
10002f44:	f8c1 3830 	str.w	r3, [r1, #2096]	; 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002f48:	f7fe faba 	bl	100014c0 <HAL_GetTick>
10002f4c:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10002f4e:	e009      	b.n	10002f64 <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002f50:	f7fe fab6 	bl	100014c0 <HAL_GetTick>
10002f54:	4602      	mov	r2, r0
10002f56:	68fb      	ldr	r3, [r7, #12]
10002f58:	1ad3      	subs	r3, r2, r3
10002f5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002f5e:	d901      	bls.n	10002f64 <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
10002f60:	2303      	movs	r3, #3
10002f62:	e013      	b.n	10002f8c <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10002f64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002f68:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10002f6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002f70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002f74:	d1ec      	bne.n	10002f50 <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10002f76:	f000 f926 	bl	100031c6 <HAL_RCC_GetSystemCoreClockFreq>
10002f7a:	4603      	mov	r3, r0
10002f7c:	4a05      	ldr	r2, [pc, #20]	; (10002f94 <RCC_MCUConfig+0x148>)
10002f7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10002f80:	4b05      	ldr	r3, [pc, #20]	; (10002f98 <RCC_MCUConfig+0x14c>)
10002f82:	681b      	ldr	r3, [r3, #0]
10002f84:	4618      	mov	r0, r3
10002f86:	f7fe fa51 	bl	1000142c <HAL_InitTick>
#endif

  return HAL_OK;
10002f8a:	2300      	movs	r3, #0
}
10002f8c:	4618      	mov	r0, r3
10002f8e:	3710      	adds	r7, #16
10002f90:	46bd      	mov	sp, r7
10002f92:	bd80      	pop	{r7, pc}
10002f94:	1002009c 	.word	0x1002009c
10002f98:	100200a0 	.word	0x100200a0

10002f9c <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10002f9c:	b480      	push	{r7}
10002f9e:	b089      	sub	sp, #36	; 0x24
10002fa0:	af00      	add	r7, sp, #0
10002fa2:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10002fa4:	2300      	movs	r3, #0
10002fa6:	61bb      	str	r3, [r7, #24]
10002fa8:	2301      	movs	r3, #1
10002faa:	617b      	str	r3, [r7, #20]
10002fac:	2300      	movs	r3, #0
10002fae:	613b      	str	r3, [r7, #16]
10002fb0:	2300      	movs	r3, #0
10002fb2:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10002fb4:	f04f 0300 	mov.w	r3, #0
10002fb8:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
10002fba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002fbe:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10002fc2:	f003 0303 	and.w	r3, r3, #3
10002fc6:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10002fc8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002fcc:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10002fd0:	0c1b      	lsrs	r3, r3, #16
10002fd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10002fd6:	3301      	adds	r3, #1
10002fd8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
10002fda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002fde:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10002fe2:	0c1b      	lsrs	r3, r3, #16
10002fe4:	f003 0301 	and.w	r3, r3, #1
10002fe8:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
10002fea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002fee:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10002ff2:	08db      	lsrs	r3, r3, #3
10002ff4:	f3c3 030c 	ubfx	r3, r3, #0, #13
10002ff8:	693a      	ldr	r2, [r7, #16]
10002ffa:	fb02 f303 	mul.w	r3, r2, r3
10002ffe:	ee07 3a90 	vmov	s15, r3
10003002:	eef8 7a67 	vcvt.f32.u32	s15, s15
10003006:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
1000300a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000300e:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10003012:	f3c3 0308 	ubfx	r3, r3, #0, #9
10003016:	3301      	adds	r3, #1
10003018:	ee07 3a90 	vmov	s15, r3
1000301c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10003020:	edd7 6a02 	vldr	s13, [r7, #8]
10003024:	ed9f 6a56 	vldr	s12, [pc, #344]	; 10003180 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
10003028:	eec6 7a86 	vdiv.f32	s15, s13, s12
1000302c:	ee77 7a27 	vadd.f32	s15, s14, s15
10003030:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10003034:	69bb      	ldr	r3, [r7, #24]
10003036:	2b03      	cmp	r3, #3
10003038:	d85b      	bhi.n	100030f2 <HAL_RCC_GetPLL3ClockFreq+0x156>
1000303a:	a201      	add	r2, pc, #4	; (adr r2, 10003040 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
1000303c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10003040:	10003051 	.word	0x10003051
10003044:	100030af 	.word	0x100030af
10003048:	100030cd 	.word	0x100030cd
1000304c:	100030eb 	.word	0x100030eb
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10003050:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003054:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003058:	f003 0304 	and.w	r3, r3, #4
1000305c:	2b04      	cmp	r3, #4
1000305e:	d117      	bne.n	10003090 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10003060:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003064:	699b      	ldr	r3, [r3, #24]
10003066:	f003 0303 	and.w	r3, r3, #3
1000306a:	4a46      	ldr	r2, [pc, #280]	; (10003184 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
1000306c:	fa22 f303 	lsr.w	r3, r2, r3
10003070:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
10003072:	68fa      	ldr	r2, [r7, #12]
10003074:	697b      	ldr	r3, [r7, #20]
10003076:	fbb2 f3f3 	udiv	r3, r2, r3
1000307a:	ee07 3a90 	vmov	s15, r3
1000307e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10003082:	ed97 7a07 	vldr	s14, [r7, #28]
10003086:	ee67 7a27 	vmul.f32	s15, s14, s15
1000308a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
1000308e:	e030      	b.n	100030f2 <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10003090:	4a3c      	ldr	r2, [pc, #240]	; (10003184 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10003092:	697b      	ldr	r3, [r7, #20]
10003094:	fbb2 f3f3 	udiv	r3, r2, r3
10003098:	ee07 3a90 	vmov	s15, r3
1000309c:	eef8 7a67 	vcvt.f32.u32	s15, s15
100030a0:	ed97 7a07 	vldr	s14, [r7, #28]
100030a4:	ee67 7a27 	vmul.f32	s15, s14, s15
100030a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100030ac:	e021      	b.n	100030f2 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
100030ae:	4a36      	ldr	r2, [pc, #216]	; (10003188 <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
100030b0:	697b      	ldr	r3, [r7, #20]
100030b2:	fbb2 f3f3 	udiv	r3, r2, r3
100030b6:	ee07 3a90 	vmov	s15, r3
100030ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
100030be:	ed97 7a07 	vldr	s14, [r7, #28]
100030c2:	ee67 7a27 	vmul.f32	s15, s14, s15
100030c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100030ca:	e012      	b.n	100030f2 <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
100030cc:	4a2f      	ldr	r2, [pc, #188]	; (1000318c <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
100030ce:	697b      	ldr	r3, [r7, #20]
100030d0:	fbb2 f3f3 	udiv	r3, r2, r3
100030d4:	ee07 3a90 	vmov	s15, r3
100030d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
100030dc:	ed97 7a07 	vldr	s14, [r7, #28]
100030e0:	ee67 7a27 	vmul.f32	s15, s14, s15
100030e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100030e8:	e003      	b.n	100030f2 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
100030ea:	f04f 0300 	mov.w	r3, #0
100030ee:	61fb      	str	r3, [r7, #28]
      break;
100030f0:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
100030f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100030f6:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
100030fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100030fe:	3301      	adds	r3, #1
10003100:	ee07 3a90 	vmov	s15, r3
10003104:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10003108:	edd7 6a07 	vldr	s13, [r7, #28]
1000310c:	eec6 7a87 	vdiv.f32	s15, s13, s14
10003110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10003114:	ee17 2a90 	vmov	r2, s15
10003118:	687b      	ldr	r3, [r7, #4]
1000311a:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
1000311c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003120:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10003124:	0a1b      	lsrs	r3, r3, #8
10003126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1000312a:	3301      	adds	r3, #1
1000312c:	ee07 3a90 	vmov	s15, r3
10003130:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10003134:	edd7 6a07 	vldr	s13, [r7, #28]
10003138:	eec6 7a87 	vdiv.f32	s15, s13, s14
1000313c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10003140:	ee17 2a90 	vmov	r2, s15
10003144:	687b      	ldr	r3, [r7, #4]
10003146:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
10003148:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000314c:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10003150:	0c1b      	lsrs	r3, r3, #16
10003152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10003156:	3301      	adds	r3, #1
10003158:	ee07 3a90 	vmov	s15, r3
1000315c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10003160:	edd7 6a07 	vldr	s13, [r7, #28]
10003164:	eec6 7a87 	vdiv.f32	s15, s13, s14
10003168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1000316c:	ee17 2a90 	vmov	r2, s15
10003170:	687b      	ldr	r3, [r7, #4]
10003172:	609a      	str	r2, [r3, #8]
}
10003174:	bf00      	nop
10003176:	3724      	adds	r7, #36	; 0x24
10003178:	46bd      	mov	sp, r7
1000317a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000317e:	4770      	bx	lr
10003180:	46000000 	.word	0x46000000
10003184:	03d09000 	.word	0x03d09000
10003188:	016e3600 	.word	0x016e3600
1000318c:	003d0900 	.word	0x003d0900

10003190 <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
10003190:	b580      	push	{r7, lr}
10003192:	b082      	sub	sp, #8
10003194:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
10003196:	2300      	movs	r3, #0
10003198:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
1000319a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000319e:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
100031a2:	f003 030f 	and.w	r3, r3, #15
100031a6:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
100031a8:	687b      	ldr	r3, [r7, #4]
100031aa:	2b09      	cmp	r3, #9
100031ac:	d901      	bls.n	100031b2 <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
100031ae:	2309      	movs	r3, #9
100031b0:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
100031b2:	f000 f80f 	bl	100031d4 <HAL_RCC_GetMCUSSFreq>
100031b6:	4602      	mov	r2, r0
100031b8:	687b      	ldr	r3, [r7, #4]
100031ba:	fa22 f303 	lsr.w	r3, r2, r3
}
100031be:	4618      	mov	r0, r3
100031c0:	3708      	adds	r7, #8
100031c2:	46bd      	mov	sp, r7
100031c4:	bd80      	pop	{r7, pc}

100031c6 <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
100031c6:	b580      	push	{r7, lr}
100031c8:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
100031ca:	f7ff ffe1 	bl	10003190 <HAL_RCC_GetMCUFreq>
100031ce:	4603      	mov	r3, r0
#endif
}
100031d0:	4618      	mov	r0, r3
100031d2:	bd80      	pop	{r7, pc}

100031d4 <HAL_RCC_GetMCUSSFreq>:

  return axissfreq;
}

uint32_t HAL_RCC_GetMCUSSFreq()
{
100031d4:	b580      	push	{r7, lr}
100031d6:	b084      	sub	sp, #16
100031d8:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
100031da:	2300      	movs	r3, #0
100031dc:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
100031de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100031e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100031e4:	f003 0303 	and.w	r3, r3, #3
100031e8:	2b03      	cmp	r3, #3
100031ea:	d822      	bhi.n	10003232 <HAL_RCC_GetMCUSSFreq+0x5e>
100031ec:	a201      	add	r2, pc, #4	; (adr r2, 100031f4 <HAL_RCC_GetMCUSSFreq+0x20>)
100031ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100031f2:	bf00      	nop
100031f4:	10003213 	.word	0x10003213
100031f8:	10003227 	.word	0x10003227
100031fc:	1000322d 	.word	0x1000322d
10003200:	10003205 	.word	0x10003205
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10003204:	463b      	mov	r3, r7
10003206:	4618      	mov	r0, r3
10003208:	f7ff fec8 	bl	10002f9c <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
1000320c:	683b      	ldr	r3, [r7, #0]
1000320e:	60fb      	str	r3, [r7, #12]
      break;
10003210:	e00f      	b.n	10003232 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10003212:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003216:	699b      	ldr	r3, [r3, #24]
10003218:	f003 0303 	and.w	r3, r3, #3
1000321c:	4a07      	ldr	r2, [pc, #28]	; (1000323c <HAL_RCC_GetMCUSSFreq+0x68>)
1000321e:	fa22 f303 	lsr.w	r3, r2, r3
10003222:	60fb      	str	r3, [r7, #12]

      break;
10003224:	e005      	b.n	10003232 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
10003226:	4b06      	ldr	r3, [pc, #24]	; (10003240 <HAL_RCC_GetMCUSSFreq+0x6c>)
10003228:	60fb      	str	r3, [r7, #12]
      break;
1000322a:	e002      	b.n	10003232 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
1000322c:	4b05      	ldr	r3, [pc, #20]	; (10003244 <HAL_RCC_GetMCUSSFreq+0x70>)
1000322e:	60fb      	str	r3, [r7, #12]
      break;
10003230:	bf00      	nop
  }

  return mcussfreq;
10003232:	68fb      	ldr	r3, [r7, #12]
}
10003234:	4618      	mov	r0, r3
10003236:	3710      	adds	r7, #16
10003238:	46bd      	mov	sp, r7
1000323a:	bd80      	pop	{r7, pc}
1000323c:	03d09000 	.word	0x03d09000
10003240:	016e3600 	.word	0x016e3600
10003244:	003d0900 	.word	0x003d0900

10003248 <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
10003248:	b580      	push	{r7, lr}
1000324a:	b084      	sub	sp, #16
1000324c:	af00      	add	r7, sp, #0
1000324e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
10003250:	687b      	ldr	r3, [r7, #4]
10003252:	681b      	ldr	r3, [r3, #0]
10003254:	2b00      	cmp	r3, #0
10003256:	f000 8171 	beq.w	1000353c <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
1000325a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003260:	f003 0307 	and.w	r3, r3, #7
10003264:	2b02      	cmp	r3, #2
10003266:	d108      	bne.n	1000327a <RCCEx_PLL2_Config+0x32>
10003268:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000326e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003272:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003276:	f000 815f 	beq.w	10003538 <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
1000327a:	687b      	ldr	r3, [r7, #4]
1000327c:	681b      	ldr	r3, [r3, #0]
1000327e:	2b02      	cmp	r3, #2
10003280:	f040 8130 	bne.w	100034e4 <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10003284:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000328a:	f003 0303 	and.w	r3, r3, #3
1000328e:	2b00      	cmp	r3, #0
10003290:	d008      	beq.n	100032a4 <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
10003292:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10003298:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
1000329c:	2b01      	cmp	r3, #1
1000329e:	d001      	beq.n	100032a4 <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
100032a0:	2301      	movs	r3, #1
100032a2:	e14c      	b.n	1000353e <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100032a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100032a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100032ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100032b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100032b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
100032b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100032bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100032c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100032c4:	f023 0301 	bic.w	r3, r3, #1
100032c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100032cc:	f7fe f8f8 	bl	100014c0 <HAL_GetTick>
100032d0:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100032d2:	e008      	b.n	100032e6 <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100032d4:	f7fe f8f4 	bl	100014c0 <HAL_GetTick>
100032d8:	4602      	mov	r2, r0
100032da:	68fb      	ldr	r3, [r7, #12]
100032dc:	1ad3      	subs	r3, r2, r3
100032de:	2b64      	cmp	r3, #100	; 0x64
100032e0:	d901      	bls.n	100032e6 <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
100032e2:	2303      	movs	r3, #3
100032e4:	e12b      	b.n	1000353e <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100032e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100032ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100032ee:	f003 0302 	and.w	r3, r3, #2
100032f2:	2b02      	cmp	r3, #2
100032f4:	d0ee      	beq.n	100032d4 <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
100032f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100032fa:	6a1b      	ldr	r3, [r3, #32]
100032fc:	f003 0303 	and.w	r3, r3, #3
10003300:	2b02      	cmp	r3, #2
10003302:	d107      	bne.n	10003314 <RCCEx_PLL2_Config+0xcc>
10003304:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003308:	6a1b      	ldr	r3, [r3, #32]
1000330a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000330e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003312:	d00e      	beq.n	10003332 <RCCEx_PLL2_Config+0xea>
10003314:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003318:	6a1b      	ldr	r3, [r3, #32]
1000331a:	f003 0303 	and.w	r3, r3, #3
1000331e:	2b03      	cmp	r3, #3
10003320:	d112      	bne.n	10003348 <RCCEx_PLL2_Config+0x100>
10003322:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003326:	6a1b      	ldr	r3, [r3, #32]
10003328:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000332c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003330:	d10a      	bne.n	10003348 <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10003332:	687b      	ldr	r3, [r7, #4]
10003334:	685a      	ldr	r2, [r3, #4]
10003336:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000333c:	f003 0303 	and.w	r3, r3, #3
10003340:	429a      	cmp	r2, r3
10003342:	d00c      	beq.n	1000335e <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
10003344:	2301      	movs	r3, #1
10003346:	e0fa      	b.n	1000353e <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
10003348:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000334e:	f023 0203 	bic.w	r2, r3, #3
10003352:	687b      	ldr	r3, [r7, #4]
10003354:	685b      	ldr	r3, [r3, #4]
10003356:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000335a:	4313      	orrs	r3, r2
1000335c:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
1000335e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003362:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
10003366:	4b78      	ldr	r3, [pc, #480]	; (10003548 <RCCEx_PLL2_Config+0x300>)
10003368:	4013      	ands	r3, r2
1000336a:	687a      	ldr	r2, [r7, #4]
1000336c:	68d2      	ldr	r2, [r2, #12]
1000336e:	1e51      	subs	r1, r2, #1
10003370:	687a      	ldr	r2, [r7, #4]
10003372:	6892      	ldr	r2, [r2, #8]
10003374:	3a01      	subs	r2, #1
10003376:	0412      	lsls	r2, r2, #16
10003378:	430a      	orrs	r2, r1
1000337a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000337e:	4313      	orrs	r3, r2
10003380:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
10003384:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003388:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
1000338c:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10003390:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10003394:	687a      	ldr	r2, [r7, #4]
10003396:	6912      	ldr	r2, [r2, #16]
10003398:	1e51      	subs	r1, r2, #1
1000339a:	687a      	ldr	r2, [r7, #4]
1000339c:	6952      	ldr	r2, [r2, #20]
1000339e:	3a01      	subs	r2, #1
100033a0:	0212      	lsls	r2, r2, #8
100033a2:	4311      	orrs	r1, r2
100033a4:	687a      	ldr	r2, [r7, #4]
100033a6:	6992      	ldr	r2, [r2, #24]
100033a8:	3a01      	subs	r2, #1
100033aa:	0412      	lsls	r2, r2, #16
100033ac:	430a      	orrs	r2, r1
100033ae:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100033b2:	4313      	orrs	r3, r2
100033b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
100033b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100033bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
100033c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100033c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100033c8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
100033cc:	687b      	ldr	r3, [r7, #4]
100033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100033d0:	2b02      	cmp	r3, #2
100033d2:	d003      	beq.n	100033dc <RCCEx_PLL2_Config+0x194>
100033d4:	687b      	ldr	r3, [r7, #4]
100033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100033d8:	2b00      	cmp	r3, #0
100033da:	d10c      	bne.n	100033f6 <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
100033dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100033e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
100033e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100033e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100033ec:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100033f0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
100033f4:	e00f      	b.n	10003416 <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
100033f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100033fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
100033fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10003402:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10003406:	687a      	ldr	r2, [r7, #4]
10003408:	6a12      	ldr	r2, [r2, #32]
1000340a:	00d2      	lsls	r2, r2, #3
1000340c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003410:	4313      	orrs	r3, r2
10003412:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
10003416:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000341a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
1000341e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10003426:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
1000342a:	687b      	ldr	r3, [r7, #4]
1000342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000342e:	2b02      	cmp	r3, #2
10003430:	d124      	bne.n	1000347c <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
10003432:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003436:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
1000343a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
1000343e:	687b      	ldr	r3, [r7, #4]
10003440:	6a99      	ldr	r1, [r3, #40]	; 0x28
10003442:	687b      	ldr	r3, [r7, #4]
10003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10003446:	4319      	orrs	r1, r3
10003448:	687b      	ldr	r3, [r7, #4]
1000344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000344c:	4319      	orrs	r1, r3
1000344e:	687b      	ldr	r3, [r7, #4]
10003450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10003452:	4319      	orrs	r1, r3
10003454:	687b      	ldr	r3, [r7, #4]
10003456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10003458:	041b      	lsls	r3, r3, #16
1000345a:	430b      	orrs	r3, r1
1000345c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003460:	4313      	orrs	r3, r2
10003462:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
10003466:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000346a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000346e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003472:	f043 0304 	orr.w	r3, r3, #4
10003476:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
1000347a:	e009      	b.n	10003490 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
1000347c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003484:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003488:	f023 0304 	bic.w	r3, r3, #4
1000348c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
10003490:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003494:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003498:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000349c:	f043 0301 	orr.w	r3, r3, #1
100034a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100034a4:	f7fe f80c 	bl	100014c0 <HAL_GetTick>
100034a8:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
100034aa:	e008      	b.n	100034be <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100034ac:	f7fe f808 	bl	100014c0 <HAL_GetTick>
100034b0:	4602      	mov	r2, r0
100034b2:	68fb      	ldr	r3, [r7, #12]
100034b4:	1ad3      	subs	r3, r2, r3
100034b6:	2b64      	cmp	r3, #100	; 0x64
100034b8:	d901      	bls.n	100034be <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
100034ba:	2303      	movs	r3, #3
100034bc:	e03f      	b.n	1000353e <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
100034be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100034c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100034c6:	f003 0302 	and.w	r3, r3, #2
100034ca:	2b02      	cmp	r3, #2
100034cc:	d1ee      	bne.n	100034ac <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100034ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100034d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100034d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100034da:	f043 0370 	orr.w	r3, r3, #112	; 0x70
100034de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
100034e2:	e02b      	b.n	1000353c <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100034e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100034e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100034ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100034f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100034f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
100034f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100034fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003500:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003504:	f023 0301 	bic.w	r3, r3, #1
10003508:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000350c:	f7fd ffd8 	bl	100014c0 <HAL_GetTick>
10003510:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10003512:	e008      	b.n	10003526 <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003514:	f7fd ffd4 	bl	100014c0 <HAL_GetTick>
10003518:	4602      	mov	r2, r0
1000351a:	68fb      	ldr	r3, [r7, #12]
1000351c:	1ad3      	subs	r3, r2, r3
1000351e:	2b64      	cmp	r3, #100	; 0x64
10003520:	d901      	bls.n	10003526 <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
10003522:	2303      	movs	r3, #3
10003524:	e00b      	b.n	1000353e <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10003526:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000352a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000352e:	f003 0302 	and.w	r3, r3, #2
10003532:	2b02      	cmp	r3, #2
10003534:	d0ee      	beq.n	10003514 <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
10003536:	e001      	b.n	1000353c <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10003538:	2301      	movs	r3, #1
1000353a:	e000      	b.n	1000353e <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
1000353c:	2300      	movs	r3, #0

}
1000353e:	4618      	mov	r0, r3
10003540:	3710      	adds	r7, #16
10003542:	46bd      	mov	sp, r7
10003544:	bd80      	pop	{r7, pc}
10003546:	bf00      	nop
10003548:	ffc0fe00 	.word	0xffc0fe00

1000354c <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
1000354c:	b580      	push	{r7, lr}
1000354e:	b084      	sub	sp, #16
10003550:	af00      	add	r7, sp, #0
10003552:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
10003554:	687b      	ldr	r3, [r7, #4]
10003556:	681b      	ldr	r3, [r3, #0]
10003558:	2b00      	cmp	r3, #0
1000355a:	f000 815a 	beq.w	10003812 <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
1000355e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003564:	f003 0303 	and.w	r3, r3, #3
10003568:	2b03      	cmp	r3, #3
1000356a:	d108      	bne.n	1000357e <RCCEx_PLL3_Config+0x32>
1000356c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003572:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003576:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000357a:	f000 8148 	beq.w	1000380e <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
1000357e:	687b      	ldr	r3, [r7, #4]
10003580:	681b      	ldr	r3, [r3, #0]
10003582:	2b02      	cmp	r3, #2
10003584:	f040 8119 	bne.w	100037ba <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10003588:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000358c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003590:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10003598:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
1000359c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100035a0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100035a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100035a8:	f023 0301 	bic.w	r3, r3, #1
100035ac:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100035b0:	f7fd ff86 	bl	100014c0 <HAL_GetTick>
100035b4:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100035b6:	e008      	b.n	100035ca <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100035b8:	f7fd ff82 	bl	100014c0 <HAL_GetTick>
100035bc:	4602      	mov	r2, r0
100035be:	68fb      	ldr	r3, [r7, #12]
100035c0:	1ad3      	subs	r3, r2, r3
100035c2:	2b64      	cmp	r3, #100	; 0x64
100035c4:	d901      	bls.n	100035ca <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
100035c6:	2303      	movs	r3, #3
100035c8:	e124      	b.n	10003814 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100035ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100035ce:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100035d2:	f003 0302 	and.w	r3, r3, #2
100035d6:	2b02      	cmp	r3, #2
100035d8:	d0ee      	beq.n	100035b8 <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
100035da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100035de:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
100035e2:	f023 0203 	bic.w	r2, r3, #3
100035e6:	687b      	ldr	r3, [r7, #4]
100035e8:	685b      	ldr	r3, [r3, #4]
100035ea:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100035ee:	4313      	orrs	r3, r2
100035f0:	f8c1 3820 	str.w	r3, [r1, #2080]	; 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
100035f4:	e008      	b.n	10003608 <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100035f6:	f7fd ff63 	bl	100014c0 <HAL_GetTick>
100035fa:	4602      	mov	r2, r0
100035fc:	68fb      	ldr	r3, [r7, #12]
100035fe:	1ad3      	subs	r3, r2, r3
10003600:	2b64      	cmp	r3, #100	; 0x64
10003602:	d901      	bls.n	10003608 <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
10003604:	2303      	movs	r3, #3
10003606:	e105      	b.n	10003814 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10003608:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000360c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10003610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003618:	d1ed      	bne.n	100035f6 <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
1000361a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000361e:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10003622:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
10003626:	687b      	ldr	r3, [r7, #4]
10003628:	69db      	ldr	r3, [r3, #28]
1000362a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000362e:	4313      	orrs	r3, r2
10003630:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
10003634:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003638:	f8d3 2884 	ldr.w	r2, [r3, #2180]	; 0x884
1000363c:	4b77      	ldr	r3, [pc, #476]	; (1000381c <RCCEx_PLL3_Config+0x2d0>)
1000363e:	4013      	ands	r3, r2
10003640:	687a      	ldr	r2, [r7, #4]
10003642:	68d2      	ldr	r2, [r2, #12]
10003644:	1e51      	subs	r1, r2, #1
10003646:	687a      	ldr	r2, [r7, #4]
10003648:	6892      	ldr	r2, [r2, #8]
1000364a:	3a01      	subs	r2, #1
1000364c:	0412      	lsls	r2, r2, #16
1000364e:	430a      	orrs	r2, r1
10003650:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003654:	4313      	orrs	r3, r2
10003656:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884
1000365a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000365e:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10003662:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10003666:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
1000366a:	687a      	ldr	r2, [r7, #4]
1000366c:	6912      	ldr	r2, [r2, #16]
1000366e:	1e51      	subs	r1, r2, #1
10003670:	687a      	ldr	r2, [r7, #4]
10003672:	6952      	ldr	r2, [r2, #20]
10003674:	3a01      	subs	r2, #1
10003676:	0212      	lsls	r2, r2, #8
10003678:	4311      	orrs	r1, r2
1000367a:	687a      	ldr	r2, [r7, #4]
1000367c:	6992      	ldr	r2, [r2, #24]
1000367e:	3a01      	subs	r2, #1
10003680:	0412      	lsls	r2, r2, #16
10003682:	430a      	orrs	r2, r1
10003684:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003688:	4313      	orrs	r3, r2
1000368a:	f8c1 3888 	str.w	r3, [r1, #2184]	; 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
1000368e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003692:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10003696:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000369a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1000369e:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
100036a2:	687b      	ldr	r3, [r7, #4]
100036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100036a6:	2b02      	cmp	r3, #2
100036a8:	d003      	beq.n	100036b2 <RCCEx_PLL3_Config+0x166>
100036aa:	687b      	ldr	r3, [r7, #4]
100036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100036ae:	2b00      	cmp	r3, #0
100036b0:	d10c      	bne.n	100036cc <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
100036b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100036b6:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100036ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100036be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100036c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100036c6:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
100036ca:	e00f      	b.n	100036ec <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
100036cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100036d0:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100036d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100036d8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100036dc:	687a      	ldr	r2, [r7, #4]
100036de:	6a12      	ldr	r2, [r2, #32]
100036e0:	00d2      	lsls	r2, r2, #3
100036e2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100036e6:	4313      	orrs	r3, r2
100036e8:	f8c1 388c 	str.w	r3, [r1, #2188]	; 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
100036ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100036f0:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100036f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100036f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
100036fc:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10003700:	687b      	ldr	r3, [r7, #4]
10003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003704:	2b02      	cmp	r3, #2
10003706:	d124      	bne.n	10003752 <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
10003708:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000370c:	f8d3 3890 	ldr.w	r3, [r3, #2192]	; 0x890
10003710:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10003714:	687b      	ldr	r3, [r7, #4]
10003716:	6a99      	ldr	r1, [r3, #40]	; 0x28
10003718:	687b      	ldr	r3, [r7, #4]
1000371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000371c:	4319      	orrs	r1, r3
1000371e:	687b      	ldr	r3, [r7, #4]
10003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10003722:	4319      	orrs	r1, r3
10003724:	687b      	ldr	r3, [r7, #4]
10003726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10003728:	4319      	orrs	r1, r3
1000372a:	687b      	ldr	r3, [r7, #4]
1000372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000372e:	041b      	lsls	r3, r3, #16
10003730:	430b      	orrs	r3, r1
10003732:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003736:	4313      	orrs	r3, r2
10003738:	f8c1 3890 	str.w	r3, [r1, #2192]	; 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
1000373c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003740:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003744:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003748:	f043 0304 	orr.w	r3, r3, #4
1000374c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
10003750:	e009      	b.n	10003766 <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
10003752:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003756:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000375a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000375e:	f023 0304 	bic.w	r3, r3, #4
10003762:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
10003766:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000376a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000376e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003772:	f043 0301 	orr.w	r3, r3, #1
10003776:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000377a:	f7fd fea1 	bl	100014c0 <HAL_GetTick>
1000377e:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10003780:	e008      	b.n	10003794 <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003782:	f7fd fe9d 	bl	100014c0 <HAL_GetTick>
10003786:	4602      	mov	r2, r0
10003788:	68fb      	ldr	r3, [r7, #12]
1000378a:	1ad3      	subs	r3, r2, r3
1000378c:	2b64      	cmp	r3, #100	; 0x64
1000378e:	d901      	bls.n	10003794 <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
10003790:	2303      	movs	r3, #3
10003792:	e03f      	b.n	10003814 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10003794:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003798:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000379c:	f003 0302 	and.w	r3, r3, #2
100037a0:	2b02      	cmp	r3, #2
100037a2:	d1ee      	bne.n	10003782 <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100037a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100037a8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100037ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100037b0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
100037b4:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
100037b8:	e02b      	b.n	10003812 <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100037ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100037be:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100037c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100037c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100037ca:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
100037ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100037d2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100037d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100037da:	f023 0301 	bic.w	r3, r3, #1
100037de:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100037e2:	f7fd fe6d 	bl	100014c0 <HAL_GetTick>
100037e6:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100037e8:	e008      	b.n	100037fc <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100037ea:	f7fd fe69 	bl	100014c0 <HAL_GetTick>
100037ee:	4602      	mov	r2, r0
100037f0:	68fb      	ldr	r3, [r7, #12]
100037f2:	1ad3      	subs	r3, r2, r3
100037f4:	2b64      	cmp	r3, #100	; 0x64
100037f6:	d901      	bls.n	100037fc <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
100037f8:	2303      	movs	r3, #3
100037fa:	e00b      	b.n	10003814 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100037fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003800:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003804:	f003 0302 	and.w	r3, r3, #2
10003808:	2b02      	cmp	r3, #2
1000380a:	d0ee      	beq.n	100037ea <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
1000380c:	e001      	b.n	10003812 <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
1000380e:	2301      	movs	r3, #1
10003810:	e000      	b.n	10003814 <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
10003812:	2300      	movs	r3, #0
}
10003814:	4618      	mov	r0, r3
10003816:	3710      	adds	r7, #16
10003818:	46bd      	mov	sp, r7
1000381a:	bd80      	pop	{r7, pc}
1000381c:	ffc0fe00 	.word	0xffc0fe00

10003820 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
10003820:	b580      	push	{r7, lr}
10003822:	b084      	sub	sp, #16
10003824:	af00      	add	r7, sp, #0
10003826:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
10003828:	687b      	ldr	r3, [r7, #4]
1000382a:	681b      	ldr	r3, [r3, #0]
1000382c:	2b00      	cmp	r3, #0
1000382e:	f000 8147 	beq.w	10003ac0 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
10003832:	687b      	ldr	r3, [r7, #4]
10003834:	681b      	ldr	r3, [r3, #0]
10003836:	2b02      	cmp	r3, #2
10003838:	f040 8119 	bne.w	10003a6e <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
1000383c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003840:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003844:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
1000384c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
10003850:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003854:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003858:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000385c:	f023 0301 	bic.w	r3, r3, #1
10003860:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10003864:	f7fd fe2c 	bl	100014c0 <HAL_GetTick>
10003868:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
1000386a:	e008      	b.n	1000387e <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000386c:	f7fd fe28 	bl	100014c0 <HAL_GetTick>
10003870:	4602      	mov	r2, r0
10003872:	68fb      	ldr	r3, [r7, #12]
10003874:	1ad3      	subs	r3, r2, r3
10003876:	2b64      	cmp	r3, #100	; 0x64
10003878:	d901      	bls.n	1000387e <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
1000387a:	2303      	movs	r3, #3
1000387c:	e121      	b.n	10003ac2 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
1000387e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003882:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003886:	f003 0302 	and.w	r3, r3, #2
1000388a:	2b02      	cmp	r3, #2
1000388c:	d0ee      	beq.n	1000386c <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
1000388e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003892:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10003896:	f023 0203 	bic.w	r2, r3, #3
1000389a:	687b      	ldr	r3, [r7, #4]
1000389c:	685b      	ldr	r3, [r3, #4]
1000389e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100038a2:	4313      	orrs	r3, r2
100038a4:	f8c1 3824 	str.w	r3, [r1, #2084]	; 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
100038a8:	e008      	b.n	100038bc <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100038aa:	f7fd fe09 	bl	100014c0 <HAL_GetTick>
100038ae:	4602      	mov	r2, r0
100038b0:	68fb      	ldr	r3, [r7, #12]
100038b2:	1ad3      	subs	r3, r2, r3
100038b4:	2b64      	cmp	r3, #100	; 0x64
100038b6:	d901      	bls.n	100038bc <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
100038b8:	2303      	movs	r3, #3
100038ba:	e102      	b.n	10003ac2 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
100038bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100038c0:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
100038c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100038c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100038cc:	d1ed      	bne.n	100038aa <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
100038ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100038d2:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
100038d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
100038da:	687b      	ldr	r3, [r7, #4]
100038dc:	69db      	ldr	r3, [r3, #28]
100038de:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100038e2:	4313      	orrs	r3, r2
100038e4:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
100038e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100038ec:	f8d3 2898 	ldr.w	r2, [r3, #2200]	; 0x898
100038f0:	4b76      	ldr	r3, [pc, #472]	; (10003acc <RCCEx_PLL4_Config+0x2ac>)
100038f2:	4013      	ands	r3, r2
100038f4:	687a      	ldr	r2, [r7, #4]
100038f6:	68d2      	ldr	r2, [r2, #12]
100038f8:	1e51      	subs	r1, r2, #1
100038fa:	687a      	ldr	r2, [r7, #4]
100038fc:	6892      	ldr	r2, [r2, #8]
100038fe:	3a01      	subs	r2, #1
10003900:	0412      	lsls	r2, r2, #16
10003902:	430a      	orrs	r2, r1
10003904:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003908:	4313      	orrs	r3, r2
1000390a:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898
1000390e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003912:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10003916:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
1000391a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
1000391e:	687a      	ldr	r2, [r7, #4]
10003920:	6912      	ldr	r2, [r2, #16]
10003922:	1e51      	subs	r1, r2, #1
10003924:	687a      	ldr	r2, [r7, #4]
10003926:	6952      	ldr	r2, [r2, #20]
10003928:	3a01      	subs	r2, #1
1000392a:	0212      	lsls	r2, r2, #8
1000392c:	4311      	orrs	r1, r2
1000392e:	687a      	ldr	r2, [r7, #4]
10003930:	6992      	ldr	r2, [r2, #24]
10003932:	3a01      	subs	r2, #1
10003934:	0412      	lsls	r2, r2, #16
10003936:	430a      	orrs	r2, r1
10003938:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000393c:	4313      	orrs	r3, r2
1000393e:	f8c1 389c 	str.w	r3, [r1, #2204]	; 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
10003942:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003946:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
1000394a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000394e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10003952:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
10003956:	687b      	ldr	r3, [r7, #4]
10003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000395a:	2b02      	cmp	r3, #2
1000395c:	d003      	beq.n	10003966 <RCCEx_PLL4_Config+0x146>
1000395e:	687b      	ldr	r3, [r7, #4]
10003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003962:	2b00      	cmp	r3, #0
10003964:	d10c      	bne.n	10003980 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
10003966:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000396a:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
1000396e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10003976:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000397a:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
1000397e:	e00f      	b.n	100039a0 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10003980:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003984:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10003988:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000398c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10003990:	687a      	ldr	r2, [r7, #4]
10003992:	6a12      	ldr	r2, [r2, #32]
10003994:	00d2      	lsls	r2, r2, #3
10003996:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000399a:	4313      	orrs	r3, r2
1000399c:	f8c1 38a0 	str.w	r3, [r1, #2208]	; 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
100039a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039a4:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100039a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100039ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
100039b0:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100039b4:	687b      	ldr	r3, [r7, #4]
100039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100039b8:	2b02      	cmp	r3, #2
100039ba:	d124      	bne.n	10003a06 <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
100039bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039c0:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	; 0x8a4
100039c4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
100039c8:	687b      	ldr	r3, [r7, #4]
100039ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
100039cc:	687b      	ldr	r3, [r7, #4]
100039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100039d0:	4319      	orrs	r1, r3
100039d2:	687b      	ldr	r3, [r7, #4]
100039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100039d6:	4319      	orrs	r1, r3
100039d8:	687b      	ldr	r3, [r7, #4]
100039da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100039dc:	4319      	orrs	r1, r3
100039de:	687b      	ldr	r3, [r7, #4]
100039e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100039e2:	041b      	lsls	r3, r3, #16
100039e4:	430b      	orrs	r3, r1
100039e6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100039ea:	4313      	orrs	r3, r2
100039ec:	f8c1 38a4 	str.w	r3, [r1, #2212]	; 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
100039f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039f4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100039f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100039fc:	f043 0304 	orr.w	r3, r3, #4
10003a00:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10003a04:	e009      	b.n	10003a1a <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
10003a06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a0a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003a0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003a12:	f023 0304 	bic.w	r3, r3, #4
10003a16:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
10003a1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a1e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003a22:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003a26:	f043 0301 	orr.w	r3, r3, #1
10003a2a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10003a2e:	f7fd fd47 	bl	100014c0 <HAL_GetTick>
10003a32:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10003a34:	e008      	b.n	10003a48 <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003a36:	f7fd fd43 	bl	100014c0 <HAL_GetTick>
10003a3a:	4602      	mov	r2, r0
10003a3c:	68fb      	ldr	r3, [r7, #12]
10003a3e:	1ad3      	subs	r3, r2, r3
10003a40:	2b64      	cmp	r3, #100	; 0x64
10003a42:	d901      	bls.n	10003a48 <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
10003a44:	2303      	movs	r3, #3
10003a46:	e03c      	b.n	10003ac2 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10003a48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a4c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003a50:	f003 0302 	and.w	r3, r3, #2
10003a54:	2b02      	cmp	r3, #2
10003a56:	d1ee      	bne.n	10003a36 <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10003a58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a5c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003a60:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003a64:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10003a68:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10003a6c:	e028      	b.n	10003ac0 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10003a6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a72:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003a76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10003a7e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
10003a82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a86:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003a8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003a8e:	f023 0301 	bic.w	r3, r3, #1
10003a92:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10003a96:	f7fd fd13 	bl	100014c0 <HAL_GetTick>
10003a9a:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10003a9c:	e008      	b.n	10003ab0 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003a9e:	f7fd fd0f 	bl	100014c0 <HAL_GetTick>
10003aa2:	4602      	mov	r2, r0
10003aa4:	68fb      	ldr	r3, [r7, #12]
10003aa6:	1ad3      	subs	r3, r2, r3
10003aa8:	2b64      	cmp	r3, #100	; 0x64
10003aaa:	d901      	bls.n	10003ab0 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
10003aac:	2303      	movs	r3, #3
10003aae:	e008      	b.n	10003ac2 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10003ab0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ab4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003ab8:	f003 0302 	and.w	r3, r3, #2
10003abc:	2b02      	cmp	r3, #2
10003abe:	d0ee      	beq.n	10003a9e <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
10003ac0:	2300      	movs	r3, #0
}
10003ac2:	4618      	mov	r0, r3
10003ac4:	3710      	adds	r7, #16
10003ac6:	46bd      	mov	sp, r7
10003ac8:	bd80      	pop	{r7, pc}
10003aca:	bf00      	nop
10003acc:	ffc0fe00 	.word	0xffc0fe00

10003ad0 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
10003ad0:	b480      	push	{r7}
10003ad2:	b083      	sub	sp, #12
10003ad4:	af00      	add	r7, sp, #0
10003ad6:	6078      	str	r0, [r7, #4]
	list->prev = list;
10003ad8:	687b      	ldr	r3, [r7, #4]
10003ada:	687a      	ldr	r2, [r7, #4]
10003adc:	605a      	str	r2, [r3, #4]
	list->next = list;
10003ade:	687b      	ldr	r3, [r7, #4]
10003ae0:	687a      	ldr	r2, [r7, #4]
10003ae2:	601a      	str	r2, [r3, #0]
}
10003ae4:	bf00      	nop
10003ae6:	370c      	adds	r7, #12
10003ae8:	46bd      	mov	sp, r7
10003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
10003aee:	4770      	bx	lr

10003af0 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
10003af0:	b480      	push	{r7}
10003af2:	b083      	sub	sp, #12
10003af4:	af00      	add	r7, sp, #0
10003af6:	6078      	str	r0, [r7, #4]
10003af8:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
10003afa:	687b      	ldr	r3, [r7, #4]
10003afc:	685a      	ldr	r2, [r3, #4]
10003afe:	683b      	ldr	r3, [r7, #0]
10003b00:	605a      	str	r2, [r3, #4]
	new_node->next = node;
10003b02:	683b      	ldr	r3, [r7, #0]
10003b04:	687a      	ldr	r2, [r7, #4]
10003b06:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
10003b08:	683b      	ldr	r3, [r7, #0]
10003b0a:	681b      	ldr	r3, [r3, #0]
10003b0c:	683a      	ldr	r2, [r7, #0]
10003b0e:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
10003b10:	683b      	ldr	r3, [r7, #0]
10003b12:	685b      	ldr	r3, [r3, #4]
10003b14:	683a      	ldr	r2, [r7, #0]
10003b16:	601a      	str	r2, [r3, #0]
}
10003b18:	bf00      	nop
10003b1a:	370c      	adds	r7, #12
10003b1c:	46bd      	mov	sp, r7
10003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
10003b22:	4770      	bx	lr

10003b24 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
10003b24:	b580      	push	{r7, lr}
10003b26:	b082      	sub	sp, #8
10003b28:	af00      	add	r7, sp, #0
10003b2a:	6078      	str	r0, [r7, #4]
10003b2c:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
10003b2e:	6839      	ldr	r1, [r7, #0]
10003b30:	6878      	ldr	r0, [r7, #4]
10003b32:	f7ff ffdd 	bl	10003af0 <metal_list_add_before>
}
10003b36:	bf00      	nop
10003b38:	3708      	adds	r7, #8
10003b3a:	46bd      	mov	sp, r7
10003b3c:	bd80      	pop	{r7, pc}

10003b3e <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
10003b3e:	b580      	push	{r7, lr}
10003b40:	b082      	sub	sp, #8
10003b42:	af00      	add	r7, sp, #0
10003b44:	6078      	str	r0, [r7, #4]
10003b46:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
10003b48:	6839      	ldr	r1, [r7, #0]
10003b4a:	6878      	ldr	r0, [r7, #4]
10003b4c:	f000 fbc2 	bl	100042d4 <metal_machine_cache_flush>
}
10003b50:	bf00      	nop
10003b52:	3708      	adds	r7, #8
10003b54:	46bd      	mov	sp, r7
10003b56:	bd80      	pop	{r7, pc}

10003b58 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
10003b58:	b580      	push	{r7, lr}
10003b5a:	b082      	sub	sp, #8
10003b5c:	af00      	add	r7, sp, #0
10003b5e:	6078      	str	r0, [r7, #4]
10003b60:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
10003b62:	6839      	ldr	r1, [r7, #0]
10003b64:	6878      	ldr	r0, [r7, #4]
10003b66:	f000 fbc0 	bl	100042ea <metal_machine_cache_invalidate>
}
10003b6a:	bf00      	nop
10003b6c:	3708      	adds	r7, #8
10003b6e:	46bd      	mov	sp, r7
10003b70:	bd80      	pop	{r7, pc}

10003b72 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
10003b72:	b580      	push	{r7, lr}
10003b74:	b082      	sub	sp, #8
10003b76:	af00      	add	r7, sp, #0
10003b78:	6078      	str	r0, [r7, #4]
10003b7a:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
10003b7c:	6839      	ldr	r1, [r7, #0]
10003b7e:	6878      	ldr	r0, [r7, #4]
10003b80:	f7ff ffdd 	bl	10003b3e <__metal_cache_flush>
}
10003b84:	bf00      	nop
10003b86:	3708      	adds	r7, #8
10003b88:	46bd      	mov	sp, r7
10003b8a:	bd80      	pop	{r7, pc}

10003b8c <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
10003b8c:	b580      	push	{r7, lr}
10003b8e:	b082      	sub	sp, #8
10003b90:	af00      	add	r7, sp, #0
10003b92:	6078      	str	r0, [r7, #4]
10003b94:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
10003b96:	6839      	ldr	r1, [r7, #0]
10003b98:	6878      	ldr	r0, [r7, #4]
10003b9a:	f7ff ffdd 	bl	10003b58 <__metal_cache_invalidate>
}
10003b9e:	bf00      	nop
10003ba0:	3708      	adds	r7, #8
10003ba2:	46bd      	mov	sp, r7
10003ba4:	bd80      	pop	{r7, pc}
	...

10003ba8 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
10003ba8:	b580      	push	{r7, lr}
10003baa:	b082      	sub	sp, #8
10003bac:	af00      	add	r7, sp, #0
10003bae:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
10003bb0:	687b      	ldr	r3, [r7, #4]
10003bb2:	2b00      	cmp	r3, #0
10003bb4:	d008      	beq.n	10003bc8 <metal_bus_register+0x20>
10003bb6:	687b      	ldr	r3, [r7, #4]
10003bb8:	681b      	ldr	r3, [r3, #0]
10003bba:	2b00      	cmp	r3, #0
10003bbc:	d004      	beq.n	10003bc8 <metal_bus_register+0x20>
10003bbe:	687b      	ldr	r3, [r7, #4]
10003bc0:	681b      	ldr	r3, [r3, #0]
10003bc2:	781b      	ldrb	r3, [r3, #0]
10003bc4:	2b00      	cmp	r3, #0
10003bc6:	d102      	bne.n	10003bce <metal_bus_register+0x26>
		return -EINVAL;
10003bc8:	f06f 0315 	mvn.w	r3, #21
10003bcc:	e026      	b.n	10003c1c <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
10003bce:	687b      	ldr	r3, [r7, #4]
10003bd0:	681b      	ldr	r3, [r3, #0]
10003bd2:	2100      	movs	r1, #0
10003bd4:	4618      	mov	r0, r3
10003bd6:	f000 f82b 	bl	10003c30 <metal_bus_find>
10003bda:	4603      	mov	r3, r0
10003bdc:	2b00      	cmp	r3, #0
10003bde:	d102      	bne.n	10003be6 <metal_bus_register+0x3e>
		return -EEXIST;
10003be0:	f06f 0310 	mvn.w	r3, #16
10003be4:	e01a      	b.n	10003c1c <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
10003be6:	687b      	ldr	r3, [r7, #4]
10003be8:	331c      	adds	r3, #28
10003bea:	4618      	mov	r0, r3
10003bec:	f7ff ff70 	bl	10003ad0 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
10003bf0:	687b      	ldr	r3, [r7, #4]
10003bf2:	3324      	adds	r3, #36	; 0x24
10003bf4:	4619      	mov	r1, r3
10003bf6:	480b      	ldr	r0, [pc, #44]	; (10003c24 <metal_bus_register+0x7c>)
10003bf8:	f7ff ff94 	bl	10003b24 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
10003bfc:	4b0a      	ldr	r3, [pc, #40]	; (10003c28 <metal_bus_register+0x80>)
10003bfe:	781b      	ldrb	r3, [r3, #0]
10003c00:	2b06      	cmp	r3, #6
10003c02:	d90a      	bls.n	10003c1a <metal_bus_register+0x72>
10003c04:	4b08      	ldr	r3, [pc, #32]	; (10003c28 <metal_bus_register+0x80>)
10003c06:	685b      	ldr	r3, [r3, #4]
10003c08:	2b00      	cmp	r3, #0
10003c0a:	d006      	beq.n	10003c1a <metal_bus_register+0x72>
10003c0c:	4b06      	ldr	r3, [pc, #24]	; (10003c28 <metal_bus_register+0x80>)
10003c0e:	685b      	ldr	r3, [r3, #4]
10003c10:	687a      	ldr	r2, [r7, #4]
10003c12:	6812      	ldr	r2, [r2, #0]
10003c14:	4905      	ldr	r1, [pc, #20]	; (10003c2c <metal_bus_register+0x84>)
10003c16:	2007      	movs	r0, #7
10003c18:	4798      	blx	r3
	return 0;
10003c1a:	2300      	movs	r3, #0
}
10003c1c:	4618      	mov	r0, r3
10003c1e:	3708      	adds	r7, #8
10003c20:	46bd      	mov	sp, r7
10003c22:	bd80      	pop	{r7, pc}
10003c24:	10020d2c 	.word	0x10020d2c
10003c28:	10020d24 	.word	0x10020d24
10003c2c:	1000737c 	.word	0x1000737c

10003c30 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
10003c30:	b580      	push	{r7, lr}
10003c32:	b084      	sub	sp, #16
10003c34:	af00      	add	r7, sp, #0
10003c36:	6078      	str	r0, [r7, #4]
10003c38:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
10003c3a:	4b12      	ldr	r3, [pc, #72]	; (10003c84 <metal_bus_find+0x54>)
10003c3c:	689b      	ldr	r3, [r3, #8]
10003c3e:	60fb      	str	r3, [r7, #12]
10003c40:	e016      	b.n	10003c70 <metal_bus_find+0x40>
		bus = metal_container_of(node, struct metal_bus, node);
10003c42:	68fb      	ldr	r3, [r7, #12]
10003c44:	3b24      	subs	r3, #36	; 0x24
10003c46:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) == 0 && result) {
10003c48:	68bb      	ldr	r3, [r7, #8]
10003c4a:	681b      	ldr	r3, [r3, #0]
10003c4c:	6879      	ldr	r1, [r7, #4]
10003c4e:	4618      	mov	r0, r3
10003c50:	f7fc f9f6 	bl	10000040 <strcmp>
10003c54:	4603      	mov	r3, r0
10003c56:	2b00      	cmp	r3, #0
10003c58:	d107      	bne.n	10003c6a <metal_bus_find+0x3a>
10003c5a:	683b      	ldr	r3, [r7, #0]
10003c5c:	2b00      	cmp	r3, #0
10003c5e:	d004      	beq.n	10003c6a <metal_bus_find+0x3a>
			*result = bus;
10003c60:	683b      	ldr	r3, [r7, #0]
10003c62:	68ba      	ldr	r2, [r7, #8]
10003c64:	601a      	str	r2, [r3, #0]
			return 0;
10003c66:	2300      	movs	r3, #0
10003c68:	e008      	b.n	10003c7c <metal_bus_find+0x4c>
	metal_list_for_each(&_metal.common.bus_list, node) {
10003c6a:	68fb      	ldr	r3, [r7, #12]
10003c6c:	681b      	ldr	r3, [r3, #0]
10003c6e:	60fb      	str	r3, [r7, #12]
10003c70:	68fb      	ldr	r3, [r7, #12]
10003c72:	4a05      	ldr	r2, [pc, #20]	; (10003c88 <metal_bus_find+0x58>)
10003c74:	4293      	cmp	r3, r2
10003c76:	d1e4      	bne.n	10003c42 <metal_bus_find+0x12>
		}
	}
	return -ENOENT;
10003c78:	f06f 0301 	mvn.w	r3, #1
}
10003c7c:	4618      	mov	r0, r3
10003c7e:	3710      	adds	r7, #16
10003c80:	46bd      	mov	sp, r7
10003c82:	bd80      	pop	{r7, pc}
10003c84:	10020d24 	.word	0x10020d24
10003c88:	10020d2c 	.word	0x10020d2c

10003c8c <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
10003c8c:	b580      	push	{r7, lr}
10003c8e:	b086      	sub	sp, #24
10003c90:	af00      	add	r7, sp, #0
10003c92:	60f8      	str	r0, [r7, #12]
10003c94:	60b9      	str	r1, [r7, #8]
10003c96:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
10003c98:	68fb      	ldr	r3, [r7, #12]
10003c9a:	2b00      	cmp	r3, #0
10003c9c:	d00d      	beq.n	10003cba <metal_device_open+0x2e>
10003c9e:	68fb      	ldr	r3, [r7, #12]
10003ca0:	781b      	ldrb	r3, [r3, #0]
10003ca2:	2b00      	cmp	r3, #0
10003ca4:	d009      	beq.n	10003cba <metal_device_open+0x2e>
10003ca6:	68bb      	ldr	r3, [r7, #8]
10003ca8:	2b00      	cmp	r3, #0
10003caa:	d006      	beq.n	10003cba <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
10003cac:	68bb      	ldr	r3, [r7, #8]
10003cae:	781b      	ldrb	r3, [r3, #0]
10003cb0:	2b00      	cmp	r3, #0
10003cb2:	d002      	beq.n	10003cba <metal_device_open+0x2e>
10003cb4:	687b      	ldr	r3, [r7, #4]
10003cb6:	2b00      	cmp	r3, #0
10003cb8:	d102      	bne.n	10003cc0 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
10003cba:	f06f 0315 	mvn.w	r3, #21
10003cbe:	e01f      	b.n	10003d00 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
10003cc0:	f107 0310 	add.w	r3, r7, #16
10003cc4:	4619      	mov	r1, r3
10003cc6:	68f8      	ldr	r0, [r7, #12]
10003cc8:	f7ff ffb2 	bl	10003c30 <metal_bus_find>
10003ccc:	6178      	str	r0, [r7, #20]
	if (error)
10003cce:	697b      	ldr	r3, [r7, #20]
10003cd0:	2b00      	cmp	r3, #0
10003cd2:	d001      	beq.n	10003cd8 <metal_device_open+0x4c>
		return error;
10003cd4:	697b      	ldr	r3, [r7, #20]
10003cd6:	e013      	b.n	10003d00 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
10003cd8:	693b      	ldr	r3, [r7, #16]
10003cda:	689b      	ldr	r3, [r3, #8]
10003cdc:	2b00      	cmp	r3, #0
10003cde:	d102      	bne.n	10003ce6 <metal_device_open+0x5a>
		return -ENODEV;
10003ce0:	f06f 0312 	mvn.w	r3, #18
10003ce4:	e00c      	b.n	10003d00 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
10003ce6:	693b      	ldr	r3, [r7, #16]
10003ce8:	689b      	ldr	r3, [r3, #8]
10003cea:	6938      	ldr	r0, [r7, #16]
10003cec:	687a      	ldr	r2, [r7, #4]
10003cee:	68b9      	ldr	r1, [r7, #8]
10003cf0:	4798      	blx	r3
10003cf2:	6178      	str	r0, [r7, #20]
	if (error)
10003cf4:	697b      	ldr	r3, [r7, #20]
10003cf6:	2b00      	cmp	r3, #0
10003cf8:	d001      	beq.n	10003cfe <metal_device_open+0x72>
		return error;
10003cfa:	697b      	ldr	r3, [r7, #20]
10003cfc:	e000      	b.n	10003d00 <metal_device_open+0x74>

	return 0;
10003cfe:	2300      	movs	r3, #0
}
10003d00:	4618      	mov	r0, r3
10003d02:	3718      	adds	r7, #24
10003d04:	46bd      	mov	sp, r7
10003d06:	bd80      	pop	{r7, pc}

10003d08 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
10003d08:	b580      	push	{r7, lr}
10003d0a:	b082      	sub	sp, #8
10003d0c:	af00      	add	r7, sp, #0
10003d0e:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
10003d10:	687b      	ldr	r3, [r7, #4]
10003d12:	681b      	ldr	r3, [r3, #0]
10003d14:	2b00      	cmp	r3, #0
10003d16:	d008      	beq.n	10003d2a <metal_register_generic_device+0x22>
10003d18:	687b      	ldr	r3, [r7, #4]
10003d1a:	681b      	ldr	r3, [r3, #0]
10003d1c:	781b      	ldrb	r3, [r3, #0]
10003d1e:	2b00      	cmp	r3, #0
10003d20:	d003      	beq.n	10003d2a <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
10003d22:	687b      	ldr	r3, [r7, #4]
10003d24:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
10003d26:	2b02      	cmp	r3, #2
10003d28:	d902      	bls.n	10003d30 <metal_register_generic_device+0x28>
		return -EINVAL;
10003d2a:	f06f 0315 	mvn.w	r3, #21
10003d2e:	e009      	b.n	10003d44 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
10003d30:	687b      	ldr	r3, [r7, #4]
10003d32:	4a06      	ldr	r2, [pc, #24]	; (10003d4c <metal_register_generic_device+0x44>)
10003d34:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
10003d36:	687b      	ldr	r3, [r7, #4]
10003d38:	337c      	adds	r3, #124	; 0x7c
10003d3a:	4619      	mov	r1, r3
10003d3c:	4804      	ldr	r0, [pc, #16]	; (10003d50 <metal_register_generic_device+0x48>)
10003d3e:	f7ff fef1 	bl	10003b24 <metal_list_add_tail>
			    &device->node);
	return 0;
10003d42:	2300      	movs	r3, #0
}
10003d44:	4618      	mov	r0, r3
10003d46:	3708      	adds	r7, #8
10003d48:	46bd      	mov	sp, r7
10003d4a:	bd80      	pop	{r7, pc}
10003d4c:	100200a8 	.word	0x100200a8
10003d50:	10020d3c 	.word	0x10020d3c

10003d54 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
10003d54:	b580      	push	{r7, lr}
10003d56:	b086      	sub	sp, #24
10003d58:	af00      	add	r7, sp, #0
10003d5a:	60f8      	str	r0, [r7, #12]
10003d5c:	60b9      	str	r1, [r7, #8]
10003d5e:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
10003d60:	4b12      	ldr	r3, [pc, #72]	; (10003dac <metal_generic_dev_open+0x58>)
10003d62:	699b      	ldr	r3, [r3, #24]
10003d64:	617b      	str	r3, [r7, #20]
10003d66:	e016      	b.n	10003d96 <metal_generic_dev_open+0x42>
		dev = metal_container_of(node, struct metal_device, node);
10003d68:	697b      	ldr	r3, [r7, #20]
10003d6a:	3b7c      	subs	r3, #124	; 0x7c
10003d6c:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) == 0) {
10003d6e:	693b      	ldr	r3, [r7, #16]
10003d70:	681b      	ldr	r3, [r3, #0]
10003d72:	68b9      	ldr	r1, [r7, #8]
10003d74:	4618      	mov	r0, r3
10003d76:	f7fc f963 	bl	10000040 <strcmp>
10003d7a:	4603      	mov	r3, r0
10003d7c:	2b00      	cmp	r3, #0
10003d7e:	d107      	bne.n	10003d90 <metal_generic_dev_open+0x3c>
			*device = dev;
10003d80:	687b      	ldr	r3, [r7, #4]
10003d82:	693a      	ldr	r2, [r7, #16]
10003d84:	601a      	str	r2, [r3, #0]
			return metal_generic_dev_sys_open(dev);
10003d86:	6938      	ldr	r0, [r7, #16]
10003d88:	f000 fa31 	bl	100041ee <metal_generic_dev_sys_open>
10003d8c:	4603      	mov	r3, r0
10003d8e:	e008      	b.n	10003da2 <metal_generic_dev_open+0x4e>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
10003d90:	697b      	ldr	r3, [r7, #20]
10003d92:	681b      	ldr	r3, [r3, #0]
10003d94:	617b      	str	r3, [r7, #20]
10003d96:	697b      	ldr	r3, [r7, #20]
10003d98:	4a05      	ldr	r2, [pc, #20]	; (10003db0 <metal_generic_dev_open+0x5c>)
10003d9a:	4293      	cmp	r3, r2
10003d9c:	d1e4      	bne.n	10003d68 <metal_generic_dev_open+0x14>
		}
	}

	return -ENODEV;
10003d9e:	f06f 0312 	mvn.w	r3, #18
}
10003da2:	4618      	mov	r0, r3
10003da4:	3718      	adds	r7, #24
10003da6:	46bd      	mov	sp, r7
10003da8:	bd80      	pop	{r7, pc}
10003daa:	bf00      	nop
10003dac:	10020d24 	.word	0x10020d24
10003db0:	10020d3c 	.word	0x10020d3c

10003db4 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
10003db4:	b580      	push	{r7, lr}
10003db6:	b086      	sub	sp, #24
10003db8:	af00      	add	r7, sp, #0
10003dba:	60f8      	str	r0, [r7, #12]
10003dbc:	60b9      	str	r1, [r7, #8]
10003dbe:	607a      	str	r2, [r7, #4]
10003dc0:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;

	if (sg_out != sg_in)
10003dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10003dc4:	683b      	ldr	r3, [r7, #0]
10003dc6:	429a      	cmp	r2, r3
10003dc8:	d009      	beq.n	10003dde <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
10003dca:	6a3a      	ldr	r2, [r7, #32]
10003dcc:	4613      	mov	r3, r2
10003dce:	005b      	lsls	r3, r3, #1
10003dd0:	4413      	add	r3, r2
10003dd2:	009b      	lsls	r3, r3, #2
10003dd4:	461a      	mov	r2, r3
10003dd6:	6839      	ldr	r1, [r7, #0]
10003dd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
10003dda:	f002 fbed 	bl	100065b8 <memcpy>
	for (i = 0; i < nents_in; i++) {
10003dde:	2300      	movs	r3, #0
10003de0:	617b      	str	r3, [r7, #20]
10003de2:	e02f      	b.n	10003e44 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
10003de4:	687b      	ldr	r3, [r7, #4]
10003de6:	2b02      	cmp	r3, #2
10003de8:	d114      	bne.n	10003e14 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
10003dea:	697a      	ldr	r2, [r7, #20]
10003dec:	4613      	mov	r3, r2
10003dee:	005b      	lsls	r3, r3, #1
10003df0:	4413      	add	r3, r2
10003df2:	009b      	lsls	r3, r3, #2
10003df4:	461a      	mov	r2, r3
10003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003df8:	4413      	add	r3, r2
10003dfa:	6818      	ldr	r0, [r3, #0]
10003dfc:	697a      	ldr	r2, [r7, #20]
10003dfe:	4613      	mov	r3, r2
10003e00:	005b      	lsls	r3, r3, #1
10003e02:	4413      	add	r3, r2
10003e04:	009b      	lsls	r3, r3, #2
10003e06:	461a      	mov	r2, r3
10003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003e0a:	4413      	add	r3, r2
10003e0c:	689b      	ldr	r3, [r3, #8]
10003e0e:	4619      	mov	r1, r3
10003e10:	f7ff feaf 	bl	10003b72 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
10003e14:	697a      	ldr	r2, [r7, #20]
10003e16:	4613      	mov	r3, r2
10003e18:	005b      	lsls	r3, r3, #1
10003e1a:	4413      	add	r3, r2
10003e1c:	009b      	lsls	r3, r3, #2
10003e1e:	461a      	mov	r2, r3
10003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003e22:	4413      	add	r3, r2
10003e24:	6818      	ldr	r0, [r3, #0]
10003e26:	697a      	ldr	r2, [r7, #20]
10003e28:	4613      	mov	r3, r2
10003e2a:	005b      	lsls	r3, r3, #1
10003e2c:	4413      	add	r3, r2
10003e2e:	009b      	lsls	r3, r3, #2
10003e30:	461a      	mov	r2, r3
10003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003e34:	4413      	add	r3, r2
10003e36:	689b      	ldr	r3, [r3, #8]
10003e38:	4619      	mov	r1, r3
10003e3a:	f7ff fea7 	bl	10003b8c <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
10003e3e:	697b      	ldr	r3, [r7, #20]
10003e40:	3301      	adds	r3, #1
10003e42:	617b      	str	r3, [r7, #20]
10003e44:	697a      	ldr	r2, [r7, #20]
10003e46:	6a3b      	ldr	r3, [r7, #32]
10003e48:	429a      	cmp	r2, r3
10003e4a:	dbcb      	blt.n	10003de4 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
10003e4c:	6a3b      	ldr	r3, [r7, #32]
}
10003e4e:	4618      	mov	r0, r3
10003e50:	3718      	adds	r7, #24
10003e52:	46bd      	mov	sp, r7
10003e54:	bd80      	pop	{r7, pc}

10003e56 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
10003e56:	b580      	push	{r7, lr}
10003e58:	b086      	sub	sp, #24
10003e5a:	af00      	add	r7, sp, #0
10003e5c:	60f8      	str	r0, [r7, #12]
10003e5e:	60b9      	str	r1, [r7, #8]
10003e60:	607a      	str	r2, [r7, #4]
10003e62:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;
	(void)dir;

	for (i = 0; i < nents; i++) {
10003e64:	2300      	movs	r3, #0
10003e66:	617b      	str	r3, [r7, #20]
10003e68:	e017      	b.n	10003e9a <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
10003e6a:	697a      	ldr	r2, [r7, #20]
10003e6c:	4613      	mov	r3, r2
10003e6e:	005b      	lsls	r3, r3, #1
10003e70:	4413      	add	r3, r2
10003e72:	009b      	lsls	r3, r3, #2
10003e74:	461a      	mov	r2, r3
10003e76:	683b      	ldr	r3, [r7, #0]
10003e78:	4413      	add	r3, r2
10003e7a:	6818      	ldr	r0, [r3, #0]
10003e7c:	697a      	ldr	r2, [r7, #20]
10003e7e:	4613      	mov	r3, r2
10003e80:	005b      	lsls	r3, r3, #1
10003e82:	4413      	add	r3, r2
10003e84:	009b      	lsls	r3, r3, #2
10003e86:	461a      	mov	r2, r3
10003e88:	683b      	ldr	r3, [r7, #0]
10003e8a:	4413      	add	r3, r2
10003e8c:	689b      	ldr	r3, [r3, #8]
10003e8e:	4619      	mov	r1, r3
10003e90:	f7ff fe7c 	bl	10003b8c <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
10003e94:	697b      	ldr	r3, [r7, #20]
10003e96:	3301      	adds	r3, #1
10003e98:	617b      	str	r3, [r7, #20]
10003e9a:	697a      	ldr	r2, [r7, #20]
10003e9c:	6a3b      	ldr	r3, [r7, #32]
10003e9e:	429a      	cmp	r2, r3
10003ea0:	dbe3      	blt.n	10003e6a <metal_generic_dev_dma_unmap+0x14>
	}
}
10003ea2:	bf00      	nop
10003ea4:	bf00      	nop
10003ea6:	3718      	adds	r7, #24
10003ea8:	46bd      	mov	sp, r7
10003eaa:	bd80      	pop	{r7, pc}

10003eac <metal_list_init>:
{
10003eac:	b480      	push	{r7}
10003eae:	b083      	sub	sp, #12
10003eb0:	af00      	add	r7, sp, #0
10003eb2:	6078      	str	r0, [r7, #4]
	list->prev = list;
10003eb4:	687b      	ldr	r3, [r7, #4]
10003eb6:	687a      	ldr	r2, [r7, #4]
10003eb8:	605a      	str	r2, [r3, #4]
	list->next = list;
10003eba:	687b      	ldr	r3, [r7, #4]
10003ebc:	687a      	ldr	r2, [r7, #4]
10003ebe:	601a      	str	r2, [r3, #0]
}
10003ec0:	bf00      	nop
10003ec2:	370c      	adds	r7, #12
10003ec4:	46bd      	mov	sp, r7
10003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
10003eca:	4770      	bx	lr

10003ecc <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
10003ecc:	b580      	push	{r7, lr}
10003ece:	b084      	sub	sp, #16
10003ed0:	af00      	add	r7, sp, #0
10003ed2:	6078      	str	r0, [r7, #4]
	int error = 0;
10003ed4:	2300      	movs	r3, #0
10003ed6:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
10003ed8:	2220      	movs	r2, #32
10003eda:	2100      	movs	r1, #0
10003edc:	4810      	ldr	r0, [pc, #64]	; (10003f20 <metal_init+0x54>)
10003ede:	f002 fabc 	bl	1000645a <memset>

	_metal.common.log_handler   = params->log_handler;
10003ee2:	687b      	ldr	r3, [r7, #4]
10003ee4:	681b      	ldr	r3, [r3, #0]
10003ee6:	4a0e      	ldr	r2, [pc, #56]	; (10003f20 <metal_init+0x54>)
10003ee8:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
10003eea:	687b      	ldr	r3, [r7, #4]
10003eec:	791a      	ldrb	r2, [r3, #4]
10003eee:	4b0c      	ldr	r3, [pc, #48]	; (10003f20 <metal_init+0x54>)
10003ef0:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
10003ef2:	480c      	ldr	r0, [pc, #48]	; (10003f24 <metal_init+0x58>)
10003ef4:	f7ff ffda 	bl	10003eac <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
10003ef8:	480b      	ldr	r0, [pc, #44]	; (10003f28 <metal_init+0x5c>)
10003efa:	f7ff ffd7 	bl	10003eac <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
10003efe:	480b      	ldr	r0, [pc, #44]	; (10003f2c <metal_init+0x60>)
10003f00:	f7ff ffd4 	bl	10003eac <metal_list_init>

	error = metal_sys_init(params);
10003f04:	6878      	ldr	r0, [r7, #4]
10003f06:	f000 f999 	bl	1000423c <metal_sys_init>
10003f0a:	60f8      	str	r0, [r7, #12]
	if (error)
10003f0c:	68fb      	ldr	r3, [r7, #12]
10003f0e:	2b00      	cmp	r3, #0
10003f10:	d001      	beq.n	10003f16 <metal_init+0x4a>
		return error;
10003f12:	68fb      	ldr	r3, [r7, #12]
10003f14:	e000      	b.n	10003f18 <metal_init+0x4c>

	return error;
10003f16:	68fb      	ldr	r3, [r7, #12]
}
10003f18:	4618      	mov	r0, r3
10003f1a:	3710      	adds	r7, #16
10003f1c:	46bd      	mov	sp, r7
10003f1e:	bd80      	pop	{r7, pc}
10003f20:	10020d24 	.word	0x10020d24
10003f24:	10020d2c 	.word	0x10020d2c
10003f28:	10020d34 	.word	0x10020d34
10003f2c:	10020d3c 	.word	0x10020d3c

10003f30 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
10003f30:	b480      	push	{r7}
10003f32:	b083      	sub	sp, #12
10003f34:	af00      	add	r7, sp, #0
10003f36:	6078      	str	r0, [r7, #4]
10003f38:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
10003f3a:	687b      	ldr	r3, [r7, #4]
10003f3c:	681b      	ldr	r3, [r3, #0]
		? (void *)((uintptr_t)io->virt + offset)
		: NULL);
10003f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10003f42:	d00a      	beq.n	10003f5a <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
10003f44:	687b      	ldr	r3, [r7, #4]
10003f46:	689b      	ldr	r3, [r3, #8]
10003f48:	683a      	ldr	r2, [r7, #0]
10003f4a:	429a      	cmp	r2, r3
10003f4c:	d205      	bcs.n	10003f5a <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
10003f4e:	687b      	ldr	r3, [r7, #4]
10003f50:	681b      	ldr	r3, [r3, #0]
10003f52:	461a      	mov	r2, r3
10003f54:	683b      	ldr	r3, [r7, #0]
10003f56:	4413      	add	r3, r2
		: NULL);
10003f58:	e000      	b.n	10003f5c <metal_io_virt+0x2c>
10003f5a:	2300      	movs	r3, #0
}
10003f5c:	4618      	mov	r0, r3
10003f5e:	370c      	adds	r7, #12
10003f60:	46bd      	mov	sp, r7
10003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
10003f66:	4770      	bx	lr

10003f68 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
10003f68:	b5b0      	push	{r4, r5, r7, lr}
10003f6a:	b08c      	sub	sp, #48	; 0x30
10003f6c:	af00      	add	r7, sp, #0
10003f6e:	60f8      	str	r0, [r7, #12]
10003f70:	60b9      	str	r1, [r7, #8]
10003f72:	607a      	str	r2, [r7, #4]
10003f74:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {
10003f76:	f107 0310 	add.w	r3, r7, #16
10003f7a:	2220      	movs	r2, #32
10003f7c:	2100      	movs	r1, #0
10003f7e:	4618      	mov	r0, r3
10003f80:	f002 fa6b 	bl	1000645a <memset>
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
10003f84:	68fb      	ldr	r3, [r7, #12]
10003f86:	68ba      	ldr	r2, [r7, #8]
10003f88:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
10003f8a:	68fb      	ldr	r3, [r7, #12]
10003f8c:	687a      	ldr	r2, [r7, #4]
10003f8e:	605a      	str	r2, [r3, #4]
	io->size = size;
10003f90:	68fb      	ldr	r3, [r7, #12]
10003f92:	683a      	ldr	r2, [r7, #0]
10003f94:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
10003f96:	68fb      	ldr	r3, [r7, #12]
10003f98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
10003f9a:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
10003f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10003f9e:	2b1f      	cmp	r3, #31
10003fa0:	d904      	bls.n	10003fac <metal_io_init+0x44>
		/* avoid overflow */
		io->page_mask = -1UL;
10003fa2:	68fb      	ldr	r3, [r7, #12]
10003fa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
10003fa8:	611a      	str	r2, [r3, #16]
10003faa:	e006      	b.n	10003fba <metal_io_init+0x52>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
10003fac:	2201      	movs	r2, #1
10003fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10003fb0:	fa02 f303 	lsl.w	r3, r2, r3
10003fb4:	1e5a      	subs	r2, r3, #1
10003fb6:	68fb      	ldr	r3, [r7, #12]
10003fb8:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
10003fba:	68fb      	ldr	r3, [r7, #12]
10003fbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
10003fbe:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
10003fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10003fc2:	2b00      	cmp	r3, #0
10003fc4:	d00b      	beq.n	10003fde <metal_io_init+0x76>
10003fc6:	68fb      	ldr	r3, [r7, #12]
10003fc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
10003fca:	f103 0418 	add.w	r4, r3, #24
10003fce:	4615      	mov	r5, r2
10003fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
10003fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
10003fd4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
10003fd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
10003fdc:	e00a      	b.n	10003ff4 <metal_io_init+0x8c>
10003fde:	68fb      	ldr	r3, [r7, #12]
10003fe0:	f103 0418 	add.w	r4, r3, #24
10003fe4:	f107 0510 	add.w	r5, r7, #16
10003fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
10003fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
10003fec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
10003ff0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
10003ff4:	68f8      	ldr	r0, [r7, #12]
10003ff6:	f000 f92f 	bl	10004258 <metal_sys_io_mem_map>
}
10003ffa:	bf00      	nop
10003ffc:	3730      	adds	r7, #48	; 0x30
10003ffe:	46bd      	mov	sp, r7
10004000:	bdb0      	pop	{r4, r5, r7, pc}

10004002 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
10004002:	b590      	push	{r4, r7, lr}
10004004:	b08b      	sub	sp, #44	; 0x2c
10004006:	af02      	add	r7, sp, #8
10004008:	60f8      	str	r0, [r7, #12]
1000400a:	60b9      	str	r1, [r7, #8]
1000400c:	607a      	str	r2, [r7, #4]
1000400e:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
10004010:	68b9      	ldr	r1, [r7, #8]
10004012:	68f8      	ldr	r0, [r7, #12]
10004014:	f7ff ff8c 	bl	10003f30 <metal_io_virt>
10004018:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
1000401a:	687b      	ldr	r3, [r7, #4]
1000401c:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
1000401e:	69fb      	ldr	r3, [r7, #28]
10004020:	2b00      	cmp	r3, #0
10004022:	d102      	bne.n	1000402a <metal_io_block_read+0x28>
		return -ERANGE;
10004024:	f06f 0321 	mvn.w	r3, #33	; 0x21
10004028:	e05c      	b.n	100040e4 <metal_io_block_read+0xe2>
	if ((offset + len) > io->size)
1000402a:	683a      	ldr	r2, [r7, #0]
1000402c:	68bb      	ldr	r3, [r7, #8]
1000402e:	441a      	add	r2, r3
10004030:	68fb      	ldr	r3, [r7, #12]
10004032:	689b      	ldr	r3, [r3, #8]
10004034:	429a      	cmp	r2, r3
10004036:	d904      	bls.n	10004042 <metal_io_block_read+0x40>
		len = io->size - offset;
10004038:	68fb      	ldr	r3, [r7, #12]
1000403a:	689a      	ldr	r2, [r3, #8]
1000403c:	68bb      	ldr	r3, [r7, #8]
1000403e:	1ad3      	subs	r3, r2, r3
10004040:	603b      	str	r3, [r7, #0]
	retlen = len;
10004042:	683b      	ldr	r3, [r7, #0]
10004044:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
10004046:	68fb      	ldr	r3, [r7, #12]
10004048:	6a1b      	ldr	r3, [r3, #32]
1000404a:	2b00      	cmp	r3, #0
1000404c:	d00a      	beq.n	10004064 <metal_io_block_read+0x62>
		retlen = (*io->ops.block_read)(
1000404e:	68fb      	ldr	r3, [r7, #12]
10004050:	6a1c      	ldr	r4, [r3, #32]
10004052:	683b      	ldr	r3, [r7, #0]
10004054:	9300      	str	r3, [sp, #0]
10004056:	2305      	movs	r3, #5
10004058:	687a      	ldr	r2, [r7, #4]
1000405a:	68b9      	ldr	r1, [r7, #8]
1000405c:	68f8      	ldr	r0, [r7, #12]
1000405e:	47a0      	blx	r4
10004060:	6178      	str	r0, [r7, #20]
10004062:	e03e      	b.n	100040e2 <metal_io_block_read+0xe0>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
10004064:	f3bf 8f5b 	dmb	ish
		while ( len && (
10004068:	e00c      	b.n	10004084 <metal_io_block_read+0x82>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
1000406a:	69fb      	ldr	r3, [r7, #28]
1000406c:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
1000406e:	69bb      	ldr	r3, [r7, #24]
10004070:	701a      	strb	r2, [r3, #0]
			dest++;
10004072:	69bb      	ldr	r3, [r7, #24]
10004074:	3301      	adds	r3, #1
10004076:	61bb      	str	r3, [r7, #24]
			ptr++;
10004078:	69fb      	ldr	r3, [r7, #28]
1000407a:	3301      	adds	r3, #1
1000407c:	61fb      	str	r3, [r7, #28]
			len--;
1000407e:	683b      	ldr	r3, [r7, #0]
10004080:	3b01      	subs	r3, #1
10004082:	603b      	str	r3, [r7, #0]
		while ( len && (
10004084:	683b      	ldr	r3, [r7, #0]
10004086:	2b00      	cmp	r3, #0
10004088:	d017      	beq.n	100040ba <metal_io_block_read+0xb8>
			((uintptr_t)dest % sizeof(int)) ||
1000408a:	69bb      	ldr	r3, [r7, #24]
1000408c:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
10004090:	2b00      	cmp	r3, #0
10004092:	d1ea      	bne.n	1000406a <metal_io_block_read+0x68>
			((uintptr_t)ptr % sizeof(int)))) {
10004094:	69fb      	ldr	r3, [r7, #28]
10004096:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
1000409a:	2b00      	cmp	r3, #0
1000409c:	d1e5      	bne.n	1000406a <metal_io_block_read+0x68>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000409e:	e00c      	b.n	100040ba <metal_io_block_read+0xb8>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
100040a0:	69fb      	ldr	r3, [r7, #28]
100040a2:	681a      	ldr	r2, [r3, #0]
100040a4:	69bb      	ldr	r3, [r7, #24]
100040a6:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
100040a8:	69bb      	ldr	r3, [r7, #24]
100040aa:	3304      	adds	r3, #4
100040ac:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
100040ae:	69fb      	ldr	r3, [r7, #28]
100040b0:	3304      	adds	r3, #4
100040b2:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
100040b4:	683b      	ldr	r3, [r7, #0]
100040b6:	3b04      	subs	r3, #4
100040b8:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
100040ba:	683b      	ldr	r3, [r7, #0]
100040bc:	2b03      	cmp	r3, #3
100040be:	dcef      	bgt.n	100040a0 <metal_io_block_read+0x9e>
		for (; len != 0; dest++, ptr++, len--)
100040c0:	e00c      	b.n	100040dc <metal_io_block_read+0xda>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
100040c2:	69fb      	ldr	r3, [r7, #28]
100040c4:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
100040c6:	69bb      	ldr	r3, [r7, #24]
100040c8:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
100040ca:	69bb      	ldr	r3, [r7, #24]
100040cc:	3301      	adds	r3, #1
100040ce:	61bb      	str	r3, [r7, #24]
100040d0:	69fb      	ldr	r3, [r7, #28]
100040d2:	3301      	adds	r3, #1
100040d4:	61fb      	str	r3, [r7, #28]
100040d6:	683b      	ldr	r3, [r7, #0]
100040d8:	3b01      	subs	r3, #1
100040da:	603b      	str	r3, [r7, #0]
100040dc:	683b      	ldr	r3, [r7, #0]
100040de:	2b00      	cmp	r3, #0
100040e0:	d1ef      	bne.n	100040c2 <metal_io_block_read+0xc0>
	}
	return retlen;
100040e2:	697b      	ldr	r3, [r7, #20]
}
100040e4:	4618      	mov	r0, r3
100040e6:	3724      	adds	r7, #36	; 0x24
100040e8:	46bd      	mov	sp, r7
100040ea:	bd90      	pop	{r4, r7, pc}

100040ec <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
100040ec:	b590      	push	{r4, r7, lr}
100040ee:	b08b      	sub	sp, #44	; 0x2c
100040f0:	af02      	add	r7, sp, #8
100040f2:	60f8      	str	r0, [r7, #12]
100040f4:	60b9      	str	r1, [r7, #8]
100040f6:	607a      	str	r2, [r7, #4]
100040f8:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
100040fa:	68b9      	ldr	r1, [r7, #8]
100040fc:	68f8      	ldr	r0, [r7, #12]
100040fe:	f7ff ff17 	bl	10003f30 <metal_io_virt>
10004102:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
10004104:	687b      	ldr	r3, [r7, #4]
10004106:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
10004108:	69fb      	ldr	r3, [r7, #28]
1000410a:	2b00      	cmp	r3, #0
1000410c:	d102      	bne.n	10004114 <metal_io_block_write+0x28>
		return -ERANGE;
1000410e:	f06f 0321 	mvn.w	r3, #33	; 0x21
10004112:	e05b      	b.n	100041cc <metal_io_block_write+0xe0>
	if ((offset + len) > io->size)
10004114:	683a      	ldr	r2, [r7, #0]
10004116:	68bb      	ldr	r3, [r7, #8]
10004118:	441a      	add	r2, r3
1000411a:	68fb      	ldr	r3, [r7, #12]
1000411c:	689b      	ldr	r3, [r3, #8]
1000411e:	429a      	cmp	r2, r3
10004120:	d904      	bls.n	1000412c <metal_io_block_write+0x40>
		len = io->size - offset;
10004122:	68fb      	ldr	r3, [r7, #12]
10004124:	689a      	ldr	r2, [r3, #8]
10004126:	68bb      	ldr	r3, [r7, #8]
10004128:	1ad3      	subs	r3, r2, r3
1000412a:	603b      	str	r3, [r7, #0]
	retlen = len;
1000412c:	683b      	ldr	r3, [r7, #0]
1000412e:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
10004130:	68fb      	ldr	r3, [r7, #12]
10004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004134:	2b00      	cmp	r3, #0
10004136:	d017      	beq.n	10004168 <metal_io_block_write+0x7c>
		retlen = (*io->ops.block_write)(
10004138:	68fb      	ldr	r3, [r7, #12]
1000413a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
1000413c:	683b      	ldr	r3, [r7, #0]
1000413e:	9300      	str	r3, [sp, #0]
10004140:	2305      	movs	r3, #5
10004142:	687a      	ldr	r2, [r7, #4]
10004144:	68b9      	ldr	r1, [r7, #8]
10004146:	68f8      	ldr	r0, [r7, #12]
10004148:	47a0      	blx	r4
1000414a:	6178      	str	r0, [r7, #20]
1000414c:	e03d      	b.n	100041ca <metal_io_block_write+0xde>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
1000414e:	69bb      	ldr	r3, [r7, #24]
10004150:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
10004152:	69fb      	ldr	r3, [r7, #28]
10004154:	701a      	strb	r2, [r3, #0]
			ptr++;
10004156:	69fb      	ldr	r3, [r7, #28]
10004158:	3301      	adds	r3, #1
1000415a:	61fb      	str	r3, [r7, #28]
			source++;
1000415c:	69bb      	ldr	r3, [r7, #24]
1000415e:	3301      	adds	r3, #1
10004160:	61bb      	str	r3, [r7, #24]
			len--;
10004162:	683b      	ldr	r3, [r7, #0]
10004164:	3b01      	subs	r3, #1
10004166:	603b      	str	r3, [r7, #0]
		while ( len && (
10004168:	683b      	ldr	r3, [r7, #0]
1000416a:	2b00      	cmp	r3, #0
1000416c:	d017      	beq.n	1000419e <metal_io_block_write+0xb2>
			((uintptr_t)ptr % sizeof(int)) ||
1000416e:	69fb      	ldr	r3, [r7, #28]
10004170:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
10004174:	2b00      	cmp	r3, #0
10004176:	d1ea      	bne.n	1000414e <metal_io_block_write+0x62>
			((uintptr_t)source % sizeof(int)))) {
10004178:	69bb      	ldr	r3, [r7, #24]
1000417a:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
1000417e:	2b00      	cmp	r3, #0
10004180:	d1e5      	bne.n	1000414e <metal_io_block_write+0x62>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
10004182:	e00c      	b.n	1000419e <metal_io_block_write+0xb2>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
10004184:	69bb      	ldr	r3, [r7, #24]
10004186:	681a      	ldr	r2, [r3, #0]
10004188:	69fb      	ldr	r3, [r7, #28]
1000418a:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000418c:	69fb      	ldr	r3, [r7, #28]
1000418e:	3304      	adds	r3, #4
10004190:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
10004192:	69bb      	ldr	r3, [r7, #24]
10004194:	3304      	adds	r3, #4
10004196:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
10004198:	683b      	ldr	r3, [r7, #0]
1000419a:	3b04      	subs	r3, #4
1000419c:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000419e:	683b      	ldr	r3, [r7, #0]
100041a0:	2b03      	cmp	r3, #3
100041a2:	dcef      	bgt.n	10004184 <metal_io_block_write+0x98>
		for (; len != 0; ptr++, source++, len--)
100041a4:	e00c      	b.n	100041c0 <metal_io_block_write+0xd4>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
100041a6:	69bb      	ldr	r3, [r7, #24]
100041a8:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
100041aa:	69fb      	ldr	r3, [r7, #28]
100041ac:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
100041ae:	69fb      	ldr	r3, [r7, #28]
100041b0:	3301      	adds	r3, #1
100041b2:	61fb      	str	r3, [r7, #28]
100041b4:	69bb      	ldr	r3, [r7, #24]
100041b6:	3301      	adds	r3, #1
100041b8:	61bb      	str	r3, [r7, #24]
100041ba:	683b      	ldr	r3, [r7, #0]
100041bc:	3b01      	subs	r3, #1
100041be:	603b      	str	r3, [r7, #0]
100041c0:	683b      	ldr	r3, [r7, #0]
100041c2:	2b00      	cmp	r3, #0
100041c4:	d1ef      	bne.n	100041a6 <metal_io_block_write+0xba>
		atomic_thread_fence(memory_order_seq_cst);
100041c6:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
100041ca:	697b      	ldr	r3, [r7, #20]
}
100041cc:	4618      	mov	r0, r3
100041ce:	3724      	adds	r7, #36	; 0x24
100041d0:	46bd      	mov	sp, r7
100041d2:	bd90      	pop	{r4, r7, pc}

100041d4 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
100041d4:	b40e      	push	{r1, r2, r3}
100041d6:	b480      	push	{r7}
100041d8:	b082      	sub	sp, #8
100041da:	af00      	add	r7, sp, #0
100041dc:	4603      	mov	r3, r0
100041de:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
100041e0:	bf00      	nop
100041e2:	3708      	adds	r7, #8
100041e4:	46bd      	mov	sp, r7
100041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
100041ea:	b003      	add	sp, #12
100041ec:	4770      	bx	lr

100041ee <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
100041ee:	b580      	push	{r7, lr}
100041f0:	b084      	sub	sp, #16
100041f2:	af00      	add	r7, sp, #0
100041f4:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned int i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
100041f6:	2300      	movs	r3, #0
100041f8:	60fb      	str	r3, [r7, #12]
100041fa:	e013      	b.n	10004224 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
100041fc:	68fa      	ldr	r2, [r7, #12]
100041fe:	4613      	mov	r3, r2
10004200:	00db      	lsls	r3, r3, #3
10004202:	1a9b      	subs	r3, r3, r2
10004204:	00db      	lsls	r3, r3, #3
10004206:	3308      	adds	r3, #8
10004208:	687a      	ldr	r2, [r7, #4]
1000420a:	4413      	add	r3, r2
1000420c:	3304      	adds	r3, #4
1000420e:	60bb      	str	r3, [r7, #8]
		if (!io->size)
10004210:	68bb      	ldr	r3, [r7, #8]
10004212:	689b      	ldr	r3, [r3, #8]
10004214:	2b00      	cmp	r3, #0
10004216:	d00b      	beq.n	10004230 <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
10004218:	68b8      	ldr	r0, [r7, #8]
1000421a:	f000 f81d 	bl	10004258 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
1000421e:	68fb      	ldr	r3, [r7, #12]
10004220:	3301      	adds	r3, #1
10004222:	60fb      	str	r3, [r7, #12]
10004224:	687b      	ldr	r3, [r7, #4]
10004226:	689b      	ldr	r3, [r3, #8]
10004228:	68fa      	ldr	r2, [r7, #12]
1000422a:	429a      	cmp	r2, r3
1000422c:	d3e6      	bcc.n	100041fc <metal_generic_dev_sys_open+0xe>
1000422e:	e000      	b.n	10004232 <metal_generic_dev_sys_open+0x44>
			break;
10004230:	bf00      	nop
	}

	return 0;
10004232:	2300      	movs	r3, #0
}
10004234:	4618      	mov	r0, r3
10004236:	3710      	adds	r7, #16
10004238:	46bd      	mov	sp, r7
1000423a:	bd80      	pop	{r7, pc}

1000423c <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
1000423c:	b580      	push	{r7, lr}
1000423e:	b082      	sub	sp, #8
10004240:	af00      	add	r7, sp, #0
10004242:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
10004244:	4803      	ldr	r0, [pc, #12]	; (10004254 <metal_sys_init+0x18>)
10004246:	f7ff fcaf 	bl	10003ba8 <metal_bus_register>
	return 0;
1000424a:	2300      	movs	r3, #0
}
1000424c:	4618      	mov	r0, r3
1000424e:	3708      	adds	r7, #8
10004250:	46bd      	mov	sp, r7
10004252:	bd80      	pop	{r7, pc}
10004254:	100200a8 	.word	0x100200a8

10004258 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
10004258:	b580      	push	{r7, lr}
1000425a:	b086      	sub	sp, #24
1000425c:	af00      	add	r7, sp, #0
1000425e:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = io->virt;
10004260:	687b      	ldr	r3, [r7, #4]
10004262:	681b      	ldr	r3, [r3, #0]
10004264:	60fb      	str	r3, [r7, #12]
	psize = (size_t)io->size;
10004266:	687b      	ldr	r3, [r7, #4]
10004268:	689b      	ldr	r3, [r3, #8]
1000426a:	613b      	str	r3, [r7, #16]
	if (psize) {
1000426c:	693b      	ldr	r3, [r7, #16]
1000426e:	2b00      	cmp	r3, #0
10004270:	d02c      	beq.n	100042cc <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
10004272:	687b      	ldr	r3, [r7, #4]
10004274:	68db      	ldr	r3, [r3, #12]
10004276:	693a      	ldr	r2, [r7, #16]
10004278:	fa22 f303 	lsr.w	r3, r2, r3
1000427c:	2b00      	cmp	r3, #0
1000427e:	d005      	beq.n	1000428c <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
10004280:	687b      	ldr	r3, [r7, #4]
10004282:	68db      	ldr	r3, [r3, #12]
10004284:	2201      	movs	r2, #1
10004286:	fa02 f303 	lsl.w	r3, r2, r3
1000428a:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
1000428c:	2300      	movs	r3, #0
1000428e:	617b      	str	r3, [r7, #20]
10004290:	e013      	b.n	100042ba <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
10004292:	687b      	ldr	r3, [r7, #4]
10004294:	685a      	ldr	r2, [r3, #4]
10004296:	697b      	ldr	r3, [r7, #20]
10004298:	009b      	lsls	r3, r3, #2
1000429a:	4413      	add	r3, r2
1000429c:	6819      	ldr	r1, [r3, #0]
1000429e:	687b      	ldr	r3, [r7, #4]
100042a0:	695b      	ldr	r3, [r3, #20]
100042a2:	693a      	ldr	r2, [r7, #16]
100042a4:	68f8      	ldr	r0, [r7, #12]
100042a6:	f000 f82b 	bl	10004300 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
100042aa:	693b      	ldr	r3, [r7, #16]
100042ac:	009b      	lsls	r3, r3, #2
100042ae:	68fa      	ldr	r2, [r7, #12]
100042b0:	4413      	add	r3, r2
100042b2:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
100042b4:	697b      	ldr	r3, [r7, #20]
100042b6:	3301      	adds	r3, #1
100042b8:	617b      	str	r3, [r7, #20]
100042ba:	687b      	ldr	r3, [r7, #4]
100042bc:	689a      	ldr	r2, [r3, #8]
100042be:	687b      	ldr	r3, [r7, #4]
100042c0:	68db      	ldr	r3, [r3, #12]
100042c2:	fa22 f303 	lsr.w	r3, r2, r3
100042c6:	697a      	ldr	r2, [r7, #20]
100042c8:	429a      	cmp	r2, r3
100042ca:	d9e2      	bls.n	10004292 <metal_sys_io_mem_map+0x3a>
		}
	}
}
100042cc:	bf00      	nop
100042ce:	3718      	adds	r7, #24
100042d0:	46bd      	mov	sp, r7
100042d2:	bd80      	pop	{r7, pc}

100042d4 <metal_machine_cache_flush>:

	/* Add implementation here */
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
100042d4:	b480      	push	{r7}
100042d6:	b083      	sub	sp, #12
100042d8:	af00      	add	r7, sp, #0
100042da:	6078      	str	r0, [r7, #4]
100042dc:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
100042de:	bf00      	nop
100042e0:	370c      	adds	r7, #12
100042e2:	46bd      	mov	sp, r7
100042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
100042e8:	4770      	bx	lr

100042ea <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
100042ea:	b480      	push	{r7}
100042ec:	b083      	sub	sp, #12
100042ee:	af00      	add	r7, sp, #0
100042f0:	6078      	str	r0, [r7, #4]
100042f2:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
100042f4:	bf00      	nop
100042f6:	370c      	adds	r7, #12
100042f8:	46bd      	mov	sp, r7
100042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
100042fe:	4770      	bx	lr

10004300 <metal_machine_io_mem_map>:
	/* Add implementation here */
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
10004300:	b480      	push	{r7}
10004302:	b085      	sub	sp, #20
10004304:	af00      	add	r7, sp, #0
10004306:	60f8      	str	r0, [r7, #12]
10004308:	60b9      	str	r1, [r7, #8]
1000430a:	607a      	str	r2, [r7, #4]
1000430c:	603b      	str	r3, [r7, #0]
	metal_unused(size);
	metal_unused(flags);

	/* Add implementation here */

	return va;
1000430e:	68fb      	ldr	r3, [r7, #12]
}
10004310:	4618      	mov	r0, r3
10004312:	3714      	adds	r7, #20
10004314:	46bd      	mov	sp, r7
10004316:	f85d 7b04 	ldr.w	r7, [sp], #4
1000431a:	4770      	bx	lr

1000431c <metal_io_virt>:
{
1000431c:	b480      	push	{r7}
1000431e:	b083      	sub	sp, #12
10004320:	af00      	add	r7, sp, #0
10004322:	6078      	str	r0, [r7, #4]
10004324:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
10004326:	687b      	ldr	r3, [r7, #4]
10004328:	681b      	ldr	r3, [r3, #0]
		: NULL);
1000432a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1000432e:	d00a      	beq.n	10004346 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
10004330:	687b      	ldr	r3, [r7, #4]
10004332:	689b      	ldr	r3, [r3, #8]
10004334:	683a      	ldr	r2, [r7, #0]
10004336:	429a      	cmp	r2, r3
10004338:	d205      	bcs.n	10004346 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
1000433a:	687b      	ldr	r3, [r7, #4]
1000433c:	681b      	ldr	r3, [r3, #0]
1000433e:	461a      	mov	r2, r3
10004340:	683b      	ldr	r3, [r7, #0]
10004342:	4413      	add	r3, r2
		: NULL);
10004344:	e000      	b.n	10004348 <metal_io_virt+0x2c>
10004346:	2300      	movs	r3, #0
}
10004348:	4618      	mov	r0, r3
1000434a:	370c      	adds	r7, #12
1000434c:	46bd      	mov	sp, r7
1000434e:	f85d 7b04 	ldr.w	r7, [sp], #4
10004352:	4770      	bx	lr

10004354 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
10004354:	b480      	push	{r7}
10004356:	b085      	sub	sp, #20
10004358:	af00      	add	r7, sp, #0
1000435a:	6078      	str	r0, [r7, #4]
1000435c:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
1000435e:	683b      	ldr	r3, [r7, #0]
10004360:	687a      	ldr	r2, [r7, #4]
10004362:	6812      	ldr	r2, [r2, #0]
10004364:	1a9b      	subs	r3, r3, r2
10004366:	60fb      	str	r3, [r7, #12]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
10004368:	687b      	ldr	r3, [r7, #4]
1000436a:	689b      	ldr	r3, [r3, #8]
1000436c:	68fa      	ldr	r2, [r7, #12]
1000436e:	429a      	cmp	r2, r3
10004370:	d201      	bcs.n	10004376 <metal_io_virt_to_offset+0x22>
10004372:	68fb      	ldr	r3, [r7, #12]
10004374:	e001      	b.n	1000437a <metal_io_virt_to_offset+0x26>
10004376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
1000437a:	4618      	mov	r0, r3
1000437c:	3714      	adds	r7, #20
1000437e:	46bd      	mov	sp, r7
10004380:	f85d 7b04 	ldr.w	r7, [sp], #4
10004384:	4770      	bx	lr
	...

10004388 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
10004388:	b5b0      	push	{r4, r5, r7, lr}
1000438a:	b08c      	sub	sp, #48	; 0x30
1000438c:	af00      	add	r7, sp, #0
1000438e:	60f8      	str	r0, [r7, #12]
10004390:	60b9      	str	r1, [r7, #8]
10004392:	603b      	str	r3, [r7, #0]
10004394:	4613      	mov	r3, r2
10004396:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
10004398:	68b9      	ldr	r1, [r7, #8]
1000439a:	68f8      	ldr	r0, [r7, #12]
1000439c:	f7ff ffbe 	bl	1000431c <metal_io_virt>
100043a0:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
100043a2:	68fb      	ldr	r3, [r7, #12]
100043a4:	699b      	ldr	r3, [r3, #24]
100043a6:	2b00      	cmp	r3, #0
100043a8:	d009      	beq.n	100043be <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
100043aa:	68fb      	ldr	r3, [r7, #12]
100043ac:	699c      	ldr	r4, [r3, #24]
100043ae:	79fa      	ldrb	r2, [r7, #7]
100043b0:	683b      	ldr	r3, [r7, #0]
100043b2:	68b9      	ldr	r1, [r7, #8]
100043b4:	68f8      	ldr	r0, [r7, #12]
100043b6:	47a0      	blx	r4
100043b8:	4604      	mov	r4, r0
100043ba:	460d      	mov	r5, r1
100043bc:	e059      	b.n	10004472 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
100043be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100043c0:	2b00      	cmp	r3, #0
100043c2:	d012      	beq.n	100043ea <metal_io_read+0x62>
100043c4:	683b      	ldr	r3, [r7, #0]
100043c6:	2b01      	cmp	r3, #1
100043c8:	d10f      	bne.n	100043ea <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
100043ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100043cc:	62bb      	str	r3, [r7, #40]	; 0x28
100043ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
100043d0:	f3bf 8f5b 	dmb	ish
100043d4:	781b      	ldrb	r3, [r3, #0]
100043d6:	f3bf 8f5b 	dmb	ish
100043da:	b2db      	uxtb	r3, r3
100043dc:	76fb      	strb	r3, [r7, #27]
100043de:	7efb      	ldrb	r3, [r7, #27]
100043e0:	b2db      	uxtb	r3, r3
100043e2:	2200      	movs	r2, #0
100043e4:	461c      	mov	r4, r3
100043e6:	4615      	mov	r5, r2
100043e8:	e043      	b.n	10004472 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
100043ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100043ec:	2b00      	cmp	r3, #0
100043ee:	d012      	beq.n	10004416 <metal_io_read+0x8e>
100043f0:	683b      	ldr	r3, [r7, #0]
100043f2:	2b02      	cmp	r3, #2
100043f4:	d10f      	bne.n	10004416 <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
100043f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100043f8:	627b      	str	r3, [r7, #36]	; 0x24
100043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100043fc:	f3bf 8f5b 	dmb	ish
10004400:	881b      	ldrh	r3, [r3, #0]
10004402:	f3bf 8f5b 	dmb	ish
10004406:	b29b      	uxth	r3, r3
10004408:	833b      	strh	r3, [r7, #24]
1000440a:	8b3b      	ldrh	r3, [r7, #24]
1000440c:	b29b      	uxth	r3, r3
1000440e:	2200      	movs	r2, #0
10004410:	461c      	mov	r4, r3
10004412:	4615      	mov	r5, r2
10004414:	e02d      	b.n	10004472 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
10004416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10004418:	2b00      	cmp	r3, #0
1000441a:	d010      	beq.n	1000443e <metal_io_read+0xb6>
1000441c:	683b      	ldr	r3, [r7, #0]
1000441e:	2b04      	cmp	r3, #4
10004420:	d10d      	bne.n	1000443e <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
10004422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10004424:	623b      	str	r3, [r7, #32]
10004426:	6a3b      	ldr	r3, [r7, #32]
10004428:	f3bf 8f5b 	dmb	ish
1000442c:	681b      	ldr	r3, [r3, #0]
1000442e:	f3bf 8f5b 	dmb	ish
10004432:	617b      	str	r3, [r7, #20]
10004434:	697b      	ldr	r3, [r7, #20]
10004436:	2200      	movs	r2, #0
10004438:	461c      	mov	r4, r3
1000443a:	4615      	mov	r5, r2
1000443c:	e019      	b.n	10004472 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
1000443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10004440:	2b00      	cmp	r3, #0
10004442:	d010      	beq.n	10004466 <metal_io_read+0xde>
10004444:	683b      	ldr	r3, [r7, #0]
10004446:	2b04      	cmp	r3, #4
10004448:	d10d      	bne.n	10004466 <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
1000444a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000444c:	61fb      	str	r3, [r7, #28]
1000444e:	69fb      	ldr	r3, [r7, #28]
10004450:	f3bf 8f5b 	dmb	ish
10004454:	681b      	ldr	r3, [r3, #0]
10004456:	f3bf 8f5b 	dmb	ish
1000445a:	613b      	str	r3, [r7, #16]
1000445c:	693b      	ldr	r3, [r7, #16]
1000445e:	2200      	movs	r2, #0
10004460:	461c      	mov	r4, r3
10004462:	4615      	mov	r5, r2
10004464:	e005      	b.n	10004472 <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
10004466:	4b06      	ldr	r3, [pc, #24]	; (10004480 <metal_io_read+0xf8>)
10004468:	4a06      	ldr	r2, [pc, #24]	; (10004484 <metal_io_read+0xfc>)
1000446a:	21fe      	movs	r1, #254	; 0xfe
1000446c:	4806      	ldr	r0, [pc, #24]	; (10004488 <metal_io_read+0x100>)
1000446e:	f001 fe03 	bl	10006078 <__assert_func>
	return 0; /* quiet compiler */
}
10004472:	4622      	mov	r2, r4
10004474:	462b      	mov	r3, r5
10004476:	4610      	mov	r0, r2
10004478:	4619      	mov	r1, r3
1000447a:	3730      	adds	r7, #48	; 0x30
1000447c:	46bd      	mov	sp, r7
1000447e:	bdb0      	pop	{r4, r5, r7, pc}
10004480:	1000741c 	.word	0x1000741c
10004484:	1000762c 	.word	0x1000762c
10004488:	10007420 	.word	0x10007420

1000448c <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
1000448c:	b580      	push	{r7, lr}
1000448e:	b082      	sub	sp, #8
10004490:	af00      	add	r7, sp, #0
10004492:	6078      	str	r0, [r7, #4]
	return malloc(size);
10004494:	6878      	ldr	r0, [r7, #4]
10004496:	f001 fe0d 	bl	100060b4 <malloc>
1000449a:	4603      	mov	r3, r0
}
1000449c:	4618      	mov	r0, r3
1000449e:	3708      	adds	r7, #8
100044a0:	46bd      	mov	sp, r7
100044a2:	bd80      	pop	{r7, pc}

100044a4 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
100044a4:	b580      	push	{r7, lr}
100044a6:	b082      	sub	sp, #8
100044a8:	af00      	add	r7, sp, #0
100044aa:	6078      	str	r0, [r7, #4]
	free(ptr);
100044ac:	6878      	ldr	r0, [r7, #4]
100044ae:	f001 fe09 	bl	100060c4 <free>
}
100044b2:	bf00      	nop
100044b4:	3708      	adds	r7, #8
100044b6:	46bd      	mov	sp, r7
100044b8:	bd80      	pop	{r7, pc}

100044ba <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
100044ba:	b580      	push	{r7, lr}
100044bc:	b084      	sub	sp, #16
100044be:	af00      	add	r7, sp, #0
100044c0:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
100044c2:	687b      	ldr	r3, [r7, #4]
100044c4:	00db      	lsls	r3, r3, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
100044c6:	3334      	adds	r3, #52	; 0x34
100044c8:	60fb      	str	r3, [r7, #12]

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
100044ca:	68f8      	ldr	r0, [r7, #12]
100044cc:	f7ff ffde 	bl	1000448c <metal_allocate_memory>
100044d0:	60b8      	str	r0, [r7, #8]
	if (vqs) {
100044d2:	68bb      	ldr	r3, [r7, #8]
100044d4:	2b00      	cmp	r3, #0
100044d6:	d004      	beq.n	100044e2 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
100044d8:	68fa      	ldr	r2, [r7, #12]
100044da:	2100      	movs	r1, #0
100044dc:	68b8      	ldr	r0, [r7, #8]
100044de:	f001 ffbc 	bl	1000645a <memset>
	}

	return vqs;
100044e2:	68bb      	ldr	r3, [r7, #8]
}
100044e4:	4618      	mov	r0, r3
100044e6:	3710      	adds	r7, #16
100044e8:	46bd      	mov	sp, r7
100044ea:	bd80      	pop	{r7, pc}

100044ec <rproc_virtio_virtqueue_notify>:
#include <metal/cpu.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
100044ec:	b580      	push	{r7, lr}
100044ee:	b086      	sub	sp, #24
100044f0:	af00      	add	r7, sp, #0
100044f2:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
100044f4:	687b      	ldr	r3, [r7, #4]
100044f6:	891b      	ldrh	r3, [r3, #8]
100044f8:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
100044fa:	687b      	ldr	r3, [r7, #4]
100044fc:	681b      	ldr	r3, [r3, #0]
100044fe:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10004500:	693b      	ldr	r3, [r7, #16]
10004502:	3b10      	subs	r3, #16
10004504:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id < vdev->vrings_num);
10004506:	693b      	ldr	r3, [r7, #16]
10004508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000450a:	697a      	ldr	r2, [r7, #20]
1000450c:	429a      	cmp	r2, r3
1000450e:	d305      	bcc.n	1000451c <rproc_virtio_virtqueue_notify+0x30>
10004510:	4b0d      	ldr	r3, [pc, #52]	; (10004548 <rproc_virtio_virtqueue_notify+0x5c>)
10004512:	4a0e      	ldr	r2, [pc, #56]	; (1000454c <rproc_virtio_virtqueue_notify+0x60>)
10004514:	211c      	movs	r1, #28
10004516:	480e      	ldr	r0, [pc, #56]	; (10004550 <rproc_virtio_virtqueue_notify+0x64>)
10004518:	f001 fdae 	bl	10006078 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
1000451c:	693b      	ldr	r3, [r7, #16]
1000451e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
10004520:	697a      	ldr	r2, [r7, #20]
10004522:	4613      	mov	r3, r2
10004524:	005b      	lsls	r3, r3, #1
10004526:	4413      	add	r3, r2
10004528:	00db      	lsls	r3, r3, #3
1000452a:	440b      	add	r3, r1
1000452c:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
1000452e:	68fb      	ldr	r3, [r7, #12]
10004530:	68db      	ldr	r3, [r3, #12]
10004532:	68fa      	ldr	r2, [r7, #12]
10004534:	6810      	ldr	r0, [r2, #0]
10004536:	68ba      	ldr	r2, [r7, #8]
10004538:	6912      	ldr	r2, [r2, #16]
1000453a:	4611      	mov	r1, r2
1000453c:	4798      	blx	r3
}
1000453e:	bf00      	nop
10004540:	3718      	adds	r7, #24
10004542:	46bd      	mov	sp, r7
10004544:	bd80      	pop	{r7, pc}
10004546:	bf00      	nop
10004548:	10007478 	.word	0x10007478
1000454c:	1000760c 	.word	0x1000760c
10004550:	10007494 	.word	0x10007494

10004554 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
10004554:	b580      	push	{r7, lr}
10004556:	b086      	sub	sp, #24
10004558:	af00      	add	r7, sp, #0
1000455a:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000455c:	687b      	ldr	r3, [r7, #4]
1000455e:	3b10      	subs	r3, #16
10004560:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
10004562:	697b      	ldr	r3, [r7, #20]
10004564:	685b      	ldr	r3, [r3, #4]
10004566:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
10004568:	697b      	ldr	r3, [r7, #20]
1000456a:	689b      	ldr	r3, [r3, #8]
1000456c:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
1000456e:	693b      	ldr	r3, [r7, #16]
10004570:	3318      	adds	r3, #24
10004572:	4619      	mov	r1, r3
10004574:	68f8      	ldr	r0, [r7, #12]
10004576:	f7ff feed 	bl	10004354 <metal_io_virt_to_offset>
1000457a:	4601      	mov	r1, r0
1000457c:	2301      	movs	r3, #1
1000457e:	2205      	movs	r2, #5
10004580:	68f8      	ldr	r0, [r7, #12]
10004582:	f7ff ff01 	bl	10004388 <metal_io_read>
10004586:	4602      	mov	r2, r0
10004588:	460b      	mov	r3, r1
1000458a:	4613      	mov	r3, r2
1000458c:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
1000458e:	7afb      	ldrb	r3, [r7, #11]
}
10004590:	4618      	mov	r0, r3
10004592:	3718      	adds	r7, #24
10004594:	46bd      	mov	sp, r7
10004596:	bd80      	pop	{r7, pc}

10004598 <rproc_virtio_get_dfeatures>:
	rpvdev->notify(rpvdev->priv, vdev->notifyid);
}
#endif

static uint32_t rproc_virtio_get_dfeatures(struct virtio_device *vdev)
{
10004598:	b580      	push	{r7, lr}
1000459a:	b086      	sub	sp, #24
1000459c:	af00      	add	r7, sp, #0
1000459e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
100045a0:	687b      	ldr	r3, [r7, #4]
100045a2:	3b10      	subs	r3, #16
100045a4:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
100045a6:	697b      	ldr	r3, [r7, #20]
100045a8:	685b      	ldr	r3, [r3, #4]
100045aa:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
100045ac:	697b      	ldr	r3, [r7, #20]
100045ae:	689b      	ldr	r3, [r3, #8]
100045b0:	60fb      	str	r3, [r7, #12]
	features = metal_io_read32(io,
100045b2:	693b      	ldr	r3, [r7, #16]
100045b4:	330c      	adds	r3, #12
100045b6:	4619      	mov	r1, r3
100045b8:	68f8      	ldr	r0, [r7, #12]
100045ba:	f7ff fecb 	bl	10004354 <metal_io_virt_to_offset>
100045be:	4601      	mov	r1, r0
100045c0:	2304      	movs	r3, #4
100045c2:	2205      	movs	r2, #5
100045c4:	68f8      	ldr	r0, [r7, #12]
100045c6:	f7ff fedf 	bl	10004388 <metal_io_read>
100045ca:	4602      	mov	r2, r0
100045cc:	460b      	mov	r3, r1
100045ce:	4613      	mov	r3, r2
100045d0:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
100045d2:	68bb      	ldr	r3, [r7, #8]
}
100045d4:	4618      	mov	r0, r3
100045d6:	3718      	adds	r7, #24
100045d8:	46bd      	mov	sp, r7
100045da:	bd80      	pop	{r7, pc}

100045dc <rproc_virtio_get_features>:

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
100045dc:	b580      	push	{r7, lr}
100045de:	b088      	sub	sp, #32
100045e0:	af00      	add	r7, sp, #0
100045e2:	6078      	str	r0, [r7, #4]
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t gfeatures;
	uint32_t dfeatures;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
100045e4:	687b      	ldr	r3, [r7, #4]
100045e6:	3b10      	subs	r3, #16
100045e8:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
100045ea:	69fb      	ldr	r3, [r7, #28]
100045ec:	685b      	ldr	r3, [r3, #4]
100045ee:	61bb      	str	r3, [r7, #24]
	io = rpvdev->vdev_rsc_io;
100045f0:	69fb      	ldr	r3, [r7, #28]
100045f2:	689b      	ldr	r3, [r3, #8]
100045f4:	617b      	str	r3, [r7, #20]
	gfeatures = metal_io_read32(io,
100045f6:	69bb      	ldr	r3, [r7, #24]
100045f8:	3310      	adds	r3, #16
100045fa:	4619      	mov	r1, r3
100045fc:	6978      	ldr	r0, [r7, #20]
100045fe:	f7ff fea9 	bl	10004354 <metal_io_virt_to_offset>
10004602:	4601      	mov	r1, r0
10004604:	2304      	movs	r3, #4
10004606:	2205      	movs	r2, #5
10004608:	6978      	ldr	r0, [r7, #20]
1000460a:	f7ff febd 	bl	10004388 <metal_io_read>
1000460e:	4602      	mov	r2, r0
10004610:	460b      	mov	r3, r1
10004612:	4613      	mov	r3, r2
10004614:	613b      	str	r3, [r7, #16]
			metal_io_virt_to_offset(io, &vdev_rsc->gfeatures));
	dfeatures = rproc_virtio_get_dfeatures(vdev);
10004616:	6878      	ldr	r0, [r7, #4]
10004618:	f7ff ffbe 	bl	10004598 <rproc_virtio_get_dfeatures>
1000461c:	60f8      	str	r0, [r7, #12]

	return dfeatures & gfeatures;
1000461e:	68fa      	ldr	r2, [r7, #12]
10004620:	693b      	ldr	r3, [r7, #16]
10004622:	4013      	ands	r3, r2
}
10004624:	4618      	mov	r0, r3
10004626:	3720      	adds	r7, #32
10004628:	46bd      	mov	sp, r7
1000462a:	bd80      	pop	{r7, pc}

1000462c <rproc_virtio_read_config>:
}
#endif

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
1000462c:	b580      	push	{r7, lr}
1000462e:	b088      	sub	sp, #32
10004630:	af00      	add	r7, sp, #0
10004632:	60f8      	str	r0, [r7, #12]
10004634:	60b9      	str	r1, [r7, #8]
10004636:	607a      	str	r2, [r7, #4]
10004638:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char *config;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000463a:	68fb      	ldr	r3, [r7, #12]
1000463c:	3b10      	subs	r3, #16
1000463e:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
10004640:	69fb      	ldr	r3, [r7, #28]
10004642:	685b      	ldr	r3, [r3, #4]
10004644:	61bb      	str	r3, [r7, #24]
	config = (char *)(&vdev_rsc->vring[vdev->vrings_num]);
10004646:	68fb      	ldr	r3, [r7, #12]
10004648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
1000464a:	4613      	mov	r3, r2
1000464c:	009b      	lsls	r3, r3, #2
1000464e:	4413      	add	r3, r2
10004650:	009b      	lsls	r3, r3, #2
10004652:	3318      	adds	r3, #24
10004654:	69ba      	ldr	r2, [r7, #24]
10004656:	4413      	add	r3, r2
10004658:	3304      	adds	r3, #4
1000465a:	617b      	str	r3, [r7, #20]
	io = rpvdev->vdev_rsc_io;
1000465c:	69fb      	ldr	r3, [r7, #28]
1000465e:	689b      	ldr	r3, [r3, #8]
10004660:	613b      	str	r3, [r7, #16]

	if (offset + length <= vdev_rsc->config_len)
10004662:	683a      	ldr	r2, [r7, #0]
10004664:	68bb      	ldr	r3, [r7, #8]
10004666:	441a      	add	r2, r3
10004668:	69bb      	ldr	r3, [r7, #24]
1000466a:	695b      	ldr	r3, [r3, #20]
1000466c:	429a      	cmp	r2, r3
1000466e:	d80c      	bhi.n	1000468a <rproc_virtio_read_config+0x5e>
		metal_io_block_read(io,
				metal_io_virt_to_offset(io, config + offset),
10004670:	697a      	ldr	r2, [r7, #20]
10004672:	68bb      	ldr	r3, [r7, #8]
10004674:	4413      	add	r3, r2
		metal_io_block_read(io,
10004676:	4619      	mov	r1, r3
10004678:	6938      	ldr	r0, [r7, #16]
1000467a:	f7ff fe6b 	bl	10004354 <metal_io_virt_to_offset>
1000467e:	4601      	mov	r1, r0
10004680:	683b      	ldr	r3, [r7, #0]
10004682:	687a      	ldr	r2, [r7, #4]
10004684:	6938      	ldr	r0, [r7, #16]
10004686:	f7ff fcbc 	bl	10004002 <metal_io_block_read>
				dst, length);
}
1000468a:	bf00      	nop
1000468c:	3720      	adds	r7, #32
1000468e:	46bd      	mov	sp, r7
10004690:	bd80      	pop	{r7, pc}
	...

10004694 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
10004694:	b580      	push	{r7, lr}
10004696:	b08e      	sub	sp, #56	; 0x38
10004698:	af00      	add	r7, sp, #0
1000469a:	60f8      	str	r0, [r7, #12]
1000469c:	60b9      	str	r1, [r7, #8]
1000469e:	607a      	str	r2, [r7, #4]
100046a0:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
100046a2:	687b      	ldr	r3, [r7, #4]
100046a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
100046a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100046a8:	7e5b      	ldrb	r3, [r3, #25]
100046aa:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
100046ac:	2048      	movs	r0, #72	; 0x48
100046ae:	f7ff feed 	bl	1000448c <metal_allocate_memory>
100046b2:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
100046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100046b6:	2b00      	cmp	r3, #0
100046b8:	d101      	bne.n	100046be <rproc_virtio_create_vdev+0x2a>
		return NULL;
100046ba:	2300      	movs	r3, #0
100046bc:	e092      	b.n	100047e4 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
100046be:	6aba      	ldr	r2, [r7, #40]	; 0x28
100046c0:	4613      	mov	r3, r2
100046c2:	005b      	lsls	r3, r3, #1
100046c4:	4413      	add	r3, r2
100046c6:	00db      	lsls	r3, r3, #3
100046c8:	4618      	mov	r0, r3
100046ca:	f7ff fedf 	bl	1000448c <metal_allocate_memory>
100046ce:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
100046d0:	6a3b      	ldr	r3, [r7, #32]
100046d2:	2b00      	cmp	r3, #0
100046d4:	f000 8081 	beq.w	100047da <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
100046d8:	2248      	movs	r2, #72	; 0x48
100046da:	2100      	movs	r1, #0
100046dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
100046de:	f001 febc 	bl	1000645a <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
100046e2:	2218      	movs	r2, #24
100046e4:	2100      	movs	r1, #0
100046e6:	6a38      	ldr	r0, [r7, #32]
100046e8:	f001 feb7 	bl	1000645a <memset>
	vdev = &rpvdev->vdev;
100046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100046ee:	3310      	adds	r3, #16
100046f0:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
100046f2:	2300      	movs	r3, #0
100046f4:	637b      	str	r3, [r7, #52]	; 0x34
100046f6:	e025      	b.n	10004744 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
100046f8:	2300      	movs	r3, #0
100046fa:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
100046fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
100046fe:	4613      	mov	r3, r2
10004700:	009b      	lsls	r3, r3, #2
10004702:	4413      	add	r3, r2
10004704:	009b      	lsls	r3, r3, #2
10004706:	3318      	adds	r3, #24
10004708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1000470a:	4413      	add	r3, r2
1000470c:	3304      	adds	r3, #4
1000470e:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
10004710:	68fb      	ldr	r3, [r7, #12]
10004712:	2b00      	cmp	r3, #0
10004714:	d102      	bne.n	1000471c <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
10004716:	69bb      	ldr	r3, [r7, #24]
10004718:	689b      	ldr	r3, [r3, #8]
1000471a:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
1000471c:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000471e:	f7ff fecc 	bl	100044ba <virtqueue_allocate>
10004722:	6178      	str	r0, [r7, #20]
		if (!vq)
10004724:	697b      	ldr	r3, [r7, #20]
10004726:	2b00      	cmp	r3, #0
10004728:	d031      	beq.n	1000478e <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
1000472a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000472c:	4613      	mov	r3, r2
1000472e:	005b      	lsls	r3, r3, #1
10004730:	4413      	add	r3, r2
10004732:	00db      	lsls	r3, r3, #3
10004734:	461a      	mov	r2, r3
10004736:	6a3b      	ldr	r3, [r7, #32]
10004738:	4413      	add	r3, r2
1000473a:	697a      	ldr	r2, [r7, #20]
1000473c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
1000473e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10004740:	3301      	adds	r3, #1
10004742:	637b      	str	r3, [r7, #52]	; 0x34
10004744:	6b7a      	ldr	r2, [r7, #52]	; 0x34
10004746:	6abb      	ldr	r3, [r7, #40]	; 0x28
10004748:	429a      	cmp	r2, r3
1000474a:	d3d5      	bcc.n	100046f8 <rproc_virtio_create_vdev+0x64>
	}

	rpvdev->notify = notify;
1000474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000474e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
10004750:	60da      	str	r2, [r3, #12]
	rpvdev->priv = priv;
10004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10004754:	6c3a      	ldr	r2, [r7, #64]	; 0x40
10004756:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
10004758:	69fb      	ldr	r3, [r7, #28]
1000475a:	6a3a      	ldr	r2, [r7, #32]
1000475c:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
1000475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10004760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10004762:	605a      	str	r2, [r3, #4]
	rpvdev->vdev_rsc_io = rsc_io;
10004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10004766:	683a      	ldr	r2, [r7, #0]
10004768:	609a      	str	r2, [r3, #8]

	vdev->notifyid = notifyid;
1000476a:	69fb      	ldr	r3, [r7, #28]
1000476c:	68ba      	ldr	r2, [r7, #8]
1000476e:	601a      	str	r2, [r3, #0]
	vdev->role = role;
10004770:	69fb      	ldr	r3, [r7, #28]
10004772:	68fa      	ldr	r2, [r7, #12]
10004774:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
10004776:	69fb      	ldr	r3, [r7, #28]
10004778:	6cba      	ldr	r2, [r7, #72]	; 0x48
1000477a:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
1000477c:	69fb      	ldr	r3, [r7, #28]
1000477e:	6aba      	ldr	r2, [r7, #40]	; 0x28
10004780:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
10004782:	69fb      	ldr	r3, [r7, #28]
10004784:	4a19      	ldr	r2, [pc, #100]	; (100047ec <rproc_virtio_create_vdev+0x158>)
10004786:	621a      	str	r2, [r3, #32]
		/* Assume the master support all slave features */
		rproc_virtio_negotiate_features(vdev, dfeatures);
	}
#endif

	return &rpvdev->vdev;
10004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000478a:	3310      	adds	r3, #16
1000478c:	e02a      	b.n	100047e4 <rproc_virtio_create_vdev+0x150>
			goto err1;
1000478e:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
10004790:	2300      	movs	r3, #0
10004792:	637b      	str	r3, [r7, #52]	; 0x34
10004794:	e019      	b.n	100047ca <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
10004796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
10004798:	4613      	mov	r3, r2
1000479a:	005b      	lsls	r3, r3, #1
1000479c:	4413      	add	r3, r2
1000479e:	00db      	lsls	r3, r3, #3
100047a0:	461a      	mov	r2, r3
100047a2:	6a3b      	ldr	r3, [r7, #32]
100047a4:	4413      	add	r3, r2
100047a6:	681b      	ldr	r3, [r3, #0]
100047a8:	2b00      	cmp	r3, #0
100047aa:	d00b      	beq.n	100047c4 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
100047ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
100047ae:	4613      	mov	r3, r2
100047b0:	005b      	lsls	r3, r3, #1
100047b2:	4413      	add	r3, r2
100047b4:	00db      	lsls	r3, r3, #3
100047b6:	461a      	mov	r2, r3
100047b8:	6a3b      	ldr	r3, [r7, #32]
100047ba:	4413      	add	r3, r2
100047bc:	681b      	ldr	r3, [r3, #0]
100047be:	4618      	mov	r0, r3
100047c0:	f7ff fe70 	bl	100044a4 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
100047c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100047c6:	3301      	adds	r3, #1
100047c8:	637b      	str	r3, [r7, #52]	; 0x34
100047ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
100047cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
100047ce:	429a      	cmp	r2, r3
100047d0:	d3e1      	bcc.n	10004796 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
100047d2:	6a38      	ldr	r0, [r7, #32]
100047d4:	f7ff fe66 	bl	100044a4 <metal_free_memory>
100047d8:	e000      	b.n	100047dc <rproc_virtio_create_vdev+0x148>
		goto err0;
100047da:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
100047dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
100047de:	f7ff fe61 	bl	100044a4 <metal_free_memory>
	return NULL;
100047e2:	2300      	movs	r3, #0
}
100047e4:	4618      	mov	r0, r3
100047e6:	3738      	adds	r7, #56	; 0x38
100047e8:	46bd      	mov	sp, r7
100047ea:	bd80      	pop	{r7, pc}
100047ec:	100075e8 	.word	0x100075e8

100047f0 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
100047f0:	b480      	push	{r7}
100047f2:	b087      	sub	sp, #28
100047f4:	af00      	add	r7, sp, #0
100047f6:	60f8      	str	r0, [r7, #12]
100047f8:	60b9      	str	r1, [r7, #8]
100047fa:	607a      	str	r2, [r7, #4]
100047fc:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
100047fe:	68fb      	ldr	r3, [r7, #12]
10004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004802:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
10004804:	68ba      	ldr	r2, [r7, #8]
10004806:	697b      	ldr	r3, [r7, #20]
10004808:	429a      	cmp	r2, r3
1000480a:	d302      	bcc.n	10004812 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
1000480c:	f06f 0301 	mvn.w	r3, #1
10004810:	e019      	b.n	10004846 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
10004812:	68fb      	ldr	r3, [r7, #12]
10004814:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
10004816:	68ba      	ldr	r2, [r7, #8]
10004818:	4613      	mov	r3, r2
1000481a:	005b      	lsls	r3, r3, #1
1000481c:	4413      	add	r3, r2
1000481e:	00db      	lsls	r3, r3, #3
10004820:	440b      	add	r3, r1
10004822:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
10004824:	693b      	ldr	r3, [r7, #16]
10004826:	6a3a      	ldr	r2, [r7, #32]
10004828:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
1000482a:	693b      	ldr	r3, [r7, #16]
1000482c:	687a      	ldr	r2, [r7, #4]
1000482e:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
10004830:	693b      	ldr	r3, [r7, #16]
10004832:	683a      	ldr	r2, [r7, #0]
10004834:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
10004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10004838:	b29a      	uxth	r2, r3
1000483a:	693b      	ldr	r3, [r7, #16]
1000483c:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
1000483e:	693b      	ldr	r3, [r7, #16]
10004840:	6aba      	ldr	r2, [r7, #40]	; 0x28
10004842:	609a      	str	r2, [r3, #8]

	return 0;
10004844:	2300      	movs	r3, #0
}
10004846:	4618      	mov	r0, r3
10004848:	371c      	adds	r7, #28
1000484a:	46bd      	mov	sp, r7
1000484c:	f85d 7b04 	ldr.w	r7, [sp], #4
10004850:	4770      	bx	lr

10004852 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
10004852:	b580      	push	{r7, lr}
10004854:	b086      	sub	sp, #24
10004856:	af00      	add	r7, sp, #0
10004858:	6078      	str	r0, [r7, #4]
1000485a:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
1000485c:	687b      	ldr	r3, [r7, #4]
1000485e:	2b00      	cmp	r3, #0
10004860:	d102      	bne.n	10004868 <rproc_virtio_notified+0x16>
		return -RPROC_EINVAL;
10004862:	f06f 0301 	mvn.w	r3, #1
10004866:	e02c      	b.n	100048c2 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->notifyid == notifyid)
10004868:	687b      	ldr	r3, [r7, #4]
1000486a:	681b      	ldr	r3, [r3, #0]
1000486c:	683a      	ldr	r2, [r7, #0]
1000486e:	429a      	cmp	r2, r3
10004870:	d101      	bne.n	10004876 <rproc_virtio_notified+0x24>
		return 0;
10004872:	2300      	movs	r3, #0
10004874:	e025      	b.n	100048c2 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
10004876:	687b      	ldr	r3, [r7, #4]
10004878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000487a:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
1000487c:	2300      	movs	r3, #0
1000487e:	617b      	str	r3, [r7, #20]
10004880:	e01a      	b.n	100048b8 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
10004882:	687b      	ldr	r3, [r7, #4]
10004884:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
10004886:	697a      	ldr	r2, [r7, #20]
10004888:	4613      	mov	r3, r2
1000488a:	005b      	lsls	r3, r3, #1
1000488c:	4413      	add	r3, r2
1000488e:	00db      	lsls	r3, r3, #3
10004890:	440b      	add	r3, r1
10004892:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
10004894:	68fb      	ldr	r3, [r7, #12]
10004896:	691b      	ldr	r3, [r3, #16]
10004898:	683a      	ldr	r2, [r7, #0]
1000489a:	429a      	cmp	r2, r3
1000489c:	d003      	beq.n	100048a6 <rproc_virtio_notified+0x54>
1000489e:	683b      	ldr	r3, [r7, #0]
100048a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
100048a4:	d105      	bne.n	100048b2 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
100048a6:	68fb      	ldr	r3, [r7, #12]
100048a8:	681b      	ldr	r3, [r3, #0]
100048aa:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
100048ac:	68b8      	ldr	r0, [r7, #8]
100048ae:	f001 fae9 	bl	10005e84 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
100048b2:	697b      	ldr	r3, [r7, #20]
100048b4:	3301      	adds	r3, #1
100048b6:	617b      	str	r3, [r7, #20]
100048b8:	697a      	ldr	r2, [r7, #20]
100048ba:	693b      	ldr	r3, [r7, #16]
100048bc:	429a      	cmp	r2, r3
100048be:	d3e0      	bcc.n	10004882 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
100048c0:	2300      	movs	r3, #0
}
100048c2:	4618      	mov	r0, r3
100048c4:	3718      	adds	r7, #24
100048c6:	46bd      	mov	sp, r7
100048c8:	bd80      	pop	{r7, pc}

100048ca <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
100048ca:	b580      	push	{r7, lr}
100048cc:	b084      	sub	sp, #16
100048ce:	af00      	add	r7, sp, #0
100048d0:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
100048d2:	687b      	ldr	r3, [r7, #4]
100048d4:	699b      	ldr	r3, [r3, #24]
100048d6:	2b00      	cmp	r3, #0
100048d8:	d00a      	beq.n	100048f0 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
100048da:	6878      	ldr	r0, [r7, #4]
100048dc:	f7ff fe3a 	bl	10004554 <rproc_virtio_get_status>
100048e0:	4603      	mov	r3, r0
100048e2:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
100048e4:	7bfb      	ldrb	r3, [r7, #15]
100048e6:	f003 0304 	and.w	r3, r3, #4
100048ea:	2b00      	cmp	r3, #0
100048ec:	d102      	bne.n	100048f4 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
100048ee:	e7f4      	b.n	100048da <rproc_virtio_wait_remote_ready+0x10>
		return;
100048f0:	bf00      	nop
100048f2:	e000      	b.n	100048f6 <rproc_virtio_wait_remote_ready+0x2c>
			return;
100048f4:	bf00      	nop
		metal_cpu_yield();
	}
}
100048f6:	3710      	adds	r7, #16
100048f8:	46bd      	mov	sp, r7
100048fa:	bd80      	pop	{r7, pc}

100048fc <__metal_mutex_acquire>:
		return 0; /* not acquired */
	}
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
100048fc:	b490      	push	{r4, r7}
100048fe:	b086      	sub	sp, #24
10004900:	af00      	add	r7, sp, #0
10004902:	6078      	str	r0, [r7, #4]
	int unlocked = METAL_MUTEX_UNLOCKED;
10004904:	2300      	movs	r3, #0
10004906:	613b      	str	r3, [r7, #16]

	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
10004908:	bf00      	nop
1000490a:	687b      	ldr	r3, [r7, #4]
1000490c:	617b      	str	r3, [r7, #20]
1000490e:	2301      	movs	r3, #1
10004910:	60fb      	str	r3, [r7, #12]
10004912:	68fb      	ldr	r3, [r7, #12]
10004914:	461c      	mov	r4, r3
10004916:	697a      	ldr	r2, [r7, #20]
10004918:	f107 0310 	add.w	r3, r7, #16
1000491c:	6818      	ldr	r0, [r3, #0]
1000491e:	f3bf 8f5b 	dmb	ish
10004922:	e852 1f00 	ldrex	r1, [r2]
10004926:	4281      	cmp	r1, r0
10004928:	d103      	bne.n	10004932 <__metal_mutex_acquire+0x36>
1000492a:	e842 4c00 	strex	ip, r4, [r2]
1000492e:	f1bc 0f00 	cmp.w	ip, #0
10004932:	f3bf 8f5b 	dmb	ish
10004936:	bf0c      	ite	eq
10004938:	2201      	moveq	r2, #1
1000493a:	2200      	movne	r2, #0
1000493c:	2a00      	cmp	r2, #0
1000493e:	d100      	bne.n	10004942 <__metal_mutex_acquire+0x46>
10004940:	6019      	str	r1, [r3, #0]
10004942:	4613      	mov	r3, r2
10004944:	f083 0301 	eor.w	r3, r3, #1
10004948:	b2db      	uxtb	r3, r3
1000494a:	2b00      	cmp	r3, #0
1000494c:	d1dd      	bne.n	1000490a <__metal_mutex_acquire+0xe>
					     METAL_MUTEX_LOCKED)) {
		;
	}
}
1000494e:	bf00      	nop
10004950:	bf00      	nop
10004952:	3718      	adds	r7, #24
10004954:	46bd      	mov	sp, r7
10004956:	bc90      	pop	{r4, r7}
10004958:	4770      	bx	lr

1000495a <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
1000495a:	b480      	push	{r7}
1000495c:	b085      	sub	sp, #20
1000495e:	af00      	add	r7, sp, #0
10004960:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
10004962:	687b      	ldr	r3, [r7, #4]
10004964:	60fb      	str	r3, [r7, #12]
10004966:	2300      	movs	r3, #0
10004968:	60bb      	str	r3, [r7, #8]
1000496a:	68bb      	ldr	r3, [r7, #8]
1000496c:	461a      	mov	r2, r3
1000496e:	68fb      	ldr	r3, [r7, #12]
10004970:	f3bf 8f5b 	dmb	ish
10004974:	601a      	str	r2, [r3, #0]
10004976:	f3bf 8f5b 	dmb	ish
}
1000497a:	bf00      	nop
1000497c:	3714      	adds	r7, #20
1000497e:	46bd      	mov	sp, r7
10004980:	f85d 7b04 	ldr.w	r7, [sp], #4
10004984:	4770      	bx	lr

10004986 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
10004986:	b580      	push	{r7, lr}
10004988:	b082      	sub	sp, #8
1000498a:	af00      	add	r7, sp, #0
1000498c:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
1000498e:	6878      	ldr	r0, [r7, #4]
10004990:	f7ff ffb4 	bl	100048fc <__metal_mutex_acquire>
}
10004994:	bf00      	nop
10004996:	3708      	adds	r7, #8
10004998:	46bd      	mov	sp, r7
1000499a:	bd80      	pop	{r7, pc}

1000499c <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
1000499c:	b580      	push	{r7, lr}
1000499e:	b082      	sub	sp, #8
100049a0:	af00      	add	r7, sp, #0
100049a2:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
100049a4:	6878      	ldr	r0, [r7, #4]
100049a6:	f7ff ffd8 	bl	1000495a <__metal_mutex_release>
}
100049aa:	bf00      	nop
100049ac:	3708      	adds	r7, #8
100049ae:	46bd      	mov	sp, r7
100049b0:	bd80      	pop	{r7, pc}

100049b2 <metal_list_add_before>:
{
100049b2:	b480      	push	{r7}
100049b4:	b083      	sub	sp, #12
100049b6:	af00      	add	r7, sp, #0
100049b8:	6078      	str	r0, [r7, #4]
100049ba:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
100049bc:	687b      	ldr	r3, [r7, #4]
100049be:	685a      	ldr	r2, [r3, #4]
100049c0:	683b      	ldr	r3, [r7, #0]
100049c2:	605a      	str	r2, [r3, #4]
	new_node->next = node;
100049c4:	683b      	ldr	r3, [r7, #0]
100049c6:	687a      	ldr	r2, [r7, #4]
100049c8:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
100049ca:	683b      	ldr	r3, [r7, #0]
100049cc:	681b      	ldr	r3, [r3, #0]
100049ce:	683a      	ldr	r2, [r7, #0]
100049d0:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
100049d2:	683b      	ldr	r3, [r7, #0]
100049d4:	685b      	ldr	r3, [r3, #4]
100049d6:	683a      	ldr	r2, [r7, #0]
100049d8:	601a      	str	r2, [r3, #0]
}
100049da:	bf00      	nop
100049dc:	370c      	adds	r7, #12
100049de:	46bd      	mov	sp, r7
100049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
100049e4:	4770      	bx	lr

100049e6 <metal_list_add_tail>:
{
100049e6:	b580      	push	{r7, lr}
100049e8:	b082      	sub	sp, #8
100049ea:	af00      	add	r7, sp, #0
100049ec:	6078      	str	r0, [r7, #4]
100049ee:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
100049f0:	6839      	ldr	r1, [r7, #0]
100049f2:	6878      	ldr	r0, [r7, #4]
100049f4:	f7ff ffdd 	bl	100049b2 <metal_list_add_before>
}
100049f8:	bf00      	nop
100049fa:	3708      	adds	r7, #8
100049fc:	46bd      	mov	sp, r7
100049fe:	bd80      	pop	{r7, pc}

10004a00 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
10004a00:	b480      	push	{r7}
10004a02:	b083      	sub	sp, #12
10004a04:	af00      	add	r7, sp, #0
10004a06:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
10004a08:	687b      	ldr	r3, [r7, #4]
10004a0a:	681b      	ldr	r3, [r3, #0]
10004a0c:	687a      	ldr	r2, [r7, #4]
10004a0e:	6852      	ldr	r2, [r2, #4]
10004a10:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
10004a12:	687b      	ldr	r3, [r7, #4]
10004a14:	685b      	ldr	r3, [r3, #4]
10004a16:	687a      	ldr	r2, [r7, #4]
10004a18:	6812      	ldr	r2, [r2, #0]
10004a1a:	601a      	str	r2, [r3, #0]
	node->prev = node;
10004a1c:	687b      	ldr	r3, [r7, #4]
10004a1e:	687a      	ldr	r2, [r7, #4]
10004a20:	605a      	str	r2, [r3, #4]
	node->next = node;
10004a22:	687b      	ldr	r3, [r7, #4]
10004a24:	687a      	ldr	r2, [r7, #4]
10004a26:	601a      	str	r2, [r3, #0]
}
10004a28:	bf00      	nop
10004a2a:	370c      	adds	r7, #12
10004a2c:	46bd      	mov	sp, r7
10004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
10004a32:	4770      	bx	lr

10004a34 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
10004a34:	b480      	push	{r7}
10004a36:	b083      	sub	sp, #12
10004a38:	af00      	add	r7, sp, #0
10004a3a:	6078      	str	r0, [r7, #4]
10004a3c:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
10004a3e:	683b      	ldr	r3, [r7, #0]
10004a40:	095b      	lsrs	r3, r3, #5
10004a42:	009a      	lsls	r2, r3, #2
10004a44:	6879      	ldr	r1, [r7, #4]
10004a46:	440a      	add	r2, r1
10004a48:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
10004a4a:	683a      	ldr	r2, [r7, #0]
10004a4c:	f002 021f 	and.w	r2, r2, #31
10004a50:	2001      	movs	r0, #1
10004a52:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
10004a56:	009b      	lsls	r3, r3, #2
10004a58:	6878      	ldr	r0, [r7, #4]
10004a5a:	4403      	add	r3, r0
10004a5c:	430a      	orrs	r2, r1
10004a5e:	601a      	str	r2, [r3, #0]
}
10004a60:	bf00      	nop
10004a62:	370c      	adds	r7, #12
10004a64:	46bd      	mov	sp, r7
10004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
10004a6a:	4770      	bx	lr

10004a6c <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
10004a6c:	b480      	push	{r7}
10004a6e:	b083      	sub	sp, #12
10004a70:	af00      	add	r7, sp, #0
10004a72:	6078      	str	r0, [r7, #4]
10004a74:	6039      	str	r1, [r7, #0]
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
10004a76:	683b      	ldr	r3, [r7, #0]
10004a78:	095b      	lsrs	r3, r3, #5
10004a7a:	009b      	lsls	r3, r3, #2
10004a7c:	687a      	ldr	r2, [r7, #4]
10004a7e:	4413      	add	r3, r2
10004a80:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
10004a82:	683b      	ldr	r3, [r7, #0]
10004a84:	f003 031f 	and.w	r3, r3, #31
10004a88:	fa22 f303 	lsr.w	r3, r2, r3
10004a8c:	f003 0301 	and.w	r3, r3, #1
10004a90:	2b00      	cmp	r3, #0
10004a92:	bf14      	ite	ne
10004a94:	2301      	movne	r3, #1
10004a96:	2300      	moveq	r3, #0
10004a98:	b2db      	uxtb	r3, r3
}
10004a9a:	4618      	mov	r0, r3
10004a9c:	370c      	adds	r7, #12
10004a9e:	46bd      	mov	sp, r7
10004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
10004aa4:	4770      	bx	lr

10004aa6 <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
10004aa6:	b480      	push	{r7}
10004aa8:	b083      	sub	sp, #12
10004aaa:	af00      	add	r7, sp, #0
10004aac:	6078      	str	r0, [r7, #4]
10004aae:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
10004ab0:	683b      	ldr	r3, [r7, #0]
10004ab2:	095b      	lsrs	r3, r3, #5
10004ab4:	009a      	lsls	r2, r3, #2
10004ab6:	6879      	ldr	r1, [r7, #4]
10004ab8:	440a      	add	r2, r1
10004aba:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
10004abc:	683a      	ldr	r2, [r7, #0]
10004abe:	f002 021f 	and.w	r2, r2, #31
10004ac2:	2001      	movs	r0, #1
10004ac4:	fa00 f202 	lsl.w	r2, r0, r2
10004ac8:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
10004aca:	009b      	lsls	r3, r3, #2
10004acc:	6878      	ldr	r0, [r7, #4]
10004ace:	4403      	add	r3, r0
10004ad0:	400a      	ands	r2, r1
10004ad2:	601a      	str	r2, [r3, #0]
}
10004ad4:	bf00      	nop
10004ad6:	370c      	adds	r7, #12
10004ad8:	46bd      	mov	sp, r7
10004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
10004ade:	4770      	bx	lr

10004ae0 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
10004ae0:	b580      	push	{r7, lr}
10004ae2:	b082      	sub	sp, #8
10004ae4:	af00      	add	r7, sp, #0
10004ae6:	6078      	str	r0, [r7, #4]
10004ae8:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
10004aea:	6839      	ldr	r1, [r7, #0]
10004aec:	6878      	ldr	r0, [r7, #4]
10004aee:	f7ff ffbd 	bl	10004a6c <metal_bitmap_is_bit_set>
10004af2:	4603      	mov	r3, r0
10004af4:	2b00      	cmp	r3, #0
10004af6:	bf0c      	ite	eq
10004af8:	2301      	moveq	r3, #1
10004afa:	2300      	movne	r3, #0
10004afc:	b2db      	uxtb	r3, r3
}
10004afe:	4618      	mov	r0, r3
10004b00:	3708      	adds	r7, #8
10004b02:	46bd      	mov	sp, r7
10004b04:	bd80      	pop	{r7, pc}

10004b06 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit + 1), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
10004b06:	b580      	push	{r7, lr}
10004b08:	b086      	sub	sp, #24
10004b0a:	af00      	add	r7, sp, #0
10004b0c:	60f8      	str	r0, [r7, #12]
10004b0e:	60b9      	str	r1, [r7, #8]
10004b10:	607a      	str	r2, [r7, #4]
	unsigned int bit;

	for (bit = start;
10004b12:	68bb      	ldr	r3, [r7, #8]
10004b14:	617b      	str	r3, [r7, #20]
10004b16:	e002      	b.n	10004b1e <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit++)
10004b18:	697b      	ldr	r3, [r7, #20]
10004b1a:	3301      	adds	r3, #1
10004b1c:	617b      	str	r3, [r7, #20]
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
10004b1e:	697a      	ldr	r2, [r7, #20]
10004b20:	687b      	ldr	r3, [r7, #4]
10004b22:	429a      	cmp	r2, r3
10004b24:	d207      	bcs.n	10004b36 <metal_bitmap_next_clear_bit+0x30>
10004b26:	697b      	ldr	r3, [r7, #20]
10004b28:	4619      	mov	r1, r3
10004b2a:	68f8      	ldr	r0, [r7, #12]
10004b2c:	f7ff ffd8 	bl	10004ae0 <metal_bitmap_is_bit_clear>
10004b30:	4603      	mov	r3, r0
10004b32:	2b00      	cmp	r3, #0
10004b34:	d0f0      	beq.n	10004b18 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
10004b36:	697b      	ldr	r3, [r7, #20]
}
10004b38:	4618      	mov	r0, r3
10004b3a:	3718      	adds	r7, #24
10004b3c:	46bd      	mov	sp, r7
10004b3e:	bd80      	pop	{r7, pc}

10004b40 <rpmsg_initialize_ept>:
static inline void rpmsg_initialize_ept(struct rpmsg_endpoint *ept,
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
10004b40:	b580      	push	{r7, lr}
10004b42:	b084      	sub	sp, #16
10004b44:	af00      	add	r7, sp, #0
10004b46:	60f8      	str	r0, [r7, #12]
10004b48:	60b9      	str	r1, [r7, #8]
10004b4a:	607a      	str	r2, [r7, #4]
10004b4c:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
10004b4e:	68f8      	ldr	r0, [r7, #12]
10004b50:	68bb      	ldr	r3, [r7, #8]
10004b52:	2b00      	cmp	r3, #0
10004b54:	d001      	beq.n	10004b5a <rpmsg_initialize_ept+0x1a>
10004b56:	68bb      	ldr	r3, [r7, #8]
10004b58:	e000      	b.n	10004b5c <rpmsg_initialize_ept+0x1c>
10004b5a:	4b0a      	ldr	r3, [pc, #40]	; (10004b84 <rpmsg_initialize_ept+0x44>)
10004b5c:	2220      	movs	r2, #32
10004b5e:	4619      	mov	r1, r3
10004b60:	f001 fc95 	bl	1000648e <strncpy>
	ept->addr = src;
10004b64:	68fb      	ldr	r3, [r7, #12]
10004b66:	687a      	ldr	r2, [r7, #4]
10004b68:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
10004b6a:	68fb      	ldr	r3, [r7, #12]
10004b6c:	683a      	ldr	r2, [r7, #0]
10004b6e:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
10004b70:	68fb      	ldr	r3, [r7, #12]
10004b72:	69ba      	ldr	r2, [r7, #24]
10004b74:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
10004b76:	68fb      	ldr	r3, [r7, #12]
10004b78:	69fa      	ldr	r2, [r7, #28]
10004b7a:	631a      	str	r2, [r3, #48]	; 0x30
}
10004b7c:	bf00      	nop
10004b7e:	3710      	adds	r7, #16
10004b80:	46bd      	mov	sp, r7
10004b82:	bd80      	pop	{r7, pc}
10004b84:	100074fc 	.word	0x100074fc

10004b88 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
10004b88:	b580      	push	{r7, lr}
10004b8a:	b084      	sub	sp, #16
10004b8c:	af00      	add	r7, sp, #0
10004b8e:	6078      	str	r0, [r7, #4]
10004b90:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
10004b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10004b96:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
10004b98:	683b      	ldr	r3, [r7, #0]
10004b9a:	461a      	mov	r2, r3
10004b9c:	2100      	movs	r1, #0
10004b9e:	6878      	ldr	r0, [r7, #4]
10004ba0:	f7ff ffb1 	bl	10004b06 <metal_bitmap_next_clear_bit>
10004ba4:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
10004ba6:	683b      	ldr	r3, [r7, #0]
10004ba8:	68ba      	ldr	r2, [r7, #8]
10004baa:	429a      	cmp	r2, r3
10004bac:	d208      	bcs.n	10004bc0 <rpmsg_get_address+0x38>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
10004bae:	68bb      	ldr	r3, [r7, #8]
10004bb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
10004bb4:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
10004bb6:	68bb      	ldr	r3, [r7, #8]
10004bb8:	4619      	mov	r1, r3
10004bba:	6878      	ldr	r0, [r7, #4]
10004bbc:	f7ff ff3a 	bl	10004a34 <metal_bitmap_set_bit>
	}

	return addr;
10004bc0:	68fb      	ldr	r3, [r7, #12]
}
10004bc2:	4618      	mov	r0, r3
10004bc4:	3710      	adds	r7, #16
10004bc6:	46bd      	mov	sp, r7
10004bc8:	bd80      	pop	{r7, pc}

10004bca <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
10004bca:	b580      	push	{r7, lr}
10004bcc:	b084      	sub	sp, #16
10004bce:	af00      	add	r7, sp, #0
10004bd0:	60f8      	str	r0, [r7, #12]
10004bd2:	60b9      	str	r1, [r7, #8]
10004bd4:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
10004bd6:	687b      	ldr	r3, [r7, #4]
10004bd8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
10004bdc:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size)
10004bde:	687b      	ldr	r3, [r7, #4]
10004be0:	2b00      	cmp	r3, #0
10004be2:	db07      	blt.n	10004bf4 <rpmsg_release_address+0x2a>
10004be4:	687a      	ldr	r2, [r7, #4]
10004be6:	68bb      	ldr	r3, [r7, #8]
10004be8:	429a      	cmp	r2, r3
10004bea:	da03      	bge.n	10004bf4 <rpmsg_release_address+0x2a>
		metal_bitmap_clear_bit(bitmap, addr);
10004bec:	6879      	ldr	r1, [r7, #4]
10004bee:	68f8      	ldr	r0, [r7, #12]
10004bf0:	f7ff ff59 	bl	10004aa6 <metal_bitmap_clear_bit>
}
10004bf4:	bf00      	nop
10004bf6:	3710      	adds	r7, #16
10004bf8:	46bd      	mov	sp, r7
10004bfa:	bd80      	pop	{r7, pc}

10004bfc <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
10004bfc:	b580      	push	{r7, lr}
10004bfe:	b084      	sub	sp, #16
10004c00:	af00      	add	r7, sp, #0
10004c02:	60f8      	str	r0, [r7, #12]
10004c04:	60b9      	str	r1, [r7, #8]
10004c06:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
10004c08:	687b      	ldr	r3, [r7, #4]
10004c0a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
10004c0e:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size)
10004c10:	687b      	ldr	r3, [r7, #4]
10004c12:	2b00      	cmp	r3, #0
10004c14:	db09      	blt.n	10004c2a <rpmsg_is_address_set+0x2e>
10004c16:	687a      	ldr	r2, [r7, #4]
10004c18:	68bb      	ldr	r3, [r7, #8]
10004c1a:	429a      	cmp	r2, r3
10004c1c:	da05      	bge.n	10004c2a <rpmsg_is_address_set+0x2e>
		return metal_bitmap_is_bit_set(bitmap, addr);
10004c1e:	6879      	ldr	r1, [r7, #4]
10004c20:	68f8      	ldr	r0, [r7, #12]
10004c22:	f7ff ff23 	bl	10004a6c <metal_bitmap_is_bit_set>
10004c26:	4603      	mov	r3, r0
10004c28:	e000      	b.n	10004c2c <rpmsg_is_address_set+0x30>
	else
		return RPMSG_ERR_PARAM;
10004c2a:	4b02      	ldr	r3, [pc, #8]	; (10004c34 <rpmsg_is_address_set+0x38>)
}
10004c2c:	4618      	mov	r0, r3
10004c2e:	3710      	adds	r7, #16
10004c30:	46bd      	mov	sp, r7
10004c32:	bd80      	pop	{r7, pc}
10004c34:	fffff82d 	.word	0xfffff82d

10004c38 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
10004c38:	b580      	push	{r7, lr}
10004c3a:	b084      	sub	sp, #16
10004c3c:	af00      	add	r7, sp, #0
10004c3e:	60f8      	str	r0, [r7, #12]
10004c40:	60b9      	str	r1, [r7, #8]
10004c42:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
10004c44:	687b      	ldr	r3, [r7, #4]
10004c46:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
10004c4a:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size) {
10004c4c:	687b      	ldr	r3, [r7, #4]
10004c4e:	2b00      	cmp	r3, #0
10004c50:	db09      	blt.n	10004c66 <rpmsg_set_address+0x2e>
10004c52:	687a      	ldr	r2, [r7, #4]
10004c54:	68bb      	ldr	r3, [r7, #8]
10004c56:	429a      	cmp	r2, r3
10004c58:	da05      	bge.n	10004c66 <rpmsg_set_address+0x2e>
		metal_bitmap_set_bit(bitmap, addr);
10004c5a:	6879      	ldr	r1, [r7, #4]
10004c5c:	68f8      	ldr	r0, [r7, #12]
10004c5e:	f7ff fee9 	bl	10004a34 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
10004c62:	2300      	movs	r3, #0
10004c64:	e000      	b.n	10004c68 <rpmsg_set_address+0x30>
	} else {
		return RPMSG_ERR_PARAM;
10004c66:	4b02      	ldr	r3, [pc, #8]	; (10004c70 <rpmsg_set_address+0x38>)
	}
}
10004c68:	4618      	mov	r0, r3
10004c6a:	3710      	adds	r7, #16
10004c6c:	46bd      	mov	sp, r7
10004c6e:	bd80      	pop	{r7, pc}
10004c70:	fffff82d 	.word	0xfffff82d

10004c74 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
10004c74:	b590      	push	{r4, r7, lr}
10004c76:	b089      	sub	sp, #36	; 0x24
10004c78:	af02      	add	r7, sp, #8
10004c7a:	60f8      	str	r0, [r7, #12]
10004c7c:	60b9      	str	r1, [r7, #8]
10004c7e:	607a      	str	r2, [r7, #4]
10004c80:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
10004c82:	68fb      	ldr	r3, [r7, #12]
10004c84:	2b00      	cmp	r3, #0
10004c86:	d00a      	beq.n	10004c9e <rpmsg_send_offchannel_raw+0x2a>
10004c88:	68fb      	ldr	r3, [r7, #12]
10004c8a:	6a1b      	ldr	r3, [r3, #32]
10004c8c:	2b00      	cmp	r3, #0
10004c8e:	d006      	beq.n	10004c9e <rpmsg_send_offchannel_raw+0x2a>
10004c90:	683b      	ldr	r3, [r7, #0]
10004c92:	2b00      	cmp	r3, #0
10004c94:	d003      	beq.n	10004c9e <rpmsg_send_offchannel_raw+0x2a>
10004c96:	687b      	ldr	r3, [r7, #4]
10004c98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10004c9c:	d101      	bne.n	10004ca2 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
10004c9e:	4b0d      	ldr	r3, [pc, #52]	; (10004cd4 <rpmsg_send_offchannel_raw+0x60>)
10004ca0:	e014      	b.n	10004ccc <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
10004ca2:	68fb      	ldr	r3, [r7, #12]
10004ca4:	6a1b      	ldr	r3, [r3, #32]
10004ca6:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
10004ca8:	697b      	ldr	r3, [r7, #20]
10004caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10004cac:	2b00      	cmp	r3, #0
10004cae:	d00c      	beq.n	10004cca <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
10004cb0:	697b      	ldr	r3, [r7, #20]
10004cb2:	6e1c      	ldr	r4, [r3, #96]	; 0x60
10004cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10004cb6:	9301      	str	r3, [sp, #4]
10004cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
10004cba:	9300      	str	r3, [sp, #0]
10004cbc:	683b      	ldr	r3, [r7, #0]
10004cbe:	687a      	ldr	r2, [r7, #4]
10004cc0:	68b9      	ldr	r1, [r7, #8]
10004cc2:	6978      	ldr	r0, [r7, #20]
10004cc4:	47a0      	blx	r4
10004cc6:	4603      	mov	r3, r0
10004cc8:	e000      	b.n	10004ccc <rpmsg_send_offchannel_raw+0x58>
						     len, wait);

	return RPMSG_ERR_PARAM;
10004cca:	4b02      	ldr	r3, [pc, #8]	; (10004cd4 <rpmsg_send_offchannel_raw+0x60>)
}
10004ccc:	4618      	mov	r0, r3
10004cce:	371c      	adds	r7, #28
10004cd0:	46bd      	mov	sp, r7
10004cd2:	bd90      	pop	{r4, r7, pc}
10004cd4:	fffff82d 	.word	0xfffff82d

10004cd8 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
10004cd8:	b580      	push	{r7, lr}
10004cda:	b090      	sub	sp, #64	; 0x40
10004cdc:	af02      	add	r7, sp, #8
10004cde:	6078      	str	r0, [r7, #4]
10004ce0:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
10004ce2:	683b      	ldr	r3, [r7, #0]
10004ce4:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
10004ce6:	687b      	ldr	r3, [r7, #4]
10004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004cea:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
10004cec:	6879      	ldr	r1, [r7, #4]
10004cee:	f107 030c 	add.w	r3, r7, #12
10004cf2:	2220      	movs	r2, #32
10004cf4:	4618      	mov	r0, r3
10004cf6:	f001 fbca 	bl	1000648e <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
10004cfa:	687b      	ldr	r3, [r7, #4]
10004cfc:	6a59      	ldr	r1, [r3, #36]	; 0x24
10004cfe:	f107 030c 	add.w	r3, r7, #12
10004d02:	2201      	movs	r2, #1
10004d04:	9201      	str	r2, [sp, #4]
10004d06:	2228      	movs	r2, #40	; 0x28
10004d08:	9200      	str	r2, [sp, #0]
10004d0a:	2235      	movs	r2, #53	; 0x35
10004d0c:	6878      	ldr	r0, [r7, #4]
10004d0e:	f7ff ffb1 	bl	10004c74 <rpmsg_send_offchannel_raw>
10004d12:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
10004d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10004d16:	2b00      	cmp	r3, #0
10004d18:	da01      	bge.n	10004d1e <rpmsg_send_ns_message+0x46>
		return ret;
10004d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10004d1c:	e000      	b.n	10004d20 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
10004d1e:	2300      	movs	r3, #0
}
10004d20:	4618      	mov	r0, r3
10004d22:	3738      	adds	r7, #56	; 0x38
10004d24:	46bd      	mov	sp, r7
10004d26:	bd80      	pop	{r7, pc}

10004d28 <rpmsg_get_endpoint>:
}

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
10004d28:	b580      	push	{r7, lr}
10004d2a:	b088      	sub	sp, #32
10004d2c:	af00      	add	r7, sp, #0
10004d2e:	60f8      	str	r0, [r7, #12]
10004d30:	60b9      	str	r1, [r7, #8]
10004d32:	607a      	str	r2, [r7, #4]
10004d34:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
10004d36:	68fb      	ldr	r3, [r7, #12]
10004d38:	681b      	ldr	r3, [r3, #0]
10004d3a:	61fb      	str	r3, [r7, #28]
10004d3c:	e04b      	b.n	10004dd6 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
10004d3e:	2300      	movs	r3, #0
10004d40:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
10004d42:	69fb      	ldr	r3, [r7, #28]
10004d44:	3b34      	subs	r3, #52	; 0x34
10004d46:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
10004d48:	687b      	ldr	r3, [r7, #4]
10004d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10004d4e:	d006      	beq.n	10004d5e <rpmsg_get_endpoint+0x36>
10004d50:	697b      	ldr	r3, [r7, #20]
10004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004d54:	687a      	ldr	r2, [r7, #4]
10004d56:	429a      	cmp	r2, r3
10004d58:	d101      	bne.n	10004d5e <rpmsg_get_endpoint+0x36>
			return ept;
10004d5a:	697b      	ldr	r3, [r7, #20]
10004d5c:	e040      	b.n	10004de0 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
10004d5e:	697b      	ldr	r3, [r7, #20]
10004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004d62:	687a      	ldr	r2, [r7, #4]
10004d64:	429a      	cmp	r2, r3
10004d66:	d106      	bne.n	10004d76 <rpmsg_get_endpoint+0x4e>
10004d68:	697b      	ldr	r3, [r7, #20]
10004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004d6c:	683a      	ldr	r2, [r7, #0]
10004d6e:	429a      	cmp	r2, r3
10004d70:	d101      	bne.n	10004d76 <rpmsg_get_endpoint+0x4e>
			return ept;
10004d72:	697b      	ldr	r3, [r7, #20]
10004d74:	e034      	b.n	10004de0 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
10004d76:	68bb      	ldr	r3, [r7, #8]
10004d78:	2b00      	cmp	r3, #0
10004d7a:	d00c      	beq.n	10004d96 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
10004d7c:	697b      	ldr	r3, [r7, #20]
10004d7e:	2220      	movs	r2, #32
10004d80:	68b9      	ldr	r1, [r7, #8]
10004d82:	4618      	mov	r0, r3
10004d84:	f001 fb71 	bl	1000646a <strncmp>
10004d88:	4603      	mov	r3, r0
10004d8a:	2b00      	cmp	r3, #0
10004d8c:	bf0c      	ite	eq
10004d8e:	2301      	moveq	r3, #1
10004d90:	2300      	movne	r3, #0
10004d92:	b2db      	uxtb	r3, r3
10004d94:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
10004d96:	68bb      	ldr	r3, [r7, #8]
10004d98:	2b00      	cmp	r3, #0
10004d9a:	d018      	beq.n	10004dce <rpmsg_get_endpoint+0xa6>
10004d9c:	69bb      	ldr	r3, [r7, #24]
10004d9e:	2b00      	cmp	r3, #0
10004da0:	d015      	beq.n	10004dce <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address */
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
10004da2:	683b      	ldr	r3, [r7, #0]
10004da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10004da8:	d006      	beq.n	10004db8 <rpmsg_get_endpoint+0x90>
10004daa:	697b      	ldr	r3, [r7, #20]
10004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004dae:	683a      	ldr	r2, [r7, #0]
10004db0:	429a      	cmp	r2, r3
10004db2:	d101      	bne.n	10004db8 <rpmsg_get_endpoint+0x90>
			return ept;
10004db4:	697b      	ldr	r3, [r7, #20]
10004db6:	e013      	b.n	10004de0 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept */
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
10004db8:	687b      	ldr	r3, [r7, #4]
10004dba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10004dbe:	d107      	bne.n	10004dd0 <rpmsg_get_endpoint+0xa8>
10004dc0:	697b      	ldr	r3, [r7, #20]
10004dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10004dc8:	d102      	bne.n	10004dd0 <rpmsg_get_endpoint+0xa8>
			return ept;
10004dca:	697b      	ldr	r3, [r7, #20]
10004dcc:	e008      	b.n	10004de0 <rpmsg_get_endpoint+0xb8>
			continue;
10004dce:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
10004dd0:	69fb      	ldr	r3, [r7, #28]
10004dd2:	681b      	ldr	r3, [r3, #0]
10004dd4:	61fb      	str	r3, [r7, #28]
10004dd6:	68fb      	ldr	r3, [r7, #12]
10004dd8:	69fa      	ldr	r2, [r7, #28]
10004dda:	429a      	cmp	r2, r3
10004ddc:	d1af      	bne.n	10004d3e <rpmsg_get_endpoint+0x16>
	}
	return NULL;
10004dde:	2300      	movs	r3, #0
}
10004de0:	4618      	mov	r0, r3
10004de2:	3720      	adds	r7, #32
10004de4:	46bd      	mov	sp, r7
10004de6:	bd80      	pop	{r7, pc}

10004de8 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
10004de8:	b580      	push	{r7, lr}
10004dea:	b084      	sub	sp, #16
10004dec:	af00      	add	r7, sp, #0
10004dee:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev = ept->rdev;
10004df0:	687b      	ldr	r3, [r7, #4]
10004df2:	6a1b      	ldr	r3, [r3, #32]
10004df4:	60fb      	str	r3, [r7, #12]

	metal_mutex_acquire(&rdev->lock);
10004df6:	68fb      	ldr	r3, [r7, #12]
10004df8:	3358      	adds	r3, #88	; 0x58
10004dfa:	4618      	mov	r0, r3
10004dfc:	f7ff fdc3 	bl	10004986 <metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
10004e00:	687b      	ldr	r3, [r7, #4]
10004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10004e08:	d008      	beq.n	10004e1c <rpmsg_unregister_endpoint+0x34>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
10004e0a:	68fb      	ldr	r3, [r7, #12]
10004e0c:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
10004e10:	687b      	ldr	r3, [r7, #4]
10004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
10004e14:	461a      	mov	r2, r3
10004e16:	2180      	movs	r1, #128	; 0x80
10004e18:	f7ff fed7 	bl	10004bca <rpmsg_release_address>
	metal_list_del(&ept->node);
10004e1c:	687b      	ldr	r3, [r7, #4]
10004e1e:	3334      	adds	r3, #52	; 0x34
10004e20:	4618      	mov	r0, r3
10004e22:	f7ff fded 	bl	10004a00 <metal_list_del>
	ept->rdev = NULL;
10004e26:	687b      	ldr	r3, [r7, #4]
10004e28:	2200      	movs	r2, #0
10004e2a:	621a      	str	r2, [r3, #32]
	metal_mutex_release(&rdev->lock);
10004e2c:	68fb      	ldr	r3, [r7, #12]
10004e2e:	3358      	adds	r3, #88	; 0x58
10004e30:	4618      	mov	r0, r3
10004e32:	f7ff fdb3 	bl	1000499c <metal_mutex_release>
}
10004e36:	bf00      	nop
10004e38:	3710      	adds	r7, #16
10004e3a:	46bd      	mov	sp, r7
10004e3c:	bd80      	pop	{r7, pc}

10004e3e <rpmsg_register_endpoint>:

void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept)
{
10004e3e:	b580      	push	{r7, lr}
10004e40:	b082      	sub	sp, #8
10004e42:	af00      	add	r7, sp, #0
10004e44:	6078      	str	r0, [r7, #4]
10004e46:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
10004e48:	683b      	ldr	r3, [r7, #0]
10004e4a:	687a      	ldr	r2, [r7, #4]
10004e4c:	621a      	str	r2, [r3, #32]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
10004e4e:	687a      	ldr	r2, [r7, #4]
10004e50:	683b      	ldr	r3, [r7, #0]
10004e52:	3334      	adds	r3, #52	; 0x34
10004e54:	4619      	mov	r1, r3
10004e56:	4610      	mov	r0, r2
10004e58:	f7ff fdc5 	bl	100049e6 <metal_list_add_tail>
}
10004e5c:	bf00      	nop
10004e5e:	3708      	adds	r7, #8
10004e60:	46bd      	mov	sp, r7
10004e62:	bd80      	pop	{r7, pc}

10004e64 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
10004e64:	b580      	push	{r7, lr}
10004e66:	b088      	sub	sp, #32
10004e68:	af02      	add	r7, sp, #8
10004e6a:	60f8      	str	r0, [r7, #12]
10004e6c:	60b9      	str	r1, [r7, #8]
10004e6e:	607a      	str	r2, [r7, #4]
10004e70:	603b      	str	r3, [r7, #0]
	int status = RPMSG_SUCCESS;
10004e72:	2300      	movs	r3, #0
10004e74:	617b      	str	r3, [r7, #20]
	uint32_t addr = src;
10004e76:	683b      	ldr	r3, [r7, #0]
10004e78:	613b      	str	r3, [r7, #16]

	if (!ept)
10004e7a:	68fb      	ldr	r3, [r7, #12]
10004e7c:	2b00      	cmp	r3, #0
10004e7e:	d101      	bne.n	10004e84 <rpmsg_create_ept+0x20>
		return RPMSG_ERR_PARAM;
10004e80:	4b37      	ldr	r3, [pc, #220]	; (10004f60 <rpmsg_create_ept+0xfc>)
10004e82:	e068      	b.n	10004f56 <rpmsg_create_ept+0xf2>

	metal_mutex_acquire(&rdev->lock);
10004e84:	68bb      	ldr	r3, [r7, #8]
10004e86:	3358      	adds	r3, #88	; 0x58
10004e88:	4618      	mov	r0, r3
10004e8a:	f7ff fd7c 	bl	10004986 <metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
10004e8e:	683b      	ldr	r3, [r7, #0]
10004e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10004e94:	d10d      	bne.n	10004eb2 <rpmsg_create_ept+0x4e>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
10004e96:	68bb      	ldr	r3, [r7, #8]
10004e98:	3348      	adds	r3, #72	; 0x48
10004e9a:	2180      	movs	r1, #128	; 0x80
10004e9c:	4618      	mov	r0, r3
10004e9e:	f7ff fe73 	bl	10004b88 <rpmsg_get_address>
10004ea2:	6138      	str	r0, [r7, #16]
		if (addr == RPMSG_ADDR_ANY) {
10004ea4:	693b      	ldr	r3, [r7, #16]
10004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10004eaa:	d11f      	bne.n	10004eec <rpmsg_create_ept+0x88>
			status = RPMSG_ERR_ADDR;
10004eac:	4b2d      	ldr	r3, [pc, #180]	; (10004f64 <rpmsg_create_ept+0x100>)
10004eae:	617b      	str	r3, [r7, #20]
			goto ret_status;
10004eb0:	e04b      	b.n	10004f4a <rpmsg_create_ept+0xe6>
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
10004eb2:	683b      	ldr	r3, [r7, #0]
10004eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
10004eb8:	d318      	bcc.n	10004eec <rpmsg_create_ept+0x88>
		status = rpmsg_is_address_set(rdev->bitmap,
10004eba:	68bb      	ldr	r3, [r7, #8]
10004ebc:	3348      	adds	r3, #72	; 0x48
10004ebe:	683a      	ldr	r2, [r7, #0]
10004ec0:	2180      	movs	r1, #128	; 0x80
10004ec2:	4618      	mov	r0, r3
10004ec4:	f7ff fe9a 	bl	10004bfc <rpmsg_is_address_set>
10004ec8:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
10004eca:	697b      	ldr	r3, [r7, #20]
10004ecc:	2b00      	cmp	r3, #0
10004ece:	d107      	bne.n	10004ee0 <rpmsg_create_ept+0x7c>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
10004ed0:	68bb      	ldr	r3, [r7, #8]
10004ed2:	3348      	adds	r3, #72	; 0x48
10004ed4:	683a      	ldr	r2, [r7, #0]
10004ed6:	2180      	movs	r1, #128	; 0x80
10004ed8:	4618      	mov	r0, r3
10004eda:	f7ff fead 	bl	10004c38 <rpmsg_set_address>
10004ede:	e005      	b.n	10004eec <rpmsg_create_ept+0x88>
					  src);
		} else if (status > 0) {
10004ee0:	697b      	ldr	r3, [r7, #20]
10004ee2:	2b00      	cmp	r3, #0
10004ee4:	dd30      	ble.n	10004f48 <rpmsg_create_ept+0xe4>
			status = RPMSG_ERR_ADDR;
10004ee6:	4b1f      	ldr	r3, [pc, #124]	; (10004f64 <rpmsg_create_ept+0x100>)
10004ee8:	617b      	str	r3, [r7, #20]
			goto ret_status;
10004eea:	e02e      	b.n	10004f4a <rpmsg_create_ept+0xe6>
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
10004eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
10004eee:	9301      	str	r3, [sp, #4]
10004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10004ef2:	9300      	str	r3, [sp, #0]
10004ef4:	6a3b      	ldr	r3, [r7, #32]
10004ef6:	693a      	ldr	r2, [r7, #16]
10004ef8:	6879      	ldr	r1, [r7, #4]
10004efa:	68f8      	ldr	r0, [r7, #12]
10004efc:	f7ff fe20 	bl	10004b40 <rpmsg_initialize_ept>
	rpmsg_register_endpoint(rdev, ept);
10004f00:	68f9      	ldr	r1, [r7, #12]
10004f02:	68b8      	ldr	r0, [r7, #8]
10004f04:	f7ff ff9b 	bl	10004e3e <rpmsg_register_endpoint>
	metal_mutex_release(&rdev->lock);
10004f08:	68bb      	ldr	r3, [r7, #8]
10004f0a:	3358      	adds	r3, #88	; 0x58
10004f0c:	4618      	mov	r0, r3
10004f0e:	f7ff fd45 	bl	1000499c <metal_mutex_release>

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
10004f12:	68fb      	ldr	r3, [r7, #12]
10004f14:	781b      	ldrb	r3, [r3, #0]
10004f16:	2b00      	cmp	r3, #0
10004f18:	d00e      	beq.n	10004f38 <rpmsg_create_ept+0xd4>
10004f1a:	68bb      	ldr	r3, [r7, #8]
10004f1c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
10004f20:	2b00      	cmp	r3, #0
10004f22:	d009      	beq.n	10004f38 <rpmsg_create_ept+0xd4>
	    ept->dest_addr == RPMSG_ADDR_ANY)
10004f24:	68fb      	ldr	r3, [r7, #12]
10004f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (ept->name[0] && rdev->support_ns &&
10004f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10004f2c:	d104      	bne.n	10004f38 <rpmsg_create_ept+0xd4>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
10004f2e:	2100      	movs	r1, #0
10004f30:	68f8      	ldr	r0, [r7, #12]
10004f32:	f7ff fed1 	bl	10004cd8 <rpmsg_send_ns_message>
10004f36:	6178      	str	r0, [r7, #20]

	if (status)
10004f38:	697b      	ldr	r3, [r7, #20]
10004f3a:	2b00      	cmp	r3, #0
10004f3c:	d002      	beq.n	10004f44 <rpmsg_create_ept+0xe0>
		rpmsg_unregister_endpoint(ept);
10004f3e:	68f8      	ldr	r0, [r7, #12]
10004f40:	f7ff ff52 	bl	10004de8 <rpmsg_unregister_endpoint>
	return status;
10004f44:	697b      	ldr	r3, [r7, #20]
10004f46:	e006      	b.n	10004f56 <rpmsg_create_ept+0xf2>
			goto ret_status;
10004f48:	bf00      	nop

ret_status:
	metal_mutex_release(&rdev->lock);
10004f4a:	68bb      	ldr	r3, [r7, #8]
10004f4c:	3358      	adds	r3, #88	; 0x58
10004f4e:	4618      	mov	r0, r3
10004f50:	f7ff fd24 	bl	1000499c <metal_mutex_release>
	return status;
10004f54:	697b      	ldr	r3, [r7, #20]
}
10004f56:	4618      	mov	r0, r3
10004f58:	3718      	adds	r7, #24
10004f5a:	46bd      	mov	sp, r7
10004f5c:	bd80      	pop	{r7, pc}
10004f5e:	bf00      	nop
10004f60:	fffff82d 	.word	0xfffff82d
10004f64:	fffff829 	.word	0xfffff829

10004f68 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
10004f68:	b480      	push	{r7}
10004f6a:	b083      	sub	sp, #12
10004f6c:	af00      	add	r7, sp, #0
10004f6e:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
10004f70:	2300      	movs	r3, #0
}
10004f72:	4618      	mov	r0, r3
10004f74:	370c      	adds	r7, #12
10004f76:	46bd      	mov	sp, r7
10004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
10004f7c:	4770      	bx	lr

10004f7e <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
10004f7e:	b580      	push	{r7, lr}
10004f80:	b082      	sub	sp, #8
10004f82:	af00      	add	r7, sp, #0
10004f84:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
10004f86:	6878      	ldr	r0, [r7, #4]
10004f88:	f7ff ffee 	bl	10004f68 <__metal_sleep_usec>
10004f8c:	4603      	mov	r3, r0
}
10004f8e:	4618      	mov	r0, r3
10004f90:	3708      	adds	r7, #8
10004f92:	46bd      	mov	sp, r7
10004f94:	bd80      	pop	{r7, pc}

10004f96 <metal_list_init>:
{
10004f96:	b480      	push	{r7}
10004f98:	b083      	sub	sp, #12
10004f9a:	af00      	add	r7, sp, #0
10004f9c:	6078      	str	r0, [r7, #4]
	list->prev = list;
10004f9e:	687b      	ldr	r3, [r7, #4]
10004fa0:	687a      	ldr	r2, [r7, #4]
10004fa2:	605a      	str	r2, [r3, #4]
	list->next = list;
10004fa4:	687b      	ldr	r3, [r7, #4]
10004fa6:	687a      	ldr	r2, [r7, #4]
10004fa8:	601a      	str	r2, [r3, #0]
}
10004faa:	bf00      	nop
10004fac:	370c      	adds	r7, #12
10004fae:	46bd      	mov	sp, r7
10004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
10004fb4:	4770      	bx	lr

10004fb6 <metal_io_virt_to_offset>:
{
10004fb6:	b480      	push	{r7}
10004fb8:	b085      	sub	sp, #20
10004fba:	af00      	add	r7, sp, #0
10004fbc:	6078      	str	r0, [r7, #4]
10004fbe:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
10004fc0:	683b      	ldr	r3, [r7, #0]
10004fc2:	687a      	ldr	r2, [r7, #4]
10004fc4:	6812      	ldr	r2, [r2, #0]
10004fc6:	1a9b      	subs	r3, r3, r2
10004fc8:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
10004fca:	687b      	ldr	r3, [r7, #4]
10004fcc:	689b      	ldr	r3, [r3, #8]
10004fce:	68fa      	ldr	r2, [r7, #12]
10004fd0:	429a      	cmp	r2, r3
10004fd2:	d201      	bcs.n	10004fd8 <metal_io_virt_to_offset+0x22>
10004fd4:	68fb      	ldr	r3, [r7, #12]
10004fd6:	e001      	b.n	10004fdc <metal_io_virt_to_offset+0x26>
10004fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
10004fdc:	4618      	mov	r0, r3
10004fde:	3714      	adds	r7, #20
10004fe0:	46bd      	mov	sp, r7
10004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
10004fe6:	4770      	bx	lr

10004fe8 <__metal_mutex_init>:
{
10004fe8:	b480      	push	{r7}
10004fea:	b085      	sub	sp, #20
10004fec:	af00      	add	r7, sp, #0
10004fee:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
10004ff0:	687b      	ldr	r3, [r7, #4]
10004ff2:	60fb      	str	r3, [r7, #12]
10004ff4:	2300      	movs	r3, #0
10004ff6:	60bb      	str	r3, [r7, #8]
10004ff8:	68bb      	ldr	r3, [r7, #8]
10004ffa:	461a      	mov	r2, r3
10004ffc:	68fb      	ldr	r3, [r7, #12]
10004ffe:	f3bf 8f5b 	dmb	ish
10005002:	601a      	str	r2, [r3, #0]
10005004:	f3bf 8f5b 	dmb	ish
}
10005008:	bf00      	nop
1000500a:	3714      	adds	r7, #20
1000500c:	46bd      	mov	sp, r7
1000500e:	f85d 7b04 	ldr.w	r7, [sp], #4
10005012:	4770      	bx	lr

10005014 <__metal_mutex_acquire>:
{
10005014:	b490      	push	{r4, r7}
10005016:	b086      	sub	sp, #24
10005018:	af00      	add	r7, sp, #0
1000501a:	6078      	str	r0, [r7, #4]
	int unlocked = METAL_MUTEX_UNLOCKED;
1000501c:	2300      	movs	r3, #0
1000501e:	613b      	str	r3, [r7, #16]
	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
10005020:	bf00      	nop
10005022:	687b      	ldr	r3, [r7, #4]
10005024:	617b      	str	r3, [r7, #20]
10005026:	2301      	movs	r3, #1
10005028:	60fb      	str	r3, [r7, #12]
1000502a:	68fb      	ldr	r3, [r7, #12]
1000502c:	461c      	mov	r4, r3
1000502e:	697a      	ldr	r2, [r7, #20]
10005030:	f107 0310 	add.w	r3, r7, #16
10005034:	6818      	ldr	r0, [r3, #0]
10005036:	f3bf 8f5b 	dmb	ish
1000503a:	e852 1f00 	ldrex	r1, [r2]
1000503e:	4281      	cmp	r1, r0
10005040:	d103      	bne.n	1000504a <__metal_mutex_acquire+0x36>
10005042:	e842 4c00 	strex	ip, r4, [r2]
10005046:	f1bc 0f00 	cmp.w	ip, #0
1000504a:	f3bf 8f5b 	dmb	ish
1000504e:	bf0c      	ite	eq
10005050:	2201      	moveq	r2, #1
10005052:	2200      	movne	r2, #0
10005054:	2a00      	cmp	r2, #0
10005056:	d100      	bne.n	1000505a <__metal_mutex_acquire+0x46>
10005058:	6019      	str	r1, [r3, #0]
1000505a:	4613      	mov	r3, r2
1000505c:	f083 0301 	eor.w	r3, r3, #1
10005060:	b2db      	uxtb	r3, r3
10005062:	2b00      	cmp	r3, #0
10005064:	d1dd      	bne.n	10005022 <__metal_mutex_acquire+0xe>
}
10005066:	bf00      	nop
10005068:	bf00      	nop
1000506a:	3718      	adds	r7, #24
1000506c:	46bd      	mov	sp, r7
1000506e:	bc90      	pop	{r4, r7}
10005070:	4770      	bx	lr

10005072 <__metal_mutex_release>:
{
10005072:	b480      	push	{r7}
10005074:	b085      	sub	sp, #20
10005076:	af00      	add	r7, sp, #0
10005078:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
1000507a:	687b      	ldr	r3, [r7, #4]
1000507c:	60fb      	str	r3, [r7, #12]
1000507e:	2300      	movs	r3, #0
10005080:	60bb      	str	r3, [r7, #8]
10005082:	68bb      	ldr	r3, [r7, #8]
10005084:	461a      	mov	r2, r3
10005086:	68fb      	ldr	r3, [r7, #12]
10005088:	f3bf 8f5b 	dmb	ish
1000508c:	601a      	str	r2, [r3, #0]
1000508e:	f3bf 8f5b 	dmb	ish
}
10005092:	bf00      	nop
10005094:	3714      	adds	r7, #20
10005096:	46bd      	mov	sp, r7
10005098:	f85d 7b04 	ldr.w	r7, [sp], #4
1000509c:	4770      	bx	lr

1000509e <metal_mutex_init>:
{
1000509e:	b580      	push	{r7, lr}
100050a0:	b082      	sub	sp, #8
100050a2:	af00      	add	r7, sp, #0
100050a4:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
100050a6:	6878      	ldr	r0, [r7, #4]
100050a8:	f7ff ff9e 	bl	10004fe8 <__metal_mutex_init>
}
100050ac:	bf00      	nop
100050ae:	3708      	adds	r7, #8
100050b0:	46bd      	mov	sp, r7
100050b2:	bd80      	pop	{r7, pc}

100050b4 <metal_mutex_acquire>:
{
100050b4:	b580      	push	{r7, lr}
100050b6:	b082      	sub	sp, #8
100050b8:	af00      	add	r7, sp, #0
100050ba:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
100050bc:	6878      	ldr	r0, [r7, #4]
100050be:	f7ff ffa9 	bl	10005014 <__metal_mutex_acquire>
}
100050c2:	bf00      	nop
100050c4:	3708      	adds	r7, #8
100050c6:	46bd      	mov	sp, r7
100050c8:	bd80      	pop	{r7, pc}

100050ca <metal_mutex_release>:
{
100050ca:	b580      	push	{r7, lr}
100050cc:	b082      	sub	sp, #8
100050ce:	af00      	add	r7, sp, #0
100050d0:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
100050d2:	6878      	ldr	r0, [r7, #4]
100050d4:	f7ff ffcd 	bl	10005072 <__metal_mutex_release>
}
100050d8:	bf00      	nop
100050da:	3708      	adds	r7, #8
100050dc:	46bd      	mov	sp, r7
100050de:	bd80      	pop	{r7, pc}

100050e0 <rpmsg_virtio_get_role>:
#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
100050e0:	b480      	push	{r7}
100050e2:	b083      	sub	sp, #12
100050e4:	af00      	add	r7, sp, #0
100050e6:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
100050e8:	687b      	ldr	r3, [r7, #4]
100050ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
100050ec:	699b      	ldr	r3, [r3, #24]
}
100050ee:	4618      	mov	r0, r3
100050f0:	370c      	adds	r7, #12
100050f2:	46bd      	mov	sp, r7
100050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
100050f8:	4770      	bx	lr

100050fa <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
100050fa:	b580      	push	{r7, lr}
100050fc:	b082      	sub	sp, #8
100050fe:	af00      	add	r7, sp, #0
10005100:	6078      	str	r0, [r7, #4]
10005102:	460b      	mov	r3, r1
10005104:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
10005106:	687b      	ldr	r3, [r7, #4]
10005108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000510a:	6a1b      	ldr	r3, [r3, #32]
1000510c:	685b      	ldr	r3, [r3, #4]
1000510e:	687a      	ldr	r2, [r7, #4]
10005110:	6f92      	ldr	r2, [r2, #120]	; 0x78
10005112:	78f9      	ldrb	r1, [r7, #3]
10005114:	4610      	mov	r0, r2
10005116:	4798      	blx	r3
}
10005118:	bf00      	nop
1000511a:	3708      	adds	r7, #8
1000511c:	46bd      	mov	sp, r7
1000511e:	bd80      	pop	{r7, pc}

10005120 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
10005120:	b580      	push	{r7, lr}
10005122:	b082      	sub	sp, #8
10005124:	af00      	add	r7, sp, #0
10005126:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
10005128:	687b      	ldr	r3, [r7, #4]
1000512a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000512c:	6a1b      	ldr	r3, [r3, #32]
1000512e:	681b      	ldr	r3, [r3, #0]
10005130:	687a      	ldr	r2, [r7, #4]
10005132:	6f92      	ldr	r2, [r2, #120]	; 0x78
10005134:	4610      	mov	r0, r2
10005136:	4798      	blx	r3
10005138:	4603      	mov	r3, r0
}
1000513a:	4618      	mov	r0, r3
1000513c:	3708      	adds	r7, #8
1000513e:	46bd      	mov	sp, r7
10005140:	bd80      	pop	{r7, pc}

10005142 <rpmsg_virtio_get_features>:

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
10005142:	b580      	push	{r7, lr}
10005144:	b082      	sub	sp, #8
10005146:	af00      	add	r7, sp, #0
10005148:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
1000514a:	687b      	ldr	r3, [r7, #4]
1000514c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000514e:	6a1b      	ldr	r3, [r3, #32]
10005150:	689b      	ldr	r3, [r3, #8]
10005152:	687a      	ldr	r2, [r7, #4]
10005154:	6f92      	ldr	r2, [r2, #120]	; 0x78
10005156:	4610      	mov	r0, r2
10005158:	4798      	blx	r3
1000515a:	4603      	mov	r3, r0
}
1000515c:	4618      	mov	r0, r3
1000515e:	3708      	adds	r7, #8
10005160:	46bd      	mov	sp, r7
10005162:	bd80      	pop	{r7, pc}

10005164 <rpmsg_virtio_create_virtqueues>:
static inline int
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
10005164:	b580      	push	{r7, lr}
10005166:	b086      	sub	sp, #24
10005168:	af02      	add	r7, sp, #8
1000516a:	60f8      	str	r0, [r7, #12]
1000516c:	60b9      	str	r1, [r7, #8]
1000516e:	607a      	str	r2, [r7, #4]
10005170:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
10005172:	68fb      	ldr	r3, [r7, #12]
10005174:	6f98      	ldr	r0, [r3, #120]	; 0x78
10005176:	68b9      	ldr	r1, [r7, #8]
10005178:	69bb      	ldr	r3, [r7, #24]
1000517a:	9300      	str	r3, [sp, #0]
1000517c:	683b      	ldr	r3, [r7, #0]
1000517e:	687a      	ldr	r2, [r7, #4]
10005180:	f000 fc08 	bl	10005994 <virtio_create_virtqueues>
10005184:	4603      	mov	r3, r0
					callbacks);
}
10005186:	4618      	mov	r0, r3
10005188:	3710      	adds	r7, #16
1000518a:	46bd      	mov	sp, r7
1000518c:	bd80      	pop	{r7, pc}
	...

10005190 <rpmsg_initialize_ept>:
{
10005190:	b580      	push	{r7, lr}
10005192:	b084      	sub	sp, #16
10005194:	af00      	add	r7, sp, #0
10005196:	60f8      	str	r0, [r7, #12]
10005198:	60b9      	str	r1, [r7, #8]
1000519a:	607a      	str	r2, [r7, #4]
1000519c:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
1000519e:	68f8      	ldr	r0, [r7, #12]
100051a0:	68bb      	ldr	r3, [r7, #8]
100051a2:	2b00      	cmp	r3, #0
100051a4:	d001      	beq.n	100051aa <rpmsg_initialize_ept+0x1a>
100051a6:	68bb      	ldr	r3, [r7, #8]
100051a8:	e000      	b.n	100051ac <rpmsg_initialize_ept+0x1c>
100051aa:	4b0a      	ldr	r3, [pc, #40]	; (100051d4 <rpmsg_initialize_ept+0x44>)
100051ac:	2220      	movs	r2, #32
100051ae:	4619      	mov	r1, r3
100051b0:	f001 f96d 	bl	1000648e <strncpy>
	ept->addr = src;
100051b4:	68fb      	ldr	r3, [r7, #12]
100051b6:	687a      	ldr	r2, [r7, #4]
100051b8:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
100051ba:	68fb      	ldr	r3, [r7, #12]
100051bc:	683a      	ldr	r2, [r7, #0]
100051be:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
100051c0:	68fb      	ldr	r3, [r7, #12]
100051c2:	69ba      	ldr	r2, [r7, #24]
100051c4:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
100051c6:	68fb      	ldr	r3, [r7, #12]
100051c8:	69fa      	ldr	r2, [r7, #28]
100051ca:	631a      	str	r2, [r3, #48]	; 0x30
}
100051cc:	bf00      	nop
100051ce:	3710      	adds	r7, #16
100051d0:	46bd      	mov	sp, r7
100051d2:	bd80      	pop	{r7, pc}
100051d4:	10007500 	.word	0x10007500

100051d8 <rpmsg_get_ept_from_addr>:
void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
100051d8:	b580      	push	{r7, lr}
100051da:	b082      	sub	sp, #8
100051dc:	af00      	add	r7, sp, #0
100051de:	6078      	str	r0, [r7, #4]
100051e0:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
100051e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
100051e6:	683a      	ldr	r2, [r7, #0]
100051e8:	2100      	movs	r1, #0
100051ea:	6878      	ldr	r0, [r7, #4]
100051ec:	f7ff fd9c 	bl	10004d28 <rpmsg_get_endpoint>
100051f0:	4603      	mov	r3, r0
}
100051f2:	4618      	mov	r0, r3
100051f4:	3708      	adds	r7, #8
100051f6:	46bd      	mov	sp, r7
100051f8:	bd80      	pop	{r7, pc}

100051fa <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
100051fa:	b480      	push	{r7}
100051fc:	b085      	sub	sp, #20
100051fe:	af00      	add	r7, sp, #0
10005200:	60f8      	str	r0, [r7, #12]
10005202:	60b9      	str	r1, [r7, #8]
10005204:	607a      	str	r2, [r7, #4]
	if (!shpool)
10005206:	68fb      	ldr	r3, [r7, #12]
10005208:	2b00      	cmp	r3, #0
1000520a:	d009      	beq.n	10005220 <rpmsg_virtio_init_shm_pool+0x26>
		return;
	shpool->base = shb;
1000520c:	68fb      	ldr	r3, [r7, #12]
1000520e:	68ba      	ldr	r2, [r7, #8]
10005210:	601a      	str	r2, [r3, #0]
	shpool->size = size;
10005212:	68fb      	ldr	r3, [r7, #12]
10005214:	687a      	ldr	r2, [r7, #4]
10005216:	609a      	str	r2, [r3, #8]
	shpool->avail = size;
10005218:	68fb      	ldr	r3, [r7, #12]
1000521a:	687a      	ldr	r2, [r7, #4]
1000521c:	605a      	str	r2, [r3, #4]
1000521e:	e000      	b.n	10005222 <rpmsg_virtio_init_shm_pool+0x28>
		return;
10005220:	bf00      	nop
}
10005222:	3714      	adds	r7, #20
10005224:	46bd      	mov	sp, r7
10005226:	f85d 7b04 	ldr.w	r7, [sp], #4
1000522a:	4770      	bx	lr

1000522c <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
1000522c:	b580      	push	{r7, lr}
1000522e:	b086      	sub	sp, #24
10005230:	af00      	add	r7, sp, #0
10005232:	60f8      	str	r0, [r7, #12]
10005234:	60b9      	str	r1, [r7, #8]
10005236:	607a      	str	r2, [r7, #4]
10005238:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000523a:	68f8      	ldr	r0, [r7, #12]
1000523c:	f7ff ff50 	bl	100050e0 <rpmsg_virtio_get_role>
10005240:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10005242:	697b      	ldr	r3, [r7, #20]
10005244:	2b01      	cmp	r3, #1
10005246:	d106      	bne.n	10005256 <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
10005248:	68fb      	ldr	r3, [r7, #12]
1000524a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000524c:	8879      	ldrh	r1, [r7, #2]
1000524e:	687a      	ldr	r2, [r7, #4]
10005250:	4618      	mov	r0, r3
10005252:	f000 fd71 	bl	10005d38 <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
10005256:	bf00      	nop
10005258:	3718      	adds	r7, #24
1000525a:	46bd      	mov	sp, r7
1000525c:	bd80      	pop	{r7, pc}

1000525e <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
1000525e:	b580      	push	{r7, lr}
10005260:	b086      	sub	sp, #24
10005262:	af00      	add	r7, sp, #0
10005264:	60f8      	str	r0, [r7, #12]
10005266:	60b9      	str	r1, [r7, #8]
10005268:	607a      	str	r2, [r7, #4]
1000526a:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000526c:	68f8      	ldr	r0, [r7, #12]
1000526e:	f7ff ff37 	bl	100050e0 <rpmsg_virtio_get_role>
10005272:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10005274:	697b      	ldr	r3, [r7, #20]
10005276:	2b01      	cmp	r3, #1
10005278:	d109      	bne.n	1000528e <rpmsg_virtio_enqueue_buffer+0x30>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
1000527a:	68fb      	ldr	r3, [r7, #12]
1000527c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10005280:	8879      	ldrh	r1, [r7, #2]
10005282:	687a      	ldr	r2, [r7, #4]
10005284:	4618      	mov	r0, r3
10005286:	f000 fd57 	bl	10005d38 <virtqueue_add_consumed_buffer>
1000528a:	4603      	mov	r3, r0
1000528c:	e000      	b.n	10005290 <rpmsg_virtio_enqueue_buffer+0x32>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
1000528e:	2300      	movs	r3, #0
}
10005290:	4618      	mov	r0, r3
10005292:	3718      	adds	r7, #24
10005294:	46bd      	mov	sp, r7
10005296:	bd80      	pop	{r7, pc}

10005298 <rpmsg_virtio_get_tx_buffer>:
 *
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
10005298:	b580      	push	{r7, lr}
1000529a:	b086      	sub	sp, #24
1000529c:	af00      	add	r7, sp, #0
1000529e:	60f8      	str	r0, [r7, #12]
100052a0:	60b9      	str	r1, [r7, #8]
100052a2:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
100052a4:	68f8      	ldr	r0, [r7, #12]
100052a6:	f7ff ff1b 	bl	100050e0 <rpmsg_virtio_get_role>
100052aa:	6138      	str	r0, [r7, #16]
	void *data = NULL;
100052ac:	2300      	movs	r3, #0
100052ae:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
100052b0:	693b      	ldr	r3, [r7, #16]
100052b2:	2b01      	cmp	r3, #1
100052b4:	d108      	bne.n	100052c8 <rpmsg_virtio_get_tx_buffer+0x30>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
100052b6:	68fb      	ldr	r3, [r7, #12]
100052b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100052bc:	68ba      	ldr	r2, [r7, #8]
100052be:	6879      	ldr	r1, [r7, #4]
100052c0:	4618      	mov	r0, r3
100052c2:	f000 fcf1 	bl	10005ca8 <virtqueue_get_available_buffer>
100052c6:	6178      	str	r0, [r7, #20]
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
100052c8:	697b      	ldr	r3, [r7, #20]
}
100052ca:	4618      	mov	r0, r3
100052cc:	3718      	adds	r7, #24
100052ce:	46bd      	mov	sp, r7
100052d0:	bd80      	pop	{r7, pc}

100052d2 <rpmsg_virtio_get_rx_buffer>:
 * @return - pointer to received buffer
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
100052d2:	b580      	push	{r7, lr}
100052d4:	b086      	sub	sp, #24
100052d6:	af00      	add	r7, sp, #0
100052d8:	60f8      	str	r0, [r7, #12]
100052da:	60b9      	str	r1, [r7, #8]
100052dc:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
100052de:	68f8      	ldr	r0, [r7, #12]
100052e0:	f7ff fefe 	bl	100050e0 <rpmsg_virtio_get_role>
100052e4:	6138      	str	r0, [r7, #16]
	void *data = NULL;
100052e6:	2300      	movs	r3, #0
100052e8:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
100052ea:	693b      	ldr	r3, [r7, #16]
100052ec:	2b01      	cmp	r3, #1
100052ee:	d107      	bne.n	10005300 <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
100052f0:	68fb      	ldr	r3, [r7, #12]
100052f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
100052f4:	68ba      	ldr	r2, [r7, #8]
100052f6:	6879      	ldr	r1, [r7, #4]
100052f8:	4618      	mov	r0, r3
100052fa:	f000 fcd5 	bl	10005ca8 <virtqueue_get_available_buffer>
100052fe:	6178      	str	r0, [r7, #20]
#ifdef VIRTIO_CACHED_BUFFERS
	/* Invalidate the buffer before returning it */
	metal_cache_invalidate(data, *len);
#endif /* VIRTIO_CACHED_BUFFERS */

	return data;
10005300:	697b      	ldr	r3, [r7, #20]
}
10005302:	4618      	mov	r0, r3
10005304:	3718      	adds	r7, #24
10005306:	46bd      	mov	sp, r7
10005308:	bd80      	pop	{r7, pc}

1000530a <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
1000530a:	b580      	push	{r7, lr}
1000530c:	b084      	sub	sp, #16
1000530e:	af00      	add	r7, sp, #0
10005310:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
10005312:	6878      	ldr	r0, [r7, #4]
10005314:	f7ff ff04 	bl	10005120 <rpmsg_virtio_get_status>
10005318:	4603      	mov	r3, r0
1000531a:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
1000531c:	7bfb      	ldrb	r3, [r7, #15]
1000531e:	f003 0340 	and.w	r3, r3, #64	; 0x40
10005322:	2b00      	cmp	r3, #0
10005324:	d004      	beq.n	10005330 <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
10005326:	2100      	movs	r1, #0
10005328:	6878      	ldr	r0, [r7, #4]
1000532a:	f7ff fee6 	bl	100050fa <rpmsg_virtio_set_status>
1000532e:	e7f0      	b.n	10005312 <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
10005330:	7bfb      	ldrb	r3, [r7, #15]
10005332:	f003 0304 	and.w	r3, r3, #4
10005336:	2b00      	cmp	r3, #0
10005338:	d0eb      	beq.n	10005312 <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
1000533a:	2301      	movs	r3, #1
		}
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}
}
1000533c:	4618      	mov	r0, r3
1000533e:	3710      	adds	r7, #16
10005340:	46bd      	mov	sp, r7
10005342:	bd80      	pop	{r7, pc}

10005344 <rpmsg_virtio_hold_rx_buffer>:

	return length;
}

static void rpmsg_virtio_hold_rx_buffer(struct rpmsg_device *rdev, void *rxbuf)
{
10005344:	b480      	push	{r7}
10005346:	b085      	sub	sp, #20
10005348:	af00      	add	r7, sp, #0
1000534a:	6078      	str	r0, [r7, #4]
1000534c:	6039      	str	r1, [r7, #0]
	struct rpmsg_hdr *rp_hdr;

	(void)rdev;

	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
1000534e:	683b      	ldr	r3, [r7, #0]
10005350:	3b10      	subs	r3, #16
10005352:	60fb      	str	r3, [r7, #12]

	/* Set held status to keep buffer */
	rp_hdr->reserved |= RPMSG_BUF_HELD;
10005354:	68fb      	ldr	r3, [r7, #12]
10005356:	689b      	ldr	r3, [r3, #8]
10005358:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
1000535c:	68fb      	ldr	r3, [r7, #12]
1000535e:	609a      	str	r2, [r3, #8]
}
10005360:	bf00      	nop
10005362:	3714      	adds	r7, #20
10005364:	46bd      	mov	sp, r7
10005366:	f85d 7b04 	ldr.w	r7, [sp], #4
1000536a:	4770      	bx	lr

1000536c <rpmsg_virtio_release_rx_buffer>:

static void rpmsg_virtio_release_rx_buffer(struct rpmsg_device *rdev,
					   void *rxbuf)
{
1000536c:	b580      	push	{r7, lr}
1000536e:	b086      	sub	sp, #24
10005370:	af00      	add	r7, sp, #0
10005372:	6078      	str	r0, [r7, #4]
10005374:	6039      	str	r1, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr *rp_hdr;
	uint16_t idx;
	uint32_t len;

	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10005376:	687b      	ldr	r3, [r7, #4]
10005378:	617b      	str	r3, [r7, #20]
	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
1000537a:	683b      	ldr	r3, [r7, #0]
1000537c:	3b10      	subs	r3, #16
1000537e:	613b      	str	r3, [r7, #16]
	/* The reserved field contains buffer index */
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
10005380:	693b      	ldr	r3, [r7, #16]
10005382:	689b      	ldr	r3, [r3, #8]
10005384:	81fb      	strh	r3, [r7, #14]

	metal_mutex_acquire(&rdev->lock);
10005386:	687b      	ldr	r3, [r7, #4]
10005388:	3358      	adds	r3, #88	; 0x58
1000538a:	4618      	mov	r0, r3
1000538c:	f7ff fe92 	bl	100050b4 <metal_mutex_acquire>
	/* Return buffer on virtqueue. */
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
10005390:	697b      	ldr	r3, [r7, #20]
10005392:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
10005394:	89fa      	ldrh	r2, [r7, #14]
10005396:	4611      	mov	r1, r2
10005398:	4618      	mov	r0, r3
1000539a:	f000 fc73 	bl	10005c84 <virtqueue_get_buffer_length>
1000539e:	60b8      	str	r0, [r7, #8]
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
100053a0:	89fb      	ldrh	r3, [r7, #14]
100053a2:	68ba      	ldr	r2, [r7, #8]
100053a4:	6939      	ldr	r1, [r7, #16]
100053a6:	6978      	ldr	r0, [r7, #20]
100053a8:	f7ff ff40 	bl	1000522c <rpmsg_virtio_return_buffer>
	metal_mutex_release(&rdev->lock);
100053ac:	687b      	ldr	r3, [r7, #4]
100053ae:	3358      	adds	r3, #88	; 0x58
100053b0:	4618      	mov	r0, r3
100053b2:	f7ff fe8a 	bl	100050ca <metal_mutex_release>
}
100053b6:	bf00      	nop
100053b8:	3718      	adds	r7, #24
100053ba:	46bd      	mov	sp, r7
100053bc:	bd80      	pop	{r7, pc}

100053be <rpmsg_virtio_get_tx_payload_buffer>:

static void *rpmsg_virtio_get_tx_payload_buffer(struct rpmsg_device *rdev,
						uint32_t *len, int wait)
{
100053be:	b580      	push	{r7, lr}
100053c0:	b08a      	sub	sp, #40	; 0x28
100053c2:	af00      	add	r7, sp, #0
100053c4:	60f8      	str	r0, [r7, #12]
100053c6:	60b9      	str	r1, [r7, #8]
100053c8:	607a      	str	r2, [r7, #4]
	uint16_t idx;
	int tick_count;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
100053ca:	68fb      	ldr	r3, [r7, #12]
100053cc:	623b      	str	r3, [r7, #32]

	/* Validate device state */
	status = rpmsg_virtio_get_status(rvdev);
100053ce:	6a38      	ldr	r0, [r7, #32]
100053d0:	f7ff fea6 	bl	10005120 <rpmsg_virtio_get_status>
100053d4:	4603      	mov	r3, r0
100053d6:	61fb      	str	r3, [r7, #28]
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
100053d8:	69fb      	ldr	r3, [r7, #28]
100053da:	f003 0304 	and.w	r3, r3, #4
100053de:	2b00      	cmp	r3, #0
100053e0:	d101      	bne.n	100053e6 <rpmsg_virtio_get_tx_payload_buffer+0x28>
		return NULL;
100053e2:	2300      	movs	r3, #0
100053e4:	e039      	b.n	1000545a <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	if (wait)
100053e6:	687b      	ldr	r3, [r7, #4]
100053e8:	2b00      	cmp	r3, #0
100053ea:	d003      	beq.n	100053f4 <rpmsg_virtio_get_tx_payload_buffer+0x36>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
100053ec:	f643 2398 	movw	r3, #15000	; 0x3a98
100053f0:	627b      	str	r3, [r7, #36]	; 0x24
100053f2:	e001      	b.n	100053f8 <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	else
		tick_count = 0;
100053f4:	2300      	movs	r3, #0
100053f6:	627b      	str	r3, [r7, #36]	; 0x24

	while (1) {
		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
100053f8:	68fb      	ldr	r3, [r7, #12]
100053fa:	3358      	adds	r3, #88	; 0x58
100053fc:	4618      	mov	r0, r3
100053fe:	f7ff fe59 	bl	100050b4 <metal_mutex_acquire>
		rp_hdr = rpmsg_virtio_get_tx_buffer(rvdev, len, &idx);
10005402:	f107 0316 	add.w	r3, r7, #22
10005406:	461a      	mov	r2, r3
10005408:	68b9      	ldr	r1, [r7, #8]
1000540a:	6a38      	ldr	r0, [r7, #32]
1000540c:	f7ff ff44 	bl	10005298 <rpmsg_virtio_get_tx_buffer>
10005410:	61b8      	str	r0, [r7, #24]
		metal_mutex_release(&rdev->lock);
10005412:	68fb      	ldr	r3, [r7, #12]
10005414:	3358      	adds	r3, #88	; 0x58
10005416:	4618      	mov	r0, r3
10005418:	f7ff fe57 	bl	100050ca <metal_mutex_release>
		if (rp_hdr || !tick_count)
1000541c:	69bb      	ldr	r3, [r7, #24]
1000541e:	2b00      	cmp	r3, #0
10005420:	d10a      	bne.n	10005438 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
10005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005424:	2b00      	cmp	r3, #0
10005426:	d007      	beq.n	10005438 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
			break;
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
10005428:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1000542c:	f7ff fda7 	bl	10004f7e <metal_sleep_usec>
		tick_count--;
10005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005432:	3b01      	subs	r3, #1
10005434:	627b      	str	r3, [r7, #36]	; 0x24
		metal_mutex_acquire(&rdev->lock);
10005436:	e7df      	b.n	100053f8 <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	}

	if (!rp_hdr)
10005438:	69bb      	ldr	r3, [r7, #24]
1000543a:	2b00      	cmp	r3, #0
1000543c:	d101      	bne.n	10005442 <rpmsg_virtio_get_tx_payload_buffer+0x84>
		return NULL;
1000543e:	2300      	movs	r3, #0
10005440:	e00b      	b.n	1000545a <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	/* Store the index into the reserved field to be used when sending */
	rp_hdr->reserved = idx;
10005442:	8afb      	ldrh	r3, [r7, #22]
10005444:	461a      	mov	r2, r3
10005446:	69bb      	ldr	r3, [r7, #24]
10005448:	609a      	str	r2, [r3, #8]

	/* Actual data buffer size is vring buffer size minus header length */
	*len -= sizeof(struct rpmsg_hdr);
1000544a:	68bb      	ldr	r3, [r7, #8]
1000544c:	681b      	ldr	r3, [r3, #0]
1000544e:	f1a3 0210 	sub.w	r2, r3, #16
10005452:	68bb      	ldr	r3, [r7, #8]
10005454:	601a      	str	r2, [r3, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
10005456:	69bb      	ldr	r3, [r7, #24]
10005458:	3310      	adds	r3, #16
}
1000545a:	4618      	mov	r0, r3
1000545c:	3728      	adds	r7, #40	; 0x28
1000545e:	46bd      	mov	sp, r7
10005460:	bd80      	pop	{r7, pc}
	...

10005464 <rpmsg_virtio_send_offchannel_nocopy>:

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
10005464:	b580      	push	{r7, lr}
10005466:	b08e      	sub	sp, #56	; 0x38
10005468:	af00      	add	r7, sp, #0
1000546a:	60f8      	str	r0, [r7, #12]
1000546c:	60b9      	str	r1, [r7, #8]
1000546e:	607a      	str	r2, [r7, #4]
10005470:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	uint16_t idx;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10005472:	68fb      	ldr	r3, [r7, #12]
10005474:	637b      	str	r3, [r7, #52]	; 0x34

	hdr = RPMSG_LOCATE_HDR(data);
10005476:	683b      	ldr	r3, [r7, #0]
10005478:	3b10      	subs	r3, #16
1000547a:	633b      	str	r3, [r7, #48]	; 0x30
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
1000547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000547e:	689b      	ldr	r3, [r3, #8]
10005480:	85fb      	strh	r3, [r7, #46]	; 0x2e

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
10005482:	687b      	ldr	r3, [r7, #4]
10005484:	617b      	str	r3, [r7, #20]
	rp_hdr.src = src;
10005486:	68bb      	ldr	r3, [r7, #8]
10005488:	613b      	str	r3, [r7, #16]
	rp_hdr.len = len;
1000548a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000548c:	b29b      	uxth	r3, r3
1000548e:	83bb      	strh	r3, [r7, #28]
	rp_hdr.reserved = 0;
10005490:	2300      	movs	r3, #0
10005492:	61bb      	str	r3, [r7, #24]
	rp_hdr.flags = 0;
10005494:	2300      	movs	r3, #0
10005496:	83fb      	strh	r3, [r7, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
10005498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000549a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
1000549e:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
100054a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
100054a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
100054a4:	f7ff fd87 	bl	10004fb6 <metal_io_virt_to_offset>
100054a8:	4601      	mov	r1, r0
100054aa:	f107 0210 	add.w	r2, r7, #16
100054ae:	2310      	movs	r3, #16
100054b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
100054b2:	f7fe fe1b 	bl	100040ec <metal_io_block_write>
100054b6:	6278      	str	r0, [r7, #36]	; 0x24
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
100054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100054ba:	2b10      	cmp	r3, #16
100054bc:	d006      	beq.n	100054cc <rpmsg_virtio_send_offchannel_nocopy+0x68>
100054be:	4b1b      	ldr	r3, [pc, #108]	; (1000552c <rpmsg_virtio_send_offchannel_nocopy+0xc8>)
100054c0:	4a1b      	ldr	r2, [pc, #108]	; (10005530 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
100054c2:	f240 117d 	movw	r1, #381	; 0x17d
100054c6:	481b      	ldr	r0, [pc, #108]	; (10005534 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
100054c8:	f000 fdd6 	bl	10006078 <__assert_func>

	metal_mutex_acquire(&rdev->lock);
100054cc:	68fb      	ldr	r3, [r7, #12]
100054ce:	3358      	adds	r3, #88	; 0x58
100054d0:	4618      	mov	r0, r3
100054d2:	f7ff fdef 	bl	100050b4 <metal_mutex_acquire>
#ifndef VIRTIO_SLAVE_ONLY
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_MASTER)
		buff_len = RPMSG_BUFFER_SIZE;
	else
#endif /*!VIRTIO_SLAVE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
100054d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100054d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100054dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
100054de:	4611      	mov	r1, r2
100054e0:	4618      	mov	r0, r3
100054e2:	f000 fbcf 	bl	10005c84 <virtqueue_get_buffer_length>
100054e6:	6238      	str	r0, [r7, #32]

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
100054e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
100054ea:	6a3a      	ldr	r2, [r7, #32]
100054ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
100054ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
100054f0:	f7ff feb5 	bl	1000525e <rpmsg_virtio_enqueue_buffer>
100054f4:	6278      	str	r0, [r7, #36]	; 0x24
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
100054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100054f8:	2b00      	cmp	r3, #0
100054fa:	d006      	beq.n	1000550a <rpmsg_virtio_send_offchannel_nocopy+0xa6>
100054fc:	4b0e      	ldr	r3, [pc, #56]	; (10005538 <rpmsg_virtio_send_offchannel_nocopy+0xd4>)
100054fe:	4a0c      	ldr	r2, [pc, #48]	; (10005530 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
10005500:	f44f 71c5 	mov.w	r1, #394	; 0x18a
10005504:	480b      	ldr	r0, [pc, #44]	; (10005534 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
10005506:	f000 fdb7 	bl	10006078 <__assert_func>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
1000550a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000550c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10005510:	4618      	mov	r0, r3
10005512:	f000 fc8b 	bl	10005e2c <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
10005516:	68fb      	ldr	r3, [r7, #12]
10005518:	3358      	adds	r3, #88	; 0x58
1000551a:	4618      	mov	r0, r3
1000551c:	f7ff fdd5 	bl	100050ca <metal_mutex_release>

	return len;
10005520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
10005522:	4618      	mov	r0, r3
10005524:	3738      	adds	r7, #56	; 0x38
10005526:	46bd      	mov	sp, r7
10005528:	bd80      	pop	{r7, pc}
1000552a:	bf00      	nop
1000552c:	10007504 	.word	0x10007504
10005530:	1000763c 	.word	0x1000763c
10005534:	10007520 	.word	0x10007520
10005538:	10007580 	.word	0x10007580

1000553c <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
1000553c:	b580      	push	{r7, lr}
1000553e:	b08c      	sub	sp, #48	; 0x30
10005540:	af02      	add	r7, sp, #8
10005542:	60f8      	str	r0, [r7, #12]
10005544:	60b9      	str	r1, [r7, #8]
10005546:	607a      	str	r2, [r7, #4]
10005548:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	void *buffer;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000554a:	68fb      	ldr	r3, [r7, #12]
1000554c:	627b      	str	r3, [r7, #36]	; 0x24

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
1000554e:	f107 0314 	add.w	r3, r7, #20
10005552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
10005554:	4619      	mov	r1, r3
10005556:	68f8      	ldr	r0, [r7, #12]
10005558:	f7ff ff31 	bl	100053be <rpmsg_virtio_get_tx_payload_buffer>
1000555c:	6238      	str	r0, [r7, #32]
	if (!buffer)
1000555e:	6a3b      	ldr	r3, [r7, #32]
10005560:	2b00      	cmp	r3, #0
10005562:	d101      	bne.n	10005568 <rpmsg_virtio_send_offchannel_raw+0x2c>
		return RPMSG_ERR_NO_BUFF;
10005564:	4b17      	ldr	r3, [pc, #92]	; (100055c4 <rpmsg_virtio_send_offchannel_raw+0x88>)
10005566:	e029      	b.n	100055bc <rpmsg_virtio_send_offchannel_raw+0x80>

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
10005568:	697b      	ldr	r3, [r7, #20]
1000556a:	461a      	mov	r2, r3
1000556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000556e:	4293      	cmp	r3, r2
10005570:	dd01      	ble.n	10005576 <rpmsg_virtio_send_offchannel_raw+0x3a>
		len = buff_len;
10005572:	697b      	ldr	r3, [r7, #20]
10005574:	633b      	str	r3, [r7, #48]	; 0x30
	io = rvdev->shbuf_io;
10005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
1000557c:	61fb      	str	r3, [r7, #28]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
1000557e:	6a39      	ldr	r1, [r7, #32]
10005580:	69f8      	ldr	r0, [r7, #28]
10005582:	f7ff fd18 	bl	10004fb6 <metal_io_virt_to_offset>
10005586:	4601      	mov	r1, r0
10005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000558a:	683a      	ldr	r2, [r7, #0]
1000558c:	69f8      	ldr	r0, [r7, #28]
1000558e:	f7fe fdad 	bl	100040ec <metal_io_block_write>
10005592:	61b8      	str	r0, [r7, #24]
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
10005594:	69ba      	ldr	r2, [r7, #24]
10005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005598:	429a      	cmp	r2, r3
1000559a:	d006      	beq.n	100055aa <rpmsg_virtio_send_offchannel_raw+0x6e>
1000559c:	4b0a      	ldr	r3, [pc, #40]	; (100055c8 <rpmsg_virtio_send_offchannel_raw+0x8c>)
1000559e:	4a0b      	ldr	r2, [pc, #44]	; (100055cc <rpmsg_virtio_send_offchannel_raw+0x90>)
100055a0:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
100055a4:	480a      	ldr	r0, [pc, #40]	; (100055d0 <rpmsg_virtio_send_offchannel_raw+0x94>)
100055a6:	f000 fd67 	bl	10006078 <__assert_func>

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
100055aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100055ac:	9300      	str	r3, [sp, #0]
100055ae:	6a3b      	ldr	r3, [r7, #32]
100055b0:	687a      	ldr	r2, [r7, #4]
100055b2:	68b9      	ldr	r1, [r7, #8]
100055b4:	68f8      	ldr	r0, [r7, #12]
100055b6:	f7ff ff55 	bl	10005464 <rpmsg_virtio_send_offchannel_nocopy>
100055ba:	4603      	mov	r3, r0
}
100055bc:	4618      	mov	r0, r3
100055be:	3728      	adds	r7, #40	; 0x28
100055c0:	46bd      	mov	sp, r7
100055c2:	bd80      	pop	{r7, pc}
100055c4:	fffff82e 	.word	0xfffff82e
100055c8:	1000758c 	.word	0x1000758c
100055cc:	10007660 	.word	0x10007660
100055d0:	10007520 	.word	0x10007520

100055d4 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
100055d4:	b480      	push	{r7}
100055d6:	b083      	sub	sp, #12
100055d8:	af00      	add	r7, sp, #0
100055da:	6078      	str	r0, [r7, #4]
	(void)vq;
}
100055dc:	bf00      	nop
100055de:	370c      	adds	r7, #12
100055e0:	46bd      	mov	sp, r7
100055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
100055e6:	4770      	bx	lr

100055e8 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
100055e8:	b590      	push	{r4, r7, lr}
100055ea:	b08d      	sub	sp, #52	; 0x34
100055ec:	af02      	add	r7, sp, #8
100055ee:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
100055f0:	687b      	ldr	r3, [r7, #4]
100055f2:	681b      	ldr	r3, [r3, #0]
100055f4:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
100055f6:	6a3b      	ldr	r3, [r7, #32]
100055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100055fa:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
100055fc:	69fb      	ldr	r3, [r7, #28]
100055fe:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
10005600:	69bb      	ldr	r3, [r7, #24]
10005602:	3358      	adds	r3, #88	; 0x58
10005604:	4618      	mov	r0, r3
10005606:	f7ff fd55 	bl	100050b4 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
1000560a:	f107 020a 	add.w	r2, r7, #10
1000560e:	f107 030c 	add.w	r3, r7, #12
10005612:	4619      	mov	r1, r3
10005614:	69f8      	ldr	r0, [r7, #28]
10005616:	f7ff fe5c 	bl	100052d2 <rpmsg_virtio_get_rx_buffer>
1000561a:	6278      	str	r0, [r7, #36]	; 0x24

	metal_mutex_release(&rdev->lock);
1000561c:	69bb      	ldr	r3, [r7, #24]
1000561e:	3358      	adds	r3, #88	; 0x58
10005620:	4618      	mov	r0, r3
10005622:	f7ff fd52 	bl	100050ca <metal_mutex_release>

	while (rp_hdr) {
10005626:	e062      	b.n	100056ee <rpmsg_virtio_rx_callback+0x106>
		rp_hdr->reserved = idx;
10005628:	897b      	ldrh	r3, [r7, #10]
1000562a:	461a      	mov	r2, r3
1000562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000562e:	609a      	str	r2, [r3, #8]

		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
10005630:	69bb      	ldr	r3, [r7, #24]
10005632:	3358      	adds	r3, #88	; 0x58
10005634:	4618      	mov	r0, r3
10005636:	f7ff fd3d 	bl	100050b4 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
1000563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000563c:	685b      	ldr	r3, [r3, #4]
1000563e:	4619      	mov	r1, r3
10005640:	69b8      	ldr	r0, [r7, #24]
10005642:	f7ff fdc9 	bl	100051d8 <rpmsg_get_ept_from_addr>
10005646:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
10005648:	69bb      	ldr	r3, [r7, #24]
1000564a:	3358      	adds	r3, #88	; 0x58
1000564c:	4618      	mov	r0, r3
1000564e:	f7ff fd3c 	bl	100050ca <metal_mutex_release>

		if (ept) {
10005652:	697b      	ldr	r3, [r7, #20]
10005654:	2b00      	cmp	r3, #0
10005656:	d025      	beq.n	100056a4 <rpmsg_virtio_rx_callback+0xbc>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
10005658:	697b      	ldr	r3, [r7, #20]
1000565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000565c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10005660:	d103      	bne.n	1000566a <rpmsg_virtio_rx_callback+0x82>
				/*
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
10005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005664:	681a      	ldr	r2, [r3, #0]
10005666:	697b      	ldr	r3, [r7, #20]
10005668:	629a      	str	r2, [r3, #40]	; 0x28
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
1000566a:	697b      	ldr	r3, [r7, #20]
1000566c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
1000566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005670:	f103 0110 	add.w	r1, r3, #16
					 rp_hdr->len, rp_hdr->src, ept->priv);
10005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005676:	899b      	ldrh	r3, [r3, #12]
10005678:	b29b      	uxth	r3, r3
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
1000567a:	4618      	mov	r0, r3
1000567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000567e:	681a      	ldr	r2, [r3, #0]
10005680:	697b      	ldr	r3, [r7, #20]
10005682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10005684:	9300      	str	r3, [sp, #0]
10005686:	4613      	mov	r3, r2
10005688:	4602      	mov	r2, r0
1000568a:	6978      	ldr	r0, [r7, #20]
1000568c:	47a0      	blx	r4
1000568e:	6138      	str	r0, [r7, #16]

			RPMSG_ASSERT(status >= 0,
10005690:	693b      	ldr	r3, [r7, #16]
10005692:	2b00      	cmp	r3, #0
10005694:	da06      	bge.n	100056a4 <rpmsg_virtio_rx_callback+0xbc>
10005696:	4b1a      	ldr	r3, [pc, #104]	; (10005700 <rpmsg_virtio_rx_callback+0x118>)
10005698:	4a1a      	ldr	r2, [pc, #104]	; (10005704 <rpmsg_virtio_rx_callback+0x11c>)
1000569a:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
1000569e:	481a      	ldr	r0, [pc, #104]	; (10005708 <rpmsg_virtio_rx_callback+0x120>)
100056a0:	f000 fcea 	bl	10006078 <__assert_func>
				     "unexpected callback status\r\n");
		}

		metal_mutex_acquire(&rdev->lock);
100056a4:	69bb      	ldr	r3, [r7, #24]
100056a6:	3358      	adds	r3, #88	; 0x58
100056a8:	4618      	mov	r0, r3
100056aa:	f7ff fd03 	bl	100050b4 <metal_mutex_acquire>

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
100056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100056b0:	689b      	ldr	r3, [r3, #8]
100056b2:	2b00      	cmp	r3, #0
100056b4:	db05      	blt.n	100056c2 <rpmsg_virtio_rx_callback+0xda>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
100056b6:	68fa      	ldr	r2, [r7, #12]
100056b8:	897b      	ldrh	r3, [r7, #10]
100056ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
100056bc:	69f8      	ldr	r0, [r7, #28]
100056be:	f7ff fdb5 	bl	1000522c <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
100056c2:	f107 020a 	add.w	r2, r7, #10
100056c6:	f107 030c 	add.w	r3, r7, #12
100056ca:	4619      	mov	r1, r3
100056cc:	69f8      	ldr	r0, [r7, #28]
100056ce:	f7ff fe00 	bl	100052d2 <rpmsg_virtio_get_rx_buffer>
100056d2:	6278      	str	r0, [r7, #36]	; 0x24
		if (!rp_hdr) {
100056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100056d6:	2b00      	cmp	r3, #0
100056d8:	d104      	bne.n	100056e4 <rpmsg_virtio_rx_callback+0xfc>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
100056da:	69fb      	ldr	r3, [r7, #28]
100056dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
100056de:	4618      	mov	r0, r3
100056e0:	f000 fba4 	bl	10005e2c <virtqueue_kick>
		}
		metal_mutex_release(&rdev->lock);
100056e4:	69bb      	ldr	r3, [r7, #24]
100056e6:	3358      	adds	r3, #88	; 0x58
100056e8:	4618      	mov	r0, r3
100056ea:	f7ff fcee 	bl	100050ca <metal_mutex_release>
	while (rp_hdr) {
100056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100056f0:	2b00      	cmp	r3, #0
100056f2:	d199      	bne.n	10005628 <rpmsg_virtio_rx_callback+0x40>
	}
}
100056f4:	bf00      	nop
100056f6:	bf00      	nop
100056f8:	372c      	adds	r7, #44	; 0x2c
100056fa:	46bd      	mov	sp, r7
100056fc:	bd90      	pop	{r4, r7, pc}
100056fe:	bf00      	nop
10005700:	1000759c 	.word	0x1000759c
10005704:	10007684 	.word	0x10007684
10005708:	10007520 	.word	0x10007520

1000570c <rpmsg_virtio_ns_callback>:
 *
 * @return - rpmag endpoint callback handled
 */
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
1000570c:	b580      	push	{r7, lr}
1000570e:	b092      	sub	sp, #72	; 0x48
10005710:	af00      	add	r7, sp, #0
10005712:	60f8      	str	r0, [r7, #12]
10005714:	60b9      	str	r1, [r7, #8]
10005716:	607a      	str	r2, [r7, #4]
10005718:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
1000571a:	68fb      	ldr	r3, [r7, #12]
1000571c:	6a1b      	ldr	r3, [r3, #32]
1000571e:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
10005720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10005722:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
10005724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10005726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
1000572a:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = data;
1000572c:	68bb      	ldr	r3, [r7, #8]
1000572e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
10005730:	687b      	ldr	r3, [r7, #4]
10005732:	2b28      	cmp	r3, #40	; 0x28
10005734:	d001      	beq.n	1000573a <rpmsg_virtio_ns_callback+0x2e>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
10005736:	2300      	movs	r3, #0
10005738:	e057      	b.n	100057ea <rpmsg_virtio_ns_callback+0xde>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
1000573a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
1000573c:	4619      	mov	r1, r3
1000573e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
10005740:	f7ff fc39 	bl	10004fb6 <metal_io_virt_to_offset>
10005744:	4601      	mov	r1, r0
10005746:	f107 0210 	add.w	r2, r7, #16
1000574a:	2320      	movs	r3, #32
1000574c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
1000574e:	f7fe fc58 	bl	10004002 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
10005752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10005754:	6a1b      	ldr	r3, [r3, #32]
10005756:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
10005758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000575a:	3358      	adds	r3, #88	; 0x58
1000575c:	4618      	mov	r0, r3
1000575e:	f7ff fca9 	bl	100050b4 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
10005762:	f107 0110 	add.w	r1, r7, #16
10005766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10005768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1000576c:	6c78      	ldr	r0, [r7, #68]	; 0x44
1000576e:	f7ff fadb 	bl	10004d28 <rpmsg_get_endpoint>
10005772:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
10005774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005778:	f003 0301 	and.w	r3, r3, #1
1000577c:	2b00      	cmp	r3, #0
1000577e:	d017      	beq.n	100057b0 <rpmsg_virtio_ns_callback+0xa4>
		if (_ept)
10005780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005782:	2b00      	cmp	r3, #0
10005784:	d003      	beq.n	1000578e <rpmsg_virtio_ns_callback+0x82>
			_ept->dest_addr = RPMSG_ADDR_ANY;
10005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005788:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1000578c:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
1000578e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10005790:	3358      	adds	r3, #88	; 0x58
10005792:	4618      	mov	r0, r3
10005794:	f7ff fc99 	bl	100050ca <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
10005798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000579a:	2b00      	cmp	r3, #0
1000579c:	d024      	beq.n	100057e8 <rpmsg_virtio_ns_callback+0xdc>
1000579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100057a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100057a2:	2b00      	cmp	r3, #0
100057a4:	d020      	beq.n	100057e8 <rpmsg_virtio_ns_callback+0xdc>
			_ept->ns_unbind_cb(_ept);
100057a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100057a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100057aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
100057ac:	4798      	blx	r3
100057ae:	e01b      	b.n	100057e8 <rpmsg_virtio_ns_callback+0xdc>
	} else {
		if (!_ept) {
100057b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100057b2:	2b00      	cmp	r3, #0
100057b4:	d110      	bne.n	100057d8 <rpmsg_virtio_ns_callback+0xcc>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
100057b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
100057b8:	3358      	adds	r3, #88	; 0x58
100057ba:	4618      	mov	r0, r3
100057bc:	f7ff fc85 	bl	100050ca <metal_mutex_release>
			if (rdev->ns_bind_cb)
100057c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
100057c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
100057c4:	2b00      	cmp	r3, #0
100057c6:	d00f      	beq.n	100057e8 <rpmsg_virtio_ns_callback+0xdc>
				rdev->ns_bind_cb(rdev, name, dest);
100057c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
100057ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
100057cc:	f107 0110 	add.w	r1, r7, #16
100057d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
100057d2:	6c78      	ldr	r0, [r7, #68]	; 0x44
100057d4:	4798      	blx	r3
100057d6:	e007      	b.n	100057e8 <rpmsg_virtio_ns_callback+0xdc>
		} else {
			_ept->dest_addr = dest;
100057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100057da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
100057dc:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
100057de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
100057e0:	3358      	adds	r3, #88	; 0x58
100057e2:	4618      	mov	r0, r3
100057e4:	f7ff fc71 	bl	100050ca <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
100057e8:	2300      	movs	r3, #0
}
100057ea:	4618      	mov	r0, r3
100057ec:	3748      	adds	r7, #72	; 0x48
100057ee:	46bd      	mov	sp, r7
100057f0:	bd80      	pop	{r7, pc}
	...

100057f4 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
100057f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
100057f8:	b090      	sub	sp, #64	; 0x40
100057fa:	af02      	add	r7, sp, #8
100057fc:	60f8      	str	r0, [r7, #12]
100057fe:	60b9      	str	r1, [r7, #8]
10005800:	607a      	str	r2, [r7, #4]
10005802:	603b      	str	r3, [r7, #0]
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
10005804:	68fb      	ldr	r3, [r7, #12]
10005806:	633b      	str	r3, [r7, #48]	; 0x30
	memset(rdev, 0, sizeof(*rdev));
10005808:	2278      	movs	r2, #120	; 0x78
1000580a:	2100      	movs	r1, #0
1000580c:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000580e:	f000 fe24 	bl	1000645a <memset>
	metal_mutex_init(&rdev->lock);
10005812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005814:	3358      	adds	r3, #88	; 0x58
10005816:	4618      	mov	r0, r3
10005818:	f7ff fc41 	bl	1000509e <metal_mutex_init>
	rvdev->vdev = vdev;
1000581c:	68fb      	ldr	r3, [r7, #12]
1000581e:	68ba      	ldr	r2, [r7, #8]
10005820:	679a      	str	r2, [r3, #120]	; 0x78
	rdev->ns_bind_cb = ns_bind_cb;
10005822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005824:	687a      	ldr	r2, [r7, #4]
10005826:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
10005828:	68bb      	ldr	r3, [r7, #8]
1000582a:	68fa      	ldr	r2, [r7, #12]
1000582c:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
1000582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005830:	4a4d      	ldr	r2, [pc, #308]	; (10005968 <rpmsg_init_vdev+0x174>)
10005832:	661a      	str	r2, [r3, #96]	; 0x60
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
10005834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005836:	4a4d      	ldr	r2, [pc, #308]	; (1000596c <rpmsg_init_vdev+0x178>)
10005838:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
1000583a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000583c:	4a4c      	ldr	r2, [pc, #304]	; (10005970 <rpmsg_init_vdev+0x17c>)
1000583e:	669a      	str	r2, [r3, #104]	; 0x68
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
10005840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005842:	4a4c      	ldr	r2, [pc, #304]	; (10005974 <rpmsg_init_vdev+0x180>)
10005844:	66da      	str	r2, [r3, #108]	; 0x6c
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
10005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005848:	4a4b      	ldr	r2, [pc, #300]	; (10005978 <rpmsg_init_vdev+0x184>)
1000584a:	671a      	str	r2, [r3, #112]	; 0x70
	role = rpmsg_virtio_get_role(rvdev);
1000584c:	68f8      	ldr	r0, [r7, #12]
1000584e:	f7ff fc47 	bl	100050e0 <rpmsg_virtio_get_role>
10005852:	62f8      	str	r0, [r7, #44]	; 0x2c

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10005854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10005856:	2b01      	cmp	r3, #1
10005858:	d102      	bne.n	10005860 <rpmsg_init_vdev+0x6c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
1000585a:	68f8      	ldr	r0, [r7, #12]
1000585c:	f7ff fd55 	bl	1000530a <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
10005860:	68f8      	ldr	r0, [r7, #12]
10005862:	f7ff fc6e 	bl	10005142 <rpmsg_virtio_get_features>
10005866:	4603      	mov	r3, r0
10005868:	2200      	movs	r2, #0
1000586a:	4698      	mov	r8, r3
1000586c:	4691      	mov	r9, r2
1000586e:	68bb      	ldr	r3, [r7, #8]
10005870:	e9c3 8904 	strd	r8, r9, [r3, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
10005874:	68bb      	ldr	r3, [r7, #8]
10005876:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
1000587a:	f002 0401 	and.w	r4, r2, #1
1000587e:	2500      	movs	r5, #0
10005880:	ea44 0305 	orr.w	r3, r4, r5
10005884:	2b00      	cmp	r3, #0
10005886:	bf14      	ite	ne
10005888:	2301      	movne	r3, #1
1000588a:	2300      	moveq	r3, #0
1000588c:	b2da      	uxtb	r2, r3
1000588e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005890:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
10005894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10005896:	2b01      	cmp	r3, #1
10005898:	d113      	bne.n	100058c2 <rpmsg_init_vdev+0xce>
		vq_names[0] = "tx_vq";
1000589a:	4b38      	ldr	r3, [pc, #224]	; (1000597c <rpmsg_init_vdev+0x188>)
1000589c:	61fb      	str	r3, [r7, #28]
		vq_names[1] = "rx_vq";
1000589e:	4b38      	ldr	r3, [pc, #224]	; (10005980 <rpmsg_init_vdev+0x18c>)
100058a0:	623b      	str	r3, [r7, #32]
		callback[0] = rpmsg_virtio_tx_callback;
100058a2:	4b38      	ldr	r3, [pc, #224]	; (10005984 <rpmsg_init_vdev+0x190>)
100058a4:	617b      	str	r3, [r7, #20]
		callback[1] = rpmsg_virtio_rx_callback;
100058a6:	4b38      	ldr	r3, [pc, #224]	; (10005988 <rpmsg_init_vdev+0x194>)
100058a8:	61bb      	str	r3, [r7, #24]
		rvdev->rvq  = vdev->vrings_info[1].vq;
100058aa:	68bb      	ldr	r3, [r7, #8]
100058ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100058ae:	3318      	adds	r3, #24
100058b0:	681a      	ldr	r2, [r3, #0]
100058b2:	68fb      	ldr	r3, [r7, #12]
100058b4:	67da      	str	r2, [r3, #124]	; 0x7c
		rvdev->svq  = vdev->vrings_info[0].vq;
100058b6:	68bb      	ldr	r3, [r7, #8]
100058b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100058ba:	681a      	ldr	r2, [r3, #0]
100058bc:	68fb      	ldr	r3, [r7, #12]
100058be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
100058c2:	68fb      	ldr	r3, [r7, #12]
100058c4:	683a      	ldr	r2, [r7, #0]
100058c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
100058ca:	f107 021c 	add.w	r2, r7, #28
100058ce:	f107 0314 	add.w	r3, r7, #20
100058d2:	9300      	str	r3, [sp, #0]
100058d4:	4613      	mov	r3, r2
100058d6:	2202      	movs	r2, #2
100058d8:	2100      	movs	r1, #0
100058da:	68f8      	ldr	r0, [r7, #12]
100058dc:	f7ff fc42 	bl	10005164 <rpmsg_virtio_create_virtqueues>
100058e0:	62b8      	str	r0, [r7, #40]	; 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
100058e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
100058e4:	2b00      	cmp	r3, #0
100058e6:	d001      	beq.n	100058ec <rpmsg_init_vdev+0xf8>
		return status;
100058e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
100058ea:	e037      	b.n	1000595c <rpmsg_init_vdev+0x168>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
100058ec:	68fb      	ldr	r3, [r7, #12]
100058ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100058f2:	4618      	mov	r0, r3
100058f4:	f000 fa62 	bl	10005dbc <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
100058f8:	2300      	movs	r3, #0
100058fa:	637b      	str	r3, [r7, #52]	; 0x34
100058fc:	e00f      	b.n	1000591e <rpmsg_init_vdev+0x12a>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
100058fe:	68bb      	ldr	r3, [r7, #8]
10005900:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
10005902:	6b7a      	ldr	r2, [r7, #52]	; 0x34
10005904:	4613      	mov	r3, r2
10005906:	005b      	lsls	r3, r3, #1
10005908:	4413      	add	r3, r2
1000590a:	00db      	lsls	r3, r3, #3
1000590c:	440b      	add	r3, r1
1000590e:	681b      	ldr	r3, [r3, #0]
10005910:	627b      	str	r3, [r7, #36]	; 0x24
		vq->shm_io = shm_io;
10005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005914:	683a      	ldr	r2, [r7, #0]
10005916:	629a      	str	r2, [r3, #40]	; 0x28
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
10005918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000591a:	3301      	adds	r3, #1
1000591c:	637b      	str	r3, [r7, #52]	; 0x34
1000591e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10005920:	2b01      	cmp	r3, #1
10005922:	d9ec      	bls.n	100058fe <rpmsg_init_vdev+0x10a>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
10005924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005926:	4618      	mov	r0, r3
10005928:	f7ff fb35 	bl	10004f96 <metal_list_init>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
1000592c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000592e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
10005932:	2b00      	cmp	r3, #0
10005934:	d011      	beq.n	1000595a <rpmsg_init_vdev+0x166>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
10005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005938:	f103 0008 	add.w	r0, r3, #8
1000593c:	2300      	movs	r3, #0
1000593e:	9301      	str	r3, [sp, #4]
10005940:	4b12      	ldr	r3, [pc, #72]	; (1000598c <rpmsg_init_vdev+0x198>)
10005942:	9300      	str	r3, [sp, #0]
10005944:	2335      	movs	r3, #53	; 0x35
10005946:	2235      	movs	r2, #53	; 0x35
10005948:	4911      	ldr	r1, [pc, #68]	; (10005990 <rpmsg_init_vdev+0x19c>)
1000594a:	f7ff fc21 	bl	10005190 <rpmsg_initialize_ept>
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
1000594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005950:	3308      	adds	r3, #8
10005952:	4619      	mov	r1, r3
10005954:	6b38      	ldr	r0, [r7, #48]	; 0x30
10005956:	f7ff fa72 	bl	10004e3e <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
1000595a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
1000595c:	4618      	mov	r0, r3
1000595e:	3738      	adds	r7, #56	; 0x38
10005960:	46bd      	mov	sp, r7
10005962:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
10005966:	bf00      	nop
10005968:	1000553d 	.word	0x1000553d
1000596c:	10005345 	.word	0x10005345
10005970:	1000536d 	.word	0x1000536d
10005974:	100053bf 	.word	0x100053bf
10005978:	10005465 	.word	0x10005465
1000597c:	100075a8 	.word	0x100075a8
10005980:	100075b0 	.word	0x100075b0
10005984:	100055d5 	.word	0x100055d5
10005988:	100055e9 	.word	0x100055e9
1000598c:	1000570d 	.word	0x1000570d
10005990:	100075b8 	.word	0x100075b8

10005994 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
10005994:	b590      	push	{r4, r7, lr}
10005996:	b08f      	sub	sp, #60	; 0x3c
10005998:	af04      	add	r7, sp, #16
1000599a:	60f8      	str	r0, [r7, #12]
1000599c:	60b9      	str	r1, [r7, #8]
1000599e:	607a      	str	r2, [r7, #4]
100059a0:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
100059a2:	68fb      	ldr	r3, [r7, #12]
100059a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100059a6:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
100059a8:	687a      	ldr	r2, [r7, #4]
100059aa:	6a3b      	ldr	r3, [r7, #32]
100059ac:	429a      	cmp	r2, r3
100059ae:	d901      	bls.n	100059b4 <virtio_create_virtqueues+0x20>
		return ERROR_VQUEUE_INVLD_PARAM;
100059b0:	4b1e      	ldr	r3, [pc, #120]	; (10005a2c <virtio_create_virtqueues+0x98>)
100059b2:	e036      	b.n	10005a22 <virtio_create_virtqueues+0x8e>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
100059b4:	2300      	movs	r3, #0
100059b6:	627b      	str	r3, [r7, #36]	; 0x24
100059b8:	e02e      	b.n	10005a18 <virtio_create_virtqueues+0x84>
		vring_info = &vdev->vrings_info[i];
100059ba:	68fb      	ldr	r3, [r7, #12]
100059bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
100059be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100059c0:	4613      	mov	r3, r2
100059c2:	005b      	lsls	r3, r3, #1
100059c4:	4413      	add	r3, r2
100059c6:	00db      	lsls	r3, r3, #3
100059c8:	440b      	add	r3, r1
100059ca:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
100059cc:	69fb      	ldr	r3, [r7, #28]
100059ce:	3304      	adds	r3, #4
100059d0:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
100059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100059d4:	b298      	uxth	r0, r3
100059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100059d8:	009b      	lsls	r3, r3, #2
100059da:	683a      	ldr	r2, [r7, #0]
100059dc:	4413      	add	r3, r2
100059de:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
100059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100059e2:	009b      	lsls	r3, r3, #2
100059e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
100059e6:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
100059e8:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
100059ea:	68fa      	ldr	r2, [r7, #12]
100059ec:	6a12      	ldr	r2, [r2, #32]
100059ee:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
100059f0:	69f9      	ldr	r1, [r7, #28]
100059f2:	6809      	ldr	r1, [r1, #0]
100059f4:	9102      	str	r1, [sp, #8]
100059f6:	9201      	str	r2, [sp, #4]
100059f8:	9300      	str	r3, [sp, #0]
100059fa:	69bb      	ldr	r3, [r7, #24]
100059fc:	4622      	mov	r2, r4
100059fe:	4601      	mov	r1, r0
10005a00:	68f8      	ldr	r0, [r7, #12]
10005a02:	f000 f90e 	bl	10005c22 <virtqueue_create>
10005a06:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
10005a08:	697b      	ldr	r3, [r7, #20]
10005a0a:	2b00      	cmp	r3, #0
10005a0c:	d001      	beq.n	10005a12 <virtio_create_virtqueues+0x7e>
			return ret;
10005a0e:	697b      	ldr	r3, [r7, #20]
10005a10:	e007      	b.n	10005a22 <virtio_create_virtqueues+0x8e>
	for (i = 0; i < nvqs; i++) {
10005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005a14:	3301      	adds	r3, #1
10005a16:	627b      	str	r3, [r7, #36]	; 0x24
10005a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10005a1a:	687b      	ldr	r3, [r7, #4]
10005a1c:	429a      	cmp	r2, r3
10005a1e:	d3cc      	bcc.n	100059ba <virtio_create_virtqueues+0x26>
	}
	return 0;
10005a20:	2300      	movs	r3, #0
}
10005a22:	4618      	mov	r0, r3
10005a24:	372c      	adds	r7, #44	; 0x2c
10005a26:	46bd      	mov	sp, r7
10005a28:	bd90      	pop	{r4, r7, pc}
10005a2a:	bf00      	nop
10005a2c:	fffff440 	.word	0xfffff440

10005a30 <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
10005a30:	b480      	push	{r7}
10005a32:	b085      	sub	sp, #20
10005a34:	af00      	add	r7, sp, #0
10005a36:	60f8      	str	r0, [r7, #12]
10005a38:	60b9      	str	r1, [r7, #8]
10005a3a:	607a      	str	r2, [r7, #4]
10005a3c:	603b      	str	r3, [r7, #0]
	vr->num = num;
10005a3e:	68fb      	ldr	r3, [r7, #12]
10005a40:	68ba      	ldr	r2, [r7, #8]
10005a42:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
10005a44:	68fb      	ldr	r3, [r7, #12]
10005a46:	687a      	ldr	r2, [r7, #4]
10005a48:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
10005a4a:	68bb      	ldr	r3, [r7, #8]
10005a4c:	011b      	lsls	r3, r3, #4
10005a4e:	687a      	ldr	r2, [r7, #4]
10005a50:	441a      	add	r2, r3
10005a52:	68fb      	ldr	r3, [r7, #12]
10005a54:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
10005a56:	68fb      	ldr	r3, [r7, #12]
10005a58:	689a      	ldr	r2, [r3, #8]
10005a5a:	68bb      	ldr	r3, [r7, #8]
10005a5c:	005b      	lsls	r3, r3, #1
10005a5e:	4413      	add	r3, r2
10005a60:	3304      	adds	r3, #4
10005a62:	461a      	mov	r2, r3
10005a64:	683b      	ldr	r3, [r7, #0]
10005a66:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
10005a68:	1c5a      	adds	r2, r3, #1
10005a6a:	683b      	ldr	r3, [r7, #0]
10005a6c:	425b      	negs	r3, r3
10005a6e:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
10005a70:	461a      	mov	r2, r3
10005a72:	68fb      	ldr	r3, [r7, #12]
10005a74:	60da      	str	r2, [r3, #12]
}
10005a76:	bf00      	nop
10005a78:	3714      	adds	r7, #20
10005a7a:	46bd      	mov	sp, r7
10005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
10005a80:	4770      	bx	lr

10005a82 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
10005a82:	b480      	push	{r7}
10005a84:	b083      	sub	sp, #12
10005a86:	af00      	add	r7, sp, #0
10005a88:	4603      	mov	r3, r0
10005a8a:	80fb      	strh	r3, [r7, #6]
10005a8c:	460b      	mov	r3, r1
10005a8e:	80bb      	strh	r3, [r7, #4]
10005a90:	4613      	mov	r3, r2
10005a92:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
10005a94:	88ba      	ldrh	r2, [r7, #4]
10005a96:	88fb      	ldrh	r3, [r7, #6]
10005a98:	1ad3      	subs	r3, r2, r3
10005a9a:	b29b      	uxth	r3, r3
10005a9c:	3b01      	subs	r3, #1
10005a9e:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
10005aa0:	88b9      	ldrh	r1, [r7, #4]
10005aa2:	887b      	ldrh	r3, [r7, #2]
10005aa4:	1acb      	subs	r3, r1, r3
10005aa6:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
10005aa8:	429a      	cmp	r2, r3
10005aaa:	bf34      	ite	cc
10005aac:	2301      	movcc	r3, #1
10005aae:	2300      	movcs	r3, #0
10005ab0:	b2db      	uxtb	r3, r3
}
10005ab2:	4618      	mov	r0, r3
10005ab4:	370c      	adds	r7, #12
10005ab6:	46bd      	mov	sp, r7
10005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
10005abc:	4770      	bx	lr

10005abe <metal_io_virt>:
{
10005abe:	b480      	push	{r7}
10005ac0:	b083      	sub	sp, #12
10005ac2:	af00      	add	r7, sp, #0
10005ac4:	6078      	str	r0, [r7, #4]
10005ac6:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
10005ac8:	687b      	ldr	r3, [r7, #4]
10005aca:	681b      	ldr	r3, [r3, #0]
		: NULL);
10005acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10005ad0:	d00a      	beq.n	10005ae8 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
10005ad2:	687b      	ldr	r3, [r7, #4]
10005ad4:	689b      	ldr	r3, [r3, #8]
10005ad6:	683a      	ldr	r2, [r7, #0]
10005ad8:	429a      	cmp	r2, r3
10005ada:	d205      	bcs.n	10005ae8 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
10005adc:	687b      	ldr	r3, [r7, #4]
10005ade:	681b      	ldr	r3, [r3, #0]
10005ae0:	461a      	mov	r2, r3
10005ae2:	683b      	ldr	r3, [r7, #0]
10005ae4:	4413      	add	r3, r2
		: NULL);
10005ae6:	e000      	b.n	10005aea <metal_io_virt+0x2c>
10005ae8:	2300      	movs	r3, #0
}
10005aea:	4618      	mov	r0, r3
10005aec:	370c      	adds	r7, #12
10005aee:	46bd      	mov	sp, r7
10005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
10005af4:	4770      	bx	lr

10005af6 <metal_io_phys>:
{
10005af6:	b580      	push	{r7, lr}
10005af8:	b084      	sub	sp, #16
10005afa:	af00      	add	r7, sp, #0
10005afc:	6078      	str	r0, [r7, #4]
10005afe:	6039      	str	r1, [r7, #0]
	if (!io->ops.offset_to_phys) {
10005b00:	687b      	ldr	r3, [r7, #4]
10005b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10005b04:	2b00      	cmp	r3, #0
10005b06:	d123      	bne.n	10005b50 <metal_io_phys+0x5a>
		unsigned long page = (io->page_shift >=
10005b08:	687b      	ldr	r3, [r7, #4]
10005b0a:	68db      	ldr	r3, [r3, #12]
				     0 : offset >> io->page_shift);
10005b0c:	2b1f      	cmp	r3, #31
10005b0e:	d805      	bhi.n	10005b1c <metal_io_phys+0x26>
10005b10:	687b      	ldr	r3, [r7, #4]
10005b12:	68db      	ldr	r3, [r3, #12]
10005b14:	683a      	ldr	r2, [r7, #0]
10005b16:	fa22 f303 	lsr.w	r3, r2, r3
10005b1a:	e000      	b.n	10005b1e <metal_io_phys+0x28>
10005b1c:	2300      	movs	r3, #0
		unsigned long page = (io->page_shift >=
10005b1e:	60fb      	str	r3, [r7, #12]
		return (io->physmap && offset < io->size
10005b20:	687b      	ldr	r3, [r7, #4]
10005b22:	685b      	ldr	r3, [r3, #4]
			: METAL_BAD_PHYS);
10005b24:	2b00      	cmp	r3, #0
10005b26:	d010      	beq.n	10005b4a <metal_io_phys+0x54>
		return (io->physmap && offset < io->size
10005b28:	687b      	ldr	r3, [r7, #4]
10005b2a:	689b      	ldr	r3, [r3, #8]
10005b2c:	683a      	ldr	r2, [r7, #0]
10005b2e:	429a      	cmp	r2, r3
10005b30:	d20b      	bcs.n	10005b4a <metal_io_phys+0x54>
			? io->physmap[page] + (offset & io->page_mask)
10005b32:	687b      	ldr	r3, [r7, #4]
10005b34:	685a      	ldr	r2, [r3, #4]
10005b36:	68fb      	ldr	r3, [r7, #12]
10005b38:	009b      	lsls	r3, r3, #2
10005b3a:	4413      	add	r3, r2
10005b3c:	681a      	ldr	r2, [r3, #0]
10005b3e:	687b      	ldr	r3, [r7, #4]
10005b40:	6919      	ldr	r1, [r3, #16]
10005b42:	683b      	ldr	r3, [r7, #0]
10005b44:	400b      	ands	r3, r1
			: METAL_BAD_PHYS);
10005b46:	4413      	add	r3, r2
10005b48:	e008      	b.n	10005b5c <metal_io_phys+0x66>
10005b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10005b4e:	e005      	b.n	10005b5c <metal_io_phys+0x66>
	return io->ops.offset_to_phys(io, offset);
10005b50:	687b      	ldr	r3, [r7, #4]
10005b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10005b54:	6839      	ldr	r1, [r7, #0]
10005b56:	6878      	ldr	r0, [r7, #4]
10005b58:	4798      	blx	r3
10005b5a:	4603      	mov	r3, r0
}
10005b5c:	4618      	mov	r0, r3
10005b5e:	3710      	adds	r7, #16
10005b60:	46bd      	mov	sp, r7
10005b62:	bd80      	pop	{r7, pc}

10005b64 <metal_io_phys_to_offset>:
{
10005b64:	b580      	push	{r7, lr}
10005b66:	b084      	sub	sp, #16
10005b68:	af00      	add	r7, sp, #0
10005b6a:	6078      	str	r0, [r7, #4]
10005b6c:	6039      	str	r1, [r7, #0]
	if (!io->ops.phys_to_offset) {
10005b6e:	687b      	ldr	r3, [r7, #4]
10005b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10005b72:	2b00      	cmp	r3, #0
10005b74:	d127      	bne.n	10005bc6 <metal_io_phys_to_offset+0x62>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
10005b76:	687b      	ldr	r3, [r7, #4]
10005b78:	691b      	ldr	r3, [r3, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
10005b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10005b7e:	d105      	bne.n	10005b8c <metal_io_phys_to_offset+0x28>
10005b80:	687b      	ldr	r3, [r7, #4]
10005b82:	685b      	ldr	r3, [r3, #4]
10005b84:	681b      	ldr	r3, [r3, #0]
10005b86:	683a      	ldr	r2, [r7, #0]
10005b88:	1ad3      	subs	r3, r2, r3
10005b8a:	e003      	b.n	10005b94 <metal_io_phys_to_offset+0x30>
10005b8c:	687b      	ldr	r3, [r7, #4]
10005b8e:	691a      	ldr	r2, [r3, #16]
10005b90:	683b      	ldr	r3, [r7, #0]
10005b92:	4013      	ands	r3, r2
		unsigned long offset =
10005b94:	60fb      	str	r3, [r7, #12]
			if (metal_io_phys(io, offset) == phys)
10005b96:	68f9      	ldr	r1, [r7, #12]
10005b98:	6878      	ldr	r0, [r7, #4]
10005b9a:	f7ff ffac 	bl	10005af6 <metal_io_phys>
10005b9e:	4602      	mov	r2, r0
10005ba0:	683b      	ldr	r3, [r7, #0]
10005ba2:	4293      	cmp	r3, r2
10005ba4:	d101      	bne.n	10005baa <metal_io_phys_to_offset+0x46>
				return offset;
10005ba6:	68fb      	ldr	r3, [r7, #12]
10005ba8:	e013      	b.n	10005bd2 <metal_io_phys_to_offset+0x6e>
			offset += io->page_mask + 1;
10005baa:	687b      	ldr	r3, [r7, #4]
10005bac:	691a      	ldr	r2, [r3, #16]
10005bae:	68fb      	ldr	r3, [r7, #12]
10005bb0:	4413      	add	r3, r2
10005bb2:	3301      	adds	r3, #1
10005bb4:	60fb      	str	r3, [r7, #12]
		} while (offset < io->size);
10005bb6:	687b      	ldr	r3, [r7, #4]
10005bb8:	689b      	ldr	r3, [r3, #8]
10005bba:	68fa      	ldr	r2, [r7, #12]
10005bbc:	429a      	cmp	r2, r3
10005bbe:	d3ea      	bcc.n	10005b96 <metal_io_phys_to_offset+0x32>
		return METAL_BAD_OFFSET;
10005bc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10005bc4:	e005      	b.n	10005bd2 <metal_io_phys_to_offset+0x6e>
	return (*io->ops.phys_to_offset)(io, phys);
10005bc6:	687b      	ldr	r3, [r7, #4]
10005bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10005bca:	6839      	ldr	r1, [r7, #0]
10005bcc:	6878      	ldr	r0, [r7, #4]
10005bce:	4798      	blx	r3
10005bd0:	4603      	mov	r3, r0
}
10005bd2:	4618      	mov	r0, r3
10005bd4:	3710      	adds	r7, #16
10005bd6:	46bd      	mov	sp, r7
10005bd8:	bd80      	pop	{r7, pc}

10005bda <metal_io_phys_to_virt>:
{
10005bda:	b580      	push	{r7, lr}
10005bdc:	b082      	sub	sp, #8
10005bde:	af00      	add	r7, sp, #0
10005be0:	6078      	str	r0, [r7, #4]
10005be2:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
10005be4:	6839      	ldr	r1, [r7, #0]
10005be6:	6878      	ldr	r0, [r7, #4]
10005be8:	f7ff ffbc 	bl	10005b64 <metal_io_phys_to_offset>
10005bec:	4603      	mov	r3, r0
10005bee:	4619      	mov	r1, r3
10005bf0:	6878      	ldr	r0, [r7, #4]
10005bf2:	f7ff ff64 	bl	10005abe <metal_io_virt>
10005bf6:	4603      	mov	r3, r0
}
10005bf8:	4618      	mov	r0, r3
10005bfa:	3708      	adds	r7, #8
10005bfc:	46bd      	mov	sp, r7
10005bfe:	bd80      	pop	{r7, pc}

10005c00 <virtqueue_phys_to_virt>:
#endif /* VIRTIO_CACHED_VRINGS */

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
10005c00:	b580      	push	{r7, lr}
10005c02:	b084      	sub	sp, #16
10005c04:	af00      	add	r7, sp, #0
10005c06:	6078      	str	r0, [r7, #4]
10005c08:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
10005c0a:	687b      	ldr	r3, [r7, #4]
10005c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005c0e:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
10005c10:	6839      	ldr	r1, [r7, #0]
10005c12:	68f8      	ldr	r0, [r7, #12]
10005c14:	f7ff ffe1 	bl	10005bda <metal_io_phys_to_virt>
10005c18:	4603      	mov	r3, r0
}
10005c1a:	4618      	mov	r0, r3
10005c1c:	3710      	adds	r7, #16
10005c1e:	46bd      	mov	sp, r7
10005c20:	bd80      	pop	{r7, pc}

10005c22 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
10005c22:	b580      	push	{r7, lr}
10005c24:	b086      	sub	sp, #24
10005c26:	af00      	add	r7, sp, #0
10005c28:	60f8      	str	r0, [r7, #12]
10005c2a:	607a      	str	r2, [r7, #4]
10005c2c:	603b      	str	r3, [r7, #0]
10005c2e:	460b      	mov	r3, r1
10005c30:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
10005c32:	2300      	movs	r3, #0
10005c34:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
10005c36:	697b      	ldr	r3, [r7, #20]
10005c38:	2b00      	cmp	r3, #0
10005c3a:	d11e      	bne.n	10005c7a <virtqueue_create+0x58>
		vq->vq_dev = virt_dev;
10005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005c3e:	68fa      	ldr	r2, [r7, #12]
10005c40:	601a      	str	r2, [r3, #0]
		vq->vq_name = name;
10005c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005c44:	687a      	ldr	r2, [r7, #4]
10005c46:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
10005c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005c4a:	897a      	ldrh	r2, [r7, #10]
10005c4c:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
10005c4e:	683b      	ldr	r3, [r7, #0]
10005c50:	891a      	ldrh	r2, [r3, #8]
10005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005c54:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
10005c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005c58:	895a      	ldrh	r2, [r3, #10]
10005c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005c5c:	849a      	strh	r2, [r3, #36]	; 0x24
		vq->callback = callback;
10005c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005c60:	6a3a      	ldr	r2, [r7, #32]
10005c62:	60da      	str	r2, [r3, #12]
		vq->notify = notify;
10005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10005c68:	611a      	str	r2, [r3, #16]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, ring->vaddr, ring->align);
10005c6a:	683b      	ldr	r3, [r7, #0]
10005c6c:	6819      	ldr	r1, [r3, #0]
10005c6e:	683b      	ldr	r3, [r7, #0]
10005c70:	685b      	ldr	r3, [r3, #4]
10005c72:	461a      	mov	r2, r3
10005c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
10005c76:	f000 f8ef 	bl	10005e58 <vq_ring_init>
	/*
	 * CACHE: nothing to be done here. Only desc.next is setup at this
	 * stage but that is only written by master, so no need to flush it.
	 */

	return status;
10005c7a:	697b      	ldr	r3, [r7, #20]
}
10005c7c:	4618      	mov	r0, r3
10005c7e:	3718      	adds	r7, #24
10005c80:	46bd      	mov	sp, r7
10005c82:	bd80      	pop	{r7, pc}

10005c84 <virtqueue_get_buffer_length>:

	return cookie;
}

uint32_t virtqueue_get_buffer_length(struct virtqueue *vq, uint16_t idx)
{
10005c84:	b480      	push	{r7}
10005c86:	b083      	sub	sp, #12
10005c88:	af00      	add	r7, sp, #0
10005c8a:	6078      	str	r0, [r7, #4]
10005c8c:	460b      	mov	r3, r1
10005c8e:	807b      	strh	r3, [r7, #2]
	VRING_INVALIDATE(vq->vq_ring.desc[idx].len);
	return vq->vq_ring.desc[idx].len;
10005c90:	687b      	ldr	r3, [r7, #4]
10005c92:	699a      	ldr	r2, [r3, #24]
10005c94:	887b      	ldrh	r3, [r7, #2]
10005c96:	011b      	lsls	r3, r3, #4
10005c98:	4413      	add	r3, r2
10005c9a:	689b      	ldr	r3, [r3, #8]
}
10005c9c:	4618      	mov	r0, r3
10005c9e:	370c      	adds	r7, #12
10005ca0:	46bd      	mov	sp, r7
10005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
10005ca6:	4770      	bx	lr

10005ca8 <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
10005ca8:	b580      	push	{r7, lr}
10005caa:	b086      	sub	sp, #24
10005cac:	af00      	add	r7, sp, #0
10005cae:	60f8      	str	r0, [r7, #12]
10005cb0:	60b9      	str	r1, [r7, #8]
10005cb2:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
10005cb4:	2300      	movs	r3, #0
10005cb6:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
10005cb8:	f3bf 8f5b 	dmb	ish

	/* Avail.idx is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->idx);
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
10005cbc:	68fb      	ldr	r3, [r7, #12]
10005cbe:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
10005cc0:	68fb      	ldr	r3, [r7, #12]
10005cc2:	69db      	ldr	r3, [r3, #28]
10005cc4:	885b      	ldrh	r3, [r3, #2]
10005cc6:	b29b      	uxth	r3, r3
10005cc8:	429a      	cmp	r2, r3
10005cca:	d101      	bne.n	10005cd0 <virtqueue_get_available_buffer+0x28>
		return NULL;
10005ccc:	2300      	movs	r3, #0
10005cce:	e02f      	b.n	10005d30 <virtqueue_get_available_buffer+0x88>
	VQUEUE_BUSY(vq);

	/* Avail.ring is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->ring[head_idx]);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
10005cd0:	68fb      	ldr	r3, [r7, #12]
10005cd2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
10005cd4:	1c5a      	adds	r2, r3, #1
10005cd6:	b291      	uxth	r1, r2
10005cd8:	68fa      	ldr	r2, [r7, #12]
10005cda:	8611      	strh	r1, [r2, #48]	; 0x30
10005cdc:	b21a      	sxth	r2, r3
10005cde:	68fb      	ldr	r3, [r7, #12]
10005ce0:	895b      	ldrh	r3, [r3, #10]
10005ce2:	3b01      	subs	r3, #1
10005ce4:	b29b      	uxth	r3, r3
10005ce6:	b21b      	sxth	r3, r3
10005ce8:	4013      	ands	r3, r2
10005cea:	b21b      	sxth	r3, r3
10005cec:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
10005cee:	68fb      	ldr	r3, [r7, #12]
10005cf0:	69da      	ldr	r2, [r3, #28]
10005cf2:	8afb      	ldrh	r3, [r7, #22]
10005cf4:	005b      	lsls	r3, r3, #1
10005cf6:	4413      	add	r3, r2
10005cf8:	889b      	ldrh	r3, [r3, #4]
10005cfa:	b29a      	uxth	r2, r3
10005cfc:	68bb      	ldr	r3, [r7, #8]
10005cfe:	801a      	strh	r2, [r3, #0]

	/* Invalidate the desc entry written by master before accessing it */
	VRING_INVALIDATE(vq->vq_ring.desc[*avail_idx]);
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
10005d00:	68fb      	ldr	r3, [r7, #12]
10005d02:	699a      	ldr	r2, [r3, #24]
10005d04:	68bb      	ldr	r3, [r7, #8]
10005d06:	881b      	ldrh	r3, [r3, #0]
10005d08:	011b      	lsls	r3, r3, #4
10005d0a:	18d1      	adds	r1, r2, r3
10005d0c:	680a      	ldr	r2, [r1, #0]
10005d0e:	684b      	ldr	r3, [r1, #4]
10005d10:	4613      	mov	r3, r2
10005d12:	4619      	mov	r1, r3
10005d14:	68f8      	ldr	r0, [r7, #12]
10005d16:	f7ff ff73 	bl	10005c00 <virtqueue_phys_to_virt>
10005d1a:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
10005d1c:	68fb      	ldr	r3, [r7, #12]
10005d1e:	699a      	ldr	r2, [r3, #24]
10005d20:	68bb      	ldr	r3, [r7, #8]
10005d22:	881b      	ldrh	r3, [r3, #0]
10005d24:	011b      	lsls	r3, r3, #4
10005d26:	4413      	add	r3, r2
10005d28:	689a      	ldr	r2, [r3, #8]
10005d2a:	687b      	ldr	r3, [r7, #4]
10005d2c:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
10005d2e:	693b      	ldr	r3, [r7, #16]
}
10005d30:	4618      	mov	r0, r3
10005d32:	3718      	adds	r7, #24
10005d34:	46bd      	mov	sp, r7
10005d36:	bd80      	pop	{r7, pc}

10005d38 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
10005d38:	b480      	push	{r7}
10005d3a:	b087      	sub	sp, #28
10005d3c:	af00      	add	r7, sp, #0
10005d3e:	60f8      	str	r0, [r7, #12]
10005d40:	460b      	mov	r3, r1
10005d42:	607a      	str	r2, [r7, #4]
10005d44:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
10005d46:	2300      	movs	r3, #0
10005d48:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
10005d4a:	68fb      	ldr	r3, [r7, #12]
10005d4c:	895b      	ldrh	r3, [r3, #10]
10005d4e:	897a      	ldrh	r2, [r7, #10]
10005d50:	429a      	cmp	r2, r3
10005d52:	d901      	bls.n	10005d58 <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
10005d54:	4b18      	ldr	r3, [pc, #96]	; (10005db8 <virtqueue_add_consumed_buffer+0x80>)
10005d56:	e029      	b.n	10005dac <virtqueue_add_consumed_buffer+0x74>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by master, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
10005d58:	68fb      	ldr	r3, [r7, #12]
10005d5a:	6a1b      	ldr	r3, [r3, #32]
10005d5c:	885b      	ldrh	r3, [r3, #2]
10005d5e:	b29b      	uxth	r3, r3
10005d60:	b21a      	sxth	r2, r3
10005d62:	68fb      	ldr	r3, [r7, #12]
10005d64:	895b      	ldrh	r3, [r3, #10]
10005d66:	3b01      	subs	r3, #1
10005d68:	b29b      	uxth	r3, r3
10005d6a:	b21b      	sxth	r3, r3
10005d6c:	4013      	ands	r3, r2
10005d6e:	b21b      	sxth	r3, r3
10005d70:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
10005d72:	68fb      	ldr	r3, [r7, #12]
10005d74:	6a1a      	ldr	r2, [r3, #32]
10005d76:	8a7b      	ldrh	r3, [r7, #18]
10005d78:	00db      	lsls	r3, r3, #3
10005d7a:	4413      	add	r3, r2
10005d7c:	3304      	adds	r3, #4
10005d7e:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
10005d80:	897a      	ldrh	r2, [r7, #10]
10005d82:	697b      	ldr	r3, [r7, #20]
10005d84:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
10005d86:	697b      	ldr	r3, [r7, #20]
10005d88:	687a      	ldr	r2, [r7, #4]
10005d8a:	605a      	str	r2, [r3, #4]

	/* We still need to flush it because this is read by master */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
10005d8c:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
10005d90:	68fb      	ldr	r3, [r7, #12]
10005d92:	6a1b      	ldr	r3, [r3, #32]
10005d94:	885a      	ldrh	r2, [r3, #2]
10005d96:	b292      	uxth	r2, r2
10005d98:	3201      	adds	r2, #1
10005d9a:	b292      	uxth	r2, r2
10005d9c:	805a      	strh	r2, [r3, #2]

	/* Used.idx is read by master, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
10005d9e:	68fb      	ldr	r3, [r7, #12]
10005da0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
10005da2:	3301      	adds	r3, #1
10005da4:	b29a      	uxth	r2, r3
10005da6:	68fb      	ldr	r3, [r7, #12]
10005da8:	84da      	strh	r2, [r3, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
10005daa:	2300      	movs	r3, #0
}
10005dac:	4618      	mov	r0, r3
10005dae:	371c      	adds	r7, #28
10005db0:	46bd      	mov	sp, r7
10005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
10005db6:	4770      	bx	lr
10005db8:	fffff441 	.word	0xfffff441

10005dbc <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
10005dbc:	b480      	push	{r7}
10005dbe:	b083      	sub	sp, #12
10005dc0:	af00      	add	r7, sp, #0
10005dc2:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
10005dc4:	6879      	ldr	r1, [r7, #4]
10005dc6:	6809      	ldr	r1, [r1, #0]
10005dc8:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
10005dcc:	f000 5200 	and.w	r2, r0, #536870912	; 0x20000000
10005dd0:	2300      	movs	r3, #0
10005dd2:	4313      	orrs	r3, r2
10005dd4:	d015      	beq.n	10005e02 <virtqueue_disable_cb+0x46>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
			VRING_FLUSH(vring_used_event(&vq->vq_ring));
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10005dd6:	687b      	ldr	r3, [r7, #4]
10005dd8:	681b      	ldr	r3, [r3, #0]
10005dda:	699b      	ldr	r3, [r3, #24]
10005ddc:	2b01      	cmp	r3, #1
10005dde:	d11f      	bne.n	10005e20 <virtqueue_disable_cb+0x64>
			vring_avail_event(&vq->vq_ring) =
			    vq->vq_available_idx - vq->vq_nentries - 1;
10005de0:	687b      	ldr	r3, [r7, #4]
10005de2:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
10005de4:	687b      	ldr	r3, [r7, #4]
10005de6:	895b      	ldrh	r3, [r3, #10]
10005de8:	1ad3      	subs	r3, r2, r3
10005dea:	b299      	uxth	r1, r3
			vring_avail_event(&vq->vq_ring) =
10005dec:	687b      	ldr	r3, [r7, #4]
10005dee:	6a1a      	ldr	r2, [r3, #32]
10005df0:	687b      	ldr	r3, [r7, #4]
10005df2:	695b      	ldr	r3, [r3, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
10005df4:	3901      	subs	r1, #1
10005df6:	b289      	uxth	r1, r1
			vring_avail_event(&vq->vq_ring) =
10005df8:	00db      	lsls	r3, r3, #3
10005dfa:	4413      	add	r3, r2
10005dfc:	460a      	mov	r2, r1
10005dfe:	809a      	strh	r2, [r3, #4]
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	VQUEUE_IDLE(vq);
}
10005e00:	e00e      	b.n	10005e20 <virtqueue_disable_cb+0x64>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10005e02:	687b      	ldr	r3, [r7, #4]
10005e04:	681b      	ldr	r3, [r3, #0]
10005e06:	699b      	ldr	r3, [r3, #24]
10005e08:	2b01      	cmp	r3, #1
10005e0a:	d109      	bne.n	10005e20 <virtqueue_disable_cb+0x64>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
10005e0c:	687b      	ldr	r3, [r7, #4]
10005e0e:	6a1b      	ldr	r3, [r3, #32]
10005e10:	881b      	ldrh	r3, [r3, #0]
10005e12:	b29a      	uxth	r2, r3
10005e14:	687b      	ldr	r3, [r7, #4]
10005e16:	6a1b      	ldr	r3, [r3, #32]
10005e18:	f042 0201 	orr.w	r2, r2, #1
10005e1c:	b292      	uxth	r2, r2
10005e1e:	801a      	strh	r2, [r3, #0]
}
10005e20:	bf00      	nop
10005e22:	370c      	adds	r7, #12
10005e24:	46bd      	mov	sp, r7
10005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
10005e2a:	4770      	bx	lr

10005e2c <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
10005e2c:	b580      	push	{r7, lr}
10005e2e:	b082      	sub	sp, #8
10005e30:	af00      	add	r7, sp, #0
10005e32:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
10005e34:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify(vq))
10005e38:	6878      	ldr	r0, [r7, #4]
10005e3a:	f000 f835 	bl	10005ea8 <vq_ring_must_notify>
10005e3e:	4603      	mov	r3, r0
10005e40:	2b00      	cmp	r3, #0
10005e42:	d002      	beq.n	10005e4a <virtqueue_kick+0x1e>
		vq_ring_notify(vq);
10005e44:	6878      	ldr	r0, [r7, #4]
10005e46:	f000 f87d 	bl	10005f44 <vq_ring_notify>

	vq->vq_queued_cnt = 0;
10005e4a:	687b      	ldr	r3, [r7, #4]
10005e4c:	2200      	movs	r2, #0
10005e4e:	84da      	strh	r2, [r3, #38]	; 0x26

	VQUEUE_IDLE(vq);
}
10005e50:	bf00      	nop
10005e52:	3708      	adds	r7, #8
10005e54:	46bd      	mov	sp, r7
10005e56:	bd80      	pop	{r7, pc}

10005e58 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
10005e58:	b580      	push	{r7, lr}
10005e5a:	b086      	sub	sp, #24
10005e5c:	af00      	add	r7, sp, #0
10005e5e:	60f8      	str	r0, [r7, #12]
10005e60:	60b9      	str	r1, [r7, #8]
10005e62:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int size;

	size = vq->vq_nentries;
10005e64:	68fb      	ldr	r3, [r7, #12]
10005e66:	895b      	ldrh	r3, [r3, #10]
10005e68:	617b      	str	r3, [r7, #20]
	vr = &vq->vq_ring;
10005e6a:	68fb      	ldr	r3, [r7, #12]
10005e6c:	3314      	adds	r3, #20
10005e6e:	613b      	str	r3, [r7, #16]

	vring_init(vr, size, ring_mem, alignment);
10005e70:	6979      	ldr	r1, [r7, #20]
10005e72:	687b      	ldr	r3, [r7, #4]
10005e74:	68ba      	ldr	r2, [r7, #8]
10005e76:	6938      	ldr	r0, [r7, #16]
10005e78:	f7ff fdda 	bl	10005a30 <vring_init>
		for (i = 0; i < size - 1; i++)
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
	}
#endif /*VIRTIO_SLAVE_ONLY*/
}
10005e7c:	bf00      	nop
10005e7e:	3718      	adds	r7, #24
10005e80:	46bd      	mov	sp, r7
10005e82:	bd80      	pop	{r7, pc}

10005e84 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
10005e84:	b580      	push	{r7, lr}
10005e86:	b082      	sub	sp, #8
10005e88:	af00      	add	r7, sp, #0
10005e8a:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
10005e8c:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
10005e90:	687b      	ldr	r3, [r7, #4]
10005e92:	68db      	ldr	r3, [r3, #12]
10005e94:	2b00      	cmp	r3, #0
10005e96:	d003      	beq.n	10005ea0 <virtqueue_notification+0x1c>
		vq->callback(vq);
10005e98:	687b      	ldr	r3, [r7, #4]
10005e9a:	68db      	ldr	r3, [r3, #12]
10005e9c:	6878      	ldr	r0, [r7, #4]
10005e9e:	4798      	blx	r3
}
10005ea0:	bf00      	nop
10005ea2:	3708      	adds	r7, #8
10005ea4:	46bd      	mov	sp, r7
10005ea6:	bd80      	pop	{r7, pc}

10005ea8 <vq_ring_must_notify>:
 *
 * vq_ring_must_notify
 *
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
10005ea8:	b580      	push	{r7, lr}
10005eaa:	b084      	sub	sp, #16
10005eac:	af00      	add	r7, sp, #0
10005eae:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
10005eb0:	6879      	ldr	r1, [r7, #4]
10005eb2:	6809      	ldr	r1, [r1, #0]
10005eb4:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
10005eb8:	f000 5200 	and.w	r2, r0, #536870912	; 0x20000000
10005ebc:	2300      	movs	r3, #0
10005ebe:	4313      	orrs	r3, r2
10005ec0:	d02a      	beq.n	10005f18 <vq_ring_must_notify+0x70>
			return vring_need_event(event_idx, new_idx,
						prev_idx) != 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10005ec2:	687b      	ldr	r3, [r7, #4]
10005ec4:	681b      	ldr	r3, [r3, #0]
10005ec6:	699b      	ldr	r3, [r3, #24]
10005ec8:	2b01      	cmp	r3, #1
10005eca:	d136      	bne.n	10005f3a <vq_ring_must_notify+0x92>
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
10005ecc:	687b      	ldr	r3, [r7, #4]
10005ece:	6a1b      	ldr	r3, [r3, #32]
10005ed0:	789a      	ldrb	r2, [r3, #2]
10005ed2:	78db      	ldrb	r3, [r3, #3]
10005ed4:	021b      	lsls	r3, r3, #8
10005ed6:	4313      	orrs	r3, r2
10005ed8:	81fb      	strh	r3, [r7, #14]
			prev_idx = new_idx - vq->vq_queued_cnt;
10005eda:	687b      	ldr	r3, [r7, #4]
10005edc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
10005ede:	89fa      	ldrh	r2, [r7, #14]
10005ee0:	1ad3      	subs	r3, r2, r3
10005ee2:	81bb      	strh	r3, [r7, #12]
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
10005ee4:	687b      	ldr	r3, [r7, #4]
10005ee6:	69da      	ldr	r2, [r3, #28]
10005ee8:	687b      	ldr	r3, [r7, #4]
10005eea:	6959      	ldr	r1, [r3, #20]
10005eec:	004b      	lsls	r3, r1, #1
10005eee:	4413      	add	r3, r2
10005ef0:	7918      	ldrb	r0, [r3, #4]
10005ef2:	004b      	lsls	r3, r1, #1
10005ef4:	4413      	add	r3, r2
10005ef6:	795b      	ldrb	r3, [r3, #5]
10005ef8:	021b      	lsls	r3, r3, #8
10005efa:	4303      	orrs	r3, r0
10005efc:	817b      	strh	r3, [r7, #10]
			return vring_need_event(event_idx, new_idx,
10005efe:	89ba      	ldrh	r2, [r7, #12]
10005f00:	89f9      	ldrh	r1, [r7, #14]
10005f02:	897b      	ldrh	r3, [r7, #10]
10005f04:	4618      	mov	r0, r3
10005f06:	f7ff fdbc 	bl	10005a82 <vring_need_event>
10005f0a:	4603      	mov	r3, r0
						prev_idx) != 0;
10005f0c:	2b00      	cmp	r3, #0
10005f0e:	bf14      	ite	ne
10005f10:	2301      	movne	r3, #1
10005f12:	2300      	moveq	r3, #0
10005f14:	b2db      	uxtb	r3, r3
10005f16:	e011      	b.n	10005f3c <vq_ring_must_notify+0x94>
			return (vq->vq_ring.used->flags &
				VRING_USED_F_NO_NOTIFY) == 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10005f18:	687b      	ldr	r3, [r7, #4]
10005f1a:	681b      	ldr	r3, [r3, #0]
10005f1c:	699b      	ldr	r3, [r3, #24]
10005f1e:	2b01      	cmp	r3, #1
10005f20:	d10b      	bne.n	10005f3a <vq_ring_must_notify+0x92>
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
10005f22:	687b      	ldr	r3, [r7, #4]
10005f24:	69db      	ldr	r3, [r3, #28]
10005f26:	881b      	ldrh	r3, [r3, #0]
10005f28:	b29b      	uxth	r3, r3
10005f2a:	f003 0301 	and.w	r3, r3, #1
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
10005f2e:	2b00      	cmp	r3, #0
10005f30:	bf0c      	ite	eq
10005f32:	2301      	moveq	r3, #1
10005f34:	2300      	movne	r3, #0
10005f36:	b2db      	uxtb	r3, r3
10005f38:	e000      	b.n	10005f3c <vq_ring_must_notify+0x94>
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	return 0;
10005f3a:	2300      	movs	r3, #0
}
10005f3c:	4618      	mov	r0, r3
10005f3e:	3710      	adds	r7, #16
10005f40:	46bd      	mov	sp, r7
10005f42:	bd80      	pop	{r7, pc}

10005f44 <vq_ring_notify>:
 *
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
10005f44:	b580      	push	{r7, lr}
10005f46:	b082      	sub	sp, #8
10005f48:	af00      	add	r7, sp, #0
10005f4a:	6078      	str	r0, [r7, #4]
	if (vq->notify)
10005f4c:	687b      	ldr	r3, [r7, #4]
10005f4e:	691b      	ldr	r3, [r3, #16]
10005f50:	2b00      	cmp	r3, #0
10005f52:	d003      	beq.n	10005f5c <vq_ring_notify+0x18>
		vq->notify(vq);
10005f54:	687b      	ldr	r3, [r7, #4]
10005f56:	691b      	ldr	r3, [r3, #16]
10005f58:	6878      	ldr	r0, [r7, #4]
10005f5a:	4798      	blx	r3
}
10005f5c:	bf00      	nop
10005f5e:	3708      	adds	r7, #8
10005f60:	46bd      	mov	sp, r7
10005f62:	bd80      	pop	{r7, pc}

10005f64 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
10005f64:	b580      	push	{r7, lr}
10005f66:	b086      	sub	sp, #24
10005f68:	af02      	add	r7, sp, #8
10005f6a:	60f8      	str	r0, [r7, #12]
10005f6c:	60b9      	str	r1, [r7, #8]
10005f6e:	607a      	str	r2, [r7, #4]
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
10005f70:	68fb      	ldr	r3, [r7, #12]
10005f72:	6a59      	ldr	r1, [r3, #36]	; 0x24
10005f74:	68fb      	ldr	r3, [r7, #12]
10005f76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
10005f78:	2301      	movs	r3, #1
10005f7a:	9301      	str	r3, [sp, #4]
10005f7c:	687b      	ldr	r3, [r7, #4]
10005f7e:	9300      	str	r3, [sp, #0]
10005f80:	68bb      	ldr	r3, [r7, #8]
10005f82:	68f8      	ldr	r0, [r7, #12]
10005f84:	f7fe fe76 	bl	10004c74 <rpmsg_send_offchannel_raw>
10005f88:	4603      	mov	r3, r0
					 len, true);
}
10005f8a:	4618      	mov	r0, r3
10005f8c:	3710      	adds	r7, #16
10005f8e:	46bd      	mov	sp, r7
10005f90:	bd80      	pop	{r7, pc}

10005f92 <VIRT_UART_read_cb>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/

static int VIRT_UART_read_cb(struct rpmsg_endpoint *ept, void *data,
			    size_t len, uint32_t src, void *priv)
{
10005f92:	b580      	push	{r7, lr}
10005f94:	b086      	sub	sp, #24
10005f96:	af00      	add	r7, sp, #0
10005f98:	60f8      	str	r0, [r7, #12]
10005f9a:	60b9      	str	r1, [r7, #8]
10005f9c:	607a      	str	r2, [r7, #4]
10005f9e:	603b      	str	r3, [r7, #0]
  VIRT_UART_HandleTypeDef *huart = metal_container_of(ept, VIRT_UART_HandleTypeDef, ept);
10005fa0:	68fb      	ldr	r3, [r7, #12]
10005fa2:	617b      	str	r3, [r7, #20]
  (void)src;

  huart->pRxBuffPtr = data;
10005fa4:	697b      	ldr	r3, [r7, #20]
10005fa6:	68ba      	ldr	r2, [r7, #8]
10005fa8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxXferSize = len;
10005faa:	687b      	ldr	r3, [r7, #4]
10005fac:	b29a      	uxth	r2, r3
10005fae:	697b      	ldr	r3, [r7, #20]
10005fb0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  if (huart->RxCpltCallback != NULL) {
10005fb4:	697b      	ldr	r3, [r7, #20]
10005fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10005fb8:	2b00      	cmp	r3, #0
10005fba:	d003      	beq.n	10005fc4 <VIRT_UART_read_cb+0x32>
    huart->RxCpltCallback(huart);
10005fbc:	697b      	ldr	r3, [r7, #20]
10005fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10005fc0:	6978      	ldr	r0, [r7, #20]
10005fc2:	4798      	blx	r3
  }

  return 0;
10005fc4:	2300      	movs	r3, #0
}
10005fc6:	4618      	mov	r0, r3
10005fc8:	3718      	adds	r7, #24
10005fca:	46bd      	mov	sp, r7
10005fcc:	bd80      	pop	{r7, pc}
	...

10005fd0 <VIRT_UART_Init>:

VIRT_UART_StatusTypeDef VIRT_UART_Init(VIRT_UART_HandleTypeDef *huart)
{
10005fd0:	b580      	push	{r7, lr}
10005fd2:	b086      	sub	sp, #24
10005fd4:	af02      	add	r7, sp, #8
10005fd6:	6078      	str	r0, [r7, #4]

  int status;

  /* Create a endpoint for rmpsg communication */

  status = OPENAMP_create_endpoint(&huart->ept, RPMSG_SERVICE_NAME, RPMSG_ADDR_ANY,
10005fd8:	6878      	ldr	r0, [r7, #4]
10005fda:	2300      	movs	r3, #0
10005fdc:	9300      	str	r3, [sp, #0]
10005fde:	4b08      	ldr	r3, [pc, #32]	; (10006000 <VIRT_UART_Init+0x30>)
10005fe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
10005fe4:	4907      	ldr	r1, [pc, #28]	; (10006004 <VIRT_UART_Init+0x34>)
10005fe6:	f7fa ff99 	bl	10000f1c <OPENAMP_create_endpoint>
10005fea:	60f8      	str	r0, [r7, #12]
		  	  	  	  	  	  	   VIRT_UART_read_cb, NULL);

  if(status < 0) {
10005fec:	68fb      	ldr	r3, [r7, #12]
10005fee:	2b00      	cmp	r3, #0
10005ff0:	da01      	bge.n	10005ff6 <VIRT_UART_Init+0x26>
    return VIRT_UART_ERROR;
10005ff2:	2301      	movs	r3, #1
10005ff4:	e000      	b.n	10005ff8 <VIRT_UART_Init+0x28>
  }

  return VIRT_UART_OK;
10005ff6:	2300      	movs	r3, #0
}
10005ff8:	4618      	mov	r0, r3
10005ffa:	3710      	adds	r7, #16
10005ffc:	46bd      	mov	sp, r7
10005ffe:	bd80      	pop	{r7, pc}
10006000:	10005f93 	.word	0x10005f93
10006004:	100075bc 	.word	0x100075bc

10006008 <VIRT_UART_RegisterCallback>:
}

VIRT_UART_StatusTypeDef VIRT_UART_RegisterCallback(VIRT_UART_HandleTypeDef *huart,
                                                   VIRT_UART_CallbackIDTypeDef CallbackID,
                                                   void (* pCallback)(VIRT_UART_HandleTypeDef *_huart))
{
10006008:	b480      	push	{r7}
1000600a:	b087      	sub	sp, #28
1000600c:	af00      	add	r7, sp, #0
1000600e:	60f8      	str	r0, [r7, #12]
10006010:	460b      	mov	r3, r1
10006012:	607a      	str	r2, [r7, #4]
10006014:	72fb      	strb	r3, [r7, #11]
  VIRT_UART_StatusTypeDef status = VIRT_UART_OK;
10006016:	2300      	movs	r3, #0
10006018:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
1000601a:	7afb      	ldrb	r3, [r7, #11]
1000601c:	2b00      	cmp	r3, #0
1000601e:	d103      	bne.n	10006028 <VIRT_UART_RegisterCallback+0x20>
  {
  case VIRT_UART_RXCPLT_CB_ID :
    huart->RxCpltCallback = pCallback;
10006020:	68fb      	ldr	r3, [r7, #12]
10006022:	687a      	ldr	r2, [r7, #4]
10006024:	64da      	str	r2, [r3, #76]	; 0x4c
    break;
10006026:	e002      	b.n	1000602e <VIRT_UART_RegisterCallback+0x26>

  default :
   /* Return error status */
    status =  VIRT_UART_ERROR;
10006028:	2301      	movs	r3, #1
1000602a:	75fb      	strb	r3, [r7, #23]
    break;
1000602c:	bf00      	nop
  }
  return status;
1000602e:	7dfb      	ldrb	r3, [r7, #23]
}
10006030:	4618      	mov	r0, r3
10006032:	371c      	adds	r7, #28
10006034:	46bd      	mov	sp, r7
10006036:	f85d 7b04 	ldr.w	r7, [sp], #4
1000603a:	4770      	bx	lr

1000603c <VIRT_UART_Transmit>:

VIRT_UART_StatusTypeDef VIRT_UART_Transmit(VIRT_UART_HandleTypeDef *huart, const void *pData, uint16_t Size)
{
1000603c:	b580      	push	{r7, lr}
1000603e:	b086      	sub	sp, #24
10006040:	af00      	add	r7, sp, #0
10006042:	60f8      	str	r0, [r7, #12]
10006044:	60b9      	str	r1, [r7, #8]
10006046:	4613      	mov	r3, r2
10006048:	80fb      	strh	r3, [r7, #6]
	int res;

	if (Size > (RPMSG_BUFFER_SIZE-16))
1000604a:	88fb      	ldrh	r3, [r7, #6]
1000604c:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
10006050:	d901      	bls.n	10006056 <VIRT_UART_Transmit+0x1a>
	  return VIRT_UART_ERROR;
10006052:	2301      	movs	r3, #1
10006054:	e00c      	b.n	10006070 <VIRT_UART_Transmit+0x34>

	res = OPENAMP_send(&huart->ept, pData, Size);
10006056:	68fb      	ldr	r3, [r7, #12]
10006058:	88fa      	ldrh	r2, [r7, #6]
1000605a:	68b9      	ldr	r1, [r7, #8]
1000605c:	4618      	mov	r0, r3
1000605e:	f7ff ff81 	bl	10005f64 <rpmsg_send>
10006062:	6178      	str	r0, [r7, #20]
	if (res <0) {
10006064:	697b      	ldr	r3, [r7, #20]
10006066:	2b00      	cmp	r3, #0
10006068:	da01      	bge.n	1000606e <VIRT_UART_Transmit+0x32>
		return VIRT_UART_ERROR;
1000606a:	2301      	movs	r3, #1
1000606c:	e000      	b.n	10006070 <VIRT_UART_Transmit+0x34>
	}

	return VIRT_UART_OK;
1000606e:	2300      	movs	r3, #0
}
10006070:	4618      	mov	r0, r3
10006072:	3718      	adds	r7, #24
10006074:	46bd      	mov	sp, r7
10006076:	bd80      	pop	{r7, pc}

10006078 <__assert_func>:
10006078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000607a:	4614      	mov	r4, r2
1000607c:	461a      	mov	r2, r3
1000607e:	4b09      	ldr	r3, [pc, #36]	; (100060a4 <__assert_func+0x2c>)
10006080:	681b      	ldr	r3, [r3, #0]
10006082:	4605      	mov	r5, r0
10006084:	68d8      	ldr	r0, [r3, #12]
10006086:	b14c      	cbz	r4, 1000609c <__assert_func+0x24>
10006088:	4b07      	ldr	r3, [pc, #28]	; (100060a8 <__assert_func+0x30>)
1000608a:	9100      	str	r1, [sp, #0]
1000608c:	e9cd 3401 	strd	r3, r4, [sp, #4]
10006090:	4906      	ldr	r1, [pc, #24]	; (100060ac <__assert_func+0x34>)
10006092:	462b      	mov	r3, r5
10006094:	f000 f95c 	bl	10006350 <fiprintf>
10006098:	f000 fa9c 	bl	100065d4 <abort>
1000609c:	4b04      	ldr	r3, [pc, #16]	; (100060b0 <__assert_func+0x38>)
1000609e:	461c      	mov	r4, r3
100060a0:	e7f3      	b.n	1000608a <__assert_func+0x12>
100060a2:	bf00      	nop
100060a4:	1002012c 	.word	0x1002012c
100060a8:	1000769d 	.word	0x1000769d
100060ac:	100076aa 	.word	0x100076aa
100060b0:	100076d8 	.word	0x100076d8

100060b4 <malloc>:
100060b4:	4b02      	ldr	r3, [pc, #8]	; (100060c0 <malloc+0xc>)
100060b6:	4601      	mov	r1, r0
100060b8:	6818      	ldr	r0, [r3, #0]
100060ba:	f000 b82b 	b.w	10006114 <_malloc_r>
100060be:	bf00      	nop
100060c0:	1002012c 	.word	0x1002012c

100060c4 <free>:
100060c4:	4b02      	ldr	r3, [pc, #8]	; (100060d0 <free+0xc>)
100060c6:	4601      	mov	r1, r0
100060c8:	6818      	ldr	r0, [r3, #0]
100060ca:	f000 ba8b 	b.w	100065e4 <_free_r>
100060ce:	bf00      	nop
100060d0:	1002012c 	.word	0x1002012c

100060d4 <sbrk_aligned>:
100060d4:	b570      	push	{r4, r5, r6, lr}
100060d6:	4e0e      	ldr	r6, [pc, #56]	; (10006110 <sbrk_aligned+0x3c>)
100060d8:	460c      	mov	r4, r1
100060da:	6831      	ldr	r1, [r6, #0]
100060dc:	4605      	mov	r5, r0
100060de:	b911      	cbnz	r1, 100060e6 <sbrk_aligned+0x12>
100060e0:	f000 fa1c 	bl	1000651c <_sbrk_r>
100060e4:	6030      	str	r0, [r6, #0]
100060e6:	4621      	mov	r1, r4
100060e8:	4628      	mov	r0, r5
100060ea:	f000 fa17 	bl	1000651c <_sbrk_r>
100060ee:	1c43      	adds	r3, r0, #1
100060f0:	d00a      	beq.n	10006108 <sbrk_aligned+0x34>
100060f2:	1cc4      	adds	r4, r0, #3
100060f4:	f024 0403 	bic.w	r4, r4, #3
100060f8:	42a0      	cmp	r0, r4
100060fa:	d007      	beq.n	1000610c <sbrk_aligned+0x38>
100060fc:	1a21      	subs	r1, r4, r0
100060fe:	4628      	mov	r0, r5
10006100:	f000 fa0c 	bl	1000651c <_sbrk_r>
10006104:	3001      	adds	r0, #1
10006106:	d101      	bne.n	1000610c <sbrk_aligned+0x38>
10006108:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
1000610c:	4620      	mov	r0, r4
1000610e:	bd70      	pop	{r4, r5, r6, pc}
10006110:	10020d48 	.word	0x10020d48

10006114 <_malloc_r>:
10006114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10006118:	1ccd      	adds	r5, r1, #3
1000611a:	f025 0503 	bic.w	r5, r5, #3
1000611e:	3508      	adds	r5, #8
10006120:	2d0c      	cmp	r5, #12
10006122:	bf38      	it	cc
10006124:	250c      	movcc	r5, #12
10006126:	2d00      	cmp	r5, #0
10006128:	4607      	mov	r7, r0
1000612a:	db01      	blt.n	10006130 <_malloc_r+0x1c>
1000612c:	42a9      	cmp	r1, r5
1000612e:	d905      	bls.n	1000613c <_malloc_r+0x28>
10006130:	230c      	movs	r3, #12
10006132:	603b      	str	r3, [r7, #0]
10006134:	2600      	movs	r6, #0
10006136:	4630      	mov	r0, r6
10006138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000613c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 10006210 <_malloc_r+0xfc>
10006140:	f000 f868 	bl	10006214 <__malloc_lock>
10006144:	f8d8 3000 	ldr.w	r3, [r8]
10006148:	461c      	mov	r4, r3
1000614a:	bb5c      	cbnz	r4, 100061a4 <_malloc_r+0x90>
1000614c:	4629      	mov	r1, r5
1000614e:	4638      	mov	r0, r7
10006150:	f7ff ffc0 	bl	100060d4 <sbrk_aligned>
10006154:	1c43      	adds	r3, r0, #1
10006156:	4604      	mov	r4, r0
10006158:	d155      	bne.n	10006206 <_malloc_r+0xf2>
1000615a:	f8d8 4000 	ldr.w	r4, [r8]
1000615e:	4626      	mov	r6, r4
10006160:	2e00      	cmp	r6, #0
10006162:	d145      	bne.n	100061f0 <_malloc_r+0xdc>
10006164:	2c00      	cmp	r4, #0
10006166:	d048      	beq.n	100061fa <_malloc_r+0xe6>
10006168:	6823      	ldr	r3, [r4, #0]
1000616a:	4631      	mov	r1, r6
1000616c:	4638      	mov	r0, r7
1000616e:	eb04 0903 	add.w	r9, r4, r3
10006172:	f000 f9d3 	bl	1000651c <_sbrk_r>
10006176:	4581      	cmp	r9, r0
10006178:	d13f      	bne.n	100061fa <_malloc_r+0xe6>
1000617a:	6821      	ldr	r1, [r4, #0]
1000617c:	1a6d      	subs	r5, r5, r1
1000617e:	4629      	mov	r1, r5
10006180:	4638      	mov	r0, r7
10006182:	f7ff ffa7 	bl	100060d4 <sbrk_aligned>
10006186:	3001      	adds	r0, #1
10006188:	d037      	beq.n	100061fa <_malloc_r+0xe6>
1000618a:	6823      	ldr	r3, [r4, #0]
1000618c:	442b      	add	r3, r5
1000618e:	6023      	str	r3, [r4, #0]
10006190:	f8d8 3000 	ldr.w	r3, [r8]
10006194:	2b00      	cmp	r3, #0
10006196:	d038      	beq.n	1000620a <_malloc_r+0xf6>
10006198:	685a      	ldr	r2, [r3, #4]
1000619a:	42a2      	cmp	r2, r4
1000619c:	d12b      	bne.n	100061f6 <_malloc_r+0xe2>
1000619e:	2200      	movs	r2, #0
100061a0:	605a      	str	r2, [r3, #4]
100061a2:	e00f      	b.n	100061c4 <_malloc_r+0xb0>
100061a4:	6822      	ldr	r2, [r4, #0]
100061a6:	1b52      	subs	r2, r2, r5
100061a8:	d41f      	bmi.n	100061ea <_malloc_r+0xd6>
100061aa:	2a0b      	cmp	r2, #11
100061ac:	d917      	bls.n	100061de <_malloc_r+0xca>
100061ae:	1961      	adds	r1, r4, r5
100061b0:	42a3      	cmp	r3, r4
100061b2:	6025      	str	r5, [r4, #0]
100061b4:	bf18      	it	ne
100061b6:	6059      	strne	r1, [r3, #4]
100061b8:	6863      	ldr	r3, [r4, #4]
100061ba:	bf08      	it	eq
100061bc:	f8c8 1000 	streq.w	r1, [r8]
100061c0:	5162      	str	r2, [r4, r5]
100061c2:	604b      	str	r3, [r1, #4]
100061c4:	4638      	mov	r0, r7
100061c6:	f104 060b 	add.w	r6, r4, #11
100061ca:	f000 f829 	bl	10006220 <__malloc_unlock>
100061ce:	f026 0607 	bic.w	r6, r6, #7
100061d2:	1d23      	adds	r3, r4, #4
100061d4:	1af2      	subs	r2, r6, r3
100061d6:	d0ae      	beq.n	10006136 <_malloc_r+0x22>
100061d8:	1b9b      	subs	r3, r3, r6
100061da:	50a3      	str	r3, [r4, r2]
100061dc:	e7ab      	b.n	10006136 <_malloc_r+0x22>
100061de:	42a3      	cmp	r3, r4
100061e0:	6862      	ldr	r2, [r4, #4]
100061e2:	d1dd      	bne.n	100061a0 <_malloc_r+0x8c>
100061e4:	f8c8 2000 	str.w	r2, [r8]
100061e8:	e7ec      	b.n	100061c4 <_malloc_r+0xb0>
100061ea:	4623      	mov	r3, r4
100061ec:	6864      	ldr	r4, [r4, #4]
100061ee:	e7ac      	b.n	1000614a <_malloc_r+0x36>
100061f0:	4634      	mov	r4, r6
100061f2:	6876      	ldr	r6, [r6, #4]
100061f4:	e7b4      	b.n	10006160 <_malloc_r+0x4c>
100061f6:	4613      	mov	r3, r2
100061f8:	e7cc      	b.n	10006194 <_malloc_r+0x80>
100061fa:	230c      	movs	r3, #12
100061fc:	603b      	str	r3, [r7, #0]
100061fe:	4638      	mov	r0, r7
10006200:	f000 f80e 	bl	10006220 <__malloc_unlock>
10006204:	e797      	b.n	10006136 <_malloc_r+0x22>
10006206:	6025      	str	r5, [r4, #0]
10006208:	e7dc      	b.n	100061c4 <_malloc_r+0xb0>
1000620a:	605b      	str	r3, [r3, #4]
1000620c:	deff      	udf	#255	; 0xff
1000620e:	bf00      	nop
10006210:	10020d44 	.word	0x10020d44

10006214 <__malloc_lock>:
10006214:	4801      	ldr	r0, [pc, #4]	; (1000621c <__malloc_lock+0x8>)
10006216:	f000 b9cd 	b.w	100065b4 <__retarget_lock_acquire_recursive>
1000621a:	bf00      	nop
1000621c:	10020e8c 	.word	0x10020e8c

10006220 <__malloc_unlock>:
10006220:	4801      	ldr	r0, [pc, #4]	; (10006228 <__malloc_unlock+0x8>)
10006222:	f000 b9c8 	b.w	100065b6 <__retarget_lock_release_recursive>
10006226:	bf00      	nop
10006228:	10020e8c 	.word	0x10020e8c

1000622c <std>:
1000622c:	2300      	movs	r3, #0
1000622e:	b510      	push	{r4, lr}
10006230:	4604      	mov	r4, r0
10006232:	e9c0 3300 	strd	r3, r3, [r0]
10006236:	e9c0 3304 	strd	r3, r3, [r0, #16]
1000623a:	6083      	str	r3, [r0, #8]
1000623c:	8181      	strh	r1, [r0, #12]
1000623e:	6643      	str	r3, [r0, #100]	; 0x64
10006240:	81c2      	strh	r2, [r0, #14]
10006242:	6183      	str	r3, [r0, #24]
10006244:	4619      	mov	r1, r3
10006246:	2208      	movs	r2, #8
10006248:	305c      	adds	r0, #92	; 0x5c
1000624a:	f000 f906 	bl	1000645a <memset>
1000624e:	4b05      	ldr	r3, [pc, #20]	; (10006264 <std+0x38>)
10006250:	6263      	str	r3, [r4, #36]	; 0x24
10006252:	4b05      	ldr	r3, [pc, #20]	; (10006268 <std+0x3c>)
10006254:	62a3      	str	r3, [r4, #40]	; 0x28
10006256:	4b05      	ldr	r3, [pc, #20]	; (1000626c <std+0x40>)
10006258:	62e3      	str	r3, [r4, #44]	; 0x2c
1000625a:	4b05      	ldr	r3, [pc, #20]	; (10006270 <std+0x44>)
1000625c:	6224      	str	r4, [r4, #32]
1000625e:	6323      	str	r3, [r4, #48]	; 0x30
10006260:	bd10      	pop	{r4, pc}
10006262:	bf00      	nop
10006264:	100063d5 	.word	0x100063d5
10006268:	100063f7 	.word	0x100063f7
1000626c:	1000642f 	.word	0x1000642f
10006270:	10006453 	.word	0x10006453

10006274 <stdio_exit_handler>:
10006274:	4a02      	ldr	r2, [pc, #8]	; (10006280 <stdio_exit_handler+0xc>)
10006276:	4903      	ldr	r1, [pc, #12]	; (10006284 <stdio_exit_handler+0x10>)
10006278:	4803      	ldr	r0, [pc, #12]	; (10006288 <stdio_exit_handler+0x14>)
1000627a:	f000 b87b 	b.w	10006374 <_fwalk_sglue>
1000627e:	bf00      	nop
10006280:	100200d4 	.word	0x100200d4
10006284:	10006d31 	.word	0x10006d31
10006288:	100200e0 	.word	0x100200e0

1000628c <cleanup_stdio>:
1000628c:	6841      	ldr	r1, [r0, #4]
1000628e:	4b0c      	ldr	r3, [pc, #48]	; (100062c0 <cleanup_stdio+0x34>)
10006290:	4299      	cmp	r1, r3
10006292:	b510      	push	{r4, lr}
10006294:	4604      	mov	r4, r0
10006296:	d001      	beq.n	1000629c <cleanup_stdio+0x10>
10006298:	f000 fd4a 	bl	10006d30 <_fflush_r>
1000629c:	68a1      	ldr	r1, [r4, #8]
1000629e:	4b09      	ldr	r3, [pc, #36]	; (100062c4 <cleanup_stdio+0x38>)
100062a0:	4299      	cmp	r1, r3
100062a2:	d002      	beq.n	100062aa <cleanup_stdio+0x1e>
100062a4:	4620      	mov	r0, r4
100062a6:	f000 fd43 	bl	10006d30 <_fflush_r>
100062aa:	68e1      	ldr	r1, [r4, #12]
100062ac:	4b06      	ldr	r3, [pc, #24]	; (100062c8 <cleanup_stdio+0x3c>)
100062ae:	4299      	cmp	r1, r3
100062b0:	d004      	beq.n	100062bc <cleanup_stdio+0x30>
100062b2:	4620      	mov	r0, r4
100062b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100062b8:	f000 bd3a 	b.w	10006d30 <_fflush_r>
100062bc:	bd10      	pop	{r4, pc}
100062be:	bf00      	nop
100062c0:	10020d4c 	.word	0x10020d4c
100062c4:	10020db4 	.word	0x10020db4
100062c8:	10020e1c 	.word	0x10020e1c

100062cc <global_stdio_init.part.0>:
100062cc:	b510      	push	{r4, lr}
100062ce:	4b0b      	ldr	r3, [pc, #44]	; (100062fc <global_stdio_init.part.0+0x30>)
100062d0:	4c0b      	ldr	r4, [pc, #44]	; (10006300 <global_stdio_init.part.0+0x34>)
100062d2:	4a0c      	ldr	r2, [pc, #48]	; (10006304 <global_stdio_init.part.0+0x38>)
100062d4:	601a      	str	r2, [r3, #0]
100062d6:	4620      	mov	r0, r4
100062d8:	2200      	movs	r2, #0
100062da:	2104      	movs	r1, #4
100062dc:	f7ff ffa6 	bl	1000622c <std>
100062e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
100062e4:	2201      	movs	r2, #1
100062e6:	2109      	movs	r1, #9
100062e8:	f7ff ffa0 	bl	1000622c <std>
100062ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
100062f0:	2202      	movs	r2, #2
100062f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100062f6:	2112      	movs	r1, #18
100062f8:	f7ff bf98 	b.w	1000622c <std>
100062fc:	10020e84 	.word	0x10020e84
10006300:	10020d4c 	.word	0x10020d4c
10006304:	10006275 	.word	0x10006275

10006308 <__sfp_lock_acquire>:
10006308:	4801      	ldr	r0, [pc, #4]	; (10006310 <__sfp_lock_acquire+0x8>)
1000630a:	f000 b953 	b.w	100065b4 <__retarget_lock_acquire_recursive>
1000630e:	bf00      	nop
10006310:	10020e8d 	.word	0x10020e8d

10006314 <__sfp_lock_release>:
10006314:	4801      	ldr	r0, [pc, #4]	; (1000631c <__sfp_lock_release+0x8>)
10006316:	f000 b94e 	b.w	100065b6 <__retarget_lock_release_recursive>
1000631a:	bf00      	nop
1000631c:	10020e8d 	.word	0x10020e8d

10006320 <__sinit>:
10006320:	b510      	push	{r4, lr}
10006322:	4604      	mov	r4, r0
10006324:	f7ff fff0 	bl	10006308 <__sfp_lock_acquire>
10006328:	6a23      	ldr	r3, [r4, #32]
1000632a:	b11b      	cbz	r3, 10006334 <__sinit+0x14>
1000632c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10006330:	f7ff bff0 	b.w	10006314 <__sfp_lock_release>
10006334:	4b04      	ldr	r3, [pc, #16]	; (10006348 <__sinit+0x28>)
10006336:	6223      	str	r3, [r4, #32]
10006338:	4b04      	ldr	r3, [pc, #16]	; (1000634c <__sinit+0x2c>)
1000633a:	681b      	ldr	r3, [r3, #0]
1000633c:	2b00      	cmp	r3, #0
1000633e:	d1f5      	bne.n	1000632c <__sinit+0xc>
10006340:	f7ff ffc4 	bl	100062cc <global_stdio_init.part.0>
10006344:	e7f2      	b.n	1000632c <__sinit+0xc>
10006346:	bf00      	nop
10006348:	1000628d 	.word	0x1000628d
1000634c:	10020e84 	.word	0x10020e84

10006350 <fiprintf>:
10006350:	b40e      	push	{r1, r2, r3}
10006352:	b503      	push	{r0, r1, lr}
10006354:	4601      	mov	r1, r0
10006356:	ab03      	add	r3, sp, #12
10006358:	4805      	ldr	r0, [pc, #20]	; (10006370 <fiprintf+0x20>)
1000635a:	f853 2b04 	ldr.w	r2, [r3], #4
1000635e:	6800      	ldr	r0, [r0, #0]
10006360:	9301      	str	r3, [sp, #4]
10006362:	f000 f9b5 	bl	100066d0 <_vfiprintf_r>
10006366:	b002      	add	sp, #8
10006368:	f85d eb04 	ldr.w	lr, [sp], #4
1000636c:	b003      	add	sp, #12
1000636e:	4770      	bx	lr
10006370:	1002012c 	.word	0x1002012c

10006374 <_fwalk_sglue>:
10006374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10006378:	4607      	mov	r7, r0
1000637a:	4688      	mov	r8, r1
1000637c:	4614      	mov	r4, r2
1000637e:	2600      	movs	r6, #0
10006380:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
10006384:	f1b9 0901 	subs.w	r9, r9, #1
10006388:	d505      	bpl.n	10006396 <_fwalk_sglue+0x22>
1000638a:	6824      	ldr	r4, [r4, #0]
1000638c:	2c00      	cmp	r4, #0
1000638e:	d1f7      	bne.n	10006380 <_fwalk_sglue+0xc>
10006390:	4630      	mov	r0, r6
10006392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
10006396:	89ab      	ldrh	r3, [r5, #12]
10006398:	2b01      	cmp	r3, #1
1000639a:	d907      	bls.n	100063ac <_fwalk_sglue+0x38>
1000639c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
100063a0:	3301      	adds	r3, #1
100063a2:	d003      	beq.n	100063ac <_fwalk_sglue+0x38>
100063a4:	4629      	mov	r1, r5
100063a6:	4638      	mov	r0, r7
100063a8:	47c0      	blx	r8
100063aa:	4306      	orrs	r6, r0
100063ac:	3568      	adds	r5, #104	; 0x68
100063ae:	e7e9      	b.n	10006384 <_fwalk_sglue+0x10>

100063b0 <iprintf>:
100063b0:	b40f      	push	{r0, r1, r2, r3}
100063b2:	b507      	push	{r0, r1, r2, lr}
100063b4:	4906      	ldr	r1, [pc, #24]	; (100063d0 <iprintf+0x20>)
100063b6:	ab04      	add	r3, sp, #16
100063b8:	6808      	ldr	r0, [r1, #0]
100063ba:	f853 2b04 	ldr.w	r2, [r3], #4
100063be:	6881      	ldr	r1, [r0, #8]
100063c0:	9301      	str	r3, [sp, #4]
100063c2:	f000 f985 	bl	100066d0 <_vfiprintf_r>
100063c6:	b003      	add	sp, #12
100063c8:	f85d eb04 	ldr.w	lr, [sp], #4
100063cc:	b004      	add	sp, #16
100063ce:	4770      	bx	lr
100063d0:	1002012c 	.word	0x1002012c

100063d4 <__sread>:
100063d4:	b510      	push	{r4, lr}
100063d6:	460c      	mov	r4, r1
100063d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
100063dc:	f000 f88c 	bl	100064f8 <_read_r>
100063e0:	2800      	cmp	r0, #0
100063e2:	bfab      	itete	ge
100063e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
100063e6:	89a3      	ldrhlt	r3, [r4, #12]
100063e8:	181b      	addge	r3, r3, r0
100063ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
100063ee:	bfac      	ite	ge
100063f0:	6563      	strge	r3, [r4, #84]	; 0x54
100063f2:	81a3      	strhlt	r3, [r4, #12]
100063f4:	bd10      	pop	{r4, pc}

100063f6 <__swrite>:
100063f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
100063fa:	461f      	mov	r7, r3
100063fc:	898b      	ldrh	r3, [r1, #12]
100063fe:	05db      	lsls	r3, r3, #23
10006400:	4605      	mov	r5, r0
10006402:	460c      	mov	r4, r1
10006404:	4616      	mov	r6, r2
10006406:	d505      	bpl.n	10006414 <__swrite+0x1e>
10006408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000640c:	2302      	movs	r3, #2
1000640e:	2200      	movs	r2, #0
10006410:	f000 f860 	bl	100064d4 <_lseek_r>
10006414:	89a3      	ldrh	r3, [r4, #12]
10006416:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1000641a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1000641e:	81a3      	strh	r3, [r4, #12]
10006420:	4632      	mov	r2, r6
10006422:	463b      	mov	r3, r7
10006424:	4628      	mov	r0, r5
10006426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1000642a:	f000 b887 	b.w	1000653c <_write_r>

1000642e <__sseek>:
1000642e:	b510      	push	{r4, lr}
10006430:	460c      	mov	r4, r1
10006432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10006436:	f000 f84d 	bl	100064d4 <_lseek_r>
1000643a:	1c43      	adds	r3, r0, #1
1000643c:	89a3      	ldrh	r3, [r4, #12]
1000643e:	bf15      	itete	ne
10006440:	6560      	strne	r0, [r4, #84]	; 0x54
10006442:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
10006446:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1000644a:	81a3      	strheq	r3, [r4, #12]
1000644c:	bf18      	it	ne
1000644e:	81a3      	strhne	r3, [r4, #12]
10006450:	bd10      	pop	{r4, pc}

10006452 <__sclose>:
10006452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10006456:	f000 b82d 	b.w	100064b4 <_close_r>

1000645a <memset>:
1000645a:	4402      	add	r2, r0
1000645c:	4603      	mov	r3, r0
1000645e:	4293      	cmp	r3, r2
10006460:	d100      	bne.n	10006464 <memset+0xa>
10006462:	4770      	bx	lr
10006464:	f803 1b01 	strb.w	r1, [r3], #1
10006468:	e7f9      	b.n	1000645e <memset+0x4>

1000646a <strncmp>:
1000646a:	b510      	push	{r4, lr}
1000646c:	b16a      	cbz	r2, 1000648a <strncmp+0x20>
1000646e:	3901      	subs	r1, #1
10006470:	1884      	adds	r4, r0, r2
10006472:	f810 2b01 	ldrb.w	r2, [r0], #1
10006476:	f811 3f01 	ldrb.w	r3, [r1, #1]!
1000647a:	429a      	cmp	r2, r3
1000647c:	d103      	bne.n	10006486 <strncmp+0x1c>
1000647e:	42a0      	cmp	r0, r4
10006480:	d001      	beq.n	10006486 <strncmp+0x1c>
10006482:	2a00      	cmp	r2, #0
10006484:	d1f5      	bne.n	10006472 <strncmp+0x8>
10006486:	1ad0      	subs	r0, r2, r3
10006488:	bd10      	pop	{r4, pc}
1000648a:	4610      	mov	r0, r2
1000648c:	e7fc      	b.n	10006488 <strncmp+0x1e>

1000648e <strncpy>:
1000648e:	b510      	push	{r4, lr}
10006490:	3901      	subs	r1, #1
10006492:	4603      	mov	r3, r0
10006494:	b132      	cbz	r2, 100064a4 <strncpy+0x16>
10006496:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1000649a:	f803 4b01 	strb.w	r4, [r3], #1
1000649e:	3a01      	subs	r2, #1
100064a0:	2c00      	cmp	r4, #0
100064a2:	d1f7      	bne.n	10006494 <strncpy+0x6>
100064a4:	441a      	add	r2, r3
100064a6:	2100      	movs	r1, #0
100064a8:	4293      	cmp	r3, r2
100064aa:	d100      	bne.n	100064ae <strncpy+0x20>
100064ac:	bd10      	pop	{r4, pc}
100064ae:	f803 1b01 	strb.w	r1, [r3], #1
100064b2:	e7f9      	b.n	100064a8 <strncpy+0x1a>

100064b4 <_close_r>:
100064b4:	b538      	push	{r3, r4, r5, lr}
100064b6:	4d06      	ldr	r5, [pc, #24]	; (100064d0 <_close_r+0x1c>)
100064b8:	2300      	movs	r3, #0
100064ba:	4604      	mov	r4, r0
100064bc:	4608      	mov	r0, r1
100064be:	602b      	str	r3, [r5, #0]
100064c0:	f7fa fe55 	bl	1000116e <_close>
100064c4:	1c43      	adds	r3, r0, #1
100064c6:	d102      	bne.n	100064ce <_close_r+0x1a>
100064c8:	682b      	ldr	r3, [r5, #0]
100064ca:	b103      	cbz	r3, 100064ce <_close_r+0x1a>
100064cc:	6023      	str	r3, [r4, #0]
100064ce:	bd38      	pop	{r3, r4, r5, pc}
100064d0:	10020e88 	.word	0x10020e88

100064d4 <_lseek_r>:
100064d4:	b538      	push	{r3, r4, r5, lr}
100064d6:	4d07      	ldr	r5, [pc, #28]	; (100064f4 <_lseek_r+0x20>)
100064d8:	4604      	mov	r4, r0
100064da:	4608      	mov	r0, r1
100064dc:	4611      	mov	r1, r2
100064de:	2200      	movs	r2, #0
100064e0:	602a      	str	r2, [r5, #0]
100064e2:	461a      	mov	r2, r3
100064e4:	f7fa fe6a 	bl	100011bc <_lseek>
100064e8:	1c43      	adds	r3, r0, #1
100064ea:	d102      	bne.n	100064f2 <_lseek_r+0x1e>
100064ec:	682b      	ldr	r3, [r5, #0]
100064ee:	b103      	cbz	r3, 100064f2 <_lseek_r+0x1e>
100064f0:	6023      	str	r3, [r4, #0]
100064f2:	bd38      	pop	{r3, r4, r5, pc}
100064f4:	10020e88 	.word	0x10020e88

100064f8 <_read_r>:
100064f8:	b538      	push	{r3, r4, r5, lr}
100064fa:	4d07      	ldr	r5, [pc, #28]	; (10006518 <_read_r+0x20>)
100064fc:	4604      	mov	r4, r0
100064fe:	4608      	mov	r0, r1
10006500:	4611      	mov	r1, r2
10006502:	2200      	movs	r2, #0
10006504:	602a      	str	r2, [r5, #0]
10006506:	461a      	mov	r2, r3
10006508:	f7fa fdf8 	bl	100010fc <_read>
1000650c:	1c43      	adds	r3, r0, #1
1000650e:	d102      	bne.n	10006516 <_read_r+0x1e>
10006510:	682b      	ldr	r3, [r5, #0]
10006512:	b103      	cbz	r3, 10006516 <_read_r+0x1e>
10006514:	6023      	str	r3, [r4, #0]
10006516:	bd38      	pop	{r3, r4, r5, pc}
10006518:	10020e88 	.word	0x10020e88

1000651c <_sbrk_r>:
1000651c:	b538      	push	{r3, r4, r5, lr}
1000651e:	4d06      	ldr	r5, [pc, #24]	; (10006538 <_sbrk_r+0x1c>)
10006520:	2300      	movs	r3, #0
10006522:	4604      	mov	r4, r0
10006524:	4608      	mov	r0, r1
10006526:	602b      	str	r3, [r5, #0]
10006528:	f000 fd88 	bl	1000703c <_sbrk>
1000652c:	1c43      	adds	r3, r0, #1
1000652e:	d102      	bne.n	10006536 <_sbrk_r+0x1a>
10006530:	682b      	ldr	r3, [r5, #0]
10006532:	b103      	cbz	r3, 10006536 <_sbrk_r+0x1a>
10006534:	6023      	str	r3, [r4, #0]
10006536:	bd38      	pop	{r3, r4, r5, pc}
10006538:	10020e88 	.word	0x10020e88

1000653c <_write_r>:
1000653c:	b538      	push	{r3, r4, r5, lr}
1000653e:	4d07      	ldr	r5, [pc, #28]	; (1000655c <_write_r+0x20>)
10006540:	4604      	mov	r4, r0
10006542:	4608      	mov	r0, r1
10006544:	4611      	mov	r1, r2
10006546:	2200      	movs	r2, #0
10006548:	602a      	str	r2, [r5, #0]
1000654a:	461a      	mov	r2, r3
1000654c:	f7fa fdf3 	bl	10001136 <_write>
10006550:	1c43      	adds	r3, r0, #1
10006552:	d102      	bne.n	1000655a <_write_r+0x1e>
10006554:	682b      	ldr	r3, [r5, #0]
10006556:	b103      	cbz	r3, 1000655a <_write_r+0x1e>
10006558:	6023      	str	r3, [r4, #0]
1000655a:	bd38      	pop	{r3, r4, r5, pc}
1000655c:	10020e88 	.word	0x10020e88

10006560 <__errno>:
10006560:	4b01      	ldr	r3, [pc, #4]	; (10006568 <__errno+0x8>)
10006562:	6818      	ldr	r0, [r3, #0]
10006564:	4770      	bx	lr
10006566:	bf00      	nop
10006568:	1002012c 	.word	0x1002012c

1000656c <__libc_init_array>:
1000656c:	b570      	push	{r4, r5, r6, lr}
1000656e:	4d0d      	ldr	r5, [pc, #52]	; (100065a4 <__libc_init_array+0x38>)
10006570:	4c0d      	ldr	r4, [pc, #52]	; (100065a8 <__libc_init_array+0x3c>)
10006572:	1b64      	subs	r4, r4, r5
10006574:	10a4      	asrs	r4, r4, #2
10006576:	2600      	movs	r6, #0
10006578:	42a6      	cmp	r6, r4
1000657a:	d109      	bne.n	10006590 <__libc_init_array+0x24>
1000657c:	4d0b      	ldr	r5, [pc, #44]	; (100065ac <__libc_init_array+0x40>)
1000657e:	4c0c      	ldr	r4, [pc, #48]	; (100065b0 <__libc_init_array+0x44>)
10006580:	f000 fd6a 	bl	10007058 <_init>
10006584:	1b64      	subs	r4, r4, r5
10006586:	10a4      	asrs	r4, r4, #2
10006588:	2600      	movs	r6, #0
1000658a:	42a6      	cmp	r6, r4
1000658c:	d105      	bne.n	1000659a <__libc_init_array+0x2e>
1000658e:	bd70      	pop	{r4, r5, r6, pc}
10006590:	f855 3b04 	ldr.w	r3, [r5], #4
10006594:	4798      	blx	r3
10006596:	3601      	adds	r6, #1
10006598:	e7ee      	b.n	10006578 <__libc_init_array+0xc>
1000659a:	f855 3b04 	ldr.w	r3, [r5], #4
1000659e:	4798      	blx	r3
100065a0:	3601      	adds	r6, #1
100065a2:	e7f2      	b.n	1000658a <__libc_init_array+0x1e>
100065a4:	1000770c 	.word	0x1000770c
100065a8:	1000770c 	.word	0x1000770c
100065ac:	1000770c 	.word	0x1000770c
100065b0:	10007710 	.word	0x10007710

100065b4 <__retarget_lock_acquire_recursive>:
100065b4:	4770      	bx	lr

100065b6 <__retarget_lock_release_recursive>:
100065b6:	4770      	bx	lr

100065b8 <memcpy>:
100065b8:	440a      	add	r2, r1
100065ba:	4291      	cmp	r1, r2
100065bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
100065c0:	d100      	bne.n	100065c4 <memcpy+0xc>
100065c2:	4770      	bx	lr
100065c4:	b510      	push	{r4, lr}
100065c6:	f811 4b01 	ldrb.w	r4, [r1], #1
100065ca:	f803 4f01 	strb.w	r4, [r3, #1]!
100065ce:	4291      	cmp	r1, r2
100065d0:	d1f9      	bne.n	100065c6 <memcpy+0xe>
100065d2:	bd10      	pop	{r4, pc}

100065d4 <abort>:
100065d4:	b508      	push	{r3, lr}
100065d6:	2006      	movs	r0, #6
100065d8:	f000 fc90 	bl	10006efc <raise>
100065dc:	2001      	movs	r0, #1
100065de:	f7fa fd83 	bl	100010e8 <_exit>
	...

100065e4 <_free_r>:
100065e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
100065e6:	2900      	cmp	r1, #0
100065e8:	d044      	beq.n	10006674 <_free_r+0x90>
100065ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
100065ee:	9001      	str	r0, [sp, #4]
100065f0:	2b00      	cmp	r3, #0
100065f2:	f1a1 0404 	sub.w	r4, r1, #4
100065f6:	bfb8      	it	lt
100065f8:	18e4      	addlt	r4, r4, r3
100065fa:	f7ff fe0b 	bl	10006214 <__malloc_lock>
100065fe:	4a1e      	ldr	r2, [pc, #120]	; (10006678 <_free_r+0x94>)
10006600:	9801      	ldr	r0, [sp, #4]
10006602:	6813      	ldr	r3, [r2, #0]
10006604:	b933      	cbnz	r3, 10006614 <_free_r+0x30>
10006606:	6063      	str	r3, [r4, #4]
10006608:	6014      	str	r4, [r2, #0]
1000660a:	b003      	add	sp, #12
1000660c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
10006610:	f7ff be06 	b.w	10006220 <__malloc_unlock>
10006614:	42a3      	cmp	r3, r4
10006616:	d908      	bls.n	1000662a <_free_r+0x46>
10006618:	6825      	ldr	r5, [r4, #0]
1000661a:	1961      	adds	r1, r4, r5
1000661c:	428b      	cmp	r3, r1
1000661e:	bf01      	itttt	eq
10006620:	6819      	ldreq	r1, [r3, #0]
10006622:	685b      	ldreq	r3, [r3, #4]
10006624:	1949      	addeq	r1, r1, r5
10006626:	6021      	streq	r1, [r4, #0]
10006628:	e7ed      	b.n	10006606 <_free_r+0x22>
1000662a:	461a      	mov	r2, r3
1000662c:	685b      	ldr	r3, [r3, #4]
1000662e:	b10b      	cbz	r3, 10006634 <_free_r+0x50>
10006630:	42a3      	cmp	r3, r4
10006632:	d9fa      	bls.n	1000662a <_free_r+0x46>
10006634:	6811      	ldr	r1, [r2, #0]
10006636:	1855      	adds	r5, r2, r1
10006638:	42a5      	cmp	r5, r4
1000663a:	d10b      	bne.n	10006654 <_free_r+0x70>
1000663c:	6824      	ldr	r4, [r4, #0]
1000663e:	4421      	add	r1, r4
10006640:	1854      	adds	r4, r2, r1
10006642:	42a3      	cmp	r3, r4
10006644:	6011      	str	r1, [r2, #0]
10006646:	d1e0      	bne.n	1000660a <_free_r+0x26>
10006648:	681c      	ldr	r4, [r3, #0]
1000664a:	685b      	ldr	r3, [r3, #4]
1000664c:	6053      	str	r3, [r2, #4]
1000664e:	440c      	add	r4, r1
10006650:	6014      	str	r4, [r2, #0]
10006652:	e7da      	b.n	1000660a <_free_r+0x26>
10006654:	d902      	bls.n	1000665c <_free_r+0x78>
10006656:	230c      	movs	r3, #12
10006658:	6003      	str	r3, [r0, #0]
1000665a:	e7d6      	b.n	1000660a <_free_r+0x26>
1000665c:	6825      	ldr	r5, [r4, #0]
1000665e:	1961      	adds	r1, r4, r5
10006660:	428b      	cmp	r3, r1
10006662:	bf04      	itt	eq
10006664:	6819      	ldreq	r1, [r3, #0]
10006666:	685b      	ldreq	r3, [r3, #4]
10006668:	6063      	str	r3, [r4, #4]
1000666a:	bf04      	itt	eq
1000666c:	1949      	addeq	r1, r1, r5
1000666e:	6021      	streq	r1, [r4, #0]
10006670:	6054      	str	r4, [r2, #4]
10006672:	e7ca      	b.n	1000660a <_free_r+0x26>
10006674:	b003      	add	sp, #12
10006676:	bd30      	pop	{r4, r5, pc}
10006678:	10020d44 	.word	0x10020d44

1000667c <__sfputc_r>:
1000667c:	6893      	ldr	r3, [r2, #8]
1000667e:	3b01      	subs	r3, #1
10006680:	2b00      	cmp	r3, #0
10006682:	b410      	push	{r4}
10006684:	6093      	str	r3, [r2, #8]
10006686:	da08      	bge.n	1000669a <__sfputc_r+0x1e>
10006688:	6994      	ldr	r4, [r2, #24]
1000668a:	42a3      	cmp	r3, r4
1000668c:	db01      	blt.n	10006692 <__sfputc_r+0x16>
1000668e:	290a      	cmp	r1, #10
10006690:	d103      	bne.n	1000669a <__sfputc_r+0x1e>
10006692:	f85d 4b04 	ldr.w	r4, [sp], #4
10006696:	f000 bb73 	b.w	10006d80 <__swbuf_r>
1000669a:	6813      	ldr	r3, [r2, #0]
1000669c:	1c58      	adds	r0, r3, #1
1000669e:	6010      	str	r0, [r2, #0]
100066a0:	7019      	strb	r1, [r3, #0]
100066a2:	4608      	mov	r0, r1
100066a4:	f85d 4b04 	ldr.w	r4, [sp], #4
100066a8:	4770      	bx	lr

100066aa <__sfputs_r>:
100066aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100066ac:	4606      	mov	r6, r0
100066ae:	460f      	mov	r7, r1
100066b0:	4614      	mov	r4, r2
100066b2:	18d5      	adds	r5, r2, r3
100066b4:	42ac      	cmp	r4, r5
100066b6:	d101      	bne.n	100066bc <__sfputs_r+0x12>
100066b8:	2000      	movs	r0, #0
100066ba:	e007      	b.n	100066cc <__sfputs_r+0x22>
100066bc:	f814 1b01 	ldrb.w	r1, [r4], #1
100066c0:	463a      	mov	r2, r7
100066c2:	4630      	mov	r0, r6
100066c4:	f7ff ffda 	bl	1000667c <__sfputc_r>
100066c8:	1c43      	adds	r3, r0, #1
100066ca:	d1f3      	bne.n	100066b4 <__sfputs_r+0xa>
100066cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

100066d0 <_vfiprintf_r>:
100066d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100066d4:	460d      	mov	r5, r1
100066d6:	b09d      	sub	sp, #116	; 0x74
100066d8:	4614      	mov	r4, r2
100066da:	4698      	mov	r8, r3
100066dc:	4606      	mov	r6, r0
100066de:	b118      	cbz	r0, 100066e8 <_vfiprintf_r+0x18>
100066e0:	6a03      	ldr	r3, [r0, #32]
100066e2:	b90b      	cbnz	r3, 100066e8 <_vfiprintf_r+0x18>
100066e4:	f7ff fe1c 	bl	10006320 <__sinit>
100066e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
100066ea:	07d9      	lsls	r1, r3, #31
100066ec:	d405      	bmi.n	100066fa <_vfiprintf_r+0x2a>
100066ee:	89ab      	ldrh	r3, [r5, #12]
100066f0:	059a      	lsls	r2, r3, #22
100066f2:	d402      	bmi.n	100066fa <_vfiprintf_r+0x2a>
100066f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
100066f6:	f7ff ff5d 	bl	100065b4 <__retarget_lock_acquire_recursive>
100066fa:	89ab      	ldrh	r3, [r5, #12]
100066fc:	071b      	lsls	r3, r3, #28
100066fe:	d501      	bpl.n	10006704 <_vfiprintf_r+0x34>
10006700:	692b      	ldr	r3, [r5, #16]
10006702:	b99b      	cbnz	r3, 1000672c <_vfiprintf_r+0x5c>
10006704:	4629      	mov	r1, r5
10006706:	4630      	mov	r0, r6
10006708:	f000 fb78 	bl	10006dfc <__swsetup_r>
1000670c:	b170      	cbz	r0, 1000672c <_vfiprintf_r+0x5c>
1000670e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
10006710:	07dc      	lsls	r4, r3, #31
10006712:	d504      	bpl.n	1000671e <_vfiprintf_r+0x4e>
10006714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
10006718:	b01d      	add	sp, #116	; 0x74
1000671a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000671e:	89ab      	ldrh	r3, [r5, #12]
10006720:	0598      	lsls	r0, r3, #22
10006722:	d4f7      	bmi.n	10006714 <_vfiprintf_r+0x44>
10006724:	6da8      	ldr	r0, [r5, #88]	; 0x58
10006726:	f7ff ff46 	bl	100065b6 <__retarget_lock_release_recursive>
1000672a:	e7f3      	b.n	10006714 <_vfiprintf_r+0x44>
1000672c:	2300      	movs	r3, #0
1000672e:	9309      	str	r3, [sp, #36]	; 0x24
10006730:	2320      	movs	r3, #32
10006732:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
10006736:	f8cd 800c 	str.w	r8, [sp, #12]
1000673a:	2330      	movs	r3, #48	; 0x30
1000673c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 100068f0 <_vfiprintf_r+0x220>
10006740:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
10006744:	f04f 0901 	mov.w	r9, #1
10006748:	4623      	mov	r3, r4
1000674a:	469a      	mov	sl, r3
1000674c:	f813 2b01 	ldrb.w	r2, [r3], #1
10006750:	b10a      	cbz	r2, 10006756 <_vfiprintf_r+0x86>
10006752:	2a25      	cmp	r2, #37	; 0x25
10006754:	d1f9      	bne.n	1000674a <_vfiprintf_r+0x7a>
10006756:	ebba 0b04 	subs.w	fp, sl, r4
1000675a:	d00b      	beq.n	10006774 <_vfiprintf_r+0xa4>
1000675c:	465b      	mov	r3, fp
1000675e:	4622      	mov	r2, r4
10006760:	4629      	mov	r1, r5
10006762:	4630      	mov	r0, r6
10006764:	f7ff ffa1 	bl	100066aa <__sfputs_r>
10006768:	3001      	adds	r0, #1
1000676a:	f000 80a9 	beq.w	100068c0 <_vfiprintf_r+0x1f0>
1000676e:	9a09      	ldr	r2, [sp, #36]	; 0x24
10006770:	445a      	add	r2, fp
10006772:	9209      	str	r2, [sp, #36]	; 0x24
10006774:	f89a 3000 	ldrb.w	r3, [sl]
10006778:	2b00      	cmp	r3, #0
1000677a:	f000 80a1 	beq.w	100068c0 <_vfiprintf_r+0x1f0>
1000677e:	2300      	movs	r3, #0
10006780:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
10006784:	e9cd 2305 	strd	r2, r3, [sp, #20]
10006788:	f10a 0a01 	add.w	sl, sl, #1
1000678c:	9304      	str	r3, [sp, #16]
1000678e:	9307      	str	r3, [sp, #28]
10006790:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
10006794:	931a      	str	r3, [sp, #104]	; 0x68
10006796:	4654      	mov	r4, sl
10006798:	2205      	movs	r2, #5
1000679a:	f814 1b01 	ldrb.w	r1, [r4], #1
1000679e:	4854      	ldr	r0, [pc, #336]	; (100068f0 <_vfiprintf_r+0x220>)
100067a0:	f7f9 fc66 	bl	10000070 <memchr>
100067a4:	9a04      	ldr	r2, [sp, #16]
100067a6:	b9d8      	cbnz	r0, 100067e0 <_vfiprintf_r+0x110>
100067a8:	06d1      	lsls	r1, r2, #27
100067aa:	bf44      	itt	mi
100067ac:	2320      	movmi	r3, #32
100067ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
100067b2:	0713      	lsls	r3, r2, #28
100067b4:	bf44      	itt	mi
100067b6:	232b      	movmi	r3, #43	; 0x2b
100067b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
100067bc:	f89a 3000 	ldrb.w	r3, [sl]
100067c0:	2b2a      	cmp	r3, #42	; 0x2a
100067c2:	d015      	beq.n	100067f0 <_vfiprintf_r+0x120>
100067c4:	9a07      	ldr	r2, [sp, #28]
100067c6:	4654      	mov	r4, sl
100067c8:	2000      	movs	r0, #0
100067ca:	f04f 0c0a 	mov.w	ip, #10
100067ce:	4621      	mov	r1, r4
100067d0:	f811 3b01 	ldrb.w	r3, [r1], #1
100067d4:	3b30      	subs	r3, #48	; 0x30
100067d6:	2b09      	cmp	r3, #9
100067d8:	d94d      	bls.n	10006876 <_vfiprintf_r+0x1a6>
100067da:	b1b0      	cbz	r0, 1000680a <_vfiprintf_r+0x13a>
100067dc:	9207      	str	r2, [sp, #28]
100067de:	e014      	b.n	1000680a <_vfiprintf_r+0x13a>
100067e0:	eba0 0308 	sub.w	r3, r0, r8
100067e4:	fa09 f303 	lsl.w	r3, r9, r3
100067e8:	4313      	orrs	r3, r2
100067ea:	9304      	str	r3, [sp, #16]
100067ec:	46a2      	mov	sl, r4
100067ee:	e7d2      	b.n	10006796 <_vfiprintf_r+0xc6>
100067f0:	9b03      	ldr	r3, [sp, #12]
100067f2:	1d19      	adds	r1, r3, #4
100067f4:	681b      	ldr	r3, [r3, #0]
100067f6:	9103      	str	r1, [sp, #12]
100067f8:	2b00      	cmp	r3, #0
100067fa:	bfbb      	ittet	lt
100067fc:	425b      	neglt	r3, r3
100067fe:	f042 0202 	orrlt.w	r2, r2, #2
10006802:	9307      	strge	r3, [sp, #28]
10006804:	9307      	strlt	r3, [sp, #28]
10006806:	bfb8      	it	lt
10006808:	9204      	strlt	r2, [sp, #16]
1000680a:	7823      	ldrb	r3, [r4, #0]
1000680c:	2b2e      	cmp	r3, #46	; 0x2e
1000680e:	d10c      	bne.n	1000682a <_vfiprintf_r+0x15a>
10006810:	7863      	ldrb	r3, [r4, #1]
10006812:	2b2a      	cmp	r3, #42	; 0x2a
10006814:	d134      	bne.n	10006880 <_vfiprintf_r+0x1b0>
10006816:	9b03      	ldr	r3, [sp, #12]
10006818:	1d1a      	adds	r2, r3, #4
1000681a:	681b      	ldr	r3, [r3, #0]
1000681c:	9203      	str	r2, [sp, #12]
1000681e:	2b00      	cmp	r3, #0
10006820:	bfb8      	it	lt
10006822:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
10006826:	3402      	adds	r4, #2
10006828:	9305      	str	r3, [sp, #20]
1000682a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 10006900 <_vfiprintf_r+0x230>
1000682e:	7821      	ldrb	r1, [r4, #0]
10006830:	2203      	movs	r2, #3
10006832:	4650      	mov	r0, sl
10006834:	f7f9 fc1c 	bl	10000070 <memchr>
10006838:	b138      	cbz	r0, 1000684a <_vfiprintf_r+0x17a>
1000683a:	9b04      	ldr	r3, [sp, #16]
1000683c:	eba0 000a 	sub.w	r0, r0, sl
10006840:	2240      	movs	r2, #64	; 0x40
10006842:	4082      	lsls	r2, r0
10006844:	4313      	orrs	r3, r2
10006846:	3401      	adds	r4, #1
10006848:	9304      	str	r3, [sp, #16]
1000684a:	f814 1b01 	ldrb.w	r1, [r4], #1
1000684e:	4829      	ldr	r0, [pc, #164]	; (100068f4 <_vfiprintf_r+0x224>)
10006850:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
10006854:	2206      	movs	r2, #6
10006856:	f7f9 fc0b 	bl	10000070 <memchr>
1000685a:	2800      	cmp	r0, #0
1000685c:	d03f      	beq.n	100068de <_vfiprintf_r+0x20e>
1000685e:	4b26      	ldr	r3, [pc, #152]	; (100068f8 <_vfiprintf_r+0x228>)
10006860:	bb1b      	cbnz	r3, 100068aa <_vfiprintf_r+0x1da>
10006862:	9b03      	ldr	r3, [sp, #12]
10006864:	3307      	adds	r3, #7
10006866:	f023 0307 	bic.w	r3, r3, #7
1000686a:	3308      	adds	r3, #8
1000686c:	9303      	str	r3, [sp, #12]
1000686e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10006870:	443b      	add	r3, r7
10006872:	9309      	str	r3, [sp, #36]	; 0x24
10006874:	e768      	b.n	10006748 <_vfiprintf_r+0x78>
10006876:	fb0c 3202 	mla	r2, ip, r2, r3
1000687a:	460c      	mov	r4, r1
1000687c:	2001      	movs	r0, #1
1000687e:	e7a6      	b.n	100067ce <_vfiprintf_r+0xfe>
10006880:	2300      	movs	r3, #0
10006882:	3401      	adds	r4, #1
10006884:	9305      	str	r3, [sp, #20]
10006886:	4619      	mov	r1, r3
10006888:	f04f 0c0a 	mov.w	ip, #10
1000688c:	4620      	mov	r0, r4
1000688e:	f810 2b01 	ldrb.w	r2, [r0], #1
10006892:	3a30      	subs	r2, #48	; 0x30
10006894:	2a09      	cmp	r2, #9
10006896:	d903      	bls.n	100068a0 <_vfiprintf_r+0x1d0>
10006898:	2b00      	cmp	r3, #0
1000689a:	d0c6      	beq.n	1000682a <_vfiprintf_r+0x15a>
1000689c:	9105      	str	r1, [sp, #20]
1000689e:	e7c4      	b.n	1000682a <_vfiprintf_r+0x15a>
100068a0:	fb0c 2101 	mla	r1, ip, r1, r2
100068a4:	4604      	mov	r4, r0
100068a6:	2301      	movs	r3, #1
100068a8:	e7f0      	b.n	1000688c <_vfiprintf_r+0x1bc>
100068aa:	ab03      	add	r3, sp, #12
100068ac:	9300      	str	r3, [sp, #0]
100068ae:	462a      	mov	r2, r5
100068b0:	4b12      	ldr	r3, [pc, #72]	; (100068fc <_vfiprintf_r+0x22c>)
100068b2:	a904      	add	r1, sp, #16
100068b4:	4630      	mov	r0, r6
100068b6:	f3af 8000 	nop.w
100068ba:	4607      	mov	r7, r0
100068bc:	1c78      	adds	r0, r7, #1
100068be:	d1d6      	bne.n	1000686e <_vfiprintf_r+0x19e>
100068c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
100068c2:	07d9      	lsls	r1, r3, #31
100068c4:	d405      	bmi.n	100068d2 <_vfiprintf_r+0x202>
100068c6:	89ab      	ldrh	r3, [r5, #12]
100068c8:	059a      	lsls	r2, r3, #22
100068ca:	d402      	bmi.n	100068d2 <_vfiprintf_r+0x202>
100068cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
100068ce:	f7ff fe72 	bl	100065b6 <__retarget_lock_release_recursive>
100068d2:	89ab      	ldrh	r3, [r5, #12]
100068d4:	065b      	lsls	r3, r3, #25
100068d6:	f53f af1d 	bmi.w	10006714 <_vfiprintf_r+0x44>
100068da:	9809      	ldr	r0, [sp, #36]	; 0x24
100068dc:	e71c      	b.n	10006718 <_vfiprintf_r+0x48>
100068de:	ab03      	add	r3, sp, #12
100068e0:	9300      	str	r3, [sp, #0]
100068e2:	462a      	mov	r2, r5
100068e4:	4b05      	ldr	r3, [pc, #20]	; (100068fc <_vfiprintf_r+0x22c>)
100068e6:	a904      	add	r1, sp, #16
100068e8:	4630      	mov	r0, r6
100068ea:	f000 f879 	bl	100069e0 <_printf_i>
100068ee:	e7e4      	b.n	100068ba <_vfiprintf_r+0x1ea>
100068f0:	100076d9 	.word	0x100076d9
100068f4:	100076e3 	.word	0x100076e3
100068f8:	00000000 	.word	0x00000000
100068fc:	100066ab 	.word	0x100066ab
10006900:	100076df 	.word	0x100076df

10006904 <_printf_common>:
10006904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10006908:	4616      	mov	r6, r2
1000690a:	4699      	mov	r9, r3
1000690c:	688a      	ldr	r2, [r1, #8]
1000690e:	690b      	ldr	r3, [r1, #16]
10006910:	f8dd 8020 	ldr.w	r8, [sp, #32]
10006914:	4293      	cmp	r3, r2
10006916:	bfb8      	it	lt
10006918:	4613      	movlt	r3, r2
1000691a:	6033      	str	r3, [r6, #0]
1000691c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
10006920:	4607      	mov	r7, r0
10006922:	460c      	mov	r4, r1
10006924:	b10a      	cbz	r2, 1000692a <_printf_common+0x26>
10006926:	3301      	adds	r3, #1
10006928:	6033      	str	r3, [r6, #0]
1000692a:	6823      	ldr	r3, [r4, #0]
1000692c:	0699      	lsls	r1, r3, #26
1000692e:	bf42      	ittt	mi
10006930:	6833      	ldrmi	r3, [r6, #0]
10006932:	3302      	addmi	r3, #2
10006934:	6033      	strmi	r3, [r6, #0]
10006936:	6825      	ldr	r5, [r4, #0]
10006938:	f015 0506 	ands.w	r5, r5, #6
1000693c:	d106      	bne.n	1000694c <_printf_common+0x48>
1000693e:	f104 0a19 	add.w	sl, r4, #25
10006942:	68e3      	ldr	r3, [r4, #12]
10006944:	6832      	ldr	r2, [r6, #0]
10006946:	1a9b      	subs	r3, r3, r2
10006948:	42ab      	cmp	r3, r5
1000694a:	dc26      	bgt.n	1000699a <_printf_common+0x96>
1000694c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
10006950:	1e13      	subs	r3, r2, #0
10006952:	6822      	ldr	r2, [r4, #0]
10006954:	bf18      	it	ne
10006956:	2301      	movne	r3, #1
10006958:	0692      	lsls	r2, r2, #26
1000695a:	d42b      	bmi.n	100069b4 <_printf_common+0xb0>
1000695c:	f104 0243 	add.w	r2, r4, #67	; 0x43
10006960:	4649      	mov	r1, r9
10006962:	4638      	mov	r0, r7
10006964:	47c0      	blx	r8
10006966:	3001      	adds	r0, #1
10006968:	d01e      	beq.n	100069a8 <_printf_common+0xa4>
1000696a:	6823      	ldr	r3, [r4, #0]
1000696c:	6922      	ldr	r2, [r4, #16]
1000696e:	f003 0306 	and.w	r3, r3, #6
10006972:	2b04      	cmp	r3, #4
10006974:	bf02      	ittt	eq
10006976:	68e5      	ldreq	r5, [r4, #12]
10006978:	6833      	ldreq	r3, [r6, #0]
1000697a:	1aed      	subeq	r5, r5, r3
1000697c:	68a3      	ldr	r3, [r4, #8]
1000697e:	bf0c      	ite	eq
10006980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
10006984:	2500      	movne	r5, #0
10006986:	4293      	cmp	r3, r2
10006988:	bfc4      	itt	gt
1000698a:	1a9b      	subgt	r3, r3, r2
1000698c:	18ed      	addgt	r5, r5, r3
1000698e:	2600      	movs	r6, #0
10006990:	341a      	adds	r4, #26
10006992:	42b5      	cmp	r5, r6
10006994:	d11a      	bne.n	100069cc <_printf_common+0xc8>
10006996:	2000      	movs	r0, #0
10006998:	e008      	b.n	100069ac <_printf_common+0xa8>
1000699a:	2301      	movs	r3, #1
1000699c:	4652      	mov	r2, sl
1000699e:	4649      	mov	r1, r9
100069a0:	4638      	mov	r0, r7
100069a2:	47c0      	blx	r8
100069a4:	3001      	adds	r0, #1
100069a6:	d103      	bne.n	100069b0 <_printf_common+0xac>
100069a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
100069ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
100069b0:	3501      	adds	r5, #1
100069b2:	e7c6      	b.n	10006942 <_printf_common+0x3e>
100069b4:	18e1      	adds	r1, r4, r3
100069b6:	1c5a      	adds	r2, r3, #1
100069b8:	2030      	movs	r0, #48	; 0x30
100069ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
100069be:	4422      	add	r2, r4
100069c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
100069c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
100069c8:	3302      	adds	r3, #2
100069ca:	e7c7      	b.n	1000695c <_printf_common+0x58>
100069cc:	2301      	movs	r3, #1
100069ce:	4622      	mov	r2, r4
100069d0:	4649      	mov	r1, r9
100069d2:	4638      	mov	r0, r7
100069d4:	47c0      	blx	r8
100069d6:	3001      	adds	r0, #1
100069d8:	d0e6      	beq.n	100069a8 <_printf_common+0xa4>
100069da:	3601      	adds	r6, #1
100069dc:	e7d9      	b.n	10006992 <_printf_common+0x8e>
	...

100069e0 <_printf_i>:
100069e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
100069e4:	7e0f      	ldrb	r7, [r1, #24]
100069e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
100069e8:	2f78      	cmp	r7, #120	; 0x78
100069ea:	4691      	mov	r9, r2
100069ec:	4680      	mov	r8, r0
100069ee:	460c      	mov	r4, r1
100069f0:	469a      	mov	sl, r3
100069f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
100069f6:	d807      	bhi.n	10006a08 <_printf_i+0x28>
100069f8:	2f62      	cmp	r7, #98	; 0x62
100069fa:	d80a      	bhi.n	10006a12 <_printf_i+0x32>
100069fc:	2f00      	cmp	r7, #0
100069fe:	f000 80d4 	beq.w	10006baa <_printf_i+0x1ca>
10006a02:	2f58      	cmp	r7, #88	; 0x58
10006a04:	f000 80c0 	beq.w	10006b88 <_printf_i+0x1a8>
10006a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
10006a0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
10006a10:	e03a      	b.n	10006a88 <_printf_i+0xa8>
10006a12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
10006a16:	2b15      	cmp	r3, #21
10006a18:	d8f6      	bhi.n	10006a08 <_printf_i+0x28>
10006a1a:	a101      	add	r1, pc, #4	; (adr r1, 10006a20 <_printf_i+0x40>)
10006a1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
10006a20:	10006a79 	.word	0x10006a79
10006a24:	10006a8d 	.word	0x10006a8d
10006a28:	10006a09 	.word	0x10006a09
10006a2c:	10006a09 	.word	0x10006a09
10006a30:	10006a09 	.word	0x10006a09
10006a34:	10006a09 	.word	0x10006a09
10006a38:	10006a8d 	.word	0x10006a8d
10006a3c:	10006a09 	.word	0x10006a09
10006a40:	10006a09 	.word	0x10006a09
10006a44:	10006a09 	.word	0x10006a09
10006a48:	10006a09 	.word	0x10006a09
10006a4c:	10006b91 	.word	0x10006b91
10006a50:	10006ab9 	.word	0x10006ab9
10006a54:	10006b4b 	.word	0x10006b4b
10006a58:	10006a09 	.word	0x10006a09
10006a5c:	10006a09 	.word	0x10006a09
10006a60:	10006bb3 	.word	0x10006bb3
10006a64:	10006a09 	.word	0x10006a09
10006a68:	10006ab9 	.word	0x10006ab9
10006a6c:	10006a09 	.word	0x10006a09
10006a70:	10006a09 	.word	0x10006a09
10006a74:	10006b53 	.word	0x10006b53
10006a78:	682b      	ldr	r3, [r5, #0]
10006a7a:	1d1a      	adds	r2, r3, #4
10006a7c:	681b      	ldr	r3, [r3, #0]
10006a7e:	602a      	str	r2, [r5, #0]
10006a80:	f104 0542 	add.w	r5, r4, #66	; 0x42
10006a84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
10006a88:	2301      	movs	r3, #1
10006a8a:	e09f      	b.n	10006bcc <_printf_i+0x1ec>
10006a8c:	6820      	ldr	r0, [r4, #0]
10006a8e:	682b      	ldr	r3, [r5, #0]
10006a90:	0607      	lsls	r7, r0, #24
10006a92:	f103 0104 	add.w	r1, r3, #4
10006a96:	6029      	str	r1, [r5, #0]
10006a98:	d501      	bpl.n	10006a9e <_printf_i+0xbe>
10006a9a:	681e      	ldr	r6, [r3, #0]
10006a9c:	e003      	b.n	10006aa6 <_printf_i+0xc6>
10006a9e:	0646      	lsls	r6, r0, #25
10006aa0:	d5fb      	bpl.n	10006a9a <_printf_i+0xba>
10006aa2:	f9b3 6000 	ldrsh.w	r6, [r3]
10006aa6:	2e00      	cmp	r6, #0
10006aa8:	da03      	bge.n	10006ab2 <_printf_i+0xd2>
10006aaa:	232d      	movs	r3, #45	; 0x2d
10006aac:	4276      	negs	r6, r6
10006aae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
10006ab2:	485a      	ldr	r0, [pc, #360]	; (10006c1c <_printf_i+0x23c>)
10006ab4:	230a      	movs	r3, #10
10006ab6:	e012      	b.n	10006ade <_printf_i+0xfe>
10006ab8:	682b      	ldr	r3, [r5, #0]
10006aba:	6820      	ldr	r0, [r4, #0]
10006abc:	1d19      	adds	r1, r3, #4
10006abe:	6029      	str	r1, [r5, #0]
10006ac0:	0605      	lsls	r5, r0, #24
10006ac2:	d501      	bpl.n	10006ac8 <_printf_i+0xe8>
10006ac4:	681e      	ldr	r6, [r3, #0]
10006ac6:	e002      	b.n	10006ace <_printf_i+0xee>
10006ac8:	0641      	lsls	r1, r0, #25
10006aca:	d5fb      	bpl.n	10006ac4 <_printf_i+0xe4>
10006acc:	881e      	ldrh	r6, [r3, #0]
10006ace:	4853      	ldr	r0, [pc, #332]	; (10006c1c <_printf_i+0x23c>)
10006ad0:	2f6f      	cmp	r7, #111	; 0x6f
10006ad2:	bf0c      	ite	eq
10006ad4:	2308      	moveq	r3, #8
10006ad6:	230a      	movne	r3, #10
10006ad8:	2100      	movs	r1, #0
10006ada:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
10006ade:	6865      	ldr	r5, [r4, #4]
10006ae0:	60a5      	str	r5, [r4, #8]
10006ae2:	2d00      	cmp	r5, #0
10006ae4:	bfa2      	ittt	ge
10006ae6:	6821      	ldrge	r1, [r4, #0]
10006ae8:	f021 0104 	bicge.w	r1, r1, #4
10006aec:	6021      	strge	r1, [r4, #0]
10006aee:	b90e      	cbnz	r6, 10006af4 <_printf_i+0x114>
10006af0:	2d00      	cmp	r5, #0
10006af2:	d04b      	beq.n	10006b8c <_printf_i+0x1ac>
10006af4:	4615      	mov	r5, r2
10006af6:	fbb6 f1f3 	udiv	r1, r6, r3
10006afa:	fb03 6711 	mls	r7, r3, r1, r6
10006afe:	5dc7      	ldrb	r7, [r0, r7]
10006b00:	f805 7d01 	strb.w	r7, [r5, #-1]!
10006b04:	4637      	mov	r7, r6
10006b06:	42bb      	cmp	r3, r7
10006b08:	460e      	mov	r6, r1
10006b0a:	d9f4      	bls.n	10006af6 <_printf_i+0x116>
10006b0c:	2b08      	cmp	r3, #8
10006b0e:	d10b      	bne.n	10006b28 <_printf_i+0x148>
10006b10:	6823      	ldr	r3, [r4, #0]
10006b12:	07de      	lsls	r6, r3, #31
10006b14:	d508      	bpl.n	10006b28 <_printf_i+0x148>
10006b16:	6923      	ldr	r3, [r4, #16]
10006b18:	6861      	ldr	r1, [r4, #4]
10006b1a:	4299      	cmp	r1, r3
10006b1c:	bfde      	ittt	le
10006b1e:	2330      	movle	r3, #48	; 0x30
10006b20:	f805 3c01 	strble.w	r3, [r5, #-1]
10006b24:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
10006b28:	1b52      	subs	r2, r2, r5
10006b2a:	6122      	str	r2, [r4, #16]
10006b2c:	f8cd a000 	str.w	sl, [sp]
10006b30:	464b      	mov	r3, r9
10006b32:	aa03      	add	r2, sp, #12
10006b34:	4621      	mov	r1, r4
10006b36:	4640      	mov	r0, r8
10006b38:	f7ff fee4 	bl	10006904 <_printf_common>
10006b3c:	3001      	adds	r0, #1
10006b3e:	d14a      	bne.n	10006bd6 <_printf_i+0x1f6>
10006b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
10006b44:	b004      	add	sp, #16
10006b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10006b4a:	6823      	ldr	r3, [r4, #0]
10006b4c:	f043 0320 	orr.w	r3, r3, #32
10006b50:	6023      	str	r3, [r4, #0]
10006b52:	4833      	ldr	r0, [pc, #204]	; (10006c20 <_printf_i+0x240>)
10006b54:	2778      	movs	r7, #120	; 0x78
10006b56:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
10006b5a:	6823      	ldr	r3, [r4, #0]
10006b5c:	6829      	ldr	r1, [r5, #0]
10006b5e:	061f      	lsls	r7, r3, #24
10006b60:	f851 6b04 	ldr.w	r6, [r1], #4
10006b64:	d402      	bmi.n	10006b6c <_printf_i+0x18c>
10006b66:	065f      	lsls	r7, r3, #25
10006b68:	bf48      	it	mi
10006b6a:	b2b6      	uxthmi	r6, r6
10006b6c:	07df      	lsls	r7, r3, #31
10006b6e:	bf48      	it	mi
10006b70:	f043 0320 	orrmi.w	r3, r3, #32
10006b74:	6029      	str	r1, [r5, #0]
10006b76:	bf48      	it	mi
10006b78:	6023      	strmi	r3, [r4, #0]
10006b7a:	b91e      	cbnz	r6, 10006b84 <_printf_i+0x1a4>
10006b7c:	6823      	ldr	r3, [r4, #0]
10006b7e:	f023 0320 	bic.w	r3, r3, #32
10006b82:	6023      	str	r3, [r4, #0]
10006b84:	2310      	movs	r3, #16
10006b86:	e7a7      	b.n	10006ad8 <_printf_i+0xf8>
10006b88:	4824      	ldr	r0, [pc, #144]	; (10006c1c <_printf_i+0x23c>)
10006b8a:	e7e4      	b.n	10006b56 <_printf_i+0x176>
10006b8c:	4615      	mov	r5, r2
10006b8e:	e7bd      	b.n	10006b0c <_printf_i+0x12c>
10006b90:	682b      	ldr	r3, [r5, #0]
10006b92:	6826      	ldr	r6, [r4, #0]
10006b94:	6961      	ldr	r1, [r4, #20]
10006b96:	1d18      	adds	r0, r3, #4
10006b98:	6028      	str	r0, [r5, #0]
10006b9a:	0635      	lsls	r5, r6, #24
10006b9c:	681b      	ldr	r3, [r3, #0]
10006b9e:	d501      	bpl.n	10006ba4 <_printf_i+0x1c4>
10006ba0:	6019      	str	r1, [r3, #0]
10006ba2:	e002      	b.n	10006baa <_printf_i+0x1ca>
10006ba4:	0670      	lsls	r0, r6, #25
10006ba6:	d5fb      	bpl.n	10006ba0 <_printf_i+0x1c0>
10006ba8:	8019      	strh	r1, [r3, #0]
10006baa:	2300      	movs	r3, #0
10006bac:	6123      	str	r3, [r4, #16]
10006bae:	4615      	mov	r5, r2
10006bb0:	e7bc      	b.n	10006b2c <_printf_i+0x14c>
10006bb2:	682b      	ldr	r3, [r5, #0]
10006bb4:	1d1a      	adds	r2, r3, #4
10006bb6:	602a      	str	r2, [r5, #0]
10006bb8:	681d      	ldr	r5, [r3, #0]
10006bba:	6862      	ldr	r2, [r4, #4]
10006bbc:	2100      	movs	r1, #0
10006bbe:	4628      	mov	r0, r5
10006bc0:	f7f9 fa56 	bl	10000070 <memchr>
10006bc4:	b108      	cbz	r0, 10006bca <_printf_i+0x1ea>
10006bc6:	1b40      	subs	r0, r0, r5
10006bc8:	6060      	str	r0, [r4, #4]
10006bca:	6863      	ldr	r3, [r4, #4]
10006bcc:	6123      	str	r3, [r4, #16]
10006bce:	2300      	movs	r3, #0
10006bd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
10006bd4:	e7aa      	b.n	10006b2c <_printf_i+0x14c>
10006bd6:	6923      	ldr	r3, [r4, #16]
10006bd8:	462a      	mov	r2, r5
10006bda:	4649      	mov	r1, r9
10006bdc:	4640      	mov	r0, r8
10006bde:	47d0      	blx	sl
10006be0:	3001      	adds	r0, #1
10006be2:	d0ad      	beq.n	10006b40 <_printf_i+0x160>
10006be4:	6823      	ldr	r3, [r4, #0]
10006be6:	079b      	lsls	r3, r3, #30
10006be8:	d413      	bmi.n	10006c12 <_printf_i+0x232>
10006bea:	68e0      	ldr	r0, [r4, #12]
10006bec:	9b03      	ldr	r3, [sp, #12]
10006bee:	4298      	cmp	r0, r3
10006bf0:	bfb8      	it	lt
10006bf2:	4618      	movlt	r0, r3
10006bf4:	e7a6      	b.n	10006b44 <_printf_i+0x164>
10006bf6:	2301      	movs	r3, #1
10006bf8:	4632      	mov	r2, r6
10006bfa:	4649      	mov	r1, r9
10006bfc:	4640      	mov	r0, r8
10006bfe:	47d0      	blx	sl
10006c00:	3001      	adds	r0, #1
10006c02:	d09d      	beq.n	10006b40 <_printf_i+0x160>
10006c04:	3501      	adds	r5, #1
10006c06:	68e3      	ldr	r3, [r4, #12]
10006c08:	9903      	ldr	r1, [sp, #12]
10006c0a:	1a5b      	subs	r3, r3, r1
10006c0c:	42ab      	cmp	r3, r5
10006c0e:	dcf2      	bgt.n	10006bf6 <_printf_i+0x216>
10006c10:	e7eb      	b.n	10006bea <_printf_i+0x20a>
10006c12:	2500      	movs	r5, #0
10006c14:	f104 0619 	add.w	r6, r4, #25
10006c18:	e7f5      	b.n	10006c06 <_printf_i+0x226>
10006c1a:	bf00      	nop
10006c1c:	100076ea 	.word	0x100076ea
10006c20:	100076fb 	.word	0x100076fb

10006c24 <__sflush_r>:
10006c24:	898a      	ldrh	r2, [r1, #12]
10006c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10006c2a:	4605      	mov	r5, r0
10006c2c:	0710      	lsls	r0, r2, #28
10006c2e:	460c      	mov	r4, r1
10006c30:	d458      	bmi.n	10006ce4 <__sflush_r+0xc0>
10006c32:	684b      	ldr	r3, [r1, #4]
10006c34:	2b00      	cmp	r3, #0
10006c36:	dc05      	bgt.n	10006c44 <__sflush_r+0x20>
10006c38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10006c3a:	2b00      	cmp	r3, #0
10006c3c:	dc02      	bgt.n	10006c44 <__sflush_r+0x20>
10006c3e:	2000      	movs	r0, #0
10006c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10006c44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
10006c46:	2e00      	cmp	r6, #0
10006c48:	d0f9      	beq.n	10006c3e <__sflush_r+0x1a>
10006c4a:	2300      	movs	r3, #0
10006c4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
10006c50:	682f      	ldr	r7, [r5, #0]
10006c52:	6a21      	ldr	r1, [r4, #32]
10006c54:	602b      	str	r3, [r5, #0]
10006c56:	d032      	beq.n	10006cbe <__sflush_r+0x9a>
10006c58:	6d60      	ldr	r0, [r4, #84]	; 0x54
10006c5a:	89a3      	ldrh	r3, [r4, #12]
10006c5c:	075a      	lsls	r2, r3, #29
10006c5e:	d505      	bpl.n	10006c6c <__sflush_r+0x48>
10006c60:	6863      	ldr	r3, [r4, #4]
10006c62:	1ac0      	subs	r0, r0, r3
10006c64:	6b63      	ldr	r3, [r4, #52]	; 0x34
10006c66:	b10b      	cbz	r3, 10006c6c <__sflush_r+0x48>
10006c68:	6c23      	ldr	r3, [r4, #64]	; 0x40
10006c6a:	1ac0      	subs	r0, r0, r3
10006c6c:	2300      	movs	r3, #0
10006c6e:	4602      	mov	r2, r0
10006c70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
10006c72:	6a21      	ldr	r1, [r4, #32]
10006c74:	4628      	mov	r0, r5
10006c76:	47b0      	blx	r6
10006c78:	1c43      	adds	r3, r0, #1
10006c7a:	89a3      	ldrh	r3, [r4, #12]
10006c7c:	d106      	bne.n	10006c8c <__sflush_r+0x68>
10006c7e:	6829      	ldr	r1, [r5, #0]
10006c80:	291d      	cmp	r1, #29
10006c82:	d82b      	bhi.n	10006cdc <__sflush_r+0xb8>
10006c84:	4a29      	ldr	r2, [pc, #164]	; (10006d2c <__sflush_r+0x108>)
10006c86:	410a      	asrs	r2, r1
10006c88:	07d6      	lsls	r6, r2, #31
10006c8a:	d427      	bmi.n	10006cdc <__sflush_r+0xb8>
10006c8c:	2200      	movs	r2, #0
10006c8e:	6062      	str	r2, [r4, #4]
10006c90:	04d9      	lsls	r1, r3, #19
10006c92:	6922      	ldr	r2, [r4, #16]
10006c94:	6022      	str	r2, [r4, #0]
10006c96:	d504      	bpl.n	10006ca2 <__sflush_r+0x7e>
10006c98:	1c42      	adds	r2, r0, #1
10006c9a:	d101      	bne.n	10006ca0 <__sflush_r+0x7c>
10006c9c:	682b      	ldr	r3, [r5, #0]
10006c9e:	b903      	cbnz	r3, 10006ca2 <__sflush_r+0x7e>
10006ca0:	6560      	str	r0, [r4, #84]	; 0x54
10006ca2:	6b61      	ldr	r1, [r4, #52]	; 0x34
10006ca4:	602f      	str	r7, [r5, #0]
10006ca6:	2900      	cmp	r1, #0
10006ca8:	d0c9      	beq.n	10006c3e <__sflush_r+0x1a>
10006caa:	f104 0344 	add.w	r3, r4, #68	; 0x44
10006cae:	4299      	cmp	r1, r3
10006cb0:	d002      	beq.n	10006cb8 <__sflush_r+0x94>
10006cb2:	4628      	mov	r0, r5
10006cb4:	f7ff fc96 	bl	100065e4 <_free_r>
10006cb8:	2000      	movs	r0, #0
10006cba:	6360      	str	r0, [r4, #52]	; 0x34
10006cbc:	e7c0      	b.n	10006c40 <__sflush_r+0x1c>
10006cbe:	2301      	movs	r3, #1
10006cc0:	4628      	mov	r0, r5
10006cc2:	47b0      	blx	r6
10006cc4:	1c41      	adds	r1, r0, #1
10006cc6:	d1c8      	bne.n	10006c5a <__sflush_r+0x36>
10006cc8:	682b      	ldr	r3, [r5, #0]
10006cca:	2b00      	cmp	r3, #0
10006ccc:	d0c5      	beq.n	10006c5a <__sflush_r+0x36>
10006cce:	2b1d      	cmp	r3, #29
10006cd0:	d001      	beq.n	10006cd6 <__sflush_r+0xb2>
10006cd2:	2b16      	cmp	r3, #22
10006cd4:	d101      	bne.n	10006cda <__sflush_r+0xb6>
10006cd6:	602f      	str	r7, [r5, #0]
10006cd8:	e7b1      	b.n	10006c3e <__sflush_r+0x1a>
10006cda:	89a3      	ldrh	r3, [r4, #12]
10006cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006ce0:	81a3      	strh	r3, [r4, #12]
10006ce2:	e7ad      	b.n	10006c40 <__sflush_r+0x1c>
10006ce4:	690f      	ldr	r7, [r1, #16]
10006ce6:	2f00      	cmp	r7, #0
10006ce8:	d0a9      	beq.n	10006c3e <__sflush_r+0x1a>
10006cea:	0793      	lsls	r3, r2, #30
10006cec:	680e      	ldr	r6, [r1, #0]
10006cee:	bf08      	it	eq
10006cf0:	694b      	ldreq	r3, [r1, #20]
10006cf2:	600f      	str	r7, [r1, #0]
10006cf4:	bf18      	it	ne
10006cf6:	2300      	movne	r3, #0
10006cf8:	eba6 0807 	sub.w	r8, r6, r7
10006cfc:	608b      	str	r3, [r1, #8]
10006cfe:	f1b8 0f00 	cmp.w	r8, #0
10006d02:	dd9c      	ble.n	10006c3e <__sflush_r+0x1a>
10006d04:	6a21      	ldr	r1, [r4, #32]
10006d06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10006d08:	4643      	mov	r3, r8
10006d0a:	463a      	mov	r2, r7
10006d0c:	4628      	mov	r0, r5
10006d0e:	47b0      	blx	r6
10006d10:	2800      	cmp	r0, #0
10006d12:	dc06      	bgt.n	10006d22 <__sflush_r+0xfe>
10006d14:	89a3      	ldrh	r3, [r4, #12]
10006d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006d1a:	81a3      	strh	r3, [r4, #12]
10006d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
10006d20:	e78e      	b.n	10006c40 <__sflush_r+0x1c>
10006d22:	4407      	add	r7, r0
10006d24:	eba8 0800 	sub.w	r8, r8, r0
10006d28:	e7e9      	b.n	10006cfe <__sflush_r+0xda>
10006d2a:	bf00      	nop
10006d2c:	dfbffffe 	.word	0xdfbffffe

10006d30 <_fflush_r>:
10006d30:	b538      	push	{r3, r4, r5, lr}
10006d32:	690b      	ldr	r3, [r1, #16]
10006d34:	4605      	mov	r5, r0
10006d36:	460c      	mov	r4, r1
10006d38:	b913      	cbnz	r3, 10006d40 <_fflush_r+0x10>
10006d3a:	2500      	movs	r5, #0
10006d3c:	4628      	mov	r0, r5
10006d3e:	bd38      	pop	{r3, r4, r5, pc}
10006d40:	b118      	cbz	r0, 10006d4a <_fflush_r+0x1a>
10006d42:	6a03      	ldr	r3, [r0, #32]
10006d44:	b90b      	cbnz	r3, 10006d4a <_fflush_r+0x1a>
10006d46:	f7ff faeb 	bl	10006320 <__sinit>
10006d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10006d4e:	2b00      	cmp	r3, #0
10006d50:	d0f3      	beq.n	10006d3a <_fflush_r+0xa>
10006d52:	6e62      	ldr	r2, [r4, #100]	; 0x64
10006d54:	07d0      	lsls	r0, r2, #31
10006d56:	d404      	bmi.n	10006d62 <_fflush_r+0x32>
10006d58:	0599      	lsls	r1, r3, #22
10006d5a:	d402      	bmi.n	10006d62 <_fflush_r+0x32>
10006d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
10006d5e:	f7ff fc29 	bl	100065b4 <__retarget_lock_acquire_recursive>
10006d62:	4628      	mov	r0, r5
10006d64:	4621      	mov	r1, r4
10006d66:	f7ff ff5d 	bl	10006c24 <__sflush_r>
10006d6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
10006d6c:	07da      	lsls	r2, r3, #31
10006d6e:	4605      	mov	r5, r0
10006d70:	d4e4      	bmi.n	10006d3c <_fflush_r+0xc>
10006d72:	89a3      	ldrh	r3, [r4, #12]
10006d74:	059b      	lsls	r3, r3, #22
10006d76:	d4e1      	bmi.n	10006d3c <_fflush_r+0xc>
10006d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
10006d7a:	f7ff fc1c 	bl	100065b6 <__retarget_lock_release_recursive>
10006d7e:	e7dd      	b.n	10006d3c <_fflush_r+0xc>

10006d80 <__swbuf_r>:
10006d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006d82:	460e      	mov	r6, r1
10006d84:	4614      	mov	r4, r2
10006d86:	4605      	mov	r5, r0
10006d88:	b118      	cbz	r0, 10006d92 <__swbuf_r+0x12>
10006d8a:	6a03      	ldr	r3, [r0, #32]
10006d8c:	b90b      	cbnz	r3, 10006d92 <__swbuf_r+0x12>
10006d8e:	f7ff fac7 	bl	10006320 <__sinit>
10006d92:	69a3      	ldr	r3, [r4, #24]
10006d94:	60a3      	str	r3, [r4, #8]
10006d96:	89a3      	ldrh	r3, [r4, #12]
10006d98:	071a      	lsls	r2, r3, #28
10006d9a:	d525      	bpl.n	10006de8 <__swbuf_r+0x68>
10006d9c:	6923      	ldr	r3, [r4, #16]
10006d9e:	b31b      	cbz	r3, 10006de8 <__swbuf_r+0x68>
10006da0:	6823      	ldr	r3, [r4, #0]
10006da2:	6922      	ldr	r2, [r4, #16]
10006da4:	1a98      	subs	r0, r3, r2
10006da6:	6963      	ldr	r3, [r4, #20]
10006da8:	b2f6      	uxtb	r6, r6
10006daa:	4283      	cmp	r3, r0
10006dac:	4637      	mov	r7, r6
10006dae:	dc04      	bgt.n	10006dba <__swbuf_r+0x3a>
10006db0:	4621      	mov	r1, r4
10006db2:	4628      	mov	r0, r5
10006db4:	f7ff ffbc 	bl	10006d30 <_fflush_r>
10006db8:	b9e0      	cbnz	r0, 10006df4 <__swbuf_r+0x74>
10006dba:	68a3      	ldr	r3, [r4, #8]
10006dbc:	3b01      	subs	r3, #1
10006dbe:	60a3      	str	r3, [r4, #8]
10006dc0:	6823      	ldr	r3, [r4, #0]
10006dc2:	1c5a      	adds	r2, r3, #1
10006dc4:	6022      	str	r2, [r4, #0]
10006dc6:	701e      	strb	r6, [r3, #0]
10006dc8:	6962      	ldr	r2, [r4, #20]
10006dca:	1c43      	adds	r3, r0, #1
10006dcc:	429a      	cmp	r2, r3
10006dce:	d004      	beq.n	10006dda <__swbuf_r+0x5a>
10006dd0:	89a3      	ldrh	r3, [r4, #12]
10006dd2:	07db      	lsls	r3, r3, #31
10006dd4:	d506      	bpl.n	10006de4 <__swbuf_r+0x64>
10006dd6:	2e0a      	cmp	r6, #10
10006dd8:	d104      	bne.n	10006de4 <__swbuf_r+0x64>
10006dda:	4621      	mov	r1, r4
10006ddc:	4628      	mov	r0, r5
10006dde:	f7ff ffa7 	bl	10006d30 <_fflush_r>
10006de2:	b938      	cbnz	r0, 10006df4 <__swbuf_r+0x74>
10006de4:	4638      	mov	r0, r7
10006de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10006de8:	4621      	mov	r1, r4
10006dea:	4628      	mov	r0, r5
10006dec:	f000 f806 	bl	10006dfc <__swsetup_r>
10006df0:	2800      	cmp	r0, #0
10006df2:	d0d5      	beq.n	10006da0 <__swbuf_r+0x20>
10006df4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
10006df8:	e7f4      	b.n	10006de4 <__swbuf_r+0x64>
	...

10006dfc <__swsetup_r>:
10006dfc:	b538      	push	{r3, r4, r5, lr}
10006dfe:	4b2a      	ldr	r3, [pc, #168]	; (10006ea8 <__swsetup_r+0xac>)
10006e00:	4605      	mov	r5, r0
10006e02:	6818      	ldr	r0, [r3, #0]
10006e04:	460c      	mov	r4, r1
10006e06:	b118      	cbz	r0, 10006e10 <__swsetup_r+0x14>
10006e08:	6a03      	ldr	r3, [r0, #32]
10006e0a:	b90b      	cbnz	r3, 10006e10 <__swsetup_r+0x14>
10006e0c:	f7ff fa88 	bl	10006320 <__sinit>
10006e10:	89a3      	ldrh	r3, [r4, #12]
10006e12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
10006e16:	0718      	lsls	r0, r3, #28
10006e18:	d422      	bmi.n	10006e60 <__swsetup_r+0x64>
10006e1a:	06d9      	lsls	r1, r3, #27
10006e1c:	d407      	bmi.n	10006e2e <__swsetup_r+0x32>
10006e1e:	2309      	movs	r3, #9
10006e20:	602b      	str	r3, [r5, #0]
10006e22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
10006e26:	81a3      	strh	r3, [r4, #12]
10006e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
10006e2c:	e034      	b.n	10006e98 <__swsetup_r+0x9c>
10006e2e:	0758      	lsls	r0, r3, #29
10006e30:	d512      	bpl.n	10006e58 <__swsetup_r+0x5c>
10006e32:	6b61      	ldr	r1, [r4, #52]	; 0x34
10006e34:	b141      	cbz	r1, 10006e48 <__swsetup_r+0x4c>
10006e36:	f104 0344 	add.w	r3, r4, #68	; 0x44
10006e3a:	4299      	cmp	r1, r3
10006e3c:	d002      	beq.n	10006e44 <__swsetup_r+0x48>
10006e3e:	4628      	mov	r0, r5
10006e40:	f7ff fbd0 	bl	100065e4 <_free_r>
10006e44:	2300      	movs	r3, #0
10006e46:	6363      	str	r3, [r4, #52]	; 0x34
10006e48:	89a3      	ldrh	r3, [r4, #12]
10006e4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
10006e4e:	81a3      	strh	r3, [r4, #12]
10006e50:	2300      	movs	r3, #0
10006e52:	6063      	str	r3, [r4, #4]
10006e54:	6923      	ldr	r3, [r4, #16]
10006e56:	6023      	str	r3, [r4, #0]
10006e58:	89a3      	ldrh	r3, [r4, #12]
10006e5a:	f043 0308 	orr.w	r3, r3, #8
10006e5e:	81a3      	strh	r3, [r4, #12]
10006e60:	6923      	ldr	r3, [r4, #16]
10006e62:	b94b      	cbnz	r3, 10006e78 <__swsetup_r+0x7c>
10006e64:	89a3      	ldrh	r3, [r4, #12]
10006e66:	f403 7320 	and.w	r3, r3, #640	; 0x280
10006e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
10006e6e:	d003      	beq.n	10006e78 <__swsetup_r+0x7c>
10006e70:	4621      	mov	r1, r4
10006e72:	4628      	mov	r0, r5
10006e74:	f000 f884 	bl	10006f80 <__smakebuf_r>
10006e78:	89a0      	ldrh	r0, [r4, #12]
10006e7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
10006e7e:	f010 0301 	ands.w	r3, r0, #1
10006e82:	d00a      	beq.n	10006e9a <__swsetup_r+0x9e>
10006e84:	2300      	movs	r3, #0
10006e86:	60a3      	str	r3, [r4, #8]
10006e88:	6963      	ldr	r3, [r4, #20]
10006e8a:	425b      	negs	r3, r3
10006e8c:	61a3      	str	r3, [r4, #24]
10006e8e:	6923      	ldr	r3, [r4, #16]
10006e90:	b943      	cbnz	r3, 10006ea4 <__swsetup_r+0xa8>
10006e92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
10006e96:	d1c4      	bne.n	10006e22 <__swsetup_r+0x26>
10006e98:	bd38      	pop	{r3, r4, r5, pc}
10006e9a:	0781      	lsls	r1, r0, #30
10006e9c:	bf58      	it	pl
10006e9e:	6963      	ldrpl	r3, [r4, #20]
10006ea0:	60a3      	str	r3, [r4, #8]
10006ea2:	e7f4      	b.n	10006e8e <__swsetup_r+0x92>
10006ea4:	2000      	movs	r0, #0
10006ea6:	e7f7      	b.n	10006e98 <__swsetup_r+0x9c>
10006ea8:	1002012c 	.word	0x1002012c

10006eac <_raise_r>:
10006eac:	291f      	cmp	r1, #31
10006eae:	b538      	push	{r3, r4, r5, lr}
10006eb0:	4604      	mov	r4, r0
10006eb2:	460d      	mov	r5, r1
10006eb4:	d904      	bls.n	10006ec0 <_raise_r+0x14>
10006eb6:	2316      	movs	r3, #22
10006eb8:	6003      	str	r3, [r0, #0]
10006eba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
10006ebe:	bd38      	pop	{r3, r4, r5, pc}
10006ec0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
10006ec2:	b112      	cbz	r2, 10006eca <_raise_r+0x1e>
10006ec4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
10006ec8:	b94b      	cbnz	r3, 10006ede <_raise_r+0x32>
10006eca:	4620      	mov	r0, r4
10006ecc:	f000 f830 	bl	10006f30 <_getpid_r>
10006ed0:	462a      	mov	r2, r5
10006ed2:	4601      	mov	r1, r0
10006ed4:	4620      	mov	r0, r4
10006ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10006eda:	f000 b817 	b.w	10006f0c <_kill_r>
10006ede:	2b01      	cmp	r3, #1
10006ee0:	d00a      	beq.n	10006ef8 <_raise_r+0x4c>
10006ee2:	1c59      	adds	r1, r3, #1
10006ee4:	d103      	bne.n	10006eee <_raise_r+0x42>
10006ee6:	2316      	movs	r3, #22
10006ee8:	6003      	str	r3, [r0, #0]
10006eea:	2001      	movs	r0, #1
10006eec:	e7e7      	b.n	10006ebe <_raise_r+0x12>
10006eee:	2400      	movs	r4, #0
10006ef0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
10006ef4:	4628      	mov	r0, r5
10006ef6:	4798      	blx	r3
10006ef8:	2000      	movs	r0, #0
10006efa:	e7e0      	b.n	10006ebe <_raise_r+0x12>

10006efc <raise>:
10006efc:	4b02      	ldr	r3, [pc, #8]	; (10006f08 <raise+0xc>)
10006efe:	4601      	mov	r1, r0
10006f00:	6818      	ldr	r0, [r3, #0]
10006f02:	f7ff bfd3 	b.w	10006eac <_raise_r>
10006f06:	bf00      	nop
10006f08:	1002012c 	.word	0x1002012c

10006f0c <_kill_r>:
10006f0c:	b538      	push	{r3, r4, r5, lr}
10006f0e:	4d07      	ldr	r5, [pc, #28]	; (10006f2c <_kill_r+0x20>)
10006f10:	2300      	movs	r3, #0
10006f12:	4604      	mov	r4, r0
10006f14:	4608      	mov	r0, r1
10006f16:	4611      	mov	r1, r2
10006f18:	602b      	str	r3, [r5, #0]
10006f1a:	f7fa f8d5 	bl	100010c8 <_kill>
10006f1e:	1c43      	adds	r3, r0, #1
10006f20:	d102      	bne.n	10006f28 <_kill_r+0x1c>
10006f22:	682b      	ldr	r3, [r5, #0]
10006f24:	b103      	cbz	r3, 10006f28 <_kill_r+0x1c>
10006f26:	6023      	str	r3, [r4, #0]
10006f28:	bd38      	pop	{r3, r4, r5, pc}
10006f2a:	bf00      	nop
10006f2c:	10020e88 	.word	0x10020e88

10006f30 <_getpid_r>:
10006f30:	f7fa b8c2 	b.w	100010b8 <_getpid>

10006f34 <__swhatbuf_r>:
10006f34:	b570      	push	{r4, r5, r6, lr}
10006f36:	460c      	mov	r4, r1
10006f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10006f3c:	2900      	cmp	r1, #0
10006f3e:	b096      	sub	sp, #88	; 0x58
10006f40:	4615      	mov	r5, r2
10006f42:	461e      	mov	r6, r3
10006f44:	da0d      	bge.n	10006f62 <__swhatbuf_r+0x2e>
10006f46:	89a3      	ldrh	r3, [r4, #12]
10006f48:	f013 0f80 	tst.w	r3, #128	; 0x80
10006f4c:	f04f 0100 	mov.w	r1, #0
10006f50:	bf0c      	ite	eq
10006f52:	f44f 6380 	moveq.w	r3, #1024	; 0x400
10006f56:	2340      	movne	r3, #64	; 0x40
10006f58:	2000      	movs	r0, #0
10006f5a:	6031      	str	r1, [r6, #0]
10006f5c:	602b      	str	r3, [r5, #0]
10006f5e:	b016      	add	sp, #88	; 0x58
10006f60:	bd70      	pop	{r4, r5, r6, pc}
10006f62:	466a      	mov	r2, sp
10006f64:	f000 f848 	bl	10006ff8 <_fstat_r>
10006f68:	2800      	cmp	r0, #0
10006f6a:	dbec      	blt.n	10006f46 <__swhatbuf_r+0x12>
10006f6c:	9901      	ldr	r1, [sp, #4]
10006f6e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
10006f72:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
10006f76:	4259      	negs	r1, r3
10006f78:	4159      	adcs	r1, r3
10006f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
10006f7e:	e7eb      	b.n	10006f58 <__swhatbuf_r+0x24>

10006f80 <__smakebuf_r>:
10006f80:	898b      	ldrh	r3, [r1, #12]
10006f82:	b573      	push	{r0, r1, r4, r5, r6, lr}
10006f84:	079d      	lsls	r5, r3, #30
10006f86:	4606      	mov	r6, r0
10006f88:	460c      	mov	r4, r1
10006f8a:	d507      	bpl.n	10006f9c <__smakebuf_r+0x1c>
10006f8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
10006f90:	6023      	str	r3, [r4, #0]
10006f92:	6123      	str	r3, [r4, #16]
10006f94:	2301      	movs	r3, #1
10006f96:	6163      	str	r3, [r4, #20]
10006f98:	b002      	add	sp, #8
10006f9a:	bd70      	pop	{r4, r5, r6, pc}
10006f9c:	ab01      	add	r3, sp, #4
10006f9e:	466a      	mov	r2, sp
10006fa0:	f7ff ffc8 	bl	10006f34 <__swhatbuf_r>
10006fa4:	9900      	ldr	r1, [sp, #0]
10006fa6:	4605      	mov	r5, r0
10006fa8:	4630      	mov	r0, r6
10006faa:	f7ff f8b3 	bl	10006114 <_malloc_r>
10006fae:	b948      	cbnz	r0, 10006fc4 <__smakebuf_r+0x44>
10006fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10006fb4:	059a      	lsls	r2, r3, #22
10006fb6:	d4ef      	bmi.n	10006f98 <__smakebuf_r+0x18>
10006fb8:	f023 0303 	bic.w	r3, r3, #3
10006fbc:	f043 0302 	orr.w	r3, r3, #2
10006fc0:	81a3      	strh	r3, [r4, #12]
10006fc2:	e7e3      	b.n	10006f8c <__smakebuf_r+0xc>
10006fc4:	89a3      	ldrh	r3, [r4, #12]
10006fc6:	6020      	str	r0, [r4, #0]
10006fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
10006fcc:	81a3      	strh	r3, [r4, #12]
10006fce:	9b00      	ldr	r3, [sp, #0]
10006fd0:	6163      	str	r3, [r4, #20]
10006fd2:	9b01      	ldr	r3, [sp, #4]
10006fd4:	6120      	str	r0, [r4, #16]
10006fd6:	b15b      	cbz	r3, 10006ff0 <__smakebuf_r+0x70>
10006fd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
10006fdc:	4630      	mov	r0, r6
10006fde:	f000 f81d 	bl	1000701c <_isatty_r>
10006fe2:	b128      	cbz	r0, 10006ff0 <__smakebuf_r+0x70>
10006fe4:	89a3      	ldrh	r3, [r4, #12]
10006fe6:	f023 0303 	bic.w	r3, r3, #3
10006fea:	f043 0301 	orr.w	r3, r3, #1
10006fee:	81a3      	strh	r3, [r4, #12]
10006ff0:	89a3      	ldrh	r3, [r4, #12]
10006ff2:	431d      	orrs	r5, r3
10006ff4:	81a5      	strh	r5, [r4, #12]
10006ff6:	e7cf      	b.n	10006f98 <__smakebuf_r+0x18>

10006ff8 <_fstat_r>:
10006ff8:	b538      	push	{r3, r4, r5, lr}
10006ffa:	4d07      	ldr	r5, [pc, #28]	; (10007018 <_fstat_r+0x20>)
10006ffc:	2300      	movs	r3, #0
10006ffe:	4604      	mov	r4, r0
10007000:	4608      	mov	r0, r1
10007002:	4611      	mov	r1, r2
10007004:	602b      	str	r3, [r5, #0]
10007006:	f7fa f8be 	bl	10001186 <_fstat>
1000700a:	1c43      	adds	r3, r0, #1
1000700c:	d102      	bne.n	10007014 <_fstat_r+0x1c>
1000700e:	682b      	ldr	r3, [r5, #0]
10007010:	b103      	cbz	r3, 10007014 <_fstat_r+0x1c>
10007012:	6023      	str	r3, [r4, #0]
10007014:	bd38      	pop	{r3, r4, r5, pc}
10007016:	bf00      	nop
10007018:	10020e88 	.word	0x10020e88

1000701c <_isatty_r>:
1000701c:	b538      	push	{r3, r4, r5, lr}
1000701e:	4d06      	ldr	r5, [pc, #24]	; (10007038 <_isatty_r+0x1c>)
10007020:	2300      	movs	r3, #0
10007022:	4604      	mov	r4, r0
10007024:	4608      	mov	r0, r1
10007026:	602b      	str	r3, [r5, #0]
10007028:	f7fa f8bd 	bl	100011a6 <_isatty>
1000702c:	1c43      	adds	r3, r0, #1
1000702e:	d102      	bne.n	10007036 <_isatty_r+0x1a>
10007030:	682b      	ldr	r3, [r5, #0]
10007032:	b103      	cbz	r3, 10007036 <_isatty_r+0x1a>
10007034:	6023      	str	r3, [r4, #0]
10007036:	bd38      	pop	{r3, r4, r5, pc}
10007038:	10020e88 	.word	0x10020e88

1000703c <_sbrk>:
1000703c:	4a04      	ldr	r2, [pc, #16]	; (10007050 <_sbrk+0x14>)
1000703e:	6811      	ldr	r1, [r2, #0]
10007040:	4603      	mov	r3, r0
10007042:	b909      	cbnz	r1, 10007048 <_sbrk+0xc>
10007044:	4903      	ldr	r1, [pc, #12]	; (10007054 <_sbrk+0x18>)
10007046:	6011      	str	r1, [r2, #0]
10007048:	6810      	ldr	r0, [r2, #0]
1000704a:	4403      	add	r3, r0
1000704c:	6013      	str	r3, [r2, #0]
1000704e:	4770      	bx	lr
10007050:	10020e90 	.word	0x10020e90
10007054:	10020e98 	.word	0x10020e98

10007058 <_init>:
10007058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000705a:	bf00      	nop
1000705c:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000705e:	bc08      	pop	{r3}
10007060:	469e      	mov	lr, r3
10007062:	4770      	bx	lr

10007064 <_fini>:
10007064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10007066:	bf00      	nop
10007068:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000706a:	bc08      	pop	{r3}
1000706c:	469e      	mov	lr, r3
1000706e:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

10007070 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
10007070:	f8df d034 	ldr.w	sp, [pc, #52]	; 100070a8 <LoopForever+0x2>
  movs  r1, #0
10007074:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10007076:	e003      	b.n	10007080 <LoopCopyDataInit>

10007078 <CopyDataInit>:
  ldr  r3, =_sidata
10007078:	4b0c      	ldr	r3, [pc, #48]	; (100070ac <LoopForever+0x6>)
  ldr  r3, [r3, r1]
1000707a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
1000707c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
1000707e:	3104      	adds	r1, #4

10007080 <LoopCopyDataInit>:
  ldr  r0, =_sdata
10007080:	480b      	ldr	r0, [pc, #44]	; (100070b0 <LoopForever+0xa>)
  ldr  r3, =_edata
10007082:	4b0c      	ldr	r3, [pc, #48]	; (100070b4 <LoopForever+0xe>)
  adds  r2, r0, r1
10007084:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10007086:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10007088:	d3f6      	bcc.n	10007078 <CopyDataInit>
  ldr  r2, =_sbss
1000708a:	4a0b      	ldr	r2, [pc, #44]	; (100070b8 <LoopForever+0x12>)
  b  LoopFillZerobss
1000708c:	e002      	b.n	10007094 <LoopFillZerobss>

1000708e <FillZerobss>:
  movs  r3, #0
1000708e:	2300      	movs	r3, #0
  str  r3, [r2], #4
10007090:	f842 3b04 	str.w	r3, [r2], #4

10007094 <LoopFillZerobss>:
  ldr  r3, = _ebss
10007094:	4b09      	ldr	r3, [pc, #36]	; (100070bc <LoopForever+0x16>)
  cmp  r2, r3
10007096:	429a      	cmp	r2, r3
  bcc  FillZerobss
10007098:	d3f9      	bcc.n	1000708e <FillZerobss>
  bl  SystemInit
1000709a:	f7fa f987 	bl	100013ac <SystemInit>
 bl __libc_init_array
1000709e:	f7ff fa65 	bl	1000656c <__libc_init_array>
  bl main
100070a2:	f7f9 f939 	bl	10000318 <main>

100070a6 <LoopForever>:
    b LoopForever
100070a6:	e7fe      	b.n	100070a6 <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
100070a8:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
100070ac:	10007714 	.word	0x10007714
  ldr  r0, =_sdata
100070b0:	10020000 	.word	0x10020000
  ldr  r3, =_edata
100070b4:	10020130 	.word	0x10020130
  ldr  r2, =_sbss
100070b8:	100201bc 	.word	0x100201bc
  ldr  r3, = _ebss
100070bc:	10020e94 	.word	0x10020e94
